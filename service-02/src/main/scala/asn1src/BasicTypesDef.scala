/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

type TPUSC_BOOL1 = BooleanNoRTL


@inline @cCode.inline val ERR_PUSC_BOOL1: Int = 1016 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_BOOL1: Int = 1019 /*  */
@inline @cCode.inline val TPUSC_BOOL1_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_BOOL1_REQUIRED_BITS_FOR_ACN_ENCODING = 1

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_BOOL1: Int = 1020 /*  */
type TPUSC_BOOL8 = BooleanNoRTL


@inline @cCode.inline val ERR_PUSC_BOOL8: Int = 1021 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_BOOL8: Int = 1024 /*  */
@inline @cCode.inline val TPUSC_BOOL8_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_BOOL8_REQUIRED_BITS_FOR_ACN_ENCODING = 8

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_BOOL8: Int = 1025 /*  */
type TPUSC_BOOL16 = BooleanNoRTL


@inline @cCode.inline val ERR_PUSC_BOOL16: Int = 1026 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_BOOL16: Int = 1029 /*  */
@inline @cCode.inline val TPUSC_BOOL16_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_BOOL16_REQUIRED_BITS_FOR_ACN_ENCODING = 16

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_BOOL16: Int = 1030 /*  */
type TPUSC_BOOL32 = BooleanNoRTL


@inline @cCode.inline val ERR_PUSC_BOOL32: Int = 1031 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_BOOL32: Int = 1034 /*  */
@inline @cCode.inline val TPUSC_BOOL32_REQUIRED_BYTES_FOR_ACN_ENCODING = 4
@inline @cCode.inline val TPUSC_BOOL32_REQUIRED_BITS_FOR_ACN_ENCODING = 32

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_BOOL32: Int = 1035 /*  */
type TPUSC_UINT4 = ULong


@inline @cCode.inline val ERR_PUSC_UINT4: Int = 1036 /*(0 .. 15) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT4: Int = 1039 /*  */
@inline @cCode.inline val TPUSC_UINT4_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_UINT4_REQUIRED_BITS_FOR_ACN_ENCODING = 4

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT4: Int = 1040 /*  */
type TPUSC_UINT5 = ULong


@inline @cCode.inline val ERR_PUSC_UINT5: Int = 1041 /*(0 .. 31) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT5: Int = 1044 /*  */
@inline @cCode.inline val TPUSC_UINT5_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_UINT5_REQUIRED_BITS_FOR_ACN_ENCODING = 5

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT5: Int = 1045 /*  */
type TPUSC_UINT6 = ULong


@inline @cCode.inline val ERR_PUSC_UINT6: Int = 1046 /*(0 .. 63) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT6: Int = 1049 /*  */
@inline @cCode.inline val TPUSC_UINT6_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_UINT6_REQUIRED_BITS_FOR_ACN_ENCODING = 6

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT6: Int = 1050 /*  */
type TPUSC_UINT7 = ULong


@inline @cCode.inline val ERR_PUSC_UINT7: Int = 1051 /*(0 .. 127) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT7: Int = 1054 /*  */
@inline @cCode.inline val TPUSC_UINT7_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_UINT7_REQUIRED_BITS_FOR_ACN_ENCODING = 7

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT7: Int = 1055 /*  */
type TPUSC_UINT8 = ULong


@inline @cCode.inline val ERR_PUSC_UINT8: Int = 1056 /*(0 .. 255) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT8: Int = 1059 /*  */
@inline @cCode.inline val TPUSC_UINT8_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_UINT8_REQUIRED_BITS_FOR_ACN_ENCODING = 8

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT8: Int = 1060 /*  */
type TPUSC_UINT9 = ULong


@inline @cCode.inline val ERR_PUSC_UINT9: Int = 1061 /*(0 .. 511) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT9: Int = 1064 /*  */
@inline @cCode.inline val TPUSC_UINT9_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_UINT9_REQUIRED_BITS_FOR_ACN_ENCODING = 9

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT9: Int = 1065 /*  */
type TPUSC_UINT10 = ULong


@inline @cCode.inline val ERR_PUSC_UINT10: Int = 1066 /*(0 .. 1023) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT10: Int = 1069 /*  */
@inline @cCode.inline val TPUSC_UINT10_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_UINT10_REQUIRED_BITS_FOR_ACN_ENCODING = 10

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT10: Int = 1070 /*  */
type TPUSC_UINT11 = ULong


@inline @cCode.inline val ERR_PUSC_UINT11: Int = 1071 /*(0 .. 2047) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT11: Int = 1074 /*  */
@inline @cCode.inline val TPUSC_UINT11_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_UINT11_REQUIRED_BITS_FOR_ACN_ENCODING = 11

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT11: Int = 1075 /*  */
type TPUSC_UINT12 = ULong


@inline @cCode.inline val ERR_PUSC_UINT12: Int = 1076 /*(0 .. 4095) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT12: Int = 1079 /*  */
@inline @cCode.inline val TPUSC_UINT12_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_UINT12_REQUIRED_BITS_FOR_ACN_ENCODING = 12

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT12: Int = 1080 /*  */
type TPUSC_UINT13 = ULong


@inline @cCode.inline val ERR_PUSC_UINT13: Int = 1081 /*(0 .. 8191) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT13: Int = 1084 /*  */
@inline @cCode.inline val TPUSC_UINT13_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_UINT13_REQUIRED_BITS_FOR_ACN_ENCODING = 13

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT13: Int = 1085 /*  */
type TPUSC_UINT14 = ULong


@inline @cCode.inline val ERR_PUSC_UINT14: Int = 1086 /*(0 .. 16383) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT14: Int = 1089 /*  */
@inline @cCode.inline val TPUSC_UINT14_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_UINT14_REQUIRED_BITS_FOR_ACN_ENCODING = 14

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT14: Int = 1090 /*  */
type TPUSC_UINT15 = ULong


@inline @cCode.inline val ERR_PUSC_UINT15: Int = 1091 /*(0 .. 32767) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT15: Int = 1094 /*  */
@inline @cCode.inline val TPUSC_UINT15_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_UINT15_REQUIRED_BITS_FOR_ACN_ENCODING = 15

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT15: Int = 1095 /*  */
type TPUSC_UINT16 = ULong


@inline @cCode.inline val ERR_PUSC_UINT16: Int = 1096 /*(0 .. 65535) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT16: Int = 1099 /*  */
@inline @cCode.inline val TPUSC_UINT16_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_UINT16_REQUIRED_BITS_FOR_ACN_ENCODING = 16

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT16: Int = 1100 /*  */
type TPUSC_UINT24 = ULong


@inline @cCode.inline val ERR_PUSC_UINT24: Int = 1101 /*(0 .. 16777215) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT24: Int = 1104 /*  */
@inline @cCode.inline val TPUSC_UINT24_REQUIRED_BYTES_FOR_ACN_ENCODING = 3
@inline @cCode.inline val TPUSC_UINT24_REQUIRED_BITS_FOR_ACN_ENCODING = 24

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT24: Int = 1105 /*  */
type TPUSC_UINT32 = ULong


@inline @cCode.inline val ERR_PUSC_UINT32: Int = 1106 /*(0 .. 4294967295) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT32: Int = 1109 /*  */
@inline @cCode.inline val TPUSC_UINT32_REQUIRED_BYTES_FOR_ACN_ENCODING = 4
@inline @cCode.inline val TPUSC_UINT32_REQUIRED_BITS_FOR_ACN_ENCODING = 32

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT32: Int = 1110 /*  */
type TPUSC_UINT48 = ULong


@inline @cCode.inline val ERR_PUSC_UINT48: Int = 1111 /*(0 .. 281474976710655) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT48: Int = 1114 /*  */
@inline @cCode.inline val TPUSC_UINT48_REQUIRED_BYTES_FOR_ACN_ENCODING = 6
@inline @cCode.inline val TPUSC_UINT48_REQUIRED_BITS_FOR_ACN_ENCODING = 48

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT48: Int = 1115 /*  */
type TPUSC_UINT64 = ULong


@inline @cCode.inline val ERR_PUSC_UINT64: Int = 1116 /*(0 .. 9223372036854775807) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT64: Int = 1119 /*  */
@inline @cCode.inline val TPUSC_UINT64_REQUIRED_BYTES_FOR_ACN_ENCODING = 8
@inline @cCode.inline val TPUSC_UINT64_REQUIRED_BITS_FOR_ACN_ENCODING = 64

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT64: Int = 1120 /*  */
type TPUSC_UINT1 = ULong


@inline @cCode.inline val ERR_PUSC_UINT1: Int = 1121 /*(0 .. 1) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT1: Int = 1124 /*  */
@inline @cCode.inline val TPUSC_UINT1_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_UINT1_REQUIRED_BITS_FOR_ACN_ENCODING = 1

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT1: Int = 1125 /*  */
type TPUSC_UINT2 = ULong


@inline @cCode.inline val ERR_PUSC_UINT2: Int = 1126 /*(0 .. 3) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT2: Int = 1129 /*  */
@inline @cCode.inline val TPUSC_UINT2_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_UINT2_REQUIRED_BITS_FOR_ACN_ENCODING = 2

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT2: Int = 1130 /*  */
type TPUSC_UINT3 = ULong


@inline @cCode.inline val ERR_PUSC_UINT3: Int = 1131 /*(0 .. 7) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT3: Int = 1134 /*  */
@inline @cCode.inline val TPUSC_UINT3_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_UINT3_REQUIRED_BITS_FOR_ACN_ENCODING = 3

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT3: Int = 1135 /*  */
type TPUSC_INT4 = Long


@inline @cCode.inline val ERR_PUSC_INT4: Int = 1136 /*(-8 .. 7) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT4: Int = 1139 /*  */
@inline @cCode.inline val TPUSC_INT4_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_INT4_REQUIRED_BITS_FOR_ACN_ENCODING = 4

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT4: Int = 1140 /*  */
type TPUSC_INT5 = Long


@inline @cCode.inline val ERR_PUSC_INT5: Int = 1141 /*(-16 .. 15) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT5: Int = 1144 /*  */
@inline @cCode.inline val TPUSC_INT5_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_INT5_REQUIRED_BITS_FOR_ACN_ENCODING = 5

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT5: Int = 1145 /*  */
type TPUSC_INT6 = Long


@inline @cCode.inline val ERR_PUSC_INT6: Int = 1146 /*(-32 .. 31) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT6: Int = 1149 /*  */
@inline @cCode.inline val TPUSC_INT6_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_INT6_REQUIRED_BITS_FOR_ACN_ENCODING = 6

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT6: Int = 1150 /*  */
type TPUSC_INT7 = Long


@inline @cCode.inline val ERR_PUSC_INT7: Int = 1151 /*(-64 .. 63) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT7: Int = 1154 /*  */
@inline @cCode.inline val TPUSC_INT7_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_INT7_REQUIRED_BITS_FOR_ACN_ENCODING = 7

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT7: Int = 1155 /*  */
type TPUSC_INT8 = Long


@inline @cCode.inline val ERR_PUSC_INT8: Int = 1156 /*(-128 .. 127) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT8: Int = 1159 /*  */
@inline @cCode.inline val TPUSC_INT8_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_INT8_REQUIRED_BITS_FOR_ACN_ENCODING = 8

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT8: Int = 1160 /*  */
type TPUSC_INT9 = Long


@inline @cCode.inline val ERR_PUSC_INT9: Int = 1161 /*(-256 .. 255) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT9: Int = 1164 /*  */
@inline @cCode.inline val TPUSC_INT9_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_INT9_REQUIRED_BITS_FOR_ACN_ENCODING = 9

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT9: Int = 1165 /*  */
type TPUSC_INT10 = Long


@inline @cCode.inline val ERR_PUSC_INT10: Int = 1166 /*(-512 .. 511) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT10: Int = 1169 /*  */
@inline @cCode.inline val TPUSC_INT10_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_INT10_REQUIRED_BITS_FOR_ACN_ENCODING = 10

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT10: Int = 1170 /*  */
type TPUSC_INT11 = Long


@inline @cCode.inline val ERR_PUSC_INT11: Int = 1171 /*(-1024 .. 1023) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT11: Int = 1174 /*  */
@inline @cCode.inline val TPUSC_INT11_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_INT11_REQUIRED_BITS_FOR_ACN_ENCODING = 11

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT11: Int = 1175 /*  */
type TPUSC_INT12 = Long


@inline @cCode.inline val ERR_PUSC_INT12: Int = 1176 /*(-2048 .. 2047) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT12: Int = 1179 /*  */
@inline @cCode.inline val TPUSC_INT12_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_INT12_REQUIRED_BITS_FOR_ACN_ENCODING = 12

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT12: Int = 1180 /*  */
type TPUSC_INT13 = Long


@inline @cCode.inline val ERR_PUSC_INT13: Int = 1181 /*(-4096 .. 4095) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT13: Int = 1184 /*  */
@inline @cCode.inline val TPUSC_INT13_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_INT13_REQUIRED_BITS_FOR_ACN_ENCODING = 13

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT13: Int = 1185 /*  */
type TPUSC_INT14 = Long


@inline @cCode.inline val ERR_PUSC_INT14: Int = 1186 /*(-8192 .. 8191) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT14: Int = 1189 /*  */
@inline @cCode.inline val TPUSC_INT14_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_INT14_REQUIRED_BITS_FOR_ACN_ENCODING = 14

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT14: Int = 1190 /*  */
type TPUSC_INT15 = Long


@inline @cCode.inline val ERR_PUSC_INT15: Int = 1191 /*(-16384 .. 16383) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT15: Int = 1194 /*  */
@inline @cCode.inline val TPUSC_INT15_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_INT15_REQUIRED_BITS_FOR_ACN_ENCODING = 15

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT15: Int = 1195 /*  */
type TPUSC_INT16 = Long


@inline @cCode.inline val ERR_PUSC_INT16: Int = 1196 /*(-32768 .. 32767) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT16: Int = 1199 /*  */
@inline @cCode.inline val TPUSC_INT16_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_INT16_REQUIRED_BITS_FOR_ACN_ENCODING = 16

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT16: Int = 1200 /*  */
type TPUSC_INT24 = Long


@inline @cCode.inline val ERR_PUSC_INT24: Int = 1201 /*(-8388608 .. 8388607) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT24: Int = 1204 /*  */
@inline @cCode.inline val TPUSC_INT24_REQUIRED_BYTES_FOR_ACN_ENCODING = 3
@inline @cCode.inline val TPUSC_INT24_REQUIRED_BITS_FOR_ACN_ENCODING = 24

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT24: Int = 1205 /*  */
type TPUSC_INT32 = Long


@inline @cCode.inline val ERR_PUSC_INT32: Int = 1206 /*(-2147483648 .. 2147483647) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT32: Int = 1209 /*  */
@inline @cCode.inline val TPUSC_INT32_REQUIRED_BYTES_FOR_ACN_ENCODING = 4
@inline @cCode.inline val TPUSC_INT32_REQUIRED_BITS_FOR_ACN_ENCODING = 32

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT32: Int = 1210 /*  */
type TPUSC_INT48 = Long


@inline @cCode.inline val ERR_PUSC_INT48: Int = 1211 /*(-140737488355328 .. 140737488355327) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT48: Int = 1214 /*  */
@inline @cCode.inline val TPUSC_INT48_REQUIRED_BYTES_FOR_ACN_ENCODING = 6
@inline @cCode.inline val TPUSC_INT48_REQUIRED_BITS_FOR_ACN_ENCODING = 48

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT48: Int = 1215 /*  */
type TPUSC_INT64 = Long


@inline @cCode.inline val ERR_PUSC_INT64: Int = 1216 /*(-4611686018427387903 .. 4611686018427387903) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT64: Int = 1219 /*  */
@inline @cCode.inline val TPUSC_INT64_REQUIRED_BYTES_FOR_ACN_ENCODING = 8
@inline @cCode.inline val TPUSC_INT64_REQUIRED_BITS_FOR_ACN_ENCODING = 64

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT64: Int = 1220 /*  */
@extern
type TPUSC_FLOAT32 = Double


@inline @cCode.inline val ERR_PUSC_FLOAT32: Int = 1221 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_FLOAT32: Int = 1224 /*  */
@inline @cCode.inline val TPUSC_FLOAT32_REQUIRED_BYTES_FOR_ACN_ENCODING = 4
@inline @cCode.inline val TPUSC_FLOAT32_REQUIRED_BITS_FOR_ACN_ENCODING = 32

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_FLOAT32: Int = 1225 /*  */
@extern
type TPUSC_FLOAT64 = Double


@inline @cCode.inline val ERR_PUSC_FLOAT64: Int = 1226 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_FLOAT64: Int = 1229 /*  */
@inline @cCode.inline val TPUSC_FLOAT64_REQUIRED_BYTES_FOR_ACN_ENCODING = 8
@inline @cCode.inline val TPUSC_FLOAT64_REQUIRED_BITS_FOR_ACN_ENCODING = 64

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_FLOAT64: Int = 1230 /*  */
/*-- TPUSC_MIL_FLOAT32 --------------------------------------------*/

case class TPUSC_MIL_FLOAT32_mant(arr: Vector[UByte])
{
    require(this.arr.length == 3)
}
type TPUSC_MIL_FLOAT32_exp = Long


case class TPUSC_MIL_FLOAT32 (
    mant: TPUSC_MIL_FLOAT32_mant, 
    exp: TPUSC_MIL_FLOAT32_exp
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        val size_0 = (24L)
        val size_1 = 8L
        size_0 + size_1
    }.ensuring { (res: Long) => 
        res == 32L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        val size_0_offset = (24L)
        val size_0_otherOffset = 24L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = (24L)
        val size_0_otherOffset = 24L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = (24L)
        val size_0_otherOffset = 24L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = (24L)
        val size_0_otherOffset = 24L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_PUSC_MIL_FLOAT32_MANT: Int = 1231 /*(SIZE(24)) */

@inline @cCode.inline val ERR_PUSC_MIL_FLOAT32_EXP: Int = 1236 /*(-128 .. 127) */

@inline @cCode.inline val ERR_PUSC_MIL_FLOAT32: Int = 1241 /* */

 
 
 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_MIL_FLOAT32: Int = 1244 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_MIL_FLOAT32_MANT: Int = 1234 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_MIL_FLOAT32_EXP: Int = 1239 /*  */
@inline @cCode.inline val TPUSC_MIL_FLOAT32_REQUIRED_BYTES_FOR_ACN_ENCODING = 4
@inline @cCode.inline val TPUSC_MIL_FLOAT32_REQUIRED_BITS_FOR_ACN_ENCODING = 32

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_MIL_FLOAT32: Int = 1245 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PUSC_MIL_FLOAT32_MANT: Int = 1235 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PUSC_MIL_FLOAT32_EXP: Int = 1240 /*  */
/*-- TPUSC_MIL_FLOAT48 --------------------------------------------*/

case class TPUSC_MIL_FLOAT48_mant_MSB(arr: Vector[UByte])
{
    require(this.arr.length == 3)
}
type TPUSC_MIL_FLOAT48_exp = Long


case class TPUSC_MIL_FLOAT48_mant_LSB(arr: Vector[UByte])
{
    require(this.arr.length == 2)
}

case class TPUSC_MIL_FLOAT48 (
    mant_MSB: TPUSC_MIL_FLOAT48_mant_MSB, 
    exp: TPUSC_MIL_FLOAT48_exp, 
    mant_LSB: TPUSC_MIL_FLOAT48_mant_LSB
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775759L))
        val size_0 = (24L)
        val size_1 = 8L
        val size_2 = 16L
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        res == 48L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775759L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775759L))
        val size_0_offset = (24L)
        val size_0_otherOffset = 24L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775759L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775759L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = (24L)
        val size_0_otherOffset = 24L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775759L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775759L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = (24L)
        val size_0_otherOffset = 24L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775759L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775759L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = (24L)
        val size_0_otherOffset = 24L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_PUSC_MIL_FLOAT48_MANT_MSB: Int = 1246 /*(SIZE(24)) */

@inline @cCode.inline val ERR_PUSC_MIL_FLOAT48_EXP: Int = 1251 /*(-128 .. 127) */

@inline @cCode.inline val ERR_PUSC_MIL_FLOAT48_MANT_LSB: Int = 1256 /*(SIZE(16)) */

@inline @cCode.inline val ERR_PUSC_MIL_FLOAT48: Int = 1261 /* */

 
 
 
 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_MIL_FLOAT48: Int = 1264 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_MIL_FLOAT48_MANT_MSB: Int = 1249 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_MIL_FLOAT48_EXP: Int = 1254 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_MIL_FLOAT48_MANT_LSB: Int = 1259 /*  */
@inline @cCode.inline val TPUSC_MIL_FLOAT48_REQUIRED_BYTES_FOR_ACN_ENCODING = 6
@inline @cCode.inline val TPUSC_MIL_FLOAT48_REQUIRED_BITS_FOR_ACN_ENCODING = 48

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_MIL_FLOAT48: Int = 1265 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PUSC_MIL_FLOAT48_MANT_MSB: Int = 1250 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PUSC_MIL_FLOAT48_EXP: Int = 1255 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PUSC_MIL_FLOAT48_MANT_LSB: Int = 1260 /*  */

/*nCount equals to Number of bits in the array. Max value is : 4095 */
case class TPUSC_BITSTR_VARIABLE_LEN(nCount: Long, arr: Vector[UByte])
{
    require(this.arr.length <= 512 && 0L <= this.nCount && this.nCount <= this.arr.length * 8L)
}

@inline @cCode.inline val ERR_PUSC_BITSTR_VARIABLE_LEN: Int = 1266 /*(SIZE(0 .. 4095)) */

 
/*nCount equals to Number of bytes in the array. Max value is : 4095 (unsure - TODO read asn1 standard)*/
case class TPUSC_OCTSTR_VARIABLE_LEN(nCount: Long, arr: Vector[UByte])
{
    require(this.arr.length <= 4095 && 0 <= this.nCount && this.nCount <= this.arr.length)
}

@inline @cCode.inline val ERR_PUSC_OCTSTR_VARIABLE_LEN: Int = 1271 /*(SIZE(0 .. 4095)) */

 
type TPUSC_CHARSTR_VARIABLE_LEN = Vector[UByte]

@inline @cCode.inline val ERR_PUSC_CHARSTR_VARIABLE_LEN: Int = 1276 /*(SIZE(0 .. 4095)) */

 
/*-- TCDS_AbsoluteTime_PFC_1 --------------------------------------------*/
type TCDS_AbsoluteTime_PFC_1_day = ULong

type TCDS_AbsoluteTime_PFC_1_msOfDay = ULong


case class TCDS_AbsoluteTime_PFC_1 (
    day: TCDS_AbsoluteTime_PFC_1_day, 
    msOfDay: TCDS_AbsoluteTime_PFC_1_msOfDay
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775759L))
        val size_0 = 16L
        val size_1 = 32L
        size_0 + size_1
    }.ensuring { (res: Long) => 
        res == 48L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775759L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775759L))
        val size_0_offset = 16L
        val size_0_otherOffset = 16L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775759L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775759L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 16L
        val size_0_otherOffset = 16L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775759L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775759L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 16L
        val size_0_otherOffset = 16L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775759L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775759L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 16L
        val size_0_otherOffset = 16L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_CDS_ABSOLUTETIME_PFC_1_DAY: Int = 1281 /*(0 .. 65535) */

@inline @cCode.inline val ERR_CDS_ABSOLUTETIME_PFC_1_MSOFDAY: Int = 1286 /*(0 .. 4294967295) */

@inline @cCode.inline val ERR_CDS_ABSOLUTETIME_PFC_1: Int = 1291 /* */

 
 
 

@inline @cCode.inline val ERR_ACN_ENCODE_CDS_ABSOLUTETIME_PFC_1: Int = 1294 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CDS_ABSOLUTETIME_PFC_1_DAY: Int = 1284 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CDS_ABSOLUTETIME_PFC_1_MSOFDAY: Int = 1289 /*  */
@inline @cCode.inline val TCDS_AbsoluteTime_PFC_1_REQUIRED_BYTES_FOR_ACN_ENCODING = 6
@inline @cCode.inline val TCDS_AbsoluteTime_PFC_1_REQUIRED_BITS_FOR_ACN_ENCODING = 48

@inline @cCode.inline val ERR_ACN_DECODE_CDS_ABSOLUTETIME_PFC_1: Int = 1295 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CDS_ABSOLUTETIME_PFC_1_DAY: Int = 1285 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CDS_ABSOLUTETIME_PFC_1_MSOFDAY: Int = 1290 /*  */
/*-- TCDS_AbsoluteTime_PFC_2 --------------------------------------------*/
type TCDS_AbsoluteTime_PFC_2_day = ULong

type TCDS_AbsoluteTime_PFC_2_msOfDay = ULong

type TCDS_AbsoluteTime_PFC_2_usOfDay = ULong


case class TCDS_AbsoluteTime_PFC_2 (
    day: TCDS_AbsoluteTime_PFC_2_day, 
    msOfDay: TCDS_AbsoluteTime_PFC_2_msOfDay, 
    usOfDay: TCDS_AbsoluteTime_PFC_2_usOfDay
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        val size_0 = 16L
        val size_1 = 32L
        val size_2 = 16L
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        res == 64L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775743L))
        val size_0_offset = 16L
        val size_0_otherOffset = 16L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775743L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 16L
        val size_0_otherOffset = 16L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775743L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 16L
        val size_0_otherOffset = 16L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775743L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 16L
        val size_0_otherOffset = 16L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_CDS_ABSOLUTETIME_PFC_2_DAY: Int = 1296 /*(0 .. 65535) */

@inline @cCode.inline val ERR_CDS_ABSOLUTETIME_PFC_2_MSOFDAY: Int = 1301 /*(0 .. 4294967295) */

@inline @cCode.inline val ERR_CDS_ABSOLUTETIME_PFC_2_USOFDAY: Int = 1306 /*(0 .. 65535) */

@inline @cCode.inline val ERR_CDS_ABSOLUTETIME_PFC_2: Int = 1311 /* */

 
 
 
 

@inline @cCode.inline val ERR_ACN_ENCODE_CDS_ABSOLUTETIME_PFC_2: Int = 1314 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CDS_ABSOLUTETIME_PFC_2_DAY: Int = 1299 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CDS_ABSOLUTETIME_PFC_2_MSOFDAY: Int = 1304 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CDS_ABSOLUTETIME_PFC_2_USOFDAY: Int = 1309 /*  */
@inline @cCode.inline val TCDS_AbsoluteTime_PFC_2_REQUIRED_BYTES_FOR_ACN_ENCODING = 8
@inline @cCode.inline val TCDS_AbsoluteTime_PFC_2_REQUIRED_BITS_FOR_ACN_ENCODING = 64

@inline @cCode.inline val ERR_ACN_DECODE_CDS_ABSOLUTETIME_PFC_2: Int = 1315 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CDS_ABSOLUTETIME_PFC_2_DAY: Int = 1300 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CDS_ABSOLUTETIME_PFC_2_MSOFDAY: Int = 1305 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CDS_ABSOLUTETIME_PFC_2_USOFDAY: Int = 1310 /*  */
type TAbsoluteTime = TCDS_AbsoluteTime_PFC_2

object TAbsoluteTime {
    def apply(day: ULong, msOfDay: ULong, usOfDay: ULong): TAbsoluteTime = {
        TCDS_AbsoluteTime_PFC_2(day, msOfDay, usOfDay)
    }
}



@inline @cCode.inline val ERR_ABSOLUTETIME_2: Int = 1396 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_ABSOLUTETIME_2: Int = 1399 /*  */
@inline @cCode.inline val TAbsoluteTime_REQUIRED_BYTES_FOR_ACN_ENCODING = 8
@inline @cCode.inline val TAbsoluteTime_REQUIRED_BITS_FOR_ACN_ENCODING = 64

@inline @cCode.inline val ERR_ACN_DECODE_ABSOLUTETIME_2: Int = 1400 /*  */
/*-- TCUC_AbsoluteTime_PFC_3 --------------------------------------------*/
case class TCUC_AbsoluteTime_PFC_3_coarseTime(arr: Vector[UByte])
{
    require(this.arr.length == 1)
}
case class TCUC_AbsoluteTime_PFC_3_fineTime(arr: Vector[UByte])
{
    require(this.arr.length == 1)
}

case class TCUC_AbsoluteTime_PFC_3 (
    coarseTime: TCUC_AbsoluteTime_PFC_3_coarseTime, 
    fineTime: TCUC_AbsoluteTime_PFC_3_fineTime
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775791L))
        val size_0 = (8L)
        val size_1 = 8L
        size_0 + size_1
    }.ensuring { (res: Long) => 
        res == 16L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775791L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775791L))
        val size_0_offset = (8L)
        val size_0_otherOffset = 8L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775791L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775791L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = (8L)
        val size_0_otherOffset = 8L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775791L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775791L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = (8L)
        val size_0_otherOffset = 8L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775791L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775791L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = (8L)
        val size_0_otherOffset = 8L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_CUC_ABSOLUTETIME_PFC_3_COARSETIME: Int = 1316 /*(SIZE(1)) */

@inline @cCode.inline val ERR_CUC_ABSOLUTETIME_PFC_3_FINETIME: Int = 1321 /*(SIZE(1)) */

@inline @cCode.inline val ERR_CUC_ABSOLUTETIME_PFC_3: Int = 1326 /* */

 
 
 

@inline @cCode.inline val ERR_ACN_ENCODE_CUC_ABSOLUTETIME_PFC_3: Int = 1329 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CUC_ABSOLUTETIME_PFC_3_COARSETIME: Int = 1319 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CUC_ABSOLUTETIME_PFC_3_FINETIME: Int = 1324 /*  */
@inline @cCode.inline val TCUC_AbsoluteTime_PFC_3_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TCUC_AbsoluteTime_PFC_3_REQUIRED_BITS_FOR_ACN_ENCODING = 16

@inline @cCode.inline val ERR_ACN_DECODE_CUC_ABSOLUTETIME_PFC_3: Int = 1330 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CUC_ABSOLUTETIME_PFC_3_COARSETIME: Int = 1320 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CUC_ABSOLUTETIME_PFC_3_FINETIME: Int = 1325 /*  */
/*-- TCUC_AbsoluteTime_PFC_18 --------------------------------------------*/
case class TCUC_AbsoluteTime_PFC_18_coarseTime(arr: Vector[UByte])
{
    require(this.arr.length == 4)
}
case class TCUC_AbsoluteTime_PFC_18_fineTime(arr: Vector[UByte])
{
    require(this.arr.length == 3)
}

case class TCUC_AbsoluteTime_PFC_18 (
    coarseTime: TCUC_AbsoluteTime_PFC_18_coarseTime, 
    fineTime: TCUC_AbsoluteTime_PFC_18_fineTime
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775751L))
        val size_0 = (32L)
        val size_1 = 24L
        size_0 + size_1
    }.ensuring { (res: Long) => 
        res == 56L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775751L))
        val size_0_offset = (32L)
        val size_0_otherOffset = 32L
        val size_1_offset = 24L
        val size_1_otherOffset = 24L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775751L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = (32L)
        val size_0_otherOffset = 32L
        val size_1_offset = 24L
        val size_1_otherOffset = 24L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775751L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = (32L)
        val size_0_otherOffset = 32L
        val size_1_offset = 24L
        val size_1_otherOffset = 24L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775751L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = (32L)
        val size_0_otherOffset = 32L
        val size_1_offset = 24L
        val size_1_otherOffset = 24L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_CUC_ABSOLUTETIME_PFC_18_COARSETIME: Int = 1331 /*(SIZE(4)) */

@inline @cCode.inline val ERR_CUC_ABSOLUTETIME_PFC_18_FINETIME: Int = 1336 /*(SIZE(3)) */

@inline @cCode.inline val ERR_CUC_ABSOLUTETIME_PFC_18: Int = 1341 /* */

 
 
 

@inline @cCode.inline val ERR_ACN_ENCODE_CUC_ABSOLUTETIME_PFC_18: Int = 1344 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CUC_ABSOLUTETIME_PFC_18_COARSETIME: Int = 1334 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CUC_ABSOLUTETIME_PFC_18_FINETIME: Int = 1339 /*  */
@inline @cCode.inline val TCUC_AbsoluteTime_PFC_18_REQUIRED_BYTES_FOR_ACN_ENCODING = 7
@inline @cCode.inline val TCUC_AbsoluteTime_PFC_18_REQUIRED_BITS_FOR_ACN_ENCODING = 56

@inline @cCode.inline val ERR_ACN_DECODE_CUC_ABSOLUTETIME_PFC_18: Int = 1345 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CUC_ABSOLUTETIME_PFC_18_COARSETIME: Int = 1335 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CUC_ABSOLUTETIME_PFC_18_FINETIME: Int = 1340 /*  */
/*-- TCUC_AbsoluteTime_PFC_19 --------------------------------------------*/
case class TCUC_AbsoluteTime_PFC_19_coarseTime(arr: Vector[UByte])
{
    require(this.arr.length == 1)
}
case class TCUC_AbsoluteTime_PFC_19_fineTime(arr: Vector[UByte])
{
    require(this.arr.length == 4)
}

case class TCUC_AbsoluteTime_PFC_19 (
    coarseTime: TCUC_AbsoluteTime_PFC_19_coarseTime, 
    fineTime: TCUC_AbsoluteTime_PFC_19_fineTime
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775767L))
        val size_0 = (8L)
        val size_1 = 32L
        size_0 + size_1
    }.ensuring { (res: Long) => 
        res == 40L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775767L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775767L))
        val size_0_offset = (8L)
        val size_0_otherOffset = 8L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775767L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775767L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = (8L)
        val size_0_otherOffset = 8L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775767L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775767L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = (8L)
        val size_0_otherOffset = 8L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775767L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775767L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = (8L)
        val size_0_otherOffset = 8L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_CUC_ABSOLUTETIME_PFC_19_COARSETIME: Int = 1346 /*(SIZE(1)) */

@inline @cCode.inline val ERR_CUC_ABSOLUTETIME_PFC_19_FINETIME: Int = 1351 /*(SIZE(4)) */

@inline @cCode.inline val ERR_CUC_ABSOLUTETIME_PFC_19: Int = 1356 /* */

 
 
 

@inline @cCode.inline val ERR_ACN_ENCODE_CUC_ABSOLUTETIME_PFC_19: Int = 1359 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CUC_ABSOLUTETIME_PFC_19_COARSETIME: Int = 1349 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CUC_ABSOLUTETIME_PFC_19_FINETIME: Int = 1354 /*  */
@inline @cCode.inline val TCUC_AbsoluteTime_PFC_19_REQUIRED_BYTES_FOR_ACN_ENCODING = 5
@inline @cCode.inline val TCUC_AbsoluteTime_PFC_19_REQUIRED_BITS_FOR_ACN_ENCODING = 40

@inline @cCode.inline val ERR_ACN_DECODE_CUC_ABSOLUTETIME_PFC_19: Int = 1360 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CUC_ABSOLUTETIME_PFC_19_COARSETIME: Int = 1350 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CUC_ABSOLUTETIME_PFC_19_FINETIME: Int = 1355 /*  */
/*-- TCUC_AbsoluteTime_PFC_46 --------------------------------------------*/
case class TCUC_AbsoluteTime_PFC_46_coarseTime(arr: Vector[UByte])
{
    require(this.arr.length == 4)
}
case class TCUC_AbsoluteTime_PFC_46_fineTime(arr: Vector[UByte])
{
    require(this.arr.length == 10)
}

case class TCUC_AbsoluteTime_PFC_46 (
    coarseTime: TCUC_AbsoluteTime_PFC_46_coarseTime, 
    fineTime: TCUC_AbsoluteTime_PFC_46_fineTime
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775695L))
        val size_0 = (32L)
        val size_1 = 80L
        size_0 + size_1
    }.ensuring { (res: Long) => 
        res == 112L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775695L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775695L))
        val size_0_offset = (32L)
        val size_0_otherOffset = 32L
        val size_1_offset = 80L
        val size_1_otherOffset = 80L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775695L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775695L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = (32L)
        val size_0_otherOffset = 32L
        val size_1_offset = 80L
        val size_1_otherOffset = 80L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775695L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775695L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = (32L)
        val size_0_otherOffset = 32L
        val size_1_offset = 80L
        val size_1_otherOffset = 80L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775695L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775695L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = (32L)
        val size_0_otherOffset = 32L
        val size_1_offset = 80L
        val size_1_otherOffset = 80L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_CUC_ABSOLUTETIME_PFC_46_COARSETIME: Int = 1361 /*(SIZE(4)) */

@inline @cCode.inline val ERR_CUC_ABSOLUTETIME_PFC_46_FINETIME: Int = 1366 /*(SIZE(10)) */

@inline @cCode.inline val ERR_CUC_ABSOLUTETIME_PFC_46: Int = 1371 /* */

 
 
 

@inline @cCode.inline val ERR_ACN_ENCODE_CUC_ABSOLUTETIME_PFC_46: Int = 1374 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CUC_ABSOLUTETIME_PFC_46_COARSETIME: Int = 1364 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CUC_ABSOLUTETIME_PFC_46_FINETIME: Int = 1369 /*  */
@inline @cCode.inline val TCUC_AbsoluteTime_PFC_46_REQUIRED_BYTES_FOR_ACN_ENCODING = 14
@inline @cCode.inline val TCUC_AbsoluteTime_PFC_46_REQUIRED_BITS_FOR_ACN_ENCODING = 112

@inline @cCode.inline val ERR_ACN_DECODE_CUC_ABSOLUTETIME_PFC_46: Int = 1375 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CUC_ABSOLUTETIME_PFC_46_COARSETIME: Int = 1365 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CUC_ABSOLUTETIME_PFC_46_FINETIME: Int = 1370 /*  */
/*-- TCDS_RelativeTime_PFC_2 --------------------------------------------*/
type TCDS_RelativeTime_PFC_2_day = ULong

type TCDS_RelativeTime_PFC_2_msOfDay = ULong

type TCDS_RelativeTime_PFC_2_usOfMs = ULong


case class TCDS_RelativeTime_PFC_2 (
    day: TCDS_RelativeTime_PFC_2_day, 
    msOfDay: TCDS_RelativeTime_PFC_2_msOfDay, 
    usOfMs: TCDS_RelativeTime_PFC_2_usOfMs
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        val size_0 = 16L
        val size_1 = 32L
        val size_2 = 16L
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        res == 64L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775743L))
        val size_0_offset = 16L
        val size_0_otherOffset = 16L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775743L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 16L
        val size_0_otherOffset = 16L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775743L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 16L
        val size_0_otherOffset = 16L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775743L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 16L
        val size_0_otherOffset = 16L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_CDS_RELATIVETIME_PFC_2_DAY: Int = 1401 /*(0 .. 65535) */

@inline @cCode.inline val ERR_CDS_RELATIVETIME_PFC_2_MSOFDAY: Int = 1406 /*(0 .. 4294967295) */

@inline @cCode.inline val ERR_CDS_RELATIVETIME_PFC_2_USOFMS: Int = 1411 /*(0 .. 65535) */

@inline @cCode.inline val ERR_CDS_RELATIVETIME_PFC_2: Int = 1416 /* */

 
 
 
 

@inline @cCode.inline val ERR_ACN_ENCODE_CDS_RELATIVETIME_PFC_2: Int = 1419 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CDS_RELATIVETIME_PFC_2_DAY: Int = 1404 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CDS_RELATIVETIME_PFC_2_MSOFDAY: Int = 1409 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CDS_RELATIVETIME_PFC_2_USOFMS: Int = 1414 /*  */
@inline @cCode.inline val TCDS_RelativeTime_PFC_2_REQUIRED_BYTES_FOR_ACN_ENCODING = 8
@inline @cCode.inline val TCDS_RelativeTime_PFC_2_REQUIRED_BITS_FOR_ACN_ENCODING = 64

@inline @cCode.inline val ERR_ACN_DECODE_CDS_RELATIVETIME_PFC_2: Int = 1420 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CDS_RELATIVETIME_PFC_2_DAY: Int = 1405 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CDS_RELATIVETIME_PFC_2_MSOFDAY: Int = 1410 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CDS_RELATIVETIME_PFC_2_USOFMS: Int = 1415 /*  */
type TRelativeTime = TCDS_RelativeTime_PFC_2

object TRelativeTime {
    def apply(day: ULong, msOfDay: ULong, usOfMs: ULong): TRelativeTime = {
        TCDS_RelativeTime_PFC_2(day, msOfDay, usOfMs)
    }
}



@inline @cCode.inline val ERR_RELATIVETIME_2: Int = 1471 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_RELATIVETIME_2: Int = 1474 /*  */
@inline @cCode.inline val TRelativeTime_REQUIRED_BYTES_FOR_ACN_ENCODING = 8
@inline @cCode.inline val TRelativeTime_REQUIRED_BITS_FOR_ACN_ENCODING = 64

@inline @cCode.inline val ERR_ACN_DECODE_RELATIVETIME_2: Int = 1475 /*  */
/*-- TCUC_RelativeTime_PFC_3 --------------------------------------------*/
case class TCUC_RelativeTime_PFC_3_coarseTime(arr: Vector[UByte])
{
    require(this.arr.length == 1)
}
case class TCUC_RelativeTime_PFC_3_fineTime(arr: Vector[UByte])
{
    require(this.arr.length == 1)
}

case class TCUC_RelativeTime_PFC_3 (
    coarseTime: TCUC_RelativeTime_PFC_3_coarseTime, 
    fineTime: TCUC_RelativeTime_PFC_3_fineTime
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775791L))
        val size_0 = (8L)
        val size_1 = 8L
        size_0 + size_1
    }.ensuring { (res: Long) => 
        res == 16L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775791L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775791L))
        val size_0_offset = (8L)
        val size_0_otherOffset = 8L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775791L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775791L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = (8L)
        val size_0_otherOffset = 8L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775791L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775791L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = (8L)
        val size_0_otherOffset = 8L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775791L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775791L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = (8L)
        val size_0_otherOffset = 8L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_CUC_RELATIVETIME_PFC_3_COARSETIME: Int = 1421 /*(SIZE(1)) */

@inline @cCode.inline val ERR_CUC_RELATIVETIME_PFC_3_FINETIME: Int = 1426 /*(SIZE(1)) */

@inline @cCode.inline val ERR_CUC_RELATIVETIME_PFC_3: Int = 1431 /* */

 
 
 

@inline @cCode.inline val ERR_ACN_ENCODE_CUC_RELATIVETIME_PFC_3: Int = 1434 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CUC_RELATIVETIME_PFC_3_COARSETIME: Int = 1424 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CUC_RELATIVETIME_PFC_3_FINETIME: Int = 1429 /*  */
@inline @cCode.inline val TCUC_RelativeTime_PFC_3_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TCUC_RelativeTime_PFC_3_REQUIRED_BITS_FOR_ACN_ENCODING = 16

@inline @cCode.inline val ERR_ACN_DECODE_CUC_RELATIVETIME_PFC_3: Int = 1435 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CUC_RELATIVETIME_PFC_3_COARSETIME: Int = 1425 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CUC_RELATIVETIME_PFC_3_FINETIME: Int = 1430 /*  */
/*-- TCUC_RelativeTime_PFC_18 --------------------------------------------*/
case class TCUC_RelativeTime_PFC_18_coarseTime(arr: Vector[UByte])
{
    require(this.arr.length == 4)
}
case class TCUC_RelativeTime_PFC_18_fineTime(arr: Vector[UByte])
{
    require(this.arr.length == 3)
}

case class TCUC_RelativeTime_PFC_18 (
    coarseTime: TCUC_RelativeTime_PFC_18_coarseTime, 
    fineTime: TCUC_RelativeTime_PFC_18_fineTime
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775751L))
        val size_0 = (32L)
        val size_1 = 24L
        size_0 + size_1
    }.ensuring { (res: Long) => 
        res == 56L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775751L))
        val size_0_offset = (32L)
        val size_0_otherOffset = 32L
        val size_1_offset = 24L
        val size_1_otherOffset = 24L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775751L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = (32L)
        val size_0_otherOffset = 32L
        val size_1_offset = 24L
        val size_1_otherOffset = 24L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775751L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = (32L)
        val size_0_otherOffset = 32L
        val size_1_offset = 24L
        val size_1_otherOffset = 24L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775751L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = (32L)
        val size_0_otherOffset = 32L
        val size_1_offset = 24L
        val size_1_otherOffset = 24L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_CUC_RELATIVETIME_PFC_18_COARSETIME: Int = 1436 /*(SIZE(4)) */

@inline @cCode.inline val ERR_CUC_RELATIVETIME_PFC_18_FINETIME: Int = 1441 /*(SIZE(3)) */

@inline @cCode.inline val ERR_CUC_RELATIVETIME_PFC_18: Int = 1446 /* */

 
 
 

@inline @cCode.inline val ERR_ACN_ENCODE_CUC_RELATIVETIME_PFC_18: Int = 1449 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CUC_RELATIVETIME_PFC_18_COARSETIME: Int = 1439 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CUC_RELATIVETIME_PFC_18_FINETIME: Int = 1444 /*  */
@inline @cCode.inline val TCUC_RelativeTime_PFC_18_REQUIRED_BYTES_FOR_ACN_ENCODING = 7
@inline @cCode.inline val TCUC_RelativeTime_PFC_18_REQUIRED_BITS_FOR_ACN_ENCODING = 56

@inline @cCode.inline val ERR_ACN_DECODE_CUC_RELATIVETIME_PFC_18: Int = 1450 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CUC_RELATIVETIME_PFC_18_COARSETIME: Int = 1440 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CUC_RELATIVETIME_PFC_18_FINETIME: Int = 1445 /*  */


