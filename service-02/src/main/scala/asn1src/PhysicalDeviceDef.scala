/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

sealed trait TPhysicalDevice_ID:
    def i: Int
object TPhysicalDevice_ID:
    case object Tdev1 extends TPhysicalDevice_ID:
        override def i: Int = 1

// please use the following macros to avoid breaking code.
// type Tdev1 = TPhysicalDevice_ID.dev1

@inline @cCode.inline val ERR_PHYSICALDEVICE_ID: Int = 6 /*dev1 */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PHYSICALDEVICE_ID: Int = 9 /*  */
@inline @cCode.inline val TPhysicalDevice_ID_REQUIRED_BYTES_FOR_ACN_ENCODING = 4
@inline @cCode.inline val TPhysicalDevice_ID_REQUIRED_BITS_FOR_ACN_ENCODING = 32

@inline @cCode.inline val ERR_ACN_DECODE_PHYSICALDEVICE_ID: Int = 10 /*  */
/*-- TProtocolSpecificData --------------------------------------------*/
type TProtocolSpecificData_dev1 = ULong


enum TProtocolSpecificData:
    case ProtocolSpecificData_dev1_PRESENT(dev1: TProtocolSpecificData_dev1)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775799L))
        this match {
            case TProtocolSpecificData.ProtocolSpecificData_dev1_PRESENT(dev1) =>
                8L
        }
    }.ensuring { (res: Long) => 
        res == 8L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775799L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775799L))
        this match {
            case TProtocolSpecificData.ProtocolSpecificData_dev1_PRESENT(dev1) =>
                ()
        }
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775799L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775799L))
        require((offset % 8L) == (otherOffset % 8L))
        this match {
            case TProtocolSpecificData.ProtocolSpecificData_dev1_PRESENT(dev1) =>
                ()
        }
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775799L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775799L))
        require((offset % 16L) == (otherOffset % 16L))
        this match {
            case TProtocolSpecificData.ProtocolSpecificData_dev1_PRESENT(dev1) =>
                ()
        }
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775799L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775799L))
        require((offset % 32L) == (otherOffset % 32L))
        this match {
            case TProtocolSpecificData.ProtocolSpecificData_dev1_PRESENT(dev1) =>
                ()
        }
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

@inline @cCode.inline val ERR_PROTOCOLSPECIFICDATA_DEV1: Int = 11 /*(0 .. 255) */

@inline @cCode.inline val ERR_PROTOCOLSPECIFICDATA: Int = 16 /* */

 
 


