/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

sealed trait TCPDU_ID:
    def i: Int
object TCPDU_ID:
    case object Tcpdu0 extends TCPDU_ID:
        override def i: Int = 0

// please use the following macros to avoid breaking code.
// type Tcpdu0 = TCPDU_ID.cpdu0

@inline @cCode.inline val ERR_CPDU_ID: Int = 600 /*cpdu0 */

 

@inline @cCode.inline val ERR_ACN_ENCODE_CPDU_ID: Int = 603 /*  */
@inline @cCode.inline val TCPDU_ID_REQUIRED_BYTES_FOR_ACN_ENCODING = 4
@inline @cCode.inline val TCPDU_ID_REQUIRED_BITS_FOR_ACN_ENCODING = 32

@inline @cCode.inline val ERR_ACN_DECODE_CPDU_ID: Int = 604 /*  */
sealed trait TOutputLine_ID:
    def i: Int
object TOutputLine_ID:
    case object Tout1 extends TOutputLine_ID:
        override def i: Int = 1

// please use the following macros to avoid breaking code.
// type Tout1 = TOutputLine_ID.out1

@inline @cCode.inline val ERR_OUTPUTLINE_ID: Int = 605 /*out1 */

 

@inline @cCode.inline val ERR_ACN_ENCODE_OUTPUTLINE_ID: Int = 608 /*  */
@inline @cCode.inline val TOutputLine_ID_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TOutputLine_ID_REQUIRED_BITS_FOR_ACN_ENCODING = 12

@inline @cCode.inline val ERR_ACN_DECODE_OUTPUTLINE_ID: Int = 609 /*  */
/*-- TCpduCommand --------------------------------------------*/

case class TCpduCommand_reserved(arr: Vector[UByte])
{
    require(this.arr.length == 1)
}
type TCpduCommand_durationExponentialValue = ULong


case class TCpduCommand (
    outputLine_ID: TOutputLine_ID, 
    reserved: TCpduCommand_reserved, 
    durationExponentialValue: TCpduCommand_durationExponentialValue
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775791L))
        val size_0 = 12L
        val size_1 = 1L
        val size_2 = 3L
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        res == 16L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775791L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775791L))
        val size_0_offset = 12L
        val size_0_otherOffset = 12L
        val size_1_offset = 1L
        val size_1_otherOffset = 1L
        val size_2_offset = 3L
        val size_2_otherOffset = 3L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775791L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775791L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 12L
        val size_0_otherOffset = 12L
        val size_1_offset = 1L
        val size_1_otherOffset = 1L
        val size_2_offset = 3L
        val size_2_otherOffset = 3L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775791L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775791L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 12L
        val size_0_otherOffset = 12L
        val size_1_offset = 1L
        val size_1_otherOffset = 1L
        val size_2_offset = 3L
        val size_2_otherOffset = 3L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775791L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775791L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 12L
        val size_0_otherOffset = 12L
        val size_1_offset = 1L
        val size_1_otherOffset = 1L
        val size_2_offset = 3L
        val size_2_otherOffset = 3L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_CPDUCOMMAND_RESERVED: Int = 585 /*(SIZE(1)) */

@inline @cCode.inline val ERR_CPDUCOMMAND_DURATIONEXPONENTIALVALUE: Int = 590 /*(0 .. 7) */

@inline @cCode.inline val ERR_CPDUCOMMAND: Int = 595 /* */
@inline @cCode.inline val ERR_CPDUCOMMAND_OUTPUTLINE_ID_2: Int = 580 /* */

 
 
 

@inline @cCode.inline val ERR_ACN_ENCODE_CPDUCOMMAND: Int = 598 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CPDUCOMMAND_OUTPUTLINE_ID_2: Int = 583 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CPDUCOMMAND_RESERVED: Int = 588 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CPDUCOMMAND_DURATIONEXPONENTIALVALUE: Int = 593 /*  */
@inline @cCode.inline val TCpduCommand_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TCpduCommand_REQUIRED_BITS_FOR_ACN_ENCODING = 16

@inline @cCode.inline val ERR_ACN_DECODE_CPDUCOMMAND: Int = 599 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CPDUCOMMAND_OUTPUTLINE_ID_2: Int = 584 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CPDUCOMMAND_RESERVED: Int = 589 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CPDUCOMMAND_DURATIONEXPONENTIALVALUE: Int = 594 /*  */
/*-- TTC_2_4_DistributeCpduCommands --------------------------------------------*/


case class TTC_2_4_DistributeCpduCommands_cpduCommands (nCount: Int, arr: Vector[TCpduCommand])
{
    require(this.arr.size <= 255 && 1 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854771727L))
        TTC_2_4_DistributeCpduCommands_cpduCommands.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 4080L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771727L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771727L))
        TTC_2_4_DistributeCpduCommands_cpduCommands.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771727L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771727L))
        require((offset % 8L) == (otherOffset % 8L))
        TTC_2_4_DistributeCpduCommands_cpduCommands.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771727L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771727L))
        require((offset % 16L) == (otherOffset % 16L))
        TTC_2_4_DistributeCpduCommands_cpduCommands.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771727L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771727L))
        require((offset % 32L) == (otherOffset % 32L))
        TTC_2_4_DistributeCpduCommands_cpduCommands.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TTC_2_4_DistributeCpduCommands_cpduCommands {
    def sizeRange(ls: Vector[TCpduCommand], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 255))
        require((0L <= offset) && (offset <= 9223372036854775807L - 16L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(elemSize == 16L)
            elemSize + TTC_2_4_DistributeCpduCommands_cpduCommands.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 16L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TCpduCommand], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 255))
        require((0L <= offset) && (offset <= 9223372036854775807L - 16L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 16L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 16L)
            assert(elemSizeOtherOff == 16L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TTC_2_4_DistributeCpduCommands_cpduCommands.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_2_4_DistributeCpduCommands_cpduCommands.sizeRange(ls, offset, from, to) == TTC_2_4_DistributeCpduCommands_cpduCommands.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TCpduCommand], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 255))
        require((0L <= offset) && (offset <= 9223372036854775807L - 16L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 16L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 16L)
            assert(elemSizeOtherOff == 16L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TTC_2_4_DistributeCpduCommands_cpduCommands.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_2_4_DistributeCpduCommands_cpduCommands.sizeRange(ls, offset, from, to) == TTC_2_4_DistributeCpduCommands_cpduCommands.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TCpduCommand], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 255))
        require((0L <= offset) && (offset <= 9223372036854775807L - 16L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 16L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 16L)
            assert(elemSizeOtherOff == 16L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TTC_2_4_DistributeCpduCommands_cpduCommands.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_2_4_DistributeCpduCommands_cpduCommands.sizeRange(ls, offset, from, to) == TTC_2_4_DistributeCpduCommands_cpduCommands.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TCpduCommand], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 255))
        require((0L <= offset) && (offset <= 9223372036854775807L - 16L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 16L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 16L)
            assert(elemSizeOtherOff == 16L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TTC_2_4_DistributeCpduCommands_cpduCommands.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_2_4_DistributeCpduCommands_cpduCommands.sizeRange(ls, offset, from, to) == TTC_2_4_DistributeCpduCommands_cpduCommands.sizeRange(ls, otherOffset, from, to)
    }
}

case class TTC_2_4_DistributeCpduCommands (
    cpduCommands: TTC_2_4_DistributeCpduCommands_cpduCommands
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854771695L))
        val size_0 = 32L
        val size_1 = this.cpduCommands.size(offset + size_0)
        size_0 + size_1
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 4112L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771695L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771695L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.cpduCommands.size(offset + size_0_offset)
        val size_1_otherOffset = this.cpduCommands.size(otherOffset + size_0_otherOffset)
        this.cpduCommands.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771695L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771695L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.cpduCommands.size(offset + size_0_offset)
        val size_1_otherOffset = this.cpduCommands.size(otherOffset + size_0_otherOffset)
        this.cpduCommands.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771695L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771695L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.cpduCommands.size(offset + size_0_offset)
        val size_1_otherOffset = this.cpduCommands.size(otherOffset + size_0_otherOffset)
        this.cpduCommands.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771695L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771695L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.cpduCommands.size(offset + size_0_offset)
        val size_1_otherOffset = this.cpduCommands.size(otherOffset + size_0_otherOffset)
        this.cpduCommands.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_2_4_DISTRIBUTECPDUCOMMANDS_CPDUCOMMANDS: Int = 441 /*(SIZE(1 .. maxTC-2-4-CpduCommandsCount)) */
@inline @cCode.inline val ERR_TC_2_4_DISTRIBUTECPDUCOMMANDS_CPDUCOMMANDS_ELM_2: Int = 436 /* */

@inline @cCode.inline val ERR_TC_2_4_DISTRIBUTECPDUCOMMANDS: Int = 446 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_2_4_DISTRIBUTECPDUCOMMANDS: Int = 449 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_2_4_DISTRIBUTECPDUCOMMANDS_N2_UNINITIALIZED: Int = 450 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_2_4_DISTRIBUTECPDUCOMMANDS_N2: Int = 409 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_2_4_DISTRIBUTECPDUCOMMANDS_CPDUCOMMANDS: Int = 444 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_2_4_DISTRIBUTECPDUCOMMANDS_CPDUCOMMANDS_ELM_2: Int = 439 /*  */
@inline @cCode.inline val TTC_2_4_DistributeCpduCommands_REQUIRED_BYTES_FOR_ACN_ENCODING = 514
@inline @cCode.inline val TTC_2_4_DistributeCpduCommands_REQUIRED_BITS_FOR_ACN_ENCODING = 4112

@inline @cCode.inline val ERR_ACN_DECODE_TC_2_4_DISTRIBUTECPDUCOMMANDS: Int = 451 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_2_4_DISTRIBUTECPDUCOMMANDS_N2: Int = 410 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_2_4_DISTRIBUTECPDUCOMMANDS_CPDUCOMMANDS: Int = 445 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_2_4_DISTRIBUTECPDUCOMMANDS_CPDUCOMMANDS_ELM_2: Int = 440 /*  */
/*-- TCPDU --------------------------------------------*/


case class TCPDU_cpduCommands (nCount: Int, arr: Vector[TCpduCommand])
{
    require(this.arr.size <= 255 && 1 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854771727L))
        TCPDU_cpduCommands.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 4080L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771727L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771727L))
        TCPDU_cpduCommands.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771727L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771727L))
        require((offset % 8L) == (otherOffset % 8L))
        TCPDU_cpduCommands.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771727L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771727L))
        require((offset % 16L) == (otherOffset % 16L))
        TCPDU_cpduCommands.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771727L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771727L))
        require((offset % 32L) == (otherOffset % 32L))
        TCPDU_cpduCommands.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TCPDU_cpduCommands {
    def sizeRange(ls: Vector[TCpduCommand], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 255))
        require((0L <= offset) && (offset <= 9223372036854775807L - 16L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(elemSize == 16L)
            elemSize + TCPDU_cpduCommands.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 16L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TCpduCommand], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 255))
        require((0L <= offset) && (offset <= 9223372036854775807L - 16L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 16L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 16L)
            assert(elemSizeOtherOff == 16L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TCPDU_cpduCommands.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TCPDU_cpduCommands.sizeRange(ls, offset, from, to) == TCPDU_cpduCommands.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TCpduCommand], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 255))
        require((0L <= offset) && (offset <= 9223372036854775807L - 16L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 16L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 16L)
            assert(elemSizeOtherOff == 16L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TCPDU_cpduCommands.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TCPDU_cpduCommands.sizeRange(ls, offset, from, to) == TCPDU_cpduCommands.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TCpduCommand], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 255))
        require((0L <= offset) && (offset <= 9223372036854775807L - 16L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 16L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 16L)
            assert(elemSizeOtherOff == 16L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TCPDU_cpduCommands.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TCPDU_cpduCommands.sizeRange(ls, offset, from, to) == TCPDU_cpduCommands.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TCpduCommand], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 255))
        require((0L <= offset) && (offset <= 9223372036854775807L - 16L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 16L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 16L)
            assert(elemSizeOtherOff == 16L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TCPDU_cpduCommands.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TCPDU_cpduCommands.sizeRange(ls, offset, from, to) == TCPDU_cpduCommands.sizeRange(ls, otherOffset, from, to)
    }
}

case class TCPDU (
    cpdu_ID: TCPDU_ID, 
    cpduCommands: TCPDU_cpduCommands
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854771663L))
        val size_0 = 32L
        val size_1 = 32L
        val size_2 = this.cpduCommands.size(offset + size_0 + size_1)
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 4144L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771663L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771663L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.cpduCommands.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.cpduCommands.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.cpduCommands.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771663L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771663L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.cpduCommands.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.cpduCommands.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.cpduCommands.sizeLemmaNextByte(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771663L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771663L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.cpduCommands.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.cpduCommands.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.cpduCommands.sizeLemmaNextWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771663L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771663L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.cpduCommands.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.cpduCommands.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.cpduCommands.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_CPDU_CPDUCOMMANDS: Int = 564 /*(SIZE(1 .. maxTC-2-4-CpduCommandsCount)) */
@inline @cCode.inline val ERR_CPDU_CPDUCOMMANDS_ELM_2: Int = 559 /* */

@inline @cCode.inline val ERR_CPDU: Int = 569 /* */
@inline @cCode.inline val ERR_CPDU_CPDU_ID_2: Int = 527 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_CPDU: Int = 572 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CPDU_CPDU_ID_2: Int = 530 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CPDU_N2_UNINITIALIZED: Int = 573 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CPDU_N2: Int = 532 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CPDU_CPDUCOMMANDS: Int = 567 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CPDU_CPDUCOMMANDS_ELM_2: Int = 562 /*  */
@inline @cCode.inline val TCPDU_REQUIRED_BYTES_FOR_ACN_ENCODING = 518
@inline @cCode.inline val TCPDU_REQUIRED_BITS_FOR_ACN_ENCODING = 4144

@inline @cCode.inline val ERR_ACN_DECODE_CPDU: Int = 574 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CPDU_CPDU_ID_2: Int = 531 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CPDU_N2: Int = 533 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CPDU_CPDUCOMMANDS: Int = 568 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CPDU_CPDUCOMMANDS_ELM_2: Int = 563 /*  */
/*-- TTC_2_4_DistrubiteCpduCommands_MultipleCpdu --------------------------------------------*/


case class TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu (nCount: Int, arr: Vector[TCPDU])
{
    require(this.arr.size <= 127 && 1 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854249519L))
        TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 526288L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854249519L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854249519L))
        TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854249519L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854249519L))
        require((offset % 8L) == (otherOffset % 8L))
        TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854249519L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854249519L))
        require((offset % 16L) == (otherOffset % 16L))
        TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854249519L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854249519L))
        require((offset % 32L) == (otherOffset % 32L))
        TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu {
    def sizeRange(ls: Vector[TCPDU], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 4144L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(0L <= elemSize && elemSize <= 4144L)
            elemSize + TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 4144L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TCPDU], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 4144L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 4144L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 4144L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 4144L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu.sizeRange(ls, offset, from, to) == TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TCPDU], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 4144L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 4144L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 4144L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 4144L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu.sizeRange(ls, offset, from, to) == TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TCPDU], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 4144L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 4144L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 4144L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 4144L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu.sizeRange(ls, offset, from, to) == TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TCPDU], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 4144L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 4144L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 4144L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 4144L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu.sizeRange(ls, offset, from, to) == TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu.sizeRange(ls, otherOffset, from, to)
    }
}

case class TTC_2_4_DistrubiteCpduCommands_MultipleCpdu (
    cpdu: TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854249487L))
        val size_0 = 32L
        val size_1 = this.cpdu.size(offset + size_0)
        size_0 + size_1
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 526320L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854249487L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854249487L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.cpdu.size(offset + size_0_offset)
        val size_1_otherOffset = this.cpdu.size(otherOffset + size_0_otherOffset)
        this.cpdu.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854249487L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854249487L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.cpdu.size(offset + size_0_offset)
        val size_1_otherOffset = this.cpdu.size(otherOffset + size_0_otherOffset)
        this.cpdu.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854249487L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854249487L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.cpdu.size(offset + size_0_offset)
        val size_1_otherOffset = this.cpdu.size(otherOffset + size_0_otherOffset)
        this.cpdu.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854249487L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854249487L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.cpdu.size(offset + size_0_offset)
        val size_1_otherOffset = this.cpdu.size(otherOffset + size_0_otherOffset)
        this.cpdu.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_2_4_DISTRUBITECPDUCOMMANDS_MULTIPLECPDU_CPDU: Int = 511 /*(SIZE (1 .. maxTC-2-4-CpduCount)) */
@inline @cCode.inline val ERR_TC_2_4_DISTRUBITECPDUCOMMANDS_MULTIPLECPDU_CPDU_ELM_2: Int = 506 /* */

@inline @cCode.inline val ERR_TC_2_4_DISTRUBITECPDUCOMMANDS_MULTIPLECPDU: Int = 516 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_2_4_DISTRUBITECPDUCOMMANDS_MULTIPLECPDU: Int = 519 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_2_4_DISTRUBITECPDUCOMMANDS_MULTIPLECPDU_N1_UNINITIALIZED: Int = 520 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_2_4_DISTRUBITECPDUCOMMANDS_MULTIPLECPDU_N1: Int = 452 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_2_4_DISTRUBITECPDUCOMMANDS_MULTIPLECPDU_CPDU: Int = 514 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_2_4_DISTRUBITECPDUCOMMANDS_MULTIPLECPDU_CPDU_ELM_2: Int = 509 /*  */
@inline @cCode.inline val TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_REQUIRED_BYTES_FOR_ACN_ENCODING = 65790
@inline @cCode.inline val TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_REQUIRED_BITS_FOR_ACN_ENCODING = 526320

@inline @cCode.inline val ERR_ACN_DECODE_TC_2_4_DISTRUBITECPDUCOMMANDS_MULTIPLECPDU: Int = 521 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_2_4_DISTRUBITECPDUCOMMANDS_MULTIPLECPDU_N1: Int = 453 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_2_4_DISTRUBITECPDUCOMMANDS_MULTIPLECPDU_CPDU: Int = 515 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_2_4_DISTRUBITECPDUCOMMANDS_MULTIPLECPDU_CPDU_ELM_2: Int = 510 /*  */

// @inline @cCode.inline val maxTC_2_4_CpduCommandsCount: Int = 255 // defined in body
// @inline @cCode.inline val maxTC_2_4_CpduCount: Int = 127 // defined in body

