/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TDeviceDataRequest --------------------------------------------*/

case class TDeviceDataRequest (
    transaction_ID: TPUSC_UINT32, 
    protocolSpecificData: TProtocolSpecificData
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775735L))
        val size_0 = 32L
        val size_1 = 32L
        val size_2 = this.protocolSpecificData match {
            case TProtocolSpecificData.ProtocolSpecificData_dev1_PRESENT(dev1) =>
                8L
        }
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        res == 72L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775735L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775735L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.protocolSpecificData match {
            case TProtocolSpecificData.ProtocolSpecificData_dev1_PRESENT(dev1) =>
                8L
        }
        val size_2_otherOffset = this.protocolSpecificData match {
            case TProtocolSpecificData.ProtocolSpecificData_dev1_PRESENT(dev1) =>
                8L
        }
        this.protocolSpecificData.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775735L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775735L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.protocolSpecificData match {
            case TProtocolSpecificData.ProtocolSpecificData_dev1_PRESENT(dev1) =>
                8L
        }
        val size_2_otherOffset = this.protocolSpecificData match {
            case TProtocolSpecificData.ProtocolSpecificData_dev1_PRESENT(dev1) =>
                8L
        }
        this.protocolSpecificData.sizeLemmaNextByte(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775735L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775735L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.protocolSpecificData match {
            case TProtocolSpecificData.ProtocolSpecificData_dev1_PRESENT(dev1) =>
                8L
        }
        val size_2_otherOffset = this.protocolSpecificData match {
            case TProtocolSpecificData.ProtocolSpecificData_dev1_PRESENT(dev1) =>
                8L
        }
        this.protocolSpecificData.sizeLemmaNextWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775735L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775735L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.protocolSpecificData match {
            case TProtocolSpecificData.ProtocolSpecificData_dev1_PRESENT(dev1) =>
                8L
        }
        val size_2_otherOffset = this.protocolSpecificData match {
            case TProtocolSpecificData.ProtocolSpecificData_dev1_PRESENT(dev1) =>
                8L
        }
        this.protocolSpecificData.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_DEVICEDATAREQUEST: Int = 856 /* */
@inline @cCode.inline val ERR_DEVICEDATAREQUEST_TRANSACTION_ID_2_2: Int = 836 /* */
@inline @cCode.inline val ERR_DEVICEDATAREQUEST_PROTOCOLSPECIFICDATA_2: Int = 853 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_DEVICEDATAREQUEST: Int = 859 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_DEVICEDATAREQUEST_TRANSACTION_ID_2_2: Int = 839 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_DEVICEDATAREQUEST_PHYSICALDEVICE_ID_UNINITIALIZED: Int = 860 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_DEVICEDATAREQUEST_PHYSICALDEVICE_ID: Int = 841 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_DEVICEDATAREQUEST_PROTOCOLSPECIFICDATA: Int = 851 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_DEVICEDATAREQUEST_PROTOCOLSPECIFICDATA_DEV1: Int = 846 /*  */
@inline @cCode.inline val TDeviceDataRequest_REQUIRED_BYTES_FOR_ACN_ENCODING = 9
@inline @cCode.inline val TDeviceDataRequest_REQUIRED_BITS_FOR_ACN_ENCODING = 72

@inline @cCode.inline val ERR_ACN_DECODE_DEVICEDATAREQUEST: Int = 861 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_DEVICEDATAREQUEST_TRANSACTION_ID_2_2: Int = 840 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_DEVICEDATAREQUEST_PHYSICALDEVICE_ID: Int = 842 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_DEVICEDATAREQUEST_PROTOCOLSPECIFICDATA: Int = 852 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_DEVICEDATAREQUEST_PROTOCOLSPECIFICDATA_DEV1: Int = 847 /*  */
/*-- TTC_2_8_AcquireDataFromPhysicalDevices --------------------------------------------*/


case class TTC_2_8_AcquireDataFromPhysicalDevices_deviceDataRequests (nCount: Int, arr: Vector[TDeviceDataRequest])
{
    require(this.arr.size <= 63 && 1 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854771271L))
        TTC_2_8_AcquireDataFromPhysicalDevices_deviceDataRequests.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 4536L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771271L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771271L))
        TTC_2_8_AcquireDataFromPhysicalDevices_deviceDataRequests.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771271L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771271L))
        require((offset % 8L) == (otherOffset % 8L))
        TTC_2_8_AcquireDataFromPhysicalDevices_deviceDataRequests.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771271L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771271L))
        require((offset % 16L) == (otherOffset % 16L))
        TTC_2_8_AcquireDataFromPhysicalDevices_deviceDataRequests.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771271L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771271L))
        require((offset % 32L) == (otherOffset % 32L))
        TTC_2_8_AcquireDataFromPhysicalDevices_deviceDataRequests.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TTC_2_8_AcquireDataFromPhysicalDevices_deviceDataRequests {
    def sizeRange(ls: Vector[TDeviceDataRequest], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 72L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(elemSize == 72L)
            elemSize + TTC_2_8_AcquireDataFromPhysicalDevices_deviceDataRequests.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 72L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TDeviceDataRequest], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 72L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 72L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 72L)
            assert(elemSizeOtherOff == 72L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TTC_2_8_AcquireDataFromPhysicalDevices_deviceDataRequests.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_2_8_AcquireDataFromPhysicalDevices_deviceDataRequests.sizeRange(ls, offset, from, to) == TTC_2_8_AcquireDataFromPhysicalDevices_deviceDataRequests.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TDeviceDataRequest], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 72L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 72L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 72L)
            assert(elemSizeOtherOff == 72L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TTC_2_8_AcquireDataFromPhysicalDevices_deviceDataRequests.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_2_8_AcquireDataFromPhysicalDevices_deviceDataRequests.sizeRange(ls, offset, from, to) == TTC_2_8_AcquireDataFromPhysicalDevices_deviceDataRequests.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TDeviceDataRequest], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 72L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 72L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 72L)
            assert(elemSizeOtherOff == 72L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TTC_2_8_AcquireDataFromPhysicalDevices_deviceDataRequests.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_2_8_AcquireDataFromPhysicalDevices_deviceDataRequests.sizeRange(ls, offset, from, to) == TTC_2_8_AcquireDataFromPhysicalDevices_deviceDataRequests.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TDeviceDataRequest], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 72L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 72L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 72L)
            assert(elemSizeOtherOff == 72L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TTC_2_8_AcquireDataFromPhysicalDevices_deviceDataRequests.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_2_8_AcquireDataFromPhysicalDevices_deviceDataRequests.sizeRange(ls, offset, from, to) == TTC_2_8_AcquireDataFromPhysicalDevices_deviceDataRequests.sizeRange(ls, otherOffset, from, to)
    }
}

case class TTC_2_8_AcquireDataFromPhysicalDevices (
    deviceDataRequests: TTC_2_8_AcquireDataFromPhysicalDevices_deviceDataRequests
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854771239L))
        val size_0 = 32L
        val size_1 = this.deviceDataRequests.size(offset + size_0)
        size_0 + size_1
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 4568L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771239L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771239L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.deviceDataRequests.size(offset + size_0_offset)
        val size_1_otherOffset = this.deviceDataRequests.size(otherOffset + size_0_otherOffset)
        this.deviceDataRequests.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771239L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771239L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.deviceDataRequests.size(offset + size_0_offset)
        val size_1_otherOffset = this.deviceDataRequests.size(otherOffset + size_0_otherOffset)
        this.deviceDataRequests.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771239L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771239L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.deviceDataRequests.size(offset + size_0_offset)
        val size_1_otherOffset = this.deviceDataRequests.size(otherOffset + size_0_otherOffset)
        this.deviceDataRequests.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771239L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771239L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.deviceDataRequests.size(offset + size_0_offset)
        val size_1_otherOffset = this.deviceDataRequests.size(otherOffset + size_0_otherOffset)
        this.deviceDataRequests.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_2_8_ACQUIREDATAFROMPHYSICALDEVICES_DEVICEDATAREQUESTS: Int = 815 /*(SIZE(1 .. maxTC-2-8-DeviceDataRequestCount)) */
@inline @cCode.inline val ERR_TC_2_8_ACQUIREDATAFROMPHYSICALDEVICES_DEVICEDATAREQUESTS_ELM_2: Int = 810 /* */

@inline @cCode.inline val ERR_TC_2_8_ACQUIREDATAFROMPHYSICALDEVICES: Int = 820 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_2_8_ACQUIREDATAFROMPHYSICALDEVICES: Int = 823 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_2_8_ACQUIREDATAFROMPHYSICALDEVICES_N_UNINITIALIZED: Int = 824 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_2_8_ACQUIREDATAFROMPHYSICALDEVICES_N: Int = 773 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_2_8_ACQUIREDATAFROMPHYSICALDEVICES_DEVICEDATAREQUESTS: Int = 818 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_2_8_ACQUIREDATAFROMPHYSICALDEVICES_DEVICEDATAREQUESTS_ELM_2: Int = 813 /*  */
@inline @cCode.inline val TTC_2_8_AcquireDataFromPhysicalDevices_REQUIRED_BYTES_FOR_ACN_ENCODING = 571
@inline @cCode.inline val TTC_2_8_AcquireDataFromPhysicalDevices_REQUIRED_BITS_FOR_ACN_ENCODING = 4568

@inline @cCode.inline val ERR_ACN_DECODE_TC_2_8_ACQUIREDATAFROMPHYSICALDEVICES: Int = 825 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_2_8_ACQUIREDATAFROMPHYSICALDEVICES_N: Int = 774 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_2_8_ACQUIREDATAFROMPHYSICALDEVICES_DEVICEDATAREQUESTS: Int = 819 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_2_8_ACQUIREDATAFROMPHYSICALDEVICES_DEVICEDATAREQUESTS_ELM_2: Int = 814 /*  */

// @inline @cCode.inline val maxTC_2_8_DeviceDataRequestCount: Int = 63 // defined in body

