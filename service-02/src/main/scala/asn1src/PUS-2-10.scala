/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

val maxTC_2_10_LogicalDeviceCommandCount: Int = 63 // variables:188

def TLdev1_Commands_IsConstraintValid(pVal: TLdev1_Commands): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = (pVal == TLdev1_Commands.Tcommand1) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    ret
}

def TLdev1_Commands_Initialize(): TLdev1_Commands = TLdev1_Commands.Tcommand1

@opaque @inlineOnce 
def TLdev1_Commands_ACN_Encode(pVal: TLdev1_Commands, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(32L))
    TLdev1_Commands_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    val intVal_pVal = pVal match
        case TLdev1_Commands.Tcommand1 => ULong.fromRaw(0L)

    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(0))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(intVal_pVal)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(intVal_pVal)
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 32L
    }
}

@opaque @inlineOnce 
def TLdev1_Commands_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TLdev1_Commands] =
{
    require(codec.base.bitStream.validate_offset_bits(32L))

    @ghost val oldCdc = snapshot(codec)
    val intVal_pVal = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    val pVal = intVal_pVal.toRaw match
        case 0 => TLdev1_Commands.Tcommand1
        case _ => return LeftMut(ERR_ACN_DECODE_LDEV1_COMMANDS)

    TLdev1_Commands_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TLdev1_Commands](l)
        case Right(_) => RightMut[ErrorCode, TLdev1_Commands](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TLdev1_Commands]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 32L && TLdev1_Commands_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TLdev1_Commands_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TLdev1_Commands]) =
{
    require(codec.base.bitStream.validate_offset_bits(32L))
    val cpy = snapshot(codec)
    val res = TLdev1_Commands_ACN_Decode(cpy)
    (cpy, res)
}

def TLdev1_Arguments_command1_IsConstraintValid(pVal: TLdev1_Arguments_command1): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = (pVal <= ULong.fromRaw(255L)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    ret
}

def TLdev1_Arguments_IsConstraintValid(pVal: TLdev1_Arguments): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    pVal match
        case TLdev1_Arguments.command1_PRESENT(command1) =>
            ret = TLdev1_Arguments_command1_IsConstraintValid(command1)
    ret
}

def TLdev1_Arguments_command1_Initialize(): TLdev1_Arguments_command1 = ULong.fromRaw(0L)
def TLdev1_Arguments_Initialize(): TLdev1_Arguments = TLdev1_Arguments.command1_PRESENT(ULong.fromRaw(0L))

def TLdev1_IsConstraintValid(pVal: TLdev1): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TLdev1_Arguments_IsConstraintValid(pVal.commandArguments)
    ret
}

def TLdev1_Initialize(): TLdev1 = TLdev1(commandArguments = TLdev1_Arguments_Initialize())

@opaque @inlineOnce 
def TLdev1_ACN_Encode(pVal: TLdev1, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(40L))
    TLdev1_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val Ldev1_command_ID = pVal.commandArguments match
        case TLdev1_Arguments.command1_PRESENT(_) =>TLdev1_Commands.Tcommand1

    /* Encode Ldev1_command_ID */
    val intVal_Ldev1_command_ID = Ldev1_command_ID match
        case TLdev1_Commands.Tcommand1 => ULong.fromRaw(0L)

    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(0))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(intVal_Ldev1_command_ID)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(intVal_Ldev1_command_ID)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 40L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode commandArguments */
    Ldev1_commandArguments_ACN_Encode(codec, pVal, Ldev1_command_ID, pVal.commandArguments) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 40L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.commandArguments match {
        case TLdev1_Arguments.command1_PRESENT(command1) =>
            8L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 40L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def Ldev1_commandArguments_ACN_Encode(codec: ACN, pVal: TLdev1, Ldev1_command_ID: TLdev1_Commands, commandArguments: TLdev1_Arguments): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(8L))
    @ghost val oldCdc = snapshot(codec)
    TLdev1_Arguments_IsConstraintValid(commandArguments) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    commandArguments match
        case TLdev1_Arguments.command1_PRESENT(command1) =>
            codec.enc_Int_PositiveInteger_ConstSize_8(command1)
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + commandArguments.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TLdev1_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TLdev1] =
{
    require(codec.base.bitStream.validate_offset_bits(40L))

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode Ldev1_command_ID */
    val intVal_Ldev1_command_ID = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    val Ldev1_command_ID = intVal_Ldev1_command_ID.toRaw match
        case 0 => TLdev1_Commands.Tcommand1
        case _ => return LeftMut(ERR_ACN_DECODE_LDEV1_COMMAND_ID)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 40L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode commandArguments */
    val pVal_commandArguments = Ldev1_commandArguments_ACN_Decode(codec, Ldev1_command_ID) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 40L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_commandArguments match {
        case TLdev1_Arguments.command1_PRESENT(command1) =>
            8L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 40L)
    }
    val pVal = TLdev1(pVal_commandArguments)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }

    TLdev1_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TLdev1](l)
        case Right(_) => RightMut[ErrorCode, TLdev1](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TLdev1]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TLdev1_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TLdev1_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TLdev1]) =
{
    require(codec.base.bitStream.validate_offset_bits(40L))
    val cpy = snapshot(codec)
    val res = TLdev1_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def Ldev1_commandArguments_ACN_Decode(codec: ACN, Ldev1_command_ID: TLdev1_Commands): EitherMut[Int, TLdev1_Arguments] = {
    require(codec.base.bitStream.validate_offset_bits(8L))
    @ghost val oldCdc = snapshot(codec)
    val commandArguments = Ldev1_command_ID match
        case TLdev1_Commands.Tcommand1 =>
            val command1 = codec.dec_Int_PositiveInteger_ConstSize_8()
    
            TLdev1_Arguments.command1_PRESENT(command1)
    TLdev1_Arguments_IsConstraintValid(commandArguments) match {
        case Left(l) =>
            LeftMut[Int, TLdev1_Arguments](l)
        case Right(_) =>
            RightMut[Int, TLdev1_Arguments](commandArguments)
    }
}.ensuring { (res: EitherMut[Int, TLdev1_Arguments]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TLdev1_Arguments_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def Ldev1_commandArguments_ACN_Decode_pure(codec: ACN, Ldev1_command_ID: TLdev1_Commands): (ACN, EitherMut[Int, TLdev1_Arguments]) = {
    require(codec.base.bitStream.validate_offset_bits(8L))
    val cpy = snapshot(codec)
    val res = Ldev1_commandArguments_ACN_Decode(cpy, Ldev1_command_ID)
    (cpy, res)
}

def TCommand_IsConstraintValid(pVal: TCommand): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    pVal match
        case TCommand.ldev1_PRESENT(ldev1) =>
            ret = TLdev1_IsConstraintValid(ldev1)
    ret
}

def TCommand_Initialize(): TCommand = TCommand.ldev1_PRESENT(TLdev1_Initialize())

def TLogicalDeviceCommand_IsConstraintValid(pVal: TLogicalDeviceCommand): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TCommand_IsConstraintValid(pVal.command)
    ret
}

def TLogicalDeviceCommand_Initialize(): TLogicalDeviceCommand = TLogicalDeviceCommand(command = TCommand_Initialize())

@opaque @inlineOnce 
def TLogicalDeviceCommand_ACN_Encode(pVal: TLogicalDeviceCommand, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(72L))
    TLogicalDeviceCommand_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val LogicalDeviceCommand_logicalDevice_ID = pVal.command match
        case TCommand.ldev1_PRESENT(_) =>TLogicalDevice_ID.Tldev1

    /* Encode LogicalDeviceCommand_logicalDevice_ID */
    val intVal_LogicalDeviceCommand_logicalDevice_ID = LogicalDeviceCommand_logicalDevice_ID match
        case TLogicalDevice_ID.Tldev1 => ULong.fromRaw(0L)

    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(0))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(intVal_LogicalDeviceCommand_logicalDevice_ID)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(intVal_LogicalDeviceCommand_logicalDevice_ID)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 72L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode command */
    LogicalDeviceCommand_command_ACN_Encode(codec, pVal, LogicalDeviceCommand_logicalDevice_ID, pVal.command) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 72L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.command match {
        case TCommand.ldev1_PRESENT(ldev1) =>
            ldev1.size(codec_0_2.base.bitStream.bitIndex)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 72L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def LogicalDeviceCommand_command_ACN_Encode(codec: ACN, pVal: TLogicalDeviceCommand, LogicalDeviceCommand_logicalDevice_ID: TLogicalDevice_ID, command: TCommand): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(40L))
    @ghost val oldCdc = snapshot(codec)
    TCommand_IsConstraintValid(command) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    command match
        case TCommand.ldev1_PRESENT(ldev1) =>
            TLdev1_ACN_Encode(ldev1, codec, false) match // uper:6
                case Right(_) =>
                case Left(err) => return Left(err)
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + command.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TLogicalDeviceCommand_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TLogicalDeviceCommand] =
{
    require(codec.base.bitStream.validate_offset_bits(72L))

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode LogicalDeviceCommand_logicalDevice_ID */
    val intVal_LogicalDeviceCommand_logicalDevice_ID = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    val LogicalDeviceCommand_logicalDevice_ID = intVal_LogicalDeviceCommand_logicalDevice_ID.toRaw match
        case 0 => TLogicalDevice_ID.Tldev1
        case _ => return LeftMut(ERR_ACN_DECODE_LOGICALDEVICECOMMAND_LOGICALDEVICE_ID)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 72L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode command */
    val pVal_command = LogicalDeviceCommand_command_ACN_Decode(codec, LogicalDeviceCommand_logicalDevice_ID) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 72L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_command match {
        case TCommand.ldev1_PRESENT(ldev1) =>
            ldev1.size(codec_0_2.base.bitStream.bitIndex)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 72L)
    }
    val pVal = TLogicalDeviceCommand(pVal_command)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }

    TLogicalDeviceCommand_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TLogicalDeviceCommand](l)
        case Right(_) => RightMut[ErrorCode, TLogicalDeviceCommand](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TLogicalDeviceCommand]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TLogicalDeviceCommand_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TLogicalDeviceCommand_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TLogicalDeviceCommand]) =
{
    require(codec.base.bitStream.validate_offset_bits(72L))
    val cpy = snapshot(codec)
    val res = TLogicalDeviceCommand_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def LogicalDeviceCommand_command_ACN_Decode(codec: ACN, LogicalDeviceCommand_logicalDevice_ID: TLogicalDevice_ID): EitherMut[Int, TCommand] = {
    require(codec.base.bitStream.validate_offset_bits(40L))
    @ghost val oldCdc = snapshot(codec)
    val command = LogicalDeviceCommand_logicalDevice_ID match
        case TLogicalDevice_ID.Tldev1 =>
            val ldev1 = TLdev1_ACN_Decode(codec) match // uper:13
                case RightMut(decData) => decData
                case LeftMut(err) => return LeftMut(err)
            TCommand.ldev1_PRESENT(ldev1)
    TCommand_IsConstraintValid(command) match {
        case Left(l) =>
            LeftMut[Int, TCommand](l)
        case Right(_) =>
            RightMut[Int, TCommand](command)
    }
}.ensuring { (res: EitherMut[Int, TCommand]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TCommand_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def LogicalDeviceCommand_command_ACN_Decode_pure(codec: ACN, LogicalDeviceCommand_logicalDevice_ID: TLogicalDevice_ID): (ACN, EitherMut[Int, TCommand]) = {
    require(codec.base.bitStream.validate_offset_bits(40L))
    val cpy = snapshot(codec)
    val res = LogicalDeviceCommand_command_ACN_Decode(cpy, LogicalDeviceCommand_logicalDevice_ID)
    (cpy, res)
}

def TTC_2_10_DistributeLogicalDeviceCommands_logicalDeviceCommands_IsConstraintValid(pVal: TTC_2_10_DistributeLogicalDeviceCommands_logicalDeviceCommands): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = ((1 <= pVal.nCount) && (pVal.nCount <= 63)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TLogicalDeviceCommand_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TTC_2_10_DistributeLogicalDeviceCommands_IsConstraintValid(pVal: TTC_2_10_DistributeLogicalDeviceCommands): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TTC_2_10_DistributeLogicalDeviceCommands_logicalDeviceCommands_IsConstraintValid(pVal.logicalDeviceCommands)
    ret
}

def TTC_2_10_DistributeLogicalDeviceCommands_logicalDeviceCommands_Initialize(): TTC_2_10_DistributeLogicalDeviceCommands_logicalDeviceCommands = TTC_2_10_DistributeLogicalDeviceCommands_logicalDeviceCommands(1, Vector.fill(63)(TLogicalDeviceCommand_Initialize()))
def TTC_2_10_DistributeLogicalDeviceCommands_Initialize(): TTC_2_10_DistributeLogicalDeviceCommands = TTC_2_10_DistributeLogicalDeviceCommands(logicalDeviceCommands = TTC_2_10_DistributeLogicalDeviceCommands_logicalDeviceCommands_Initialize())

@opaque @inlineOnce 
def TTC_2_10_DistributeLogicalDeviceCommands_ACN_Encode(pVal: TTC_2_10_DistributeLogicalDeviceCommands, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(4568L))
    var i1: Int = 0
    TTC_2_10_DistributeLogicalDeviceCommands_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val TC_2_10_DistributeLogicalDeviceCommands_n = ULong.fromRaw(pVal.logicalDeviceCommands.nCount)
    if TC_2_10_DistributeLogicalDeviceCommands_n < ULong.fromRaw(1) || TC_2_10_DistributeLogicalDeviceCommands_n > ULong.fromRaw(63) then
        return Left(860)
    /* Encode TC_2_10_DistributeLogicalDeviceCommands_n */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(TC_2_10_DistributeLogicalDeviceCommands_n)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(TC_2_10_DistributeLogicalDeviceCommands_n)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 4568L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode logicalDeviceCommands */
    TC_2_10_DistributeLogicalDeviceCommands_logicalDeviceCommands_ACN_Encode(codec, pVal, TC_2_10_DistributeLogicalDeviceCommands_n, pVal.logicalDeviceCommands) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 4568L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.logicalDeviceCommands.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 4568L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TC_2_10_DistributeLogicalDeviceCommands_logicalDeviceCommands_Encode_loop(codec: ACN, logicalDeviceCommands: TTC_2_10_DistributeLogicalDeviceCommands_logicalDeviceCommands, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= logicalDeviceCommands.nCount))
    require((1 <= logicalDeviceCommands.nCount) && (logicalDeviceCommands.nCount <= logicalDeviceCommands.arr.size) && (logicalDeviceCommands.arr.size <= 63))
    require(codec.base.bitStream.validate_offset_bits((72L * (logicalDeviceCommands.nCount - i1))))
    decreases(logicalDeviceCommands.nCount - i1)
    if (i1 == logicalDeviceCommands.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 72L * (logicalDeviceCommands.nCount - i1), 72L)
        }
        TLogicalDeviceCommand_ACN_Encode(logicalDeviceCommands.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(72L * (i1 + 1) == 72L * i1 + 72L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 72L * (logicalDeviceCommands.nCount - i1), 72L)
            check(codec.base.bitStream.validate_offset_bits(72L * (logicalDeviceCommands.nCount - (i1 + 1))))
        }
        val res = TC_2_10_DistributeLogicalDeviceCommands_logicalDeviceCommands_Encode_loop(codec, logicalDeviceCommands, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TTC_2_10_DistributeLogicalDeviceCommands_logicalDeviceCommands.sizeRange(logicalDeviceCommands.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, logicalDeviceCommands.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + logicalDeviceCommands.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TTC_2_10_DistributeLogicalDeviceCommands_logicalDeviceCommands.sizeRange(logicalDeviceCommands.arr, codecSnap1.base.bitStream.bitIndex, i1, logicalDeviceCommands.nCount) == logicalDeviceCommands.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TTC_2_10_DistributeLogicalDeviceCommands_logicalDeviceCommands.sizeRange(logicalDeviceCommands.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, logicalDeviceCommands.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TTC_2_10_DistributeLogicalDeviceCommands_logicalDeviceCommands.sizeRange(logicalDeviceCommands.arr, codecSnap1.base.bitStream.bitIndex, i1, logicalDeviceCommands.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTC_2_10_DistributeLogicalDeviceCommands_logicalDeviceCommands.sizeRange(logicalDeviceCommands.arr, old(codec).base.bitStream.bitIndex, i1, logicalDeviceCommands.nCount)
    }
}



@opaque @inlineOnce
def TC_2_10_DistributeLogicalDeviceCommands_logicalDeviceCommands_ACN_Encode(codec: ACN, pVal: TTC_2_10_DistributeLogicalDeviceCommands, TC_2_10_DistributeLogicalDeviceCommands_n: ULong, logicalDeviceCommands: TTC_2_10_DistributeLogicalDeviceCommands_logicalDeviceCommands): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(4536L))
    @ghost val oldCdc = snapshot(codec)
    TTC_2_10_DistributeLogicalDeviceCommands_logicalDeviceCommands_IsConstraintValid(logicalDeviceCommands) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    TC_2_10_DistributeLogicalDeviceCommands_logicalDeviceCommands_Encode_loop(codec, logicalDeviceCommands, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                logicalDeviceCommands.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
            ()
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + logicalDeviceCommands.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTC_2_10_DistributeLogicalDeviceCommands_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTC_2_10_DistributeLogicalDeviceCommands] =
{
    require(codec.base.bitStream.validate_offset_bits(4568L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode TC_2_10_DistributeLogicalDeviceCommands_n */
    val TC_2_10_DistributeLogicalDeviceCommands_n = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 4568L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode logicalDeviceCommands */
    val pVal_logicalDeviceCommands = TC_2_10_DistributeLogicalDeviceCommands_logicalDeviceCommands_ACN_Decode(codec, TC_2_10_DistributeLogicalDeviceCommands_n) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 4568L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_logicalDeviceCommands.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 4568L)
    }
    val pVal = TTC_2_10_DistributeLogicalDeviceCommands(pVal_logicalDeviceCommands)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }

    TTC_2_10_DistributeLogicalDeviceCommands_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTC_2_10_DistributeLogicalDeviceCommands](l)
        case Right(_) => RightMut[ErrorCode, TTC_2_10_DistributeLogicalDeviceCommands](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTC_2_10_DistributeLogicalDeviceCommands]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_2_10_DistributeLogicalDeviceCommands_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTC_2_10_DistributeLogicalDeviceCommands_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTC_2_10_DistributeLogicalDeviceCommands]) =
{
    require(codec.base.bitStream.validate_offset_bits(4568L))
    val cpy = snapshot(codec)
    val res = TTC_2_10_DistributeLogicalDeviceCommands_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def TC_2_10_DistributeLogicalDeviceCommands_logicalDeviceCommands_Decode_loop(codec: ACN, nCount: Int, logicalDeviceCommands: Vector[TLogicalDeviceCommand], i1: Int): EitherMut[Int, Vector[TLogicalDeviceCommand]] = {
    require((1 <= nCount) && (nCount <= 63))
    require((0 <= i1) && (i1 <= nCount))
    require(logicalDeviceCommands.size == i1)
    require(codec.base.bitStream.validate_offset_bits((72L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(logicalDeviceCommands)
            vecRangesEqSlicedLemma(logicalDeviceCommands, logicalDeviceCommands, 0, logicalDeviceCommands.size, 0, i1)
        }
        RightMut[Int, Vector[TLogicalDeviceCommand]](logicalDeviceCommands)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 72L * (nCount - i1), 72L)
        }
        val logicalDeviceCommands_arr_i1_ = TLogicalDeviceCommand_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(72L * (i1 + 1) == 72L * i1 + 72L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 72L * (nCount - i1), 72L)
            check(codec.base.bitStream.validate_offset_bits(72L * (nCount - (i1 + 1))))
        }
        val res = TC_2_10_DistributeLogicalDeviceCommands_logicalDeviceCommands_Decode_loop(codec, nCount, logicalDeviceCommands.append(logicalDeviceCommands_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(logicalDeviceCommands, newVec, logicalDeviceCommands_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(logicalDeviceCommands.append(logicalDeviceCommands_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(logicalDeviceCommands.list, logicalDeviceCommands_arr_i1_, i1)
                    Vector.listApplyEqVecApply(logicalDeviceCommands.append(logicalDeviceCommands_arr_i1_), i1)
                    check(logicalDeviceCommands_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TLogicalDeviceCommand]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(logicalDeviceCommands, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTC_2_10_DistributeLogicalDeviceCommands_logicalDeviceCommands.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def TC_2_10_DistributeLogicalDeviceCommands_logicalDeviceCommands_ACN_Decode(codec: ACN, TC_2_10_DistributeLogicalDeviceCommands_n: ULong): EitherMut[Int, TTC_2_10_DistributeLogicalDeviceCommands_logicalDeviceCommands] = {
    require(codec.base.bitStream.validate_offset_bits(4536L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val logicalDeviceCommands =
        if ((ULong.fromRaw(1) <= TC_2_10_DistributeLogicalDeviceCommands_n) && (TC_2_10_DistributeLogicalDeviceCommands_n <= ULong.fromRaw(63))) then
            val logicalDeviceCommands_nCount = TC_2_10_DistributeLogicalDeviceCommands_n.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val logicalDeviceCommands = TC_2_10_DistributeLogicalDeviceCommands_logicalDeviceCommands_Decode_loop(codec, logicalDeviceCommands_nCount, Vector.empty[TLogicalDeviceCommand], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val logicalDeviceCommands = TTC_2_10_DistributeLogicalDeviceCommands_logicalDeviceCommands(logicalDeviceCommands_nCount, bdg)
                    ghostExpr {
                        logicalDeviceCommands.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    logicalDeviceCommands
            }
            logicalDeviceCommands
        else return LeftMut(ERR_ACN_DECODE_TC_2_10_DISTRIBUTELOGICALDEVICECOMMANDS_LOGICALDEVICECOMMANDS)
    TTC_2_10_DistributeLogicalDeviceCommands_logicalDeviceCommands_IsConstraintValid(logicalDeviceCommands) match {
        case Left(l) =>
            LeftMut[Int, TTC_2_10_DistributeLogicalDeviceCommands_logicalDeviceCommands](l)
        case Right(_) =>
            RightMut[Int, TTC_2_10_DistributeLogicalDeviceCommands_logicalDeviceCommands](logicalDeviceCommands)
    }
}.ensuring { (res: EitherMut[Int, TTC_2_10_DistributeLogicalDeviceCommands_logicalDeviceCommands]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_2_10_DistributeLogicalDeviceCommands_logicalDeviceCommands_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TC_2_10_DistributeLogicalDeviceCommands_logicalDeviceCommands_ACN_Decode_pure(codec: ACN, TC_2_10_DistributeLogicalDeviceCommands_n: ULong): (ACN, EitherMut[Int, TTC_2_10_DistributeLogicalDeviceCommands_logicalDeviceCommands]) = {
    require(codec.base.bitStream.validate_offset_bits(4536L))
    val cpy = snapshot(codec)
    val res = TC_2_10_DistributeLogicalDeviceCommands_logicalDeviceCommands_ACN_Decode(cpy, TC_2_10_DistributeLogicalDeviceCommands_n)
    (cpy, res)
}