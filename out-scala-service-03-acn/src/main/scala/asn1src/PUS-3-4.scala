/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

val maxTC_3_4_DiagnosticParameterStructureReport_ID_Count: Int = 63 // variables:188

def TTC_3_4_DeleteDiagnosticParameterReportStructures_diagnosticParameterReportStructure_ID_IsConstraintValid(pVal: TTC_3_4_DeleteDiagnosticParameterReportStructures_diagnosticParameterReportStructure_ID): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = ((1 <= pVal.nCount) && (pVal.nCount <= 63)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TDiagnosticParameterReportStructure_ID_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TTC_3_4_DeleteDiagnosticParameterReportStructures_IsConstraintValid(pVal: TTC_3_4_DeleteDiagnosticParameterReportStructures): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TTC_3_4_DeleteDiagnosticParameterReportStructures_diagnosticParameterReportStructure_ID_IsConstraintValid(pVal.diagnosticParameterReportStructure_ID)
    ret
}

def TTC_3_4_DeleteDiagnosticParameterReportStructures_diagnosticParameterReportStructure_ID_Initialize(): TTC_3_4_DeleteDiagnosticParameterReportStructures_diagnosticParameterReportStructure_ID = TTC_3_4_DeleteDiagnosticParameterReportStructures_diagnosticParameterReportStructure_ID(1, Vector.fill(63)(ULong.fromRaw(0L)))
def TTC_3_4_DeleteDiagnosticParameterReportStructures_Initialize(): TTC_3_4_DeleteDiagnosticParameterReportStructures = TTC_3_4_DeleteDiagnosticParameterReportStructures(diagnosticParameterReportStructure_ID = TTC_3_4_DeleteDiagnosticParameterReportStructures_diagnosticParameterReportStructure_ID_Initialize())

@opaque @inlineOnce 
def TTC_3_4_DeleteDiagnosticParameterReportStructures_ACN_Encode(pVal: TTC_3_4_DeleteDiagnosticParameterReportStructures, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(2048L))
    var i1: Int = 0
    TTC_3_4_DeleteDiagnosticParameterReportStructures_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val TC_3_4_DeleteDiagnosticParameterReportStructures_n = ULong.fromRaw(pVal.diagnosticParameterReportStructure_ID.nCount)
    if TC_3_4_DeleteDiagnosticParameterReportStructures_n < ULong.fromRaw(1) || TC_3_4_DeleteDiagnosticParameterReportStructures_n > ULong.fromRaw(63) then
        return Left(860)
    /* Encode TC_3_4_DeleteDiagnosticParameterReportStructures_n */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(TC_3_4_DeleteDiagnosticParameterReportStructures_n)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(TC_3_4_DeleteDiagnosticParameterReportStructures_n)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 2048L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode diagnosticParameterReportStructure_ID */
    TC_3_4_DeleteDiagnosticParameterReportStructures_diagnosticParameterReportStructure_ID_ACN_Encode(codec, pVal, TC_3_4_DeleteDiagnosticParameterReportStructures_n, pVal.diagnosticParameterReportStructure_ID) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 2048L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.diagnosticParameterReportStructure_ID.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 2048L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def PUS_3_4_TTC_3_4_DeleteDiagnosticParameterReportStructures_diagnosticParameterReportStructure_ID_pVal_diagnosticParameterReportStructure_ID_diagnosticParameterReportStructure_ID_Encode_loop(codec: ACN, diagnosticParameterReportStructure_ID: TTC_3_4_DeleteDiagnosticParameterReportStructures_diagnosticParameterReportStructure_ID, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= diagnosticParameterReportStructure_ID.nCount))
    require((1 <= diagnosticParameterReportStructure_ID.nCount) && (diagnosticParameterReportStructure_ID.nCount <= diagnosticParameterReportStructure_ID.arr.size) && (diagnosticParameterReportStructure_ID.arr.size <= 63))
    require(codec.base.bitStream.validate_offset_bits((32L * (diagnosticParameterReportStructure_ID.nCount - i1))))
    decreases(diagnosticParameterReportStructure_ID.nCount - i1)
    if (i1 == diagnosticParameterReportStructure_ID.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 32L * (diagnosticParameterReportStructure_ID.nCount - i1), 32L)
        }
        TDiagnosticParameterReportStructure_ID_ACN_Encode(diagnosticParameterReportStructure_ID.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(32L * (i1 + 1) == 32L * i1 + 32L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 32L * (diagnosticParameterReportStructure_ID.nCount - i1), 32L)
            check(codec.base.bitStream.validate_offset_bits(32L * (diagnosticParameterReportStructure_ID.nCount - (i1 + 1))))
        }
        val res = PUS_3_4_TTC_3_4_DeleteDiagnosticParameterReportStructures_diagnosticParameterReportStructure_ID_pVal_diagnosticParameterReportStructure_ID_diagnosticParameterReportStructure_ID_Encode_loop(codec, diagnosticParameterReportStructure_ID, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TTC_3_4_DeleteDiagnosticParameterReportStructures_diagnosticParameterReportStructure_ID.sizeRange(diagnosticParameterReportStructure_ID.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, diagnosticParameterReportStructure_ID.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + 32L)
                    assert(TTC_3_4_DeleteDiagnosticParameterReportStructures_diagnosticParameterReportStructure_ID.sizeRange(diagnosticParameterReportStructure_ID.arr, codecSnap1.base.bitStream.bitIndex, i1, diagnosticParameterReportStructure_ID.nCount) == TTC_3_4_DeleteDiagnosticParameterReportStructures_diagnosticParameterReportStructure_ID.sizeRange(diagnosticParameterReportStructure_ID.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, diagnosticParameterReportStructure_ID.nCount) + 32L)
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TTC_3_4_DeleteDiagnosticParameterReportStructures_diagnosticParameterReportStructure_ID.sizeRange(diagnosticParameterReportStructure_ID.arr, codecSnap1.base.bitStream.bitIndex, i1, diagnosticParameterReportStructure_ID.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTC_3_4_DeleteDiagnosticParameterReportStructures_diagnosticParameterReportStructure_ID.sizeRange(diagnosticParameterReportStructure_ID.arr, old(codec).base.bitStream.bitIndex, i1, diagnosticParameterReportStructure_ID.nCount)
    }
}



@opaque @inlineOnce
def TC_3_4_DeleteDiagnosticParameterReportStructures_diagnosticParameterReportStructure_ID_ACN_Encode(codec: ACN, pVal: TTC_3_4_DeleteDiagnosticParameterReportStructures, TC_3_4_DeleteDiagnosticParameterReportStructures_n: ULong, diagnosticParameterReportStructure_ID: TTC_3_4_DeleteDiagnosticParameterReportStructures_diagnosticParameterReportStructure_ID): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(2016L))
    @ghost val oldCdc = snapshot(codec)
    TTC_3_4_DeleteDiagnosticParameterReportStructures_diagnosticParameterReportStructure_ID_IsConstraintValid(diagnosticParameterReportStructure_ID) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    PUS_3_4_TTC_3_4_DeleteDiagnosticParameterReportStructures_diagnosticParameterReportStructure_ID_pVal_diagnosticParameterReportStructure_ID_diagnosticParameterReportStructure_ID_Encode_loop(codec, diagnosticParameterReportStructure_ID, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                diagnosticParameterReportStructure_ID.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + diagnosticParameterReportStructure_ID.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTC_3_4_DeleteDiagnosticParameterReportStructures_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTC_3_4_DeleteDiagnosticParameterReportStructures] =
{
    require(codec.base.bitStream.validate_offset_bits(2048L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode TC_3_4_DeleteDiagnosticParameterReportStructures_n */
    val TC_3_4_DeleteDiagnosticParameterReportStructures_n = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 2048L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode diagnosticParameterReportStructure_ID */
    val pVal_diagnosticParameterReportStructure_ID = TC_3_4_DeleteDiagnosticParameterReportStructures_diagnosticParameterReportStructure_ID_ACN_Decode(codec, TC_3_4_DeleteDiagnosticParameterReportStructures_n) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 2048L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_diagnosticParameterReportStructure_ID.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 2048L)
    }
    val pVal = TTC_3_4_DeleteDiagnosticParameterReportStructures(pVal_diagnosticParameterReportStructure_ID)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }

    TTC_3_4_DeleteDiagnosticParameterReportStructures_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTC_3_4_DeleteDiagnosticParameterReportStructures](l)
        case Right(_) => RightMut[ErrorCode, TTC_3_4_DeleteDiagnosticParameterReportStructures](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTC_3_4_DeleteDiagnosticParameterReportStructures]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_3_4_DeleteDiagnosticParameterReportStructures_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTC_3_4_DeleteDiagnosticParameterReportStructures_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTC_3_4_DeleteDiagnosticParameterReportStructures]) =
{
    require(codec.base.bitStream.validate_offset_bits(2048L))
    val cpy = snapshot(codec)
    val res = TTC_3_4_DeleteDiagnosticParameterReportStructures_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def PUS_3_4_TTC_3_4_DeleteDiagnosticParameterReportStructures_diagnosticParameterReportStructure_ID_pVal_diagnosticParameterReportStructure_ID_diagnosticParameterReportStructure_ID_Decode_loop(codec: ACN, nCount: Int, diagnosticParameterReportStructure_ID: Vector[ULong], i1: Int): EitherMut[Int, Vector[ULong]] = {
    require((1 <= nCount) && (nCount <= 63))
    require((0 <= i1) && (i1 <= nCount))
    require(diagnosticParameterReportStructure_ID.size == i1)
    require(codec.base.bitStream.validate_offset_bits((32L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(diagnosticParameterReportStructure_ID)
            vecRangesEqSlicedLemma(diagnosticParameterReportStructure_ID, diagnosticParameterReportStructure_ID, 0, diagnosticParameterReportStructure_ID.size, 0, i1)
        }
        RightMut[Int, Vector[ULong]](diagnosticParameterReportStructure_ID)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 32L * (nCount - i1), 32L)
        }
        val diagnosticParameterReportStructure_ID_arr_i1_ = TDiagnosticParameterReportStructure_ID_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(32L * (i1 + 1) == 32L * i1 + 32L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 32L * (nCount - i1), 32L)
            check(codec.base.bitStream.validate_offset_bits(32L * (nCount - (i1 + 1))))
        }
        val res = PUS_3_4_TTC_3_4_DeleteDiagnosticParameterReportStructures_diagnosticParameterReportStructure_ID_pVal_diagnosticParameterReportStructure_ID_diagnosticParameterReportStructure_ID_Decode_loop(codec, nCount, diagnosticParameterReportStructure_ID.append(diagnosticParameterReportStructure_ID_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(diagnosticParameterReportStructure_ID, newVec, diagnosticParameterReportStructure_ID_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(diagnosticParameterReportStructure_ID.append(diagnosticParameterReportStructure_ID_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(diagnosticParameterReportStructure_ID.list, diagnosticParameterReportStructure_ID_arr_i1_, i1)
                    Vector.listApplyEqVecApply(diagnosticParameterReportStructure_ID.append(diagnosticParameterReportStructure_ID_arr_i1_), i1)
                    check(diagnosticParameterReportStructure_ID_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[ULong]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(diagnosticParameterReportStructure_ID, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTC_3_4_DeleteDiagnosticParameterReportStructures_diagnosticParameterReportStructure_ID.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def TC_3_4_DeleteDiagnosticParameterReportStructures_diagnosticParameterReportStructure_ID_ACN_Decode(codec: ACN, TC_3_4_DeleteDiagnosticParameterReportStructures_n: ULong): EitherMut[Int, TTC_3_4_DeleteDiagnosticParameterReportStructures_diagnosticParameterReportStructure_ID] = {
    require(codec.base.bitStream.validate_offset_bits(2016L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val diagnosticParameterReportStructure_ID =
        if ((ULong.fromRaw(1) <= TC_3_4_DeleteDiagnosticParameterReportStructures_n) && (TC_3_4_DeleteDiagnosticParameterReportStructures_n <= ULong.fromRaw(63))) then
            val diagnosticParameterReportStructure_ID_nCount = TC_3_4_DeleteDiagnosticParameterReportStructures_n.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val diagnosticParameterReportStructure_ID = PUS_3_4_TTC_3_4_DeleteDiagnosticParameterReportStructures_diagnosticParameterReportStructure_ID_pVal_diagnosticParameterReportStructure_ID_diagnosticParameterReportStructure_ID_Decode_loop(codec, diagnosticParameterReportStructure_ID_nCount, Vector.empty[ULong], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val diagnosticParameterReportStructure_ID = TTC_3_4_DeleteDiagnosticParameterReportStructures_diagnosticParameterReportStructure_ID(diagnosticParameterReportStructure_ID_nCount, bdg)
                    ghostExpr {
                        diagnosticParameterReportStructure_ID.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    diagnosticParameterReportStructure_ID
            }
            diagnosticParameterReportStructure_ID
        else return LeftMut(ERR_ACN_DECODE_TC_3_4_DELETEDIAGNOSTICPARAMETERREPORTSTRUCTURES_DIAGNOSTICPARAMETERREPORTSTRUCTURE_ID)
    TTC_3_4_DeleteDiagnosticParameterReportStructures_diagnosticParameterReportStructure_ID_IsConstraintValid(diagnosticParameterReportStructure_ID) match {
        case Left(l) =>
            LeftMut[Int, TTC_3_4_DeleteDiagnosticParameterReportStructures_diagnosticParameterReportStructure_ID](l)
        case Right(_) =>
            RightMut[Int, TTC_3_4_DeleteDiagnosticParameterReportStructures_diagnosticParameterReportStructure_ID](diagnosticParameterReportStructure_ID)
    }
}.ensuring { (res: EitherMut[Int, TTC_3_4_DeleteDiagnosticParameterReportStructures_diagnosticParameterReportStructure_ID]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_3_4_DeleteDiagnosticParameterReportStructures_diagnosticParameterReportStructure_ID_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TC_3_4_DeleteDiagnosticParameterReportStructures_diagnosticParameterReportStructure_ID_ACN_Decode_pure(codec: ACN, TC_3_4_DeleteDiagnosticParameterReportStructures_n: ULong): (ACN, EitherMut[Int, TTC_3_4_DeleteDiagnosticParameterReportStructures_diagnosticParameterReportStructure_ID]) = {
    require(codec.base.bitStream.validate_offset_bits(2016L))
    val cpy = snapshot(codec)
    val res = TC_3_4_DeleteDiagnosticParameterReportStructures_diagnosticParameterReportStructure_ID_ACN_Decode(cpy, TC_3_4_DeleteDiagnosticParameterReportStructures_n)
    (cpy, res)
}