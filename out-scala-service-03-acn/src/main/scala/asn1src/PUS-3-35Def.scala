/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- THousekeepingPeriodicGenerationProperties --------------------------------------------*/

case class THousekeepingPeriodicGenerationProperties (
    parameterReportStructure_ID: THousekeepingParameterReportStructure_ID, 
    periodicGenerationActionStatus: TPeriodicGenerationActionStatus, 
    collectionInterval: TPUSC_UINT32
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775742L))
        val size_0 = 32L
        val size_1 = 1L
        val size_2 = 32L
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        res == 65L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775742L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775742L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 1L
        val size_1_otherOffset = 1L
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775742L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775742L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 1L
        val size_1_otherOffset = 1L
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775742L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775742L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 1L
        val size_1_otherOffset = 1L
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775742L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775742L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 1L
        val size_1_otherOffset = 1L
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_HOUSEKEEPINGPERIODICGENERATIONPROPERTIES: Int = 1264 /* */
@inline @cCode.inline val ERR_HOUSEKEEPINGPERIODICGENERATIONPROPERTIES_PARAMETERREPORTSTRUCTURE_ID_2: Int = 1234 /* */
@inline @cCode.inline val ERR_HOUSEKEEPINGPERIODICGENERATIONPROPERTIES_PERIODICGENERATIONACTIONSTATUS_2: Int = 1244 /* */
@inline @cCode.inline val ERR_HOUSEKEEPINGPERIODICGENERATIONPROPERTIES_COLLECTIONINTERVAL_2_2: Int = 1259 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_HOUSEKEEPINGPERIODICGENERATIONPROPERTIES: Int = 1267 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_HOUSEKEEPINGPERIODICGENERATIONPROPERTIES_PARAMETERREPORTSTRUCTURE_ID_2: Int = 1237 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_HOUSEKEEPINGPERIODICGENERATIONPROPERTIES_PERIODICGENERATIONACTIONSTATUS_2: Int = 1247 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_HOUSEKEEPINGPERIODICGENERATIONPROPERTIES_COLLECTIONINTERVAL_2_2: Int = 1262 /*  */
@inline @cCode.inline val THousekeepingPeriodicGenerationProperties_REQUIRED_BYTES_FOR_ACN_ENCODING = 9
@inline @cCode.inline val THousekeepingPeriodicGenerationProperties_REQUIRED_BITS_FOR_ACN_ENCODING = 65

@inline @cCode.inline val ERR_ACN_DECODE_HOUSEKEEPINGPERIODICGENERATIONPROPERTIES: Int = 1268 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_HOUSEKEEPINGPERIODICGENERATIONPROPERTIES_PARAMETERREPORTSTRUCTURE_ID_2: Int = 1238 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_HOUSEKEEPINGPERIODICGENERATIONPROPERTIES_PERIODICGENERATIONACTIONSTATUS_2: Int = 1248 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_HOUSEKEEPINGPERIODICGENERATIONPROPERTIES_COLLECTIONINTERVAL_2_2: Int = 1263 /*  */
/*-- TTM_3_35_HousekeepingParameterReportPeriodicGenerationPropertiesReport --------------------------------------------*/


case class TTM_3_35_HousekeepingParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties (nCount: Int, arr: Vector[THousekeepingPeriodicGenerationProperties])
{
    require(this.arr.size <= 63 && 1 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854771712L))
        TTM_3_35_HousekeepingParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 4095L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771712L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771712L))
        TTM_3_35_HousekeepingParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771712L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771712L))
        require((offset % 8L) == (otherOffset % 8L))
        TTM_3_35_HousekeepingParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771712L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771712L))
        require((offset % 16L) == (otherOffset % 16L))
        TTM_3_35_HousekeepingParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771712L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771712L))
        require((offset % 32L) == (otherOffset % 32L))
        TTM_3_35_HousekeepingParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TTM_3_35_HousekeepingParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties {
    def sizeRange(ls: Vector[THousekeepingPeriodicGenerationProperties], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 65L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(elemSize == 65L)
            elemSize + TTM_3_35_HousekeepingParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 65L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[THousekeepingPeriodicGenerationProperties], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 65L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 65L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 65L)
            assert(elemSizeOtherOff == 65L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TTM_3_35_HousekeepingParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTM_3_35_HousekeepingParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties.sizeRange(ls, offset, from, to) == TTM_3_35_HousekeepingParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[THousekeepingPeriodicGenerationProperties], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 65L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 65L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 65L)
            assert(elemSizeOtherOff == 65L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TTM_3_35_HousekeepingParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTM_3_35_HousekeepingParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties.sizeRange(ls, offset, from, to) == TTM_3_35_HousekeepingParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[THousekeepingPeriodicGenerationProperties], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 65L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 65L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 65L)
            assert(elemSizeOtherOff == 65L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TTM_3_35_HousekeepingParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTM_3_35_HousekeepingParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties.sizeRange(ls, offset, from, to) == TTM_3_35_HousekeepingParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[THousekeepingPeriodicGenerationProperties], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 65L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 65L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 65L)
            assert(elemSizeOtherOff == 65L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TTM_3_35_HousekeepingParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTM_3_35_HousekeepingParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties.sizeRange(ls, offset, from, to) == TTM_3_35_HousekeepingParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties.sizeRange(ls, otherOffset, from, to)
    }
}

case class TTM_3_35_HousekeepingParameterReportPeriodicGenerationPropertiesReport (
    periodicGenerationProperties: TTM_3_35_HousekeepingParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854771680L))
        val size_0 = 32L
        val size_1 = this.periodicGenerationProperties.size(offset + size_0)
        size_0 + size_1
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 4127L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771680L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771680L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.periodicGenerationProperties.size(offset + size_0_offset)
        val size_1_otherOffset = this.periodicGenerationProperties.size(otherOffset + size_0_otherOffset)
        this.periodicGenerationProperties.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771680L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771680L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.periodicGenerationProperties.size(offset + size_0_offset)
        val size_1_otherOffset = this.periodicGenerationProperties.size(otherOffset + size_0_otherOffset)
        this.periodicGenerationProperties.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771680L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771680L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.periodicGenerationProperties.size(offset + size_0_offset)
        val size_1_otherOffset = this.periodicGenerationProperties.size(otherOffset + size_0_otherOffset)
        this.periodicGenerationProperties.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771680L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771680L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.periodicGenerationProperties.size(offset + size_0_offset)
        val size_1_otherOffset = this.periodicGenerationProperties.size(otherOffset + size_0_otherOffset)
        this.periodicGenerationProperties.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TM_3_35_HOUSEKEEPINGPARAMETERREPORTPERIODICGENERATIONPROPERTIESREPORT_PERIODICGENERATIONPROPERTIES: Int = 1218 /*(SIZE(1 .. maxTM-3-35-PeriodicGenerationPropertiesCount)) */
@inline @cCode.inline val ERR_TM_3_35_HOUSEKEEPINGPARAMETERREPORTPERIODICGENERATIONPROPERTIESREPORT_PERIODICGENERATIONPROPERTIES_ELM_2: Int = 1213 /* */

@inline @cCode.inline val ERR_TM_3_35_HOUSEKEEPINGPARAMETERREPORTPERIODICGENERATIONPROPERTIESREPORT: Int = 1223 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TM_3_35_HOUSEKEEPINGPARAMETERREPORTPERIODICGENERATIONPROPERTIESREPORT: Int = 1226 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_3_35_HOUSEKEEPINGPARAMETERREPORTPERIODICGENERATIONPROPERTIESREPORT_N_UNINITIALIZED: Int = 1227 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_3_35_HOUSEKEEPINGPARAMETERREPORTPERIODICGENERATIONPROPERTIESREPORT_N: Int = 1171 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_3_35_HOUSEKEEPINGPARAMETERREPORTPERIODICGENERATIONPROPERTIESREPORT_PERIODICGENERATIONPROPERTIES: Int = 1221 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_3_35_HOUSEKEEPINGPARAMETERREPORTPERIODICGENERATIONPROPERTIESREPORT_PERIODICGENERATIONPROPERTIES_ELM_2: Int = 1216 /*  */
@inline @cCode.inline val TTM_3_35_HousekeepingParameterReportPeriodicGenerationPropertiesReport_REQUIRED_BYTES_FOR_ACN_ENCODING = 516
@inline @cCode.inline val TTM_3_35_HousekeepingParameterReportPeriodicGenerationPropertiesReport_REQUIRED_BITS_FOR_ACN_ENCODING = 4127

@inline @cCode.inline val ERR_ACN_DECODE_TM_3_35_HOUSEKEEPINGPARAMETERREPORTPERIODICGENERATIONPROPERTIESREPORT: Int = 1228 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_3_35_HOUSEKEEPINGPARAMETERREPORTPERIODICGENERATIONPROPERTIESREPORT_N: Int = 1172 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_3_35_HOUSEKEEPINGPARAMETERREPORTPERIODICGENERATIONPROPERTIESREPORT_PERIODICGENERATIONPROPERTIES: Int = 1222 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_3_35_HOUSEKEEPINGPARAMETERREPORTPERIODICGENERATIONPROPERTIESREPORT_PERIODICGENERATIONPROPERTIES_ELM_2: Int = 1217 /*  */

// @inline @cCode.inline val maxTM_3_35_PeriodicGenerationPropertiesCount: Int = 63 // defined in body

