/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TTC_DataNoSecondaryHeader --------------------------------------------*/

case class TTC_DataNoSecondaryHeader (
    data: TTC_NoHeaderPayload, 
    packetErrorControl: OptionMut[TPacketErrorControl]
) {
    require(this.packetErrorControl.isDefined)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775784L))
        val size_0 = 0L
        val size_1 = this.packetErrorControl match {
            case SomeMut(v) =>
                alignedSizeToByte(16L, offset + size_0)
            case NoneMut() =>
                0L
        }
        size_0 + size_1
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 23L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775784L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775784L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 0L
        val size_0_otherOffset = 0L
        val size_1_offset = this.packetErrorControl match {
            case SomeMut(v) =>
                alignedSizeToByte(16L, offset + size_0_offset)
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.packetErrorControl match {
            case SomeMut(v) =>
                alignedSizeToByte(16L, otherOffset + size_0_otherOffset)
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775784L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775784L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 0L
        val size_0_otherOffset = 0L
        val size_1_offset = this.packetErrorControl match {
            case SomeMut(v) =>
                alignedSizeToByte(16L, offset + size_0_offset)
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.packetErrorControl match {
            case SomeMut(v) =>
                alignedSizeToByte(16L, otherOffset + size_0_otherOffset)
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775784L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775784L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 0L
        val size_0_otherOffset = 0L
        val size_1_offset = this.packetErrorControl match {
            case SomeMut(v) =>
                alignedSizeToByte(16L, offset + size_0_offset)
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.packetErrorControl match {
            case SomeMut(v) =>
                alignedSizeToByte(16L, otherOffset + size_0_otherOffset)
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_DATANOSECONDARYHEADER: Int = 4297 /*(WITH COMPONENTS {packetErrorControl PRESENT}) */
@inline @cCode.inline val ERR_TC_DATANOSECONDARYHEADER_DATA: Int = 4284 /* */
@inline @cCode.inline val ERR_TC_DATANOSECONDARYHEADER_PACKETERRORCONTROL_2: Int = 4294 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_DATANOSECONDARYHEADER: Int = 4300 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_DATANOSECONDARYHEADER_DATA_2: Int = 4287 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_DATANOSECONDARYHEADER_PACKETERRORCONTROL: Int = 4292 /*  */
@inline @cCode.inline val TTC_DataNoSecondaryHeader_REQUIRED_BYTES_FOR_ACN_ENCODING = 3
@inline @cCode.inline val TTC_DataNoSecondaryHeader_REQUIRED_BITS_FOR_ACN_ENCODING = 23

@inline @cCode.inline val ERR_ACN_DECODE_TC_DATANOSECONDARYHEADER: Int = 4301 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_DATANOSECONDARYHEADER_DATA_2: Int = 4288 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_DATANOSECONDARYHEADER_PACKETERRORCONTROL: Int = 4293 /*  */
/*-- TAcknowledgementFlags --------------------------------------------*/

case class TAcknowledgementFlags (
    ackExecutionCompletion: Boolean, 
    ackExecutionProgress: Boolean, 
    ackExecutionStart: Boolean, 
    ackAcceptance: Boolean
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775803L))
        val size_0 = 1L
        val size_1 = 1L
        val size_2 = 1L
        val size_3 = 1L
        size_0 + size_1 + size_2 + size_3
    }.ensuring { (res: Long) => 
        res == 4L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775803L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775803L))
        val size_0_offset = 1L
        val size_0_otherOffset = 1L
        val size_1_offset = 1L
        val size_1_otherOffset = 1L
        val size_2_offset = 1L
        val size_2_otherOffset = 1L
        val size_3_offset = 1L
        val size_3_otherOffset = 1L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775803L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775803L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 1L
        val size_0_otherOffset = 1L
        val size_1_offset = 1L
        val size_1_otherOffset = 1L
        val size_2_offset = 1L
        val size_2_otherOffset = 1L
        val size_3_offset = 1L
        val size_3_otherOffset = 1L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775803L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775803L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 1L
        val size_0_otherOffset = 1L
        val size_1_offset = 1L
        val size_1_otherOffset = 1L
        val size_2_offset = 1L
        val size_2_otherOffset = 1L
        val size_3_offset = 1L
        val size_3_otherOffset = 1L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775803L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775803L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 1L
        val size_0_otherOffset = 1L
        val size_1_offset = 1L
        val size_1_otherOffset = 1L
        val size_2_offset = 1L
        val size_2_otherOffset = 1L
        val size_3_offset = 1L
        val size_3_otherOffset = 1L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_ACKNOWLEDGEMENTFLAGS: Int = 4479 /* */
@inline @cCode.inline val ERR_ACKNOWLEDGEMENTFLAGS_ACKEXECUTIONCOMPLETION: Int = 4459 /* */
@inline @cCode.inline val ERR_ACKNOWLEDGEMENTFLAGS_ACKEXECUTIONPROGRESS: Int = 4464 /* */
@inline @cCode.inline val ERR_ACKNOWLEDGEMENTFLAGS_ACKEXECUTIONSTART: Int = 4469 /* */
@inline @cCode.inline val ERR_ACKNOWLEDGEMENTFLAGS_ACKACCEPTANCE: Int = 4474 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_ACKNOWLEDGEMENTFLAGS: Int = 4482 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_ACKNOWLEDGEMENTFLAGS_ACKEXECUTIONCOMPLETION: Int = 4462 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_ACKNOWLEDGEMENTFLAGS_ACKEXECUTIONPROGRESS: Int = 4467 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_ACKNOWLEDGEMENTFLAGS_ACKEXECUTIONSTART: Int = 4472 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_ACKNOWLEDGEMENTFLAGS_ACKACCEPTANCE: Int = 4477 /*  */
@inline @cCode.inline val TAcknowledgementFlags_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TAcknowledgementFlags_REQUIRED_BITS_FOR_ACN_ENCODING = 4

@inline @cCode.inline val ERR_ACN_DECODE_ACKNOWLEDGEMENTFLAGS: Int = 4483 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_ACKNOWLEDGEMENTFLAGS_ACKEXECUTIONCOMPLETION: Int = 4463 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_ACKNOWLEDGEMENTFLAGS_ACKEXECUTIONPROGRESS: Int = 4468 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_ACKNOWLEDGEMENTFLAGS_ACKEXECUTIONSTART: Int = 4473 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_ACKNOWLEDGEMENTFLAGS_ACKACCEPTANCE: Int = 4478 /*  */
/*-- TTC_PacketSecondaryHeader --------------------------------------------*/

case class TTC_PacketSecondaryHeader (
    tcPacketPusVersionNumber: NullType, 
    acknowledgementFlags: TAcknowledgementFlags, 
    source_ID: TApplicationProcessUser_ID
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775787L))
        val size_0 = 0L
        val size_1 = this.acknowledgementFlags.size(offset + size_0)
        val size_2 = 16L
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        res == 20L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775787L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775787L))
        val size_0_offset = 0L
        val size_0_otherOffset = 0L
        val size_1_offset = this.acknowledgementFlags.size(offset + size_0_offset)
        val size_1_otherOffset = this.acknowledgementFlags.size(otherOffset + size_0_otherOffset)
        this.acknowledgementFlags.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775787L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775787L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 0L
        val size_0_otherOffset = 0L
        val size_1_offset = this.acknowledgementFlags.size(offset + size_0_offset)
        val size_1_otherOffset = this.acknowledgementFlags.size(otherOffset + size_0_otherOffset)
        this.acknowledgementFlags.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775787L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775787L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 0L
        val size_0_otherOffset = 0L
        val size_1_offset = this.acknowledgementFlags.size(offset + size_0_offset)
        val size_1_otherOffset = this.acknowledgementFlags.size(otherOffset + size_0_otherOffset)
        this.acknowledgementFlags.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775787L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775787L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 0L
        val size_0_otherOffset = 0L
        val size_1_offset = this.acknowledgementFlags.size(offset + size_0_offset)
        val size_1_otherOffset = this.acknowledgementFlags.size(otherOffset + size_0_otherOffset)
        this.acknowledgementFlags.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_PACKETSECONDARYHEADER: Int = 4454 /* */
@inline @cCode.inline val ERR_TC_PACKETSECONDARYHEADER_ACKNOWLEDGEMENTFLAGS_2: Int = 4439 /* */
@inline @cCode.inline val ERR_TC_PACKETSECONDARYHEADER_SOURCE_ID_2: Int = 4449 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_PACKETSECONDARYHEADER: Int = 4457 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_PACKETSECONDARYHEADER_ACKNOWLEDGEMENTFLAGS_2: Int = 4442 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_PACKETSECONDARYHEADER_SOURCE_ID_2: Int = 4452 /*  */
@inline @cCode.inline val TTC_PacketSecondaryHeader_REQUIRED_BYTES_FOR_ACN_ENCODING = 3
@inline @cCode.inline val TTC_PacketSecondaryHeader_REQUIRED_BITS_FOR_ACN_ENCODING = 20

@inline @cCode.inline val ERR_ACN_DECODE_TC_PACKETSECONDARYHEADER: Int = 4458 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_PACKETSECONDARYHEADER_ACKNOWLEDGEMENTFLAGS_2: Int = 4443 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_PACKETSECONDARYHEADER_SOURCE_ID_2: Int = 4453 /*  */
/*-- TTC_DataWithSecondaryHeader --------------------------------------------*/

case class TTC_DataWithSecondaryHeader (
    secondaryHeader: TTC_PacketSecondaryHeader, 
    data: TTC_Payload, 
    packetErrorControl: OptionMut[TPacketErrorControl]
) {
    require(this.packetErrorControl.isDefined)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775733L))
        val size_1_0 = 0L
        val size_1_1 = this.secondaryHeader.acknowledgementFlags.size(offset + size_1_0)
        val size_1_2 = 8L
        val size_1_3 = 8L
        val size_1_4 = 16L
        val size_0 = size_1_0 + size_1_1 + size_1_2 + size_1_3 + size_1_4
        val size_1 = this.data match {
            case TTC_Payload.tc_255_255_PRESENT(tc_255_255) =>
                alignedSizeToByte(8L, offset + size_0)
        }
        val size_2 = this.packetErrorControl match {
            case SomeMut(v) =>
                alignedSizeToByte(16L, offset + size_0 + size_1)
            case NoneMut() =>
                0L
        }
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 74L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775733L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775733L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_1_0_offset = 0L
        val size_1_1_offset = this.secondaryHeader.acknowledgementFlags.size(offset + size_1_0_offset)
        val size_1_2_offset = 8L
        val size_1_3_offset = 8L
        val size_1_4_offset = 16L
        val size_0_offset = size_1_0_offset + size_1_1_offset + size_1_2_offset + size_1_3_offset + size_1_4_offset
        val size_1_0_otherOffset = 0L
        val size_1_1_otherOffset = this.secondaryHeader.acknowledgementFlags.size(otherOffset + size_1_0_otherOffset)
        val size_1_2_otherOffset = 8L
        val size_1_3_otherOffset = 8L
        val size_1_4_otherOffset = 16L
        val size_0_otherOffset = size_1_0_otherOffset + size_1_1_otherOffset + size_1_2_otherOffset + size_1_3_otherOffset + size_1_4_otherOffset
        this.secondaryHeader.sizeLemmaNextByte(offset, otherOffset)
        val size_1_offset = this.data match {
            case TTC_Payload.tc_255_255_PRESENT(tc_255_255) =>
                alignedSizeToByte(8L, offset + size_0_offset)
        }
        val size_1_otherOffset = this.data match {
            case TTC_Payload.tc_255_255_PRESENT(tc_255_255) =>
                alignedSizeToByte(8L, otherOffset + size_0_otherOffset)
        }
        this.data.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = this.packetErrorControl match {
            case SomeMut(v) =>
                alignedSizeToByte(16L, offset + size_0_offset + size_1_offset)
            case NoneMut() =>
                0L
        }
        val size_2_otherOffset = this.packetErrorControl match {
            case SomeMut(v) =>
                alignedSizeToByte(16L, otherOffset + size_0_otherOffset + size_1_otherOffset)
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775733L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775733L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_1_0_offset = 0L
        val size_1_1_offset = this.secondaryHeader.acknowledgementFlags.size(offset + size_1_0_offset)
        val size_1_2_offset = 8L
        val size_1_3_offset = 8L
        val size_1_4_offset = 16L
        val size_0_offset = size_1_0_offset + size_1_1_offset + size_1_2_offset + size_1_3_offset + size_1_4_offset
        val size_1_0_otherOffset = 0L
        val size_1_1_otherOffset = this.secondaryHeader.acknowledgementFlags.size(otherOffset + size_1_0_otherOffset)
        val size_1_2_otherOffset = 8L
        val size_1_3_otherOffset = 8L
        val size_1_4_otherOffset = 16L
        val size_0_otherOffset = size_1_0_otherOffset + size_1_1_otherOffset + size_1_2_otherOffset + size_1_3_otherOffset + size_1_4_otherOffset
        this.secondaryHeader.sizeLemmaNextWord(offset, otherOffset)
        val size_1_offset = this.data match {
            case TTC_Payload.tc_255_255_PRESENT(tc_255_255) =>
                alignedSizeToByte(8L, offset + size_0_offset)
        }
        val size_1_otherOffset = this.data match {
            case TTC_Payload.tc_255_255_PRESENT(tc_255_255) =>
                alignedSizeToByte(8L, otherOffset + size_0_otherOffset)
        }
        this.data.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = this.packetErrorControl match {
            case SomeMut(v) =>
                alignedSizeToByte(16L, offset + size_0_offset + size_1_offset)
            case NoneMut() =>
                0L
        }
        val size_2_otherOffset = this.packetErrorControl match {
            case SomeMut(v) =>
                alignedSizeToByte(16L, otherOffset + size_0_otherOffset + size_1_otherOffset)
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775733L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775733L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_1_0_offset = 0L
        val size_1_1_offset = this.secondaryHeader.acknowledgementFlags.size(offset + size_1_0_offset)
        val size_1_2_offset = 8L
        val size_1_3_offset = 8L
        val size_1_4_offset = 16L
        val size_0_offset = size_1_0_offset + size_1_1_offset + size_1_2_offset + size_1_3_offset + size_1_4_offset
        val size_1_0_otherOffset = 0L
        val size_1_1_otherOffset = this.secondaryHeader.acknowledgementFlags.size(otherOffset + size_1_0_otherOffset)
        val size_1_2_otherOffset = 8L
        val size_1_3_otherOffset = 8L
        val size_1_4_otherOffset = 16L
        val size_0_otherOffset = size_1_0_otherOffset + size_1_1_otherOffset + size_1_2_otherOffset + size_1_3_otherOffset + size_1_4_otherOffset
        this.secondaryHeader.sizeLemmaNextDWord(offset, otherOffset)
        val size_1_offset = this.data match {
            case TTC_Payload.tc_255_255_PRESENT(tc_255_255) =>
                alignedSizeToByte(8L, offset + size_0_offset)
        }
        val size_1_otherOffset = this.data match {
            case TTC_Payload.tc_255_255_PRESENT(tc_255_255) =>
                alignedSizeToByte(8L, otherOffset + size_0_otherOffset)
        }
        this.data.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = this.packetErrorControl match {
            case SomeMut(v) =>
                alignedSizeToByte(16L, offset + size_0_offset + size_1_offset)
            case NoneMut() =>
                0L
        }
        val size_2_otherOffset = this.packetErrorControl match {
            case SomeMut(v) =>
                alignedSizeToByte(16L, otherOffset + size_0_otherOffset + size_1_otherOffset)
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_DATAWITHSECONDARYHEADER: Int = 4379 /*(WITH COMPONENTS {packetErrorControl PRESENT}) */
@inline @cCode.inline val ERR_TC_DATAWITHSECONDARYHEADER_SECONDARYHEADER_2: Int = 4355 /* */
@inline @cCode.inline val ERR_TC_DATAWITHSECONDARYHEADER_DATA_2: Int = 4368 /* */
@inline @cCode.inline val ERR_TC_DATAWITHSECONDARYHEADER_PACKETERRORCONTROL_2: Int = 4376 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_DATAWITHSECONDARYHEADER: Int = 4382 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_DATAWITHSECONDARYHEADER_SECONDARYHEADER: Int = 4353 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_DATAWITHSECONDARYHEADER_SECONDARYHEADER_ACKNOWLEDGEMENTFLAGS_2: Int = 4334 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_DATAWITHSECONDARYHEADER_SECONDARYHEADER_SERVICETYPE_ID_UNINITIALIZED: Int = 4383 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_DATAWITHSECONDARYHEADER_SECONDARYHEADER_SERVICETYPE_ID: Int = 4336 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_DATAWITHSECONDARYHEADER_SECONDARYHEADER_MESSAGESUBTYPE_ID_UNINITIALIZED: Int = 4384 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_DATAWITHSECONDARYHEADER_SECONDARYHEADER_MESSAGESUBTYPE_ID: Int = 4338 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_DATAWITHSECONDARYHEADER_SECONDARYHEADER_SOURCE_ID_2: Int = 4348 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_DATAWITHSECONDARYHEADER_DATA: Int = 4366 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_DATAWITHSECONDARYHEADER_DATA_TC_255_255: Int = 4361 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_DATAWITHSECONDARYHEADER_PACKETERRORCONTROL: Int = 4374 /*  */
@inline @cCode.inline val TTC_DataWithSecondaryHeader_REQUIRED_BYTES_FOR_ACN_ENCODING = 10
@inline @cCode.inline val TTC_DataWithSecondaryHeader_REQUIRED_BITS_FOR_ACN_ENCODING = 74

@inline @cCode.inline val ERR_ACN_DECODE_TC_DATAWITHSECONDARYHEADER: Int = 4385 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_DATAWITHSECONDARYHEADER_SECONDARYHEADER: Int = 4354 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_DATAWITHSECONDARYHEADER_SECONDARYHEADER_ACKNOWLEDGEMENTFLAGS_2: Int = 4335 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_DATAWITHSECONDARYHEADER_SECONDARYHEADER_SERVICETYPE_ID: Int = 4337 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_DATAWITHSECONDARYHEADER_SECONDARYHEADER_MESSAGESUBTYPE_ID: Int = 4339 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_DATAWITHSECONDARYHEADER_SECONDARYHEADER_SOURCE_ID_2: Int = 4349 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_DATAWITHSECONDARYHEADER_DATA: Int = 4367 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_DATAWITHSECONDARYHEADER_DATA_TC_255_255: Int = 4362 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_DATAWITHSECONDARYHEADER_PACKETERRORCONTROL: Int = 4375 /*  */
/*-- TTC_PacketDataField --------------------------------------------*/

enum TTC_PacketDataField:
    case TC_PacketDataField_dataWithSecondaryHeader_PRESENT(dataWithSecondaryHeader: TTC_DataWithSecondaryHeader)
    case TC_PacketDataField_dataNoSecondaryHeader_PRESENT(dataNoSecondaryHeader: TTC_DataNoSecondaryHeader)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775733L))
        this match {
            case TTC_PacketDataField.TC_PacketDataField_dataWithSecondaryHeader_PRESENT(dataWithSecondaryHeader) =>
                val size_2_0 = 0L
                val size_2_1 = dataWithSecondaryHeader.secondaryHeader.acknowledgementFlags.size(offset + size_2_0)
                val size_2_2 = 8L
                val size_2_3 = 8L
                val size_2_4 = 16L
                val size_1_0 = size_2_0 + size_2_1 + size_2_2 + size_2_3 + size_2_4
                val size_1_1 = dataWithSecondaryHeader.data match {
                    case TTC_Payload.tc_255_255_PRESENT(tc_255_255) =>
                        alignedSizeToByte(8L, offset + size_1_0)
                }
                val size_1_2 = dataWithSecondaryHeader.packetErrorControl match {
                    case SomeMut(v) =>
                        alignedSizeToByte(16L, offset + size_1_0 + size_1_1)
                    case NoneMut() =>
                        0L
                }
                size_1_0 + size_1_1 + size_1_2
            case TTC_PacketDataField.TC_PacketDataField_dataNoSecondaryHeader_PRESENT(dataNoSecondaryHeader) =>
                val size_1_0 = 0L
                val size_1_1 = dataNoSecondaryHeader.packetErrorControl match {
                    case SomeMut(v) =>
                        alignedSizeToByte(16L, offset + size_1_0)
                    case NoneMut() =>
                        0L
                }
                size_1_0 + size_1_1
        }
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 74L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775733L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775733L))
        require((offset % 8L) == (otherOffset % 8L))
        this match {
            case TTC_PacketDataField.TC_PacketDataField_dataWithSecondaryHeader_PRESENT(dataWithSecondaryHeader) =>
                dataWithSecondaryHeader.sizeLemmaNextByte(offset, otherOffset)
            case TTC_PacketDataField.TC_PacketDataField_dataNoSecondaryHeader_PRESENT(dataNoSecondaryHeader) =>
                dataNoSecondaryHeader.sizeLemmaNextByte(offset, otherOffset)
        }
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775733L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775733L))
        require((offset % 16L) == (otherOffset % 16L))
        this match {
            case TTC_PacketDataField.TC_PacketDataField_dataWithSecondaryHeader_PRESENT(dataWithSecondaryHeader) =>
                dataWithSecondaryHeader.sizeLemmaNextWord(offset, otherOffset)
            case TTC_PacketDataField.TC_PacketDataField_dataNoSecondaryHeader_PRESENT(dataNoSecondaryHeader) =>
                dataNoSecondaryHeader.sizeLemmaNextWord(offset, otherOffset)
        }
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775733L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775733L))
        require((offset % 32L) == (otherOffset % 32L))
        this match {
            case TTC_PacketDataField.TC_PacketDataField_dataWithSecondaryHeader_PRESENT(dataWithSecondaryHeader) =>
                dataWithSecondaryHeader.sizeLemmaNextDWord(offset, otherOffset)
            case TTC_PacketDataField.TC_PacketDataField_dataNoSecondaryHeader_PRESENT(dataNoSecondaryHeader) =>
                dataNoSecondaryHeader.sizeLemmaNextDWord(offset, otherOffset)
        }
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

@inline @cCode.inline val ERR_TC_PACKETDATAFIELD: Int = 4275 /* */
@inline @cCode.inline val ERR_TC_PACKETDATAFIELD_DATAWITHSECONDARYHEADER_2: Int = 4247 /* */
@inline @cCode.inline val ERR_TC_PACKETDATAFIELD_DATANOSECONDARYHEADER_2: Int = 4272 /* */

 
type TTC_PacketType = NullType


 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_PACKETTYPE: Int = 4486 /*  */
@inline @cCode.inline val TTC_PacketType_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TTC_PacketType_REQUIRED_BITS_FOR_ACN_ENCODING = 1

@inline @cCode.inline val ERR_ACN_DECODE_TC_PACKETTYPE: Int = 4487 /*  */
/*-- TTC_Packet_ID --------------------------------------------*/

case class TTC_Packet_ID (
    packetType: TTC_PacketType, 
    applicationProcess_ID: TApplicationProcess_ID
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775795L))
        val size_0 = 1L
        val size_1 = 11L
        size_0 + size_1
    }.ensuring { (res: Long) => 
        res == 12L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775795L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775795L))
        val size_0_offset = 1L
        val size_0_otherOffset = 1L
        val size_1_offset = 11L
        val size_1_otherOffset = 11L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775795L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775795L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 1L
        val size_0_otherOffset = 1L
        val size_1_offset = 11L
        val size_1_otherOffset = 11L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775795L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775795L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 1L
        val size_0_otherOffset = 1L
        val size_1_offset = 11L
        val size_1_otherOffset = 11L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775795L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775795L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 1L
        val size_0_otherOffset = 1L
        val size_1_offset = 11L
        val size_1_otherOffset = 11L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_PACKET_ID: Int = 4405 /* */
@inline @cCode.inline val ERR_TC_PACKET_ID_PACKETTYPE: Int = 4390 /* */
@inline @cCode.inline val ERR_TC_PACKET_ID_APPLICATIONPROCESS_ID_2: Int = 4400 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_PACKET_ID: Int = 4408 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_PACKET_ID_PACKETTYPE_2: Int = 4393 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_PACKET_ID_APPLICATIONPROCESS_ID_2: Int = 4403 /*  */
@inline @cCode.inline val TTC_Packet_ID_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TTC_Packet_ID_REQUIRED_BITS_FOR_ACN_ENCODING = 12

@inline @cCode.inline val ERR_ACN_DECODE_TC_PACKET_ID: Int = 4409 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_PACKET_ID_PACKETTYPE_2: Int = 4394 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_PACKET_ID_APPLICATIONPROCESS_ID_2: Int = 4404 /*  */
/*-- TTC_CCSDS_Packet --------------------------------------------*/

case class TTC_CCSDS_Packet (
    packetVersionNumber: TPacketVersionNumberValue, 
    packet_ID: TTC_Packet_ID, 
    packetSequenceControl: TPacketSequenceControl, 
    packetDataLength: TPacketDataLength, 
    packetDataField: TTC_PacketDataField
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775685L))
        val size_0 = 3L
        val size_1_1 = 1L
        val size_1_2 = 1L
        val size_1_3 = 11L
        val size_1 = size_1_1 + size_1_2 + size_1_3
        val size_2 = this.packetSequenceControl.size(offset + size_0 + size_1)
        val size_3 = 16L
        val size_4 = this.packetDataField match {
            case TTC_PacketDataField.TC_PacketDataField_dataWithSecondaryHeader_PRESENT(dataWithSecondaryHeader) =>
                val size_3_4 = 0L
                val size_3_5 = dataWithSecondaryHeader.secondaryHeader.acknowledgementFlags.size(offset + size_0 + size_1 + size_2 + size_3 + size_3_4)
                val size_3_6 = 8L
                val size_3_7 = 8L
                val size_3_8 = 16L
                val size_2_4 = size_3_4 + size_3_5 + size_3_6 + size_3_7 + size_3_8
                val size_2_5 = dataWithSecondaryHeader.data match {
                    case TTC_Payload.tc_255_255_PRESENT(tc_255_255) =>
                        alignedSizeToByte(8L, offset + size_0 + size_1 + size_2 + size_3 + size_2_4)
                }
                val size_2_6 = dataWithSecondaryHeader.packetErrorControl match {
                    case SomeMut(v) =>
                        alignedSizeToByte(16L, offset + size_0 + size_1 + size_2 + size_3 + size_2_4 + size_2_5)
                    case NoneMut() =>
                        0L
                }
                size_2_4 + size_2_5 + size_2_6
            case TTC_PacketDataField.TC_PacketDataField_dataNoSecondaryHeader_PRESENT(dataNoSecondaryHeader) =>
                val size_2_4 = 0L
                val size_2_5 = dataNoSecondaryHeader.packetErrorControl match {
                    case SomeMut(v) =>
                        alignedSizeToByte(16L, offset + size_0 + size_1 + size_2 + size_3 + size_2_4)
                    case NoneMut() =>
                        0L
                }
                size_2_4 + size_2_5
        }
        size_0 + size_1 + size_2 + size_3 + size_4
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 122L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775685L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775685L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 3L
        val size_0_otherOffset = 3L
        val size_1_1_offset = 1L
        val size_1_2_offset = 1L
        val size_1_3_offset = 11L
        val size_1_offset = size_1_1_offset + size_1_2_offset + size_1_3_offset
        val size_1_1_otherOffset = 1L
        val size_1_2_otherOffset = 1L
        val size_1_3_otherOffset = 11L
        val size_1_otherOffset = size_1_1_otherOffset + size_1_2_otherOffset + size_1_3_otherOffset
        this.packet_ID.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = this.packetSequenceControl.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.packetSequenceControl.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.packetSequenceControl.sizeLemmaNextByte(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        val size_3_offset = 16L
        val size_3_otherOffset = 16L
        val size_4_offset = this.packetDataField match {
            case TTC_PacketDataField.TC_PacketDataField_dataWithSecondaryHeader_PRESENT(dataWithSecondaryHeader) =>
                val size_3_4 = 0L
                val size_3_5 = dataWithSecondaryHeader.secondaryHeader.acknowledgementFlags.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_3_4)
                val size_3_6 = 8L
                val size_3_7 = 8L
                val size_3_8 = 16L
                val size_2_4 = size_3_4 + size_3_5 + size_3_6 + size_3_7 + size_3_8
                val size_2_5 = dataWithSecondaryHeader.data match {
                    case TTC_Payload.tc_255_255_PRESENT(tc_255_255) =>
                        alignedSizeToByte(8L, offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_2_4)
                }
                val size_2_6 = dataWithSecondaryHeader.packetErrorControl match {
                    case SomeMut(v) =>
                        alignedSizeToByte(16L, offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_2_4 + size_2_5)
                    case NoneMut() =>
                        0L
                }
                size_2_4 + size_2_5 + size_2_6
            case TTC_PacketDataField.TC_PacketDataField_dataNoSecondaryHeader_PRESENT(dataNoSecondaryHeader) =>
                val size_2_4 = 0L
                val size_2_5 = dataNoSecondaryHeader.packetErrorControl match {
                    case SomeMut(v) =>
                        alignedSizeToByte(16L, offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_2_4)
                    case NoneMut() =>
                        0L
                }
                size_2_4 + size_2_5
        }
        val size_4_otherOffset = this.packetDataField match {
            case TTC_PacketDataField.TC_PacketDataField_dataWithSecondaryHeader_PRESENT(dataWithSecondaryHeader) =>
                val size_3_4 = 0L
                val size_3_5 = dataWithSecondaryHeader.secondaryHeader.acknowledgementFlags.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_3_4)
                val size_3_6 = 8L
                val size_3_7 = 8L
                val size_3_8 = 16L
                val size_2_4 = size_3_4 + size_3_5 + size_3_6 + size_3_7 + size_3_8
                val size_2_5 = dataWithSecondaryHeader.data match {
                    case TTC_Payload.tc_255_255_PRESENT(tc_255_255) =>
                        alignedSizeToByte(8L, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_2_4)
                }
                val size_2_6 = dataWithSecondaryHeader.packetErrorControl match {
                    case SomeMut(v) =>
                        alignedSizeToByte(16L, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_2_4 + size_2_5)
                    case NoneMut() =>
                        0L
                }
                size_2_4 + size_2_5 + size_2_6
            case TTC_PacketDataField.TC_PacketDataField_dataNoSecondaryHeader_PRESENT(dataNoSecondaryHeader) =>
                val size_2_4 = 0L
                val size_2_5 = dataNoSecondaryHeader.packetErrorControl match {
                    case SomeMut(v) =>
                        alignedSizeToByte(16L, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_2_4)
                    case NoneMut() =>
                        0L
                }
                size_2_4 + size_2_5
        }
        this.packetDataField.sizeLemmaNextByte(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775685L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775685L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 3L
        val size_0_otherOffset = 3L
        val size_1_1_offset = 1L
        val size_1_2_offset = 1L
        val size_1_3_offset = 11L
        val size_1_offset = size_1_1_offset + size_1_2_offset + size_1_3_offset
        val size_1_1_otherOffset = 1L
        val size_1_2_otherOffset = 1L
        val size_1_3_otherOffset = 11L
        val size_1_otherOffset = size_1_1_otherOffset + size_1_2_otherOffset + size_1_3_otherOffset
        this.packet_ID.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = this.packetSequenceControl.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.packetSequenceControl.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.packetSequenceControl.sizeLemmaNextWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        val size_3_offset = 16L
        val size_3_otherOffset = 16L
        val size_4_offset = this.packetDataField match {
            case TTC_PacketDataField.TC_PacketDataField_dataWithSecondaryHeader_PRESENT(dataWithSecondaryHeader) =>
                val size_3_4 = 0L
                val size_3_5 = dataWithSecondaryHeader.secondaryHeader.acknowledgementFlags.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_3_4)
                val size_3_6 = 8L
                val size_3_7 = 8L
                val size_3_8 = 16L
                val size_2_4 = size_3_4 + size_3_5 + size_3_6 + size_3_7 + size_3_8
                val size_2_5 = dataWithSecondaryHeader.data match {
                    case TTC_Payload.tc_255_255_PRESENT(tc_255_255) =>
                        alignedSizeToByte(8L, offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_2_4)
                }
                val size_2_6 = dataWithSecondaryHeader.packetErrorControl match {
                    case SomeMut(v) =>
                        alignedSizeToByte(16L, offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_2_4 + size_2_5)
                    case NoneMut() =>
                        0L
                }
                size_2_4 + size_2_5 + size_2_6
            case TTC_PacketDataField.TC_PacketDataField_dataNoSecondaryHeader_PRESENT(dataNoSecondaryHeader) =>
                val size_2_4 = 0L
                val size_2_5 = dataNoSecondaryHeader.packetErrorControl match {
                    case SomeMut(v) =>
                        alignedSizeToByte(16L, offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_2_4)
                    case NoneMut() =>
                        0L
                }
                size_2_4 + size_2_5
        }
        val size_4_otherOffset = this.packetDataField match {
            case TTC_PacketDataField.TC_PacketDataField_dataWithSecondaryHeader_PRESENT(dataWithSecondaryHeader) =>
                val size_3_4 = 0L
                val size_3_5 = dataWithSecondaryHeader.secondaryHeader.acknowledgementFlags.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_3_4)
                val size_3_6 = 8L
                val size_3_7 = 8L
                val size_3_8 = 16L
                val size_2_4 = size_3_4 + size_3_5 + size_3_6 + size_3_7 + size_3_8
                val size_2_5 = dataWithSecondaryHeader.data match {
                    case TTC_Payload.tc_255_255_PRESENT(tc_255_255) =>
                        alignedSizeToByte(8L, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_2_4)
                }
                val size_2_6 = dataWithSecondaryHeader.packetErrorControl match {
                    case SomeMut(v) =>
                        alignedSizeToByte(16L, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_2_4 + size_2_5)
                    case NoneMut() =>
                        0L
                }
                size_2_4 + size_2_5 + size_2_6
            case TTC_PacketDataField.TC_PacketDataField_dataNoSecondaryHeader_PRESENT(dataNoSecondaryHeader) =>
                val size_2_4 = 0L
                val size_2_5 = dataNoSecondaryHeader.packetErrorControl match {
                    case SomeMut(v) =>
                        alignedSizeToByte(16L, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_2_4)
                    case NoneMut() =>
                        0L
                }
                size_2_4 + size_2_5
        }
        this.packetDataField.sizeLemmaNextWord(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775685L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775685L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 3L
        val size_0_otherOffset = 3L
        val size_1_1_offset = 1L
        val size_1_2_offset = 1L
        val size_1_3_offset = 11L
        val size_1_offset = size_1_1_offset + size_1_2_offset + size_1_3_offset
        val size_1_1_otherOffset = 1L
        val size_1_2_otherOffset = 1L
        val size_1_3_otherOffset = 11L
        val size_1_otherOffset = size_1_1_otherOffset + size_1_2_otherOffset + size_1_3_otherOffset
        this.packet_ID.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = this.packetSequenceControl.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.packetSequenceControl.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.packetSequenceControl.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        val size_3_offset = 16L
        val size_3_otherOffset = 16L
        val size_4_offset = this.packetDataField match {
            case TTC_PacketDataField.TC_PacketDataField_dataWithSecondaryHeader_PRESENT(dataWithSecondaryHeader) =>
                val size_3_4 = 0L
                val size_3_5 = dataWithSecondaryHeader.secondaryHeader.acknowledgementFlags.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_3_4)
                val size_3_6 = 8L
                val size_3_7 = 8L
                val size_3_8 = 16L
                val size_2_4 = size_3_4 + size_3_5 + size_3_6 + size_3_7 + size_3_8
                val size_2_5 = dataWithSecondaryHeader.data match {
                    case TTC_Payload.tc_255_255_PRESENT(tc_255_255) =>
                        alignedSizeToByte(8L, offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_2_4)
                }
                val size_2_6 = dataWithSecondaryHeader.packetErrorControl match {
                    case SomeMut(v) =>
                        alignedSizeToByte(16L, offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_2_4 + size_2_5)
                    case NoneMut() =>
                        0L
                }
                size_2_4 + size_2_5 + size_2_6
            case TTC_PacketDataField.TC_PacketDataField_dataNoSecondaryHeader_PRESENT(dataNoSecondaryHeader) =>
                val size_2_4 = 0L
                val size_2_5 = dataNoSecondaryHeader.packetErrorControl match {
                    case SomeMut(v) =>
                        alignedSizeToByte(16L, offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_2_4)
                    case NoneMut() =>
                        0L
                }
                size_2_4 + size_2_5
        }
        val size_4_otherOffset = this.packetDataField match {
            case TTC_PacketDataField.TC_PacketDataField_dataWithSecondaryHeader_PRESENT(dataWithSecondaryHeader) =>
                val size_3_4 = 0L
                val size_3_5 = dataWithSecondaryHeader.secondaryHeader.acknowledgementFlags.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_3_4)
                val size_3_6 = 8L
                val size_3_7 = 8L
                val size_3_8 = 16L
                val size_2_4 = size_3_4 + size_3_5 + size_3_6 + size_3_7 + size_3_8
                val size_2_5 = dataWithSecondaryHeader.data match {
                    case TTC_Payload.tc_255_255_PRESENT(tc_255_255) =>
                        alignedSizeToByte(8L, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_2_4)
                }
                val size_2_6 = dataWithSecondaryHeader.packetErrorControl match {
                    case SomeMut(v) =>
                        alignedSizeToByte(16L, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_2_4 + size_2_5)
                    case NoneMut() =>
                        0L
                }
                size_2_4 + size_2_5 + size_2_6
            case TTC_PacketDataField.TC_PacketDataField_dataNoSecondaryHeader_PRESENT(dataNoSecondaryHeader) =>
                val size_2_4 = 0L
                val size_2_5 = dataNoSecondaryHeader.packetErrorControl match {
                    case SomeMut(v) =>
                        alignedSizeToByte(16L, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_2_4)
                    case NoneMut() =>
                        0L
                }
                size_2_4 + size_2_5
        }
        this.packetDataField.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_CCSDS_PACKET: Int = 4157 /* */
@inline @cCode.inline val ERR_TC_CCSDS_PACKET_PACKETVERSIONNUMBER: Int = 3976 /* */
@inline @cCode.inline val ERR_TC_CCSDS_PACKET_PACKET_ID_2: Int = 4007 /* */
@inline @cCode.inline val ERR_TC_CCSDS_PACKET_PACKETSEQUENCECONTROL_2: Int = 4024 /* */
@inline @cCode.inline val ERR_TC_CCSDS_PACKET_PACKETDATALENGTH_2: Int = 4034 /* */
@inline @cCode.inline val ERR_TC_CCSDS_PACKET_PACKETDATAFIELD_2: Int = 4154 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_CCSDS_PACKET: Int = 4160 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_CCSDS_PACKET_PACKETVERSIONNUMBER_2: Int = 3979 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_CCSDS_PACKET_PACKET_ID: Int = 4005 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_CCSDS_PACKET_PACKET_ID_PACKETTYPE_2: Int = 3988 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_CCSDS_PACKET_PACKET_ID_SECONDARYHEADERFLAG_UNINITIALIZED: Int = 4161 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_CCSDS_PACKET_PACKET_ID_SECONDARYHEADERFLAG: Int = 3990 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_CCSDS_PACKET_PACKET_ID_APPLICATIONPROCESS_ID_2: Int = 4000 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_CCSDS_PACKET_PACKETSEQUENCECONTROL_2: Int = 4027 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_CCSDS_PACKET_PACKETDATALENGTH_2: Int = 4037 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_CCSDS_PACKET_PACKETDATAFIELD: Int = 4152 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER: Int = 4119 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER_SECONDARYHEADER: Int = 4090 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER_SECONDARYHEADER_ACKNOWLEDGEMENTFLAGS_2: Int = 4071 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER_SECONDARYHEADER_SERVICETYPE_ID_UNINITIALIZED: Int = 4162 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER_SECONDARYHEADER_SERVICETYPE_ID: Int = 4073 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER_SECONDARYHEADER_MESSAGESUBTYPE_ID_UNINITIALIZED: Int = 4163 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER_SECONDARYHEADER_MESSAGESUBTYPE_ID: Int = 4075 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER_SECONDARYHEADER_SOURCE_ID_2: Int = 4085 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER_DATA: Int = 4103 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER_DATA_TC_255_255: Int = 4098 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER_PACKETERRORCONTROL: Int = 4111 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_CCSDS_PACKET_PACKETDATAFIELD_DATANOSECONDARYHEADER: Int = 4144 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_CCSDS_PACKET_PACKETDATAFIELD_DATANOSECONDARYHEADER_DATA_2: Int = 4131 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_CCSDS_PACKET_PACKETDATAFIELD_DATANOSECONDARYHEADER_PACKETERRORCONTROL: Int = 4136 /*  */
@inline @cCode.inline val TTC_CCSDS_Packet_REQUIRED_BYTES_FOR_ACN_ENCODING = 16
@inline @cCode.inline val TTC_CCSDS_Packet_REQUIRED_BITS_FOR_ACN_ENCODING = 122

@inline @cCode.inline val ERR_ACN_DECODE_TC_CCSDS_PACKET: Int = 4164 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_CCSDS_PACKET_PACKETVERSIONNUMBER_2: Int = 3980 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_CCSDS_PACKET_PACKET_ID: Int = 4006 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_CCSDS_PACKET_PACKET_ID_PACKETTYPE_2: Int = 3989 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_CCSDS_PACKET_PACKET_ID_SECONDARYHEADERFLAG: Int = 3991 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_CCSDS_PACKET_PACKET_ID_APPLICATIONPROCESS_ID_2: Int = 4001 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_CCSDS_PACKET_PACKETSEQUENCECONTROL_2: Int = 4028 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_CCSDS_PACKET_PACKETDATALENGTH_2: Int = 4038 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_CCSDS_PACKET_PACKETDATAFIELD: Int = 4153 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER: Int = 4120 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER_SECONDARYHEADER: Int = 4091 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER_SECONDARYHEADER_ACKNOWLEDGEMENTFLAGS_2: Int = 4072 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER_SECONDARYHEADER_SERVICETYPE_ID: Int = 4074 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER_SECONDARYHEADER_MESSAGESUBTYPE_ID: Int = 4076 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER_SECONDARYHEADER_SOURCE_ID_2: Int = 4086 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER_DATA: Int = 4104 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER_DATA_TC_255_255: Int = 4099 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER_PACKETERRORCONTROL: Int = 4112 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_CCSDS_PACKET_PACKETDATAFIELD_DATANOSECONDARYHEADER: Int = 4145 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_CCSDS_PACKET_PACKETDATAFIELD_DATANOSECONDARYHEADER_DATA_2: Int = 4132 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_CCSDS_PACKET_PACKETDATAFIELD_DATANOSECONDARYHEADER_PACKETERRORCONTROL: Int = 4137 /*  */


