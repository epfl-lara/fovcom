/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

val maxTM_3_36_PeriodicGenerationProperties: Int = 63 // variables:188

def TDiagnosticPeriodicGenerationProperties_IsConstraintValid(pVal: TDiagnosticPeriodicGenerationProperties): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TDiagnosticParameterReportStructure_ID_IsConstraintValid(pVal.parameterReportStructure_ID)
    if ret.isRight then
        ret = TPeriodicGenerationActionStatus_IsConstraintValid(pVal.periodicGenerationActionStatus)
        if ret.isRight then
            ret = TPUSC_UINT32_IsConstraintValid(pVal.collectionInterval)
    ret
}

def TDiagnosticPeriodicGenerationProperties_Initialize(): TDiagnosticPeriodicGenerationProperties = TDiagnosticPeriodicGenerationProperties(parameterReportStructure_ID = ULong.fromRaw(0L), periodicGenerationActionStatus = TPeriodicGenerationActionStatus.Tenabled, collectionInterval = ULong.fromRaw(0L))

@opaque @inlineOnce 
def TDiagnosticPeriodicGenerationProperties_ACN_Encode(pVal: TDiagnosticPeriodicGenerationProperties, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(65L))
    TDiagnosticPeriodicGenerationProperties_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode parameterReportStructure_ID */
    TDiagnosticParameterReportStructure_ID_ACN_Encode(pVal.parameterReportStructure_ID, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 65L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode periodicGenerationActionStatus */
    TPeriodicGenerationActionStatus_ACN_Encode(pVal.periodicGenerationActionStatus, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 33L, 1L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 33L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 1L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode collectionInterval */
    TPUSC_UINT32_ACN_Encode(pVal.collectionInterval, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 65L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 65L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TDiagnosticPeriodicGenerationProperties_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TDiagnosticPeriodicGenerationProperties] =
{
    require(codec.base.bitStream.validate_offset_bits(65L))

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode parameterReportStructure_ID */
    val pVal_parameterReportStructure_ID = TDiagnosticParameterReportStructure_ID_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 65L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode periodicGenerationActionStatus */
    val pVal_periodicGenerationActionStatus = TPeriodicGenerationActionStatus_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 33L, 1L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 33L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 1L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode collectionInterval */
    val pVal_collectionInterval = TPUSC_UINT32_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 65L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 65L)
    }
    val pVal = TDiagnosticPeriodicGenerationProperties(pVal_parameterReportStructure_ID, pVal_periodicGenerationActionStatus, pVal_collectionInterval)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }

    TDiagnosticPeriodicGenerationProperties_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TDiagnosticPeriodicGenerationProperties](l)
        case Right(_) => RightMut[ErrorCode, TDiagnosticPeriodicGenerationProperties](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TDiagnosticPeriodicGenerationProperties]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TDiagnosticPeriodicGenerationProperties_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TDiagnosticPeriodicGenerationProperties_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TDiagnosticPeriodicGenerationProperties]) =
{
    require(codec.base.bitStream.validate_offset_bits(65L))
    val cpy = snapshot(codec)
    val res = TDiagnosticPeriodicGenerationProperties_ACN_Decode(cpy)
    (cpy, res)
}

def TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties_IsConstraintValid(pVal: TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = ((1 <= pVal.nCount) && (pVal.nCount <= 63)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TDiagnosticPeriodicGenerationProperties_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_IsConstraintValid(pVal: TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties_IsConstraintValid(pVal.periodicGenerationProperties)
    ret
}

def TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties_Initialize(): TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties = TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties(1, Vector.fill(63)(TDiagnosticPeriodicGenerationProperties_Initialize()))
def TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_Initialize(): TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport = TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport(periodicGenerationProperties = TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties_Initialize())

@opaque @inlineOnce 
def TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_ACN_Encode(pVal: TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(4127L))
    var i1: Int = 0
    TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val TM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_n = ULong.fromRaw(pVal.periodicGenerationProperties.nCount)
    if TM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_n < ULong.fromRaw(1) || TM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_n > ULong.fromRaw(63) then
        return Left(860)
    /* Encode TM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_n */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(TM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_n)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(TM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_n)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 4127L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode periodicGenerationProperties */
    TM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties_ACN_Encode(codec, pVal, TM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_n, pVal.periodicGenerationProperties) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 4127L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.periodicGenerationProperties.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 4127L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def PUS_3_36_TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties_pVal_periodicGenerationProperties_periodicGenerationProperties_Encode_loop(codec: ACN, periodicGenerationProperties: TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= periodicGenerationProperties.nCount))
    require((1 <= periodicGenerationProperties.nCount) && (periodicGenerationProperties.nCount <= periodicGenerationProperties.arr.size) && (periodicGenerationProperties.arr.size <= 63))
    require(codec.base.bitStream.validate_offset_bits((65L * (periodicGenerationProperties.nCount - i1))))
    decreases(periodicGenerationProperties.nCount - i1)
    if (i1 == periodicGenerationProperties.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 65L * (periodicGenerationProperties.nCount - i1), 65L)
        }
        TDiagnosticPeriodicGenerationProperties_ACN_Encode(periodicGenerationProperties.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(65L * (i1 + 1) == 65L * i1 + 65L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 65L * (periodicGenerationProperties.nCount - i1), 65L)
            check(codec.base.bitStream.validate_offset_bits(65L * (periodicGenerationProperties.nCount - (i1 + 1))))
        }
        val res = PUS_3_36_TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties_pVal_periodicGenerationProperties_periodicGenerationProperties_Encode_loop(codec, periodicGenerationProperties, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties.sizeRange(periodicGenerationProperties.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, periodicGenerationProperties.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + periodicGenerationProperties.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties.sizeRange(periodicGenerationProperties.arr, codecSnap1.base.bitStream.bitIndex, i1, periodicGenerationProperties.nCount) == periodicGenerationProperties.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties.sizeRange(periodicGenerationProperties.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, periodicGenerationProperties.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties.sizeRange(periodicGenerationProperties.arr, codecSnap1.base.bitStream.bitIndex, i1, periodicGenerationProperties.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties.sizeRange(periodicGenerationProperties.arr, old(codec).base.bitStream.bitIndex, i1, periodicGenerationProperties.nCount)
    }
}



@opaque @inlineOnce
def TM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties_ACN_Encode(codec: ACN, pVal: TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport, TM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_n: ULong, periodicGenerationProperties: TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(4095L))
    @ghost val oldCdc = snapshot(codec)
    TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties_IsConstraintValid(periodicGenerationProperties) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    PUS_3_36_TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties_pVal_periodicGenerationProperties_periodicGenerationProperties_Encode_loop(codec, periodicGenerationProperties, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                periodicGenerationProperties.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + periodicGenerationProperties.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport] =
{
    require(codec.base.bitStream.validate_offset_bits(4127L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode TM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_n */
    val TM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_n = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 4127L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode periodicGenerationProperties */
    val pVal_periodicGenerationProperties = TM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties_ACN_Decode(codec, TM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_n) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 4127L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_periodicGenerationProperties.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 4127L)
    }
    val pVal = TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport(pVal_periodicGenerationProperties)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }

    TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport](l)
        case Right(_) => RightMut[ErrorCode, TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport]) =
{
    require(codec.base.bitStream.validate_offset_bits(4127L))
    val cpy = snapshot(codec)
    val res = TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def PUS_3_36_TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties_pVal_periodicGenerationProperties_periodicGenerationProperties_Decode_loop(codec: ACN, nCount: Int, periodicGenerationProperties: Vector[TDiagnosticPeriodicGenerationProperties], i1: Int): EitherMut[Int, Vector[TDiagnosticPeriodicGenerationProperties]] = {
    require((1 <= nCount) && (nCount <= 63))
    require((0 <= i1) && (i1 <= nCount))
    require(periodicGenerationProperties.size == i1)
    require(codec.base.bitStream.validate_offset_bits((65L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(periodicGenerationProperties)
            vecRangesEqSlicedLemma(periodicGenerationProperties, periodicGenerationProperties, 0, periodicGenerationProperties.size, 0, i1)
        }
        RightMut[Int, Vector[TDiagnosticPeriodicGenerationProperties]](periodicGenerationProperties)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 65L * (nCount - i1), 65L)
        }
        val periodicGenerationProperties_arr_i1_ = TDiagnosticPeriodicGenerationProperties_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(65L * (i1 + 1) == 65L * i1 + 65L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 65L * (nCount - i1), 65L)
            check(codec.base.bitStream.validate_offset_bits(65L * (nCount - (i1 + 1))))
        }
        val res = PUS_3_36_TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties_pVal_periodicGenerationProperties_periodicGenerationProperties_Decode_loop(codec, nCount, periodicGenerationProperties.append(periodicGenerationProperties_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(periodicGenerationProperties, newVec, periodicGenerationProperties_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(periodicGenerationProperties.append(periodicGenerationProperties_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(periodicGenerationProperties.list, periodicGenerationProperties_arr_i1_, i1)
                    Vector.listApplyEqVecApply(periodicGenerationProperties.append(periodicGenerationProperties_arr_i1_), i1)
                    check(periodicGenerationProperties_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TDiagnosticPeriodicGenerationProperties]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(periodicGenerationProperties, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def TM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties_ACN_Decode(codec: ACN, TM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_n: ULong): EitherMut[Int, TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties] = {
    require(codec.base.bitStream.validate_offset_bits(4095L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val periodicGenerationProperties =
        if ((ULong.fromRaw(1) <= TM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_n) && (TM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_n <= ULong.fromRaw(63))) then
            val periodicGenerationProperties_nCount = TM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_n.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val periodicGenerationProperties = PUS_3_36_TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties_pVal_periodicGenerationProperties_periodicGenerationProperties_Decode_loop(codec, periodicGenerationProperties_nCount, Vector.empty[TDiagnosticPeriodicGenerationProperties], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val periodicGenerationProperties = TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties(periodicGenerationProperties_nCount, bdg)
                    ghostExpr {
                        periodicGenerationProperties.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    periodicGenerationProperties
            }
            periodicGenerationProperties
        else return LeftMut(ERR_ACN_DECODE_TM_3_36_DIAGNOSTICPARAMETERREPORTPERIODICGENERATIONPROPERTIESREPORT_PERIODICGENERATIONPROPERTIES)
    TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties_IsConstraintValid(periodicGenerationProperties) match {
        case Left(l) =>
            LeftMut[Int, TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties](l)
        case Right(_) =>
            RightMut[Int, TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties](periodicGenerationProperties)
    }
}.ensuring { (res: EitherMut[Int, TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties_ACN_Decode_pure(codec: ACN, TM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_n: ULong): (ACN, EitherMut[Int, TTM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties]) = {
    require(codec.base.bitStream.validate_offset_bits(4095L))
    val cpy = snapshot(codec)
    val res = TM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_periodicGenerationProperties_ACN_Decode(cpy, TM_3_36_DiagnosticParameterReportPeriodicGenerationPropertiesReport_n)
    (cpy, res)
}