/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

val maxTC_8_1_ArgumentCount: Int = 4096 // variables:188
val maxTC_8_1_Function_ID_Size: Int = 4 // variables:188

def TFunction_ID_IsConstraintValid(pVal: TFunction_ID): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = (pVal.indexOf(0.toRawUByte) == 4) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    ret
}

def TFunction_ID_Initialize(): TFunction_ID = Vector.fill[UByte](4.toInt+1)(0x0.toRawUByte)

@opaque @inlineOnce 
def TFunction_ID_ACN_Encode(pVal: TFunction_ID, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(28L))
    var i1: Int = 0
    TFunction_ID_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    PUS_8_1_TFunction_ID_pVal_Encode_loop(codec, pVal, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ()
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 28L
    }
}

@opaque @inlineOnce
def PUS_8_1_TFunction_ID_pVal_Encode_loop(codec: ACN, pVal: Vector[UByte], i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= 4))
    require(pVal.size == (5))
    require(codec.base.bitStream.validate_offset_bits((7L * (4 - i1))))
    decreases(4 - i1)
    if (i1 == 4) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        if (!(UByte.fromRaw(0.toByte) <= pVal.apply(i1) && pVal.apply(i1) <= UByte.fromRaw(127.toByte))) {
            return Left[Int, Int](1)
        } else {
            ()
        }
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 7L * (4 - i1), 7L)
        }
        codec.base.encodeConstrainedWholeNumber(pVal(i1).toRaw, 0, 127)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(7L * (i1 + 1) == 7L * i1 + 7L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 7L * (4 - i1), 7L)
            check(codec.base.bitStream.validate_offset_bits(7L * (4 - (i1 + 1))))
        }
        val res = PUS_8_1_TFunction_ID_pVal_Encode_loop(codec, pVal, i1 + 1)
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 7L * (4 - i1)
    }
}



@opaque @inlineOnce 
def TFunction_ID_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TFunction_ID] =
{
    require(codec.base.bitStream.validate_offset_bits(28L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    val pVal = PUS_8_1_TFunction_ID_pVal_Decode_loop(codec, Vector.empty[UByte], 0) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(bdg) =>
            bdg
    }

    TFunction_ID_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TFunction_ID](l)
        case Right(_) => RightMut[ErrorCode, TFunction_ID](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TFunction_ID]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 28L && resVal.size == 5 && TFunction_ID_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TFunction_ID_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TFunction_ID]) =
{
    require(codec.base.bitStream.validate_offset_bits(28L))
    val cpy = snapshot(codec)
    val res = TFunction_ID_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def PUS_8_1_TFunction_ID_pVal_Decode_loop(codec: ACN, pVal: Vector[UByte], i1: Int): EitherMut[Int, Vector[UByte]] = {
    require((0 <= i1) && (i1 <= 4))
    require(pVal.size == i1)
    require(codec.base.bitStream.validate_offset_bits((7L * (4 - i1))))
    decreases(4 - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == 4) {
        ghostExpr {
            vecRangesEqReflexiveLemma(pVal.append(UByte.fromRaw(0.toByte)))
            vecRangesEqSlicedLemma(pVal.append(UByte.fromRaw(0.toByte)), pVal.append(UByte.fromRaw(0.toByte)), 0, pVal.append(UByte.fromRaw(0.toByte)).size, 0, i1)
        }
        RightMut[Int, Vector[UByte]](pVal.append(UByte.fromRaw(0.toByte)))
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 7L * (4 - i1), 7L)
        }
        val pVal_arr_i1_ = UByte.fromRaw(codec.base.decodeConstrainedWholeNumberByte(0, 127)) // uper:109
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(7L * (i1 + 1) == 7L * i1 + 7L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 7L * (4 - i1), 7L)
            check(codec.base.bitStream.validate_offset_bits(7L * (4 - (i1 + 1))))
        }
        val res = PUS_8_1_TFunction_ID_pVal_Decode_loop(codec, pVal.append(pVal_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(pVal, newVec, pVal_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(pVal.append(pVal_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(pVal.list, pVal_arr_i1_, i1)
                    Vector.listApplyEqVecApply(pVal.append(pVal_arr_i1_), i1)
                    check(pVal_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[UByte]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == 5 && vecRangesEq(pVal, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 7L * (4 - i1)
    }
}



def TArgument_ID_IsConstraintValid(pVal: TArgument_ID): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = (pVal == TArgument_ID.Targ0) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    ret
}

def TArgument_ID_Initialize(): TArgument_ID = TArgument_ID.Targ0

@opaque @inlineOnce 
def TArgument_ID_ACN_Encode(pVal: TArgument_ID, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(32L))
    TArgument_ID_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    val intVal_pVal = pVal match
        case TArgument_ID.Targ0 => ULong.fromRaw(0L)

    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(0))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(intVal_pVal)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(intVal_pVal)
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 32L
    }
}

@opaque @inlineOnce 
def TArgument_ID_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TArgument_ID] =
{
    require(codec.base.bitStream.validate_offset_bits(32L))

    @ghost val oldCdc = snapshot(codec)
    val intVal_pVal = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    val pVal = intVal_pVal.toRaw match
        case 0 => TArgument_ID.Targ0
        case _ => return LeftMut(ERR_ACN_DECODE_ARGUMENT_ID)

    TArgument_ID_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TArgument_ID](l)
        case Right(_) => RightMut[ErrorCode, TArgument_ID](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TArgument_ID]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 32L && TArgument_ID_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TArgument_ID_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TArgument_ID]) =
{
    require(codec.base.bitStream.validate_offset_bits(32L))
    val cpy = snapshot(codec)
    val res = TArgument_ID_ACN_Decode(cpy)
    (cpy, res)
}

def TArgumentValue_arg0_IsConstraintValid(pVal: TArgumentValue_arg0): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = (pVal <= ULong.fromRaw(255L)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    ret
}

def TArgumentValue_IsConstraintValid(pVal: TArgumentValue): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    pVal match
        case TArgumentValue.arg0_PRESENT(arg0) =>
            ret = TArgumentValue_arg0_IsConstraintValid(arg0)
    ret
}

def TArgumentValue_arg0_Initialize(): TArgumentValue_arg0 = ULong.fromRaw(0L)
def TArgumentValue_Initialize(): TArgumentValue = TArgumentValue.arg0_PRESENT(ULong.fromRaw(0L))

def TArgument_IsConstraintValid(pVal: TArgument): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TArgumentValue_IsConstraintValid(pVal.argumentValue)
    ret
}

def TArgument_Initialize(): TArgument = TArgument(argumentValue = TArgumentValue_Initialize())

@opaque @inlineOnce 
def TArgument_ACN_Encode(pVal: TArgument, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(40L))
    TArgument_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val Argument_argument_ID = pVal.argumentValue match
        case TArgumentValue.arg0_PRESENT(_) =>TArgument_ID.Targ0

    /* Encode Argument_argument_ID */
    val intVal_Argument_argument_ID = Argument_argument_ID match
        case TArgument_ID.Targ0 => ULong.fromRaw(0L)

    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(0))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(intVal_Argument_argument_ID)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(intVal_Argument_argument_ID)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 40L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode argumentValue */
    Argument_argumentValue_ACN_Encode(codec, pVal, Argument_argument_ID, pVal.argumentValue) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 40L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.argumentValue match {
        case TArgumentValue.arg0_PRESENT(arg0) =>
            8L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 40L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def Argument_argumentValue_ACN_Encode(codec: ACN, pVal: TArgument, Argument_argument_ID: TArgument_ID, argumentValue: TArgumentValue): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(8L))
    @ghost val oldCdc = snapshot(codec)
    TArgumentValue_IsConstraintValid(argumentValue) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    argumentValue match
        case TArgumentValue.arg0_PRESENT(arg0) =>
            locally {
                ghostExpr {
                    @opaque @inlineOnce
                    def bitCountLemma(): Unit = ().ensuring(_ => GetBitCountUnsigned(ULong.fromRaw(255) - ULong.fromRaw(0)) == 8)
                    bitCountLemma()
                }
            }
            codec.base.encodeConstrainedPosWholeNumber(arg0, 0.toRawULong, 255.toRawULong)
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + argumentValue.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TArgument_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TArgument] =
{
    require(codec.base.bitStream.validate_offset_bits(40L))

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode Argument_argument_ID */
    val intVal_Argument_argument_ID = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    val Argument_argument_ID = intVal_Argument_argument_ID.toRaw match
        case 0 => TArgument_ID.Targ0
        case _ => return LeftMut(ERR_ACN_DECODE_ARGUMENT_ARGUMENT_ID)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 40L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode argumentValue */
    val pVal_argumentValue = Argument_argumentValue_ACN_Decode(codec, Argument_argument_ID) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 40L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_argumentValue match {
        case TArgumentValue.arg0_PRESENT(arg0) =>
            8L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 40L)
    }
    val pVal = TArgument(pVal_argumentValue)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }

    TArgument_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TArgument](l)
        case Right(_) => RightMut[ErrorCode, TArgument](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TArgument]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TArgument_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TArgument_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TArgument]) =
{
    require(codec.base.bitStream.validate_offset_bits(40L))
    val cpy = snapshot(codec)
    val res = TArgument_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def Argument_argumentValue_ACN_Decode(codec: ACN, Argument_argument_ID: TArgument_ID): EitherMut[Int, TArgumentValue] = {
    require(codec.base.bitStream.validate_offset_bits(8L))
    @ghost val oldCdc = snapshot(codec)
    val argumentValue = Argument_argument_ID match
        case TArgument_ID.Targ0 =>
            locally {
                ghostExpr {
                    @opaque @inlineOnce
                    def bitCountLemma(): Unit = ().ensuring(_ => GetBitCountUnsigned(ULong.fromRaw(255) - ULong.fromRaw(0)) == 8)
                    bitCountLemma()
                }
            }
            val arg0 = codec.base.decodeConstrainedPosWholeNumber(ULong.fromRaw(0), ULong.fromRaw(255)) // uper:135
            TArgumentValue.arg0_PRESENT(arg0)
    TArgumentValue_IsConstraintValid(argumentValue) match {
        case Left(l) =>
            LeftMut[Int, TArgumentValue](l)
        case Right(_) =>
            RightMut[Int, TArgumentValue](argumentValue)
    }
}.ensuring { (res: EitherMut[Int, TArgumentValue]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TArgumentValue_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def Argument_argumentValue_ACN_Decode_pure(codec: ACN, Argument_argument_ID: TArgument_ID): (ACN, EitherMut[Int, TArgumentValue]) = {
    require(codec.base.bitStream.validate_offset_bits(8L))
    val cpy = snapshot(codec)
    val res = Argument_argumentValue_ACN_Decode(cpy, Argument_argument_ID)
    (cpy, res)
}

def TMultipleArguments_arguments_IsConstraintValid(pVal: TMultipleArguments_arguments): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = ((1 <= pVal.nCount) && (pVal.nCount <= 4096)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TArgument_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TMultipleArguments_IsConstraintValid(pVal: TMultipleArguments): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TMultipleArguments_arguments_IsConstraintValid(pVal.arguments)
    ret
}

def TMultipleArguments_arguments_Initialize(): TMultipleArguments_arguments = TMultipleArguments_arguments(1, Vector.fill(4096)(TArgument_Initialize()))
def TMultipleArguments_Initialize(): TMultipleArguments = TMultipleArguments(arguments = TMultipleArguments_arguments_Initialize())

@opaque @inlineOnce 
def TMultipleArguments_ACN_Encode(pVal: TMultipleArguments, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(163872L))
    var i1: Int = 0
    TMultipleArguments_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val MultipleArguments_n = ULong.fromRaw(pVal.arguments.nCount)
    if MultipleArguments_n < ULong.fromRaw(1) || MultipleArguments_n > ULong.fromRaw(4096) then
        return Left(860)
    /* Encode MultipleArguments_n */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(MultipleArguments_n)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(MultipleArguments_n)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 163872L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode arguments */
    MultipleArguments_arguments_ACN_Encode(codec, pVal, MultipleArguments_n, pVal.arguments) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 163872L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.arguments.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 163872L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def PUS_8_1_TMultipleArguments_arguments_pVal_arguments_arguments_Encode_loop(codec: ACN, arguments: TMultipleArguments_arguments, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= arguments.nCount))
    require((1 <= arguments.nCount) && (arguments.nCount <= arguments.arr.size) && (arguments.arr.size <= 4096))
    require(codec.base.bitStream.validate_offset_bits((40L * (arguments.nCount - i1))))
    decreases(arguments.nCount - i1)
    if (i1 == arguments.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 40L * (arguments.nCount - i1), 40L)
        }
        TArgument_ACN_Encode(arguments.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(40L * (i1 + 1) == 40L * i1 + 40L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 40L * (arguments.nCount - i1), 40L)
            check(codec.base.bitStream.validate_offset_bits(40L * (arguments.nCount - (i1 + 1))))
        }
        val res = PUS_8_1_TMultipleArguments_arguments_pVal_arguments_arguments_Encode_loop(codec, arguments, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TMultipleArguments_arguments.sizeRange(arguments.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, arguments.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + arguments.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TMultipleArguments_arguments.sizeRange(arguments.arr, codecSnap1.base.bitStream.bitIndex, i1, arguments.nCount) == arguments.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TMultipleArguments_arguments.sizeRange(arguments.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, arguments.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TMultipleArguments_arguments.sizeRange(arguments.arr, codecSnap1.base.bitStream.bitIndex, i1, arguments.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TMultipleArguments_arguments.sizeRange(arguments.arr, old(codec).base.bitStream.bitIndex, i1, arguments.nCount)
    }
}



@opaque @inlineOnce
def MultipleArguments_arguments_ACN_Encode(codec: ACN, pVal: TMultipleArguments, MultipleArguments_n: ULong, arguments: TMultipleArguments_arguments): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(163840L))
    @ghost val oldCdc = snapshot(codec)
    TMultipleArguments_arguments_IsConstraintValid(arguments) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    PUS_8_1_TMultipleArguments_arguments_pVal_arguments_arguments_Encode_loop(codec, arguments, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                arguments.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + arguments.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TMultipleArguments_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TMultipleArguments] =
{
    require(codec.base.bitStream.validate_offset_bits(163872L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode MultipleArguments_n */
    val MultipleArguments_n = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 163872L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode arguments */
    val pVal_arguments = MultipleArguments_arguments_ACN_Decode(codec, MultipleArguments_n) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 163872L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_arguments.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 163872L)
    }
    val pVal = TMultipleArguments(pVal_arguments)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }

    TMultipleArguments_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TMultipleArguments](l)
        case Right(_) => RightMut[ErrorCode, TMultipleArguments](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TMultipleArguments]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TMultipleArguments_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TMultipleArguments_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TMultipleArguments]) =
{
    require(codec.base.bitStream.validate_offset_bits(163872L))
    val cpy = snapshot(codec)
    val res = TMultipleArguments_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def PUS_8_1_TMultipleArguments_arguments_pVal_arguments_arguments_Decode_loop(codec: ACN, nCount: Int, arguments: Vector[TArgument], i1: Int): EitherMut[Int, Vector[TArgument]] = {
    require((1 <= nCount) && (nCount <= 4096))
    require((0 <= i1) && (i1 <= nCount))
    require(arguments.size == i1)
    require(codec.base.bitStream.validate_offset_bits((40L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(arguments)
            vecRangesEqSlicedLemma(arguments, arguments, 0, arguments.size, 0, i1)
        }
        RightMut[Int, Vector[TArgument]](arguments)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 40L * (nCount - i1), 40L)
        }
        val arguments_arr_i1_ = TArgument_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(40L * (i1 + 1) == 40L * i1 + 40L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 40L * (nCount - i1), 40L)
            check(codec.base.bitStream.validate_offset_bits(40L * (nCount - (i1 + 1))))
        }
        val res = PUS_8_1_TMultipleArguments_arguments_pVal_arguments_arguments_Decode_loop(codec, nCount, arguments.append(arguments_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(arguments, newVec, arguments_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(arguments.append(arguments_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(arguments.list, arguments_arr_i1_, i1)
                    Vector.listApplyEqVecApply(arguments.append(arguments_arr_i1_), i1)
                    check(arguments_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TArgument]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(arguments, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TMultipleArguments_arguments.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def MultipleArguments_arguments_ACN_Decode(codec: ACN, MultipleArguments_n: ULong): EitherMut[Int, TMultipleArguments_arguments] = {
    require(codec.base.bitStream.validate_offset_bits(163840L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val arguments =
        if ((ULong.fromRaw(1) <= MultipleArguments_n) && (MultipleArguments_n <= ULong.fromRaw(4096))) then
            val arguments_nCount = MultipleArguments_n.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val arguments = PUS_8_1_TMultipleArguments_arguments_pVal_arguments_arguments_Decode_loop(codec, arguments_nCount, Vector.empty[TArgument], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val arguments = TMultipleArguments_arguments(arguments_nCount, bdg)
                    ghostExpr {
                        arguments.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    arguments
            }
            arguments
        else return LeftMut(ERR_ACN_DECODE_MULTIPLEARGUMENTS_ARGUMENTS)
    TMultipleArguments_arguments_IsConstraintValid(arguments) match {
        case Left(l) =>
            LeftMut[Int, TMultipleArguments_arguments](l)
        case Right(_) =>
            RightMut[Int, TMultipleArguments_arguments](arguments)
    }
}.ensuring { (res: EitherMut[Int, TMultipleArguments_arguments]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TMultipleArguments_arguments_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def MultipleArguments_arguments_ACN_Decode_pure(codec: ACN, MultipleArguments_n: ULong): (ACN, EitherMut[Int, TMultipleArguments_arguments]) = {
    require(codec.base.bitStream.validate_offset_bits(163840L))
    val cpy = snapshot(codec)
    val res = MultipleArguments_arguments_ACN_Decode(cpy, MultipleArguments_n)
    (cpy, res)
}

def TFunctionArguments_function1_IsConstraintValid(pVal: TFunctionArguments_function1): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = (pVal <= ULong.fromRaw(255L)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    ret
}

def TFunctionArguments_IsConstraintValid(pVal: TFunctionArguments): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    pVal match
        case TFunctionArguments.function0_PRESENT(function0) =>
            ret = TMultipleArguments_IsConstraintValid(function0)
        case TFunctionArguments.function1_PRESENT(function1) =>
            ret = TFunctionArguments_function1_IsConstraintValid(function1)
    ret
}

def TFunctionArguments_function1_Initialize(): TFunctionArguments_function1 = ULong.fromRaw(0L)
def TFunctionArguments_Initialize(): TFunctionArguments = TFunctionArguments.function0_PRESENT(TMultipleArguments_Initialize())

def TTC_8_1_PerformAFunction_IsConstraintValid(pVal: TTC_8_1_PerformAFunction): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TFunctionArguments_IsConstraintValid(pVal.functionArguments)
    ret
}

def TTC_8_1_PerformAFunction_Initialize(): TTC_8_1_PerformAFunction = TTC_8_1_PerformAFunction(functionArguments = TFunctionArguments_Initialize())

@opaque @inlineOnce 
def TTC_8_1_PerformAFunction_ACN_Encode(pVal: TTC_8_1_PerformAFunction, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(163900L))
    var i1: Int = 0
    TTC_8_1_PerformAFunction_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val TC_8_1_PerformAFunction_function_ID = pVal.functionArguments match
        case _: TFunctionArguments.function0_PRESENT =>
            Vector.fromList(List(UByte.fromRaw(0x66), UByte.fromRaw(0x75), UByte.fromRaw(0x6E), UByte.fromRaw(0x32), UByte.fromRaw(0x00)))
        case _: TFunctionArguments.function1_PRESENT =>
            Vector.fromList(List(UByte.fromRaw(0x66), UByte.fromRaw(0x75), UByte.fromRaw(0x6E), UByte.fromRaw(0x31), UByte.fromRaw(0x00)))
    /* Encode TC_8_1_PerformAFunction_function_ID */
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    PUS_8_1_TFunction_ID_pVal_TC_8_1_PerformAFunction_function_ID_Encode_loop(codec, TC_8_1_PerformAFunction_function_ID, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 163900L, 28L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 28L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 28L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode functionArguments */
    TC_8_1_PerformAFunction_functionArguments_ACN_Encode(codec, pVal, TC_8_1_PerformAFunction_function_ID, pVal.functionArguments) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 163900L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.functionArguments match {
        case TFunctionArguments.function0_PRESENT(function0) =>
            val size_2_1 = 32L
            val size_2_2 = function0.arguments.size(codec_0_2.base.bitStream.bitIndex + size_2_1)
            size_2_1 + size_2_2
        case TFunctionArguments.function1_PRESENT(function1) =>
            8L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 163900L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def PUS_8_1_TFunction_ID_pVal_TC_8_1_PerformAFunction_function_ID_Encode_loop(codec: ACN, TC_8_1_PerformAFunction_function_ID: Vector[UByte], i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= 4))
    require(TC_8_1_PerformAFunction_function_ID.size == (5))
    require(codec.base.bitStream.validate_offset_bits((7L * (4 - i1))))
    decreases(4 - i1)
    if (i1 == 4) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        if (!(UByte.fromRaw(0.toByte) <= TC_8_1_PerformAFunction_function_ID.apply(i1) && TC_8_1_PerformAFunction_function_ID.apply(i1) <= UByte.fromRaw(127.toByte))) {
            return Left[Int, Int](1)
        } else {
            ()
        }
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 7L * (4 - i1), 7L)
        }
        codec.base.encodeConstrainedWholeNumber(TC_8_1_PerformAFunction_function_ID(i1).toRaw, 0, 127)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(7L * (i1 + 1) == 7L * i1 + 7L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 7L * (4 - i1), 7L)
            check(codec.base.bitStream.validate_offset_bits(7L * (4 - (i1 + 1))))
        }
        val res = PUS_8_1_TFunction_ID_pVal_TC_8_1_PerformAFunction_function_ID_Encode_loop(codec, TC_8_1_PerformAFunction_function_ID, i1 + 1)
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 7L * (4 - i1)
    }
}



@opaque @inlineOnce
def PUS_8_1_TMultipleArguments_arguments_function0_arguments_arguments_Encode_loop(codec: ACN, arguments: TMultipleArguments_arguments, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= arguments.nCount))
    require((1 <= arguments.nCount) && (arguments.nCount <= arguments.arr.size) && (arguments.arr.size <= 4096))
    require(codec.base.bitStream.validate_offset_bits((40L * (arguments.nCount - i1))))
    decreases(arguments.nCount - i1)
    if (i1 == arguments.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 40L * (arguments.nCount - i1), 40L)
        }
        TArgument_ACN_Encode(arguments.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(40L * (i1 + 1) == 40L * i1 + 40L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 40L * (arguments.nCount - i1), 40L)
            check(codec.base.bitStream.validate_offset_bits(40L * (arguments.nCount - (i1 + 1))))
        }
        val res = PUS_8_1_TMultipleArguments_arguments_function0_arguments_arguments_Encode_loop(codec, arguments, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TMultipleArguments_arguments.sizeRange(arguments.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, arguments.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + arguments.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TMultipleArguments_arguments.sizeRange(arguments.arr, codecSnap1.base.bitStream.bitIndex, i1, arguments.nCount) == arguments.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TMultipleArguments_arguments.sizeRange(arguments.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, arguments.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TMultipleArguments_arguments.sizeRange(arguments.arr, codecSnap1.base.bitStream.bitIndex, i1, arguments.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TMultipleArguments_arguments.sizeRange(arguments.arr, old(codec).base.bitStream.bitIndex, i1, arguments.nCount)
    }
}



@opaque @inlineOnce
def TC_8_1_PerformAFunction_functionArguments_function0_arguments_ACN_Encode(codec: ACN, pVal: TTC_8_1_PerformAFunction, TC_8_1_PerformAFunction_functionArguments_function0_n: ULong, arguments: TMultipleArguments_arguments): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(163840L))
    @ghost val oldCdc = snapshot(codec)
    TMultipleArguments_arguments_IsConstraintValid(arguments) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    PUS_8_1_TMultipleArguments_arguments_function0_arguments_arguments_Encode_loop(codec, arguments, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                arguments.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + arguments.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TC_8_1_PerformAFunction_functionArguments_function0_ACN_Encode(codec: ACN, pVal: TTC_8_1_PerformAFunction, function0: TMultipleArguments): Either[Int, (Int, ULong)] = {
    require(codec.base.bitStream.validate_offset_bits(163872L))
    @ghost val oldCdc = snapshot(codec)
    TMultipleArguments_IsConstraintValid(function0) match {
        case Left(l) =>
            return Left[Int, (Int, ULong)](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    val TC_8_1_PerformAFunction_functionArguments_function0_n =
        if pVal.functionArguments.isInstanceOf[TFunctionArguments.function0_PRESENT] then
            val TC_8_1_PerformAFunction_functionArguments_function0_n = ULong.fromRaw(function0.arguments.nCount)
            if TC_8_1_PerformAFunction_functionArguments_function0_n < ULong.fromRaw(1) || TC_8_1_PerformAFunction_functionArguments_function0_n > ULong.fromRaw(4096) then
                return Left(860)
            TC_8_1_PerformAFunction_functionArguments_function0_n
        else ULong.fromRaw(0)
    /* Encode TC_8_1_PerformAFunction_functionArguments_function0_n */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(TC_8_1_PerformAFunction_functionArguments_function0_n)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(TC_8_1_PerformAFunction_functionArguments_function0_n)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 163872L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode arguments */
    TC_8_1_PerformAFunction_functionArguments_function0_arguments_ACN_Encode(codec, pVal, TC_8_1_PerformAFunction_functionArguments_function0_n, function0.arguments) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 163872L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = function0.arguments.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 163872L)
    }
    Right[Int, (Int, ULong)]((0, TC_8_1_PerformAFunction_functionArguments_function0_n))
}.ensuring { (res: Either[Int, (Int, ULong)]) => 
    res match {
        case Left(_) =>
            true
        case Right((_, acn1)) =>
            val size_1_0 = 32L
            val size_1_1 = function0.arguments.size(old(codec).base.bitStream.bitIndex + size_1_0)
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + size_1_0 + size_1_1
    }
}

@opaque @inlineOnce
def TC_8_1_PerformAFunction_functionArguments_ACN_Encode(codec: ACN, pVal: TTC_8_1_PerformAFunction, TC_8_1_PerformAFunction_function_ID: Vector[UByte], functionArguments: TFunctionArguments): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(163872L))
    @ghost val oldCdc = snapshot(codec)
    TFunctionArguments_IsConstraintValid(functionArguments) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    functionArguments match
        case TFunctionArguments.function0_PRESENT(function0) =>
            val res_function0 = TC_8_1_PerformAFunction_functionArguments_function0_ACN_Encode(codec, pVal, function0) match {
                case Left(l) =>
                    return Left(l)
                case Right((_, v1)) =>
                    v1
            }
            val TC_8_1_PerformAFunction_functionArguments_function0_n = res_function0
        case TFunctionArguments.function1_PRESENT(function1) =>
            locally {
                ghostExpr {
                    @opaque @inlineOnce
                    def bitCountLemma(): Unit = ().ensuring(_ => GetBitCountUnsigned(ULong.fromRaw(255) - ULong.fromRaw(0)) == 8)
                    bitCountLemma()
                }
            }
            codec.base.encodeConstrainedPosWholeNumber(function1, 0.toRawULong, 255.toRawULong)
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + functionArguments.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTC_8_1_PerformAFunction_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTC_8_1_PerformAFunction] =
{
    require(codec.base.bitStream.validate_offset_bits(163900L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode TC_8_1_PerformAFunction_function_ID */
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    val TC_8_1_PerformAFunction_function_ID = PUS_8_1_TFunction_ID_pVal_TC_8_1_PerformAFunction_function_ID_Decode_loop(codec, Vector.empty[UByte], 0) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(bdg) =>
            bdg
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 163900L, 28L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 28L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 28L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode functionArguments */
    val pVal_functionArguments = TC_8_1_PerformAFunction_functionArguments_ACN_Decode(codec, TC_8_1_PerformAFunction_function_ID) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 163900L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_functionArguments match {
        case TFunctionArguments.function0_PRESENT(function0) =>
            val size_2_1 = 32L
            val size_2_2 = function0.arguments.size(codec_0_2.base.bitStream.bitIndex + size_2_1)
            size_2_1 + size_2_2
        case TFunctionArguments.function1_PRESENT(function1) =>
            8L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 163900L)
    }
    val pVal = TTC_8_1_PerformAFunction(pVal_functionArguments)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }

    TTC_8_1_PerformAFunction_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTC_8_1_PerformAFunction](l)
        case Right(_) => RightMut[ErrorCode, TTC_8_1_PerformAFunction](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTC_8_1_PerformAFunction]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_8_1_PerformAFunction_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTC_8_1_PerformAFunction_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTC_8_1_PerformAFunction]) =
{
    require(codec.base.bitStream.validate_offset_bits(163900L))
    val cpy = snapshot(codec)
    val res = TTC_8_1_PerformAFunction_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def PUS_8_1_TFunction_ID_pVal_TC_8_1_PerformAFunction_function_ID_Decode_loop(codec: ACN, TC_8_1_PerformAFunction_function_ID: Vector[UByte], i1: Int): EitherMut[Int, Vector[UByte]] = {
    require((0 <= i1) && (i1 <= 4))
    require(TC_8_1_PerformAFunction_function_ID.size == i1)
    require(codec.base.bitStream.validate_offset_bits((7L * (4 - i1))))
    decreases(4 - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == 4) {
        ghostExpr {
            vecRangesEqReflexiveLemma(TC_8_1_PerformAFunction_function_ID.append(UByte.fromRaw(0.toByte)))
            vecRangesEqSlicedLemma(TC_8_1_PerformAFunction_function_ID.append(UByte.fromRaw(0.toByte)), TC_8_1_PerformAFunction_function_ID.append(UByte.fromRaw(0.toByte)), 0, TC_8_1_PerformAFunction_function_ID.append(UByte.fromRaw(0.toByte)).size, 0, i1)
        }
        RightMut[Int, Vector[UByte]](TC_8_1_PerformAFunction_function_ID.append(UByte.fromRaw(0.toByte)))
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 7L * (4 - i1), 7L)
        }
        val TC_8_1_PerformAFunction_function_ID_arr_i1_ = UByte.fromRaw(codec.base.decodeConstrainedWholeNumberByte(0, 127)) // uper:109
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(7L * (i1 + 1) == 7L * i1 + 7L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 7L * (4 - i1), 7L)
            check(codec.base.bitStream.validate_offset_bits(7L * (4 - (i1 + 1))))
        }
        val res = PUS_8_1_TFunction_ID_pVal_TC_8_1_PerformAFunction_function_ID_Decode_loop(codec, TC_8_1_PerformAFunction_function_ID.append(TC_8_1_PerformAFunction_function_ID_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(TC_8_1_PerformAFunction_function_ID, newVec, TC_8_1_PerformAFunction_function_ID_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(TC_8_1_PerformAFunction_function_ID.append(TC_8_1_PerformAFunction_function_ID_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(TC_8_1_PerformAFunction_function_ID.list, TC_8_1_PerformAFunction_function_ID_arr_i1_, i1)
                    Vector.listApplyEqVecApply(TC_8_1_PerformAFunction_function_ID.append(TC_8_1_PerformAFunction_function_ID_arr_i1_), i1)
                    check(TC_8_1_PerformAFunction_function_ID_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[UByte]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == 5 && vecRangesEq(TC_8_1_PerformAFunction_function_ID, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 7L * (4 - i1)
    }
}



@opaque @inlineOnce
def PUS_8_1_TMultipleArguments_arguments_function0_arguments_arguments_Decode_loop(codec: ACN, nCount: Int, arguments: Vector[TArgument], i1: Int): EitherMut[Int, Vector[TArgument]] = {
    require((1 <= nCount) && (nCount <= 4096))
    require((0 <= i1) && (i1 <= nCount))
    require(arguments.size == i1)
    require(codec.base.bitStream.validate_offset_bits((40L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(arguments)
            vecRangesEqSlicedLemma(arguments, arguments, 0, arguments.size, 0, i1)
        }
        RightMut[Int, Vector[TArgument]](arguments)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 40L * (nCount - i1), 40L)
        }
        val arguments_arr_i1_ = TArgument_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(40L * (i1 + 1) == 40L * i1 + 40L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 40L * (nCount - i1), 40L)
            check(codec.base.bitStream.validate_offset_bits(40L * (nCount - (i1 + 1))))
        }
        val res = PUS_8_1_TMultipleArguments_arguments_function0_arguments_arguments_Decode_loop(codec, nCount, arguments.append(arguments_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(arguments, newVec, arguments_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(arguments.append(arguments_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(arguments.list, arguments_arr_i1_, i1)
                    Vector.listApplyEqVecApply(arguments.append(arguments_arr_i1_), i1)
                    check(arguments_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TArgument]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(arguments, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TMultipleArguments_arguments.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def TC_8_1_PerformAFunction_functionArguments_function0_arguments_ACN_Decode(codec: ACN, TC_8_1_PerformAFunction_functionArguments_function0_n: ULong): EitherMut[Int, TMultipleArguments_arguments] = {
    require(codec.base.bitStream.validate_offset_bits(163840L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val arguments =
        if ((ULong.fromRaw(1) <= TC_8_1_PerformAFunction_functionArguments_function0_n) && (TC_8_1_PerformAFunction_functionArguments_function0_n <= ULong.fromRaw(4096))) then
            val arguments_nCount = TC_8_1_PerformAFunction_functionArguments_function0_n.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val arguments = PUS_8_1_TMultipleArguments_arguments_function0_arguments_arguments_Decode_loop(codec, arguments_nCount, Vector.empty[TArgument], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val arguments = TMultipleArguments_arguments(arguments_nCount, bdg)
                    ghostExpr {
                        arguments.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    arguments
            }
            arguments
        else return LeftMut(ERR_ACN_DECODE_TC_8_1_PERFORMAFUNCTION_FUNCTIONARGUMENTS_FUNCTION0_ARGUMENTS)
    TMultipleArguments_arguments_IsConstraintValid(arguments) match {
        case Left(l) =>
            LeftMut[Int, TMultipleArguments_arguments](l)
        case Right(_) =>
            RightMut[Int, TMultipleArguments_arguments](arguments)
    }
}.ensuring { (res: EitherMut[Int, TMultipleArguments_arguments]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TMultipleArguments_arguments_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TC_8_1_PerformAFunction_functionArguments_function0_arguments_ACN_Decode_pure(codec: ACN, TC_8_1_PerformAFunction_functionArguments_function0_n: ULong): (ACN, EitherMut[Int, TMultipleArguments_arguments]) = {
    require(codec.base.bitStream.validate_offset_bits(163840L))
    val cpy = snapshot(codec)
    val res = TC_8_1_PerformAFunction_functionArguments_function0_arguments_ACN_Decode(cpy, TC_8_1_PerformAFunction_functionArguments_function0_n)
    (cpy, res)
}

@opaque @inlineOnce
def TC_8_1_PerformAFunction_functionArguments_function0_ACN_Decode(codec: ACN): EitherMut[Int, (TMultipleArguments, ULong)] = {
    require(codec.base.bitStream.validate_offset_bits(163872L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode TC_8_1_PerformAFunction_functionArguments_function0_n */
    val TC_8_1_PerformAFunction_functionArguments_function0_n = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()
    
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 163872L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode arguments */
    val function0_arguments = TC_8_1_PerformAFunction_functionArguments_function0_arguments_ACN_Decode(codec, TC_8_1_PerformAFunction_functionArguments_function0_n) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 163872L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = function0_arguments.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 163872L)
    }
    val function0 = TMultipleArguments(function0_arguments)
    TMultipleArguments_IsConstraintValid(function0) match {
        case Left(l) =>
            LeftMut[Int, (TMultipleArguments, ULong)](l)
        case Right(_) =>
            RightMut[Int, (TMultipleArguments, ULong)]((function0, TC_8_1_PerformAFunction_functionArguments_function0_n))
    }
}.ensuring { (res: EitherMut[Int, (TMultipleArguments, ULong)]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut((resVal, _)) =>
            val size_1_0 = 32L
            val size_1_1 = resVal.arguments.size(old(codec).base.bitStream.bitIndex + size_1_0)
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + size_1_0 + size_1_1 && TMultipleArguments_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TC_8_1_PerformAFunction_functionArguments_function0_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[Int, (TMultipleArguments, ULong)]) = {
    require(codec.base.bitStream.validate_offset_bits(163872L))
    val cpy = snapshot(codec)
    val res = TC_8_1_PerformAFunction_functionArguments_function0_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def TC_8_1_PerformAFunction_functionArguments_ACN_Decode(codec: ACN, TC_8_1_PerformAFunction_function_ID: Vector[UByte]): EitherMut[Int, TFunctionArguments] = {
    require(codec.base.bitStream.validate_offset_bits(163872L))
    @ghost val oldCdc = snapshot(codec)
    val functionArguments = if ((TC_8_1_PerformAFunction_function_ID.sameElements(Vector.fromList(List[UByte](UByte.fromRaw(0x66), UByte.fromRaw(0x75), UByte.fromRaw(0x6E), UByte.fromRaw(0x32), UByte.fromRaw(0x00)))))) {
        val function0_tuple = TC_8_1_PerformAFunction_functionArguments_function0_ACN_Decode(codec) match {
            case LeftMut(l) =>
                return LeftMut(l)
            case RightMut(v) =>
                v
        }
        val function0 = function0_tuple._1
        val TC_8_1_PerformAFunction_functionArguments_function0_n = function0_tuple._2
        TFunctionArguments.function0_PRESENT(function0)
    }
    else if ((TC_8_1_PerformAFunction_function_ID.sameElements(Vector.fromList(List[UByte](UByte.fromRaw(0x66), UByte.fromRaw(0x75), UByte.fromRaw(0x6E), UByte.fromRaw(0x31), UByte.fromRaw(0x00)))))) {
        locally {
            ghostExpr {
                @opaque @inlineOnce
                def bitCountLemma(): Unit = ().ensuring(_ => GetBitCountUnsigned(ULong.fromRaw(255) - ULong.fromRaw(0)) == 8)
                bitCountLemma()
            }
        }
        val function1 = codec.base.decodeConstrainedPosWholeNumber(ULong.fromRaw(0), ULong.fromRaw(255)) // uper:135
        TFunctionArguments.function1_PRESENT(function1)
    }
    else return LeftMut(ERR_ACN_DECODE_TC_8_1_PERFORMAFUNCTION_FUNCTIONARGUMENTS)
    TFunctionArguments_IsConstraintValid(functionArguments) match {
        case Left(l) =>
            LeftMut[Int, TFunctionArguments](l)
        case Right(_) =>
            RightMut[Int, TFunctionArguments](functionArguments)
    }
}.ensuring { (res: EitherMut[Int, TFunctionArguments]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TFunctionArguments_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TC_8_1_PerformAFunction_functionArguments_ACN_Decode_pure(codec: ACN, TC_8_1_PerformAFunction_function_ID: Vector[UByte]): (ACN, EitherMut[Int, TFunctionArguments]) = {
    require(codec.base.bitStream.validate_offset_bits(163872L))
    val cpy = snapshot(codec)
    val res = TC_8_1_PerformAFunction_functionArguments_ACN_Decode(cpy, TC_8_1_PerformAFunction_function_ID)
    (cpy, res)
}