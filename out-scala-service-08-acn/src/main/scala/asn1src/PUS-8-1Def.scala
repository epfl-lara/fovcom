/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

type TFunction_ID = Vector[UByte]

@inline @cCode.inline val ERR_FUNCTION_ID: Int = 84 /*(SIZE(maxTC-8-1-Function-ID-Size)) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_FUNCTION_ID: Int = 87 /*  */
@inline @cCode.inline val TFunction_ID_REQUIRED_BYTES_FOR_ACN_ENCODING = 4
@inline @cCode.inline val TFunction_ID_REQUIRED_BITS_FOR_ACN_ENCODING = 28

@inline @cCode.inline val ERR_ACN_DECODE_FUNCTION_ID: Int = 88 /*  */
sealed trait TArgument_ID:
    def i: Int
object TArgument_ID:
    case object Targ0 extends TArgument_ID:
        override def i: Int = 0

// please use the following macros to avoid breaking code.
// type Targ0 = TArgument_ID.arg0

@inline @cCode.inline val ERR_ARGUMENT_ID: Int = 177 /*arg0 */

 

@inline @cCode.inline val ERR_ACN_ENCODE_ARGUMENT_ID: Int = 180 /*  */
@inline @cCode.inline val TArgument_ID_REQUIRED_BYTES_FOR_ACN_ENCODING = 4
@inline @cCode.inline val TArgument_ID_REQUIRED_BITS_FOR_ACN_ENCODING = 32

@inline @cCode.inline val ERR_ACN_DECODE_ARGUMENT_ID: Int = 181 /*  */
/*-- TArgumentValue --------------------------------------------*/
type TArgumentValue_arg0 = ULong


enum TArgumentValue:
    case arg0_PRESENT(arg0: TArgumentValue_arg0)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775799L))
        this match {
            case TArgumentValue.arg0_PRESENT(arg0) =>
                8L
        }
    }.ensuring { (res: Long) => 
        res == 8L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775799L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775799L))
        this match {
            case TArgumentValue.arg0_PRESENT(arg0) =>
                ()
        }
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775799L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775799L))
        require((offset % 8L) == (otherOffset % 8L))
        this match {
            case TArgumentValue.arg0_PRESENT(arg0) =>
                ()
        }
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775799L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775799L))
        require((offset % 16L) == (otherOffset % 16L))
        this match {
            case TArgumentValue.arg0_PRESENT(arg0) =>
                ()
        }
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775799L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775799L))
        require((offset % 32L) == (otherOffset % 32L))
        this match {
            case TArgumentValue.arg0_PRESENT(arg0) =>
                ()
        }
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

@inline @cCode.inline val ERR_ARGUMENTVALUE_ARG0: Int = 182 /*(0 .. 255) */

@inline @cCode.inline val ERR_ARGUMENTVALUE: Int = 187 /* */

 
 
/*-- TArgument --------------------------------------------*/

case class TArgument (
    argumentValue: TArgumentValue
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775767L))
        val size_0 = 32L
        val size_1 = this.argumentValue match {
            case TArgumentValue.arg0_PRESENT(arg0) =>
                8L
        }
        size_0 + size_1
    }.ensuring { (res: Long) => 
        res == 40L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775767L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775767L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.argumentValue match {
            case TArgumentValue.arg0_PRESENT(arg0) =>
                8L
        }
        val size_1_otherOffset = this.argumentValue match {
            case TArgumentValue.arg0_PRESENT(arg0) =>
                8L
        }
        this.argumentValue.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775767L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775767L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.argumentValue match {
            case TArgumentValue.arg0_PRESENT(arg0) =>
                8L
        }
        val size_1_otherOffset = this.argumentValue match {
            case TArgumentValue.arg0_PRESENT(arg0) =>
                8L
        }
        this.argumentValue.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775767L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775767L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.argumentValue match {
            case TArgumentValue.arg0_PRESENT(arg0) =>
                8L
        }
        val size_1_otherOffset = this.argumentValue match {
            case TArgumentValue.arg0_PRESENT(arg0) =>
                8L
        }
        this.argumentValue.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775767L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775767L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.argumentValue match {
            case TArgumentValue.arg0_PRESENT(arg0) =>
                8L
        }
        val size_1_otherOffset = this.argumentValue match {
            case TArgumentValue.arg0_PRESENT(arg0) =>
                8L
        }
        this.argumentValue.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_ARGUMENT: Int = 78 /* */
@inline @cCode.inline val ERR_ARGUMENT_ARGUMENTVALUE_2: Int = 75 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_ARGUMENT: Int = 81 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_ARGUMENT_ARGUMENT_ID_UNINITIALIZED: Int = 82 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_ARGUMENT_ARGUMENT_ID: Int = 63 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_ARGUMENT_ARGUMENTVALUE: Int = 73 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_ARGUMENT_ARGUMENTVALUE_ARG0: Int = 68 /*  */
@inline @cCode.inline val TArgument_REQUIRED_BYTES_FOR_ACN_ENCODING = 5
@inline @cCode.inline val TArgument_REQUIRED_BITS_FOR_ACN_ENCODING = 40

@inline @cCode.inline val ERR_ACN_DECODE_ARGUMENT: Int = 83 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_ARGUMENT_ARGUMENT_ID: Int = 64 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_ARGUMENT_ARGUMENTVALUE: Int = 74 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_ARGUMENT_ARGUMENTVALUE_ARG0: Int = 69 /*  */
/*-- TMultipleArguments --------------------------------------------*/


case class TMultipleArguments_arguments (nCount: Int, arr: Vector[TArgument])
{
    require(this.arr.size <= 4096 && 1 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854611967L))
        TMultipleArguments_arguments.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 163840L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854611967L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854611967L))
        TMultipleArguments_arguments.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854611967L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854611967L))
        require((offset % 8L) == (otherOffset % 8L))
        TMultipleArguments_arguments.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854611967L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854611967L))
        require((offset % 16L) == (otherOffset % 16L))
        TMultipleArguments_arguments.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854611967L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854611967L))
        require((offset % 32L) == (otherOffset % 32L))
        TMultipleArguments_arguments.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TMultipleArguments_arguments {
    def sizeRange(ls: Vector[TArgument], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 4096))
        require((0L <= offset) && (offset <= 9223372036854775807L - 40L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(elemSize == 40L)
            elemSize + TMultipleArguments_arguments.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 40L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TArgument], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 4096))
        require((0L <= offset) && (offset <= 9223372036854775807L - 40L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 40L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 40L)
            assert(elemSizeOtherOff == 40L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TMultipleArguments_arguments.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TMultipleArguments_arguments.sizeRange(ls, offset, from, to) == TMultipleArguments_arguments.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TArgument], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 4096))
        require((0L <= offset) && (offset <= 9223372036854775807L - 40L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 40L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 40L)
            assert(elemSizeOtherOff == 40L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TMultipleArguments_arguments.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TMultipleArguments_arguments.sizeRange(ls, offset, from, to) == TMultipleArguments_arguments.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TArgument], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 4096))
        require((0L <= offset) && (offset <= 9223372036854775807L - 40L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 40L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 40L)
            assert(elemSizeOtherOff == 40L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TMultipleArguments_arguments.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TMultipleArguments_arguments.sizeRange(ls, offset, from, to) == TMultipleArguments_arguments.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TArgument], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 4096))
        require((0L <= offset) && (offset <= 9223372036854775807L - 40L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 40L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 40L)
            assert(elemSizeOtherOff == 40L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TMultipleArguments_arguments.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TMultipleArguments_arguments.sizeRange(ls, offset, from, to) == TMultipleArguments_arguments.sizeRange(ls, otherOffset, from, to)
    }
}

case class TMultipleArguments (
    arguments: TMultipleArguments_arguments
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854611935L))
        val size_0 = 32L
        val size_1 = this.arguments.size(offset + size_0)
        size_0 + size_1
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 163872L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854611935L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854611935L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.arguments.size(offset + size_0_offset)
        val size_1_otherOffset = this.arguments.size(otherOffset + size_0_otherOffset)
        this.arguments.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854611935L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854611935L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.arguments.size(offset + size_0_offset)
        val size_1_otherOffset = this.arguments.size(otherOffset + size_0_otherOffset)
        this.arguments.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854611935L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854611935L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.arguments.size(offset + size_0_offset)
        val size_1_otherOffset = this.arguments.size(otherOffset + size_0_otherOffset)
        this.arguments.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854611935L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854611935L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.arguments.size(offset + size_0_offset)
        val size_1_otherOffset = this.arguments.size(otherOffset + size_0_otherOffset)
        this.arguments.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_MULTIPLEARGUMENTS_ARGUMENTS: Int = 166 /*(SIZE(1 .. maxTC-8-1-ArgumentCount)) */
@inline @cCode.inline val ERR_MULTIPLEARGUMENTS_ARGUMENTS_ELM_2: Int = 161 /* */

@inline @cCode.inline val ERR_MULTIPLEARGUMENTS: Int = 171 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_MULTIPLEARGUMENTS: Int = 174 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_MULTIPLEARGUMENTS_N_UNINITIALIZED: Int = 175 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_MULTIPLEARGUMENTS_N: Int = 139 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_MULTIPLEARGUMENTS_ARGUMENTS: Int = 169 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_MULTIPLEARGUMENTS_ARGUMENTS_ELM_2: Int = 164 /*  */
@inline @cCode.inline val TMultipleArguments_REQUIRED_BYTES_FOR_ACN_ENCODING = 20484
@inline @cCode.inline val TMultipleArguments_REQUIRED_BITS_FOR_ACN_ENCODING = 163872

@inline @cCode.inline val ERR_ACN_DECODE_MULTIPLEARGUMENTS: Int = 176 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_MULTIPLEARGUMENTS_N: Int = 140 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_MULTIPLEARGUMENTS_ARGUMENTS: Int = 170 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_MULTIPLEARGUMENTS_ARGUMENTS_ELM_2: Int = 165 /*  */
/*-- TFunctionArguments --------------------------------------------*/
type TFunctionArguments_function1 = ULong


enum TFunctionArguments:
    case function0_PRESENT(function0: TMultipleArguments)
    case function1_PRESENT(function1: TFunctionArguments_function1)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854611935L))
        this match {
            case TFunctionArguments.function0_PRESENT(function0) =>
                val size_1_0 = 32L
                val size_1_1 = function0.arguments.size(offset + size_1_0)
                size_1_0 + size_1_1
            case TFunctionArguments.function1_PRESENT(function1) =>
                8L
        }
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 163872L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854611935L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854611935L))
        this match {
            case TFunctionArguments.function0_PRESENT(function0) =>
                function0.sizeLemmaAnyOffset(offset, otherOffset)
            case TFunctionArguments.function1_PRESENT(function1) =>
                ()
        }
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854611935L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854611935L))
        require((offset % 8L) == (otherOffset % 8L))
        this match {
            case TFunctionArguments.function0_PRESENT(function0) =>
                function0.sizeLemmaNextByte(offset, otherOffset)
            case TFunctionArguments.function1_PRESENT(function1) =>
                ()
        }
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854611935L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854611935L))
        require((offset % 16L) == (otherOffset % 16L))
        this match {
            case TFunctionArguments.function0_PRESENT(function0) =>
                function0.sizeLemmaNextWord(offset, otherOffset)
            case TFunctionArguments.function1_PRESENT(function1) =>
                ()
        }
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854611935L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854611935L))
        require((offset % 32L) == (otherOffset % 32L))
        this match {
            case TFunctionArguments.function0_PRESENT(function0) =>
                function0.sizeLemmaNextDWord(offset, otherOffset)
            case TFunctionArguments.function1_PRESENT(function1) =>
                ()
        }
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

@inline @cCode.inline val ERR_FUNCTIONARGUMENTS_FUNCTION1: Int = 129 /*(0 .. 255) */

@inline @cCode.inline val ERR_FUNCTIONARGUMENTS: Int = 134 /* */
@inline @cCode.inline val ERR_FUNCTIONARGUMENTS_FUNCTION0_2: Int = 126 /* */

 
 
/*-- TTC_8_1_PerformAFunction --------------------------------------------*/

case class TTC_8_1_PerformAFunction (
    functionArguments: TFunctionArguments
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854611907L))
        val size_0 = 28L
        val size_1 = this.functionArguments match {
            case TFunctionArguments.function0_PRESENT(function0) =>
                val size_2_1 = 32L
                val size_2_2 = function0.arguments.size(offset + size_0 + size_2_1)
                size_2_1 + size_2_2
            case TFunctionArguments.function1_PRESENT(function1) =>
                8L
        }
        size_0 + size_1
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 163900L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854611907L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854611907L))
        val size_0_offset = 28L
        val size_0_otherOffset = 28L
        val size_1_offset = this.functionArguments match {
            case TFunctionArguments.function0_PRESENT(function0) =>
                val size_2_1 = 32L
                val size_2_2 = function0.arguments.size(offset + size_0_offset + size_2_1)
                size_2_1 + size_2_2
            case TFunctionArguments.function1_PRESENT(function1) =>
                8L
        }
        val size_1_otherOffset = this.functionArguments match {
            case TFunctionArguments.function0_PRESENT(function0) =>
                val size_2_1 = 32L
                val size_2_2 = function0.arguments.size(otherOffset + size_0_otherOffset + size_2_1)
                size_2_1 + size_2_2
            case TFunctionArguments.function1_PRESENT(function1) =>
                8L
        }
        this.functionArguments.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854611907L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854611907L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 28L
        val size_0_otherOffset = 28L
        val size_1_offset = this.functionArguments match {
            case TFunctionArguments.function0_PRESENT(function0) =>
                val size_2_1 = 32L
                val size_2_2 = function0.arguments.size(offset + size_0_offset + size_2_1)
                size_2_1 + size_2_2
            case TFunctionArguments.function1_PRESENT(function1) =>
                8L
        }
        val size_1_otherOffset = this.functionArguments match {
            case TFunctionArguments.function0_PRESENT(function0) =>
                val size_2_1 = 32L
                val size_2_2 = function0.arguments.size(otherOffset + size_0_otherOffset + size_2_1)
                size_2_1 + size_2_2
            case TFunctionArguments.function1_PRESENT(function1) =>
                8L
        }
        this.functionArguments.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854611907L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854611907L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 28L
        val size_0_otherOffset = 28L
        val size_1_offset = this.functionArguments match {
            case TFunctionArguments.function0_PRESENT(function0) =>
                val size_2_1 = 32L
                val size_2_2 = function0.arguments.size(offset + size_0_offset + size_2_1)
                size_2_1 + size_2_2
            case TFunctionArguments.function1_PRESENT(function1) =>
                8L
        }
        val size_1_otherOffset = this.functionArguments match {
            case TFunctionArguments.function0_PRESENT(function0) =>
                val size_2_1 = 32L
                val size_2_2 = function0.arguments.size(otherOffset + size_0_otherOffset + size_2_1)
                size_2_1 + size_2_2
            case TFunctionArguments.function1_PRESENT(function1) =>
                8L
        }
        this.functionArguments.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854611907L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854611907L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 28L
        val size_0_otherOffset = 28L
        val size_1_offset = this.functionArguments match {
            case TFunctionArguments.function0_PRESENT(function0) =>
                val size_2_1 = 32L
                val size_2_2 = function0.arguments.size(offset + size_0_offset + size_2_1)
                size_2_1 + size_2_2
            case TFunctionArguments.function1_PRESENT(function1) =>
                8L
        }
        val size_1_otherOffset = this.functionArguments match {
            case TFunctionArguments.function0_PRESENT(function0) =>
                val size_2_1 = 32L
                val size_2_2 = function0.arguments.size(otherOffset + size_0_otherOffset + size_2_1)
                size_2_1 + size_2_2
            case TFunctionArguments.function1_PRESENT(function1) =>
                8L
        }
        this.functionArguments.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_8_1_PERFORMAFUNCTION: Int = 56 /* */
@inline @cCode.inline val ERR_TC_8_1_PERFORMAFUNCTION_FUNCTIONARGUMENTS_2: Int = 53 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_8_1_PERFORMAFUNCTION: Int = 59 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_8_1_PERFORMAFUNCTION_FUNCTION_ID_UNINITIALIZED: Int = 60 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_8_1_PERFORMAFUNCTION_FUNCTION_ID: Int = 1 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_8_1_PERFORMAFUNCTION_FUNCTIONARGUMENTS: Int = 51 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_8_1_PERFORMAFUNCTION_FUNCTIONARGUMENTS_FUNCTION0: Int = 38 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_8_1_PERFORMAFUNCTION_FUNCTIONARGUMENTS_FUNCTION0_N_UNINITIALIZED: Int = 61 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_8_1_PERFORMAFUNCTION_FUNCTIONARGUMENTS_FUNCTION0_N: Int = 3 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_8_1_PERFORMAFUNCTION_FUNCTIONARGUMENTS_FUNCTION0_ARGUMENTS: Int = 33 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_8_1_PERFORMAFUNCTION_FUNCTIONARGUMENTS_FUNCTION0_ARGUMENTS_ELM_2: Int = 28 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_8_1_PERFORMAFUNCTION_FUNCTIONARGUMENTS_FUNCTION1: Int = 46 /*  */
@inline @cCode.inline val TTC_8_1_PerformAFunction_REQUIRED_BYTES_FOR_ACN_ENCODING = 20488
@inline @cCode.inline val TTC_8_1_PerformAFunction_REQUIRED_BITS_FOR_ACN_ENCODING = 163900

@inline @cCode.inline val ERR_ACN_DECODE_TC_8_1_PERFORMAFUNCTION: Int = 62 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_8_1_PERFORMAFUNCTION_FUNCTION_ID: Int = 2 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_8_1_PERFORMAFUNCTION_FUNCTIONARGUMENTS: Int = 52 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_8_1_PERFORMAFUNCTION_FUNCTIONARGUMENTS_FUNCTION0: Int = 39 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_8_1_PERFORMAFUNCTION_FUNCTIONARGUMENTS_FUNCTION0_N: Int = 4 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_8_1_PERFORMAFUNCTION_FUNCTIONARGUMENTS_FUNCTION0_ARGUMENTS: Int = 34 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_8_1_PERFORMAFUNCTION_FUNCTIONARGUMENTS_FUNCTION0_ARGUMENTS_ELM_2: Int = 29 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_8_1_PERFORMAFUNCTION_FUNCTIONARGUMENTS_FUNCTION1: Int = 47 /*  */

// @inline @cCode.inline val maxTC_8_1_ArgumentCount: Int = 4096 // defined in body
// @inline @cCode.inline val maxTC_8_1_Function_ID_Size: Int = 4 // defined in body

