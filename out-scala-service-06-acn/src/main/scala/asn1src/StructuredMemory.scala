/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._


def TBaseMultipleMemid_memId1_IsConstraintValid(pVal: TBaseMultipleMemid_memId1): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = (pVal <= ULong.fromRaw(255L)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    ret
}

def TBaseMultipleMemid_IsConstraintValid(pVal: TBaseMultipleMemid): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    pVal match
        case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
            ret = TBaseMultipleMemid_memId1_IsConstraintValid(memId1)
    ret
}

def TBaseMultipleMemid_memId1_Initialize(): TBaseMultipleMemid_memId1 = ULong.fromRaw(0L)
def TBaseMultipleMemid_Initialize(): TBaseMultipleMemid = TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(ULong.fromRaw(0L))

def TBase_IsConstraintValid(pVal: TBase): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = (pVal <= ULong.fromRaw(255L)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    ret
}

def TBase_Initialize(): TBase = ULong.fromRaw(0L)

@opaque @inlineOnce 
def TBase_ACN_Encode(pVal: TBase, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(8L))
    TBase_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(): Unit = ().ensuring(_ => GetBitCountUnsigned(ULong.fromRaw(255) - ULong.fromRaw(0)) == 8)
            bitCountLemma()
        }
    }
    codec.base.encodeConstrainedPosWholeNumber(pVal, 0.toRawULong, 255.toRawULong)
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 8L
    }
}

@opaque @inlineOnce 
def TBase_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TBase] =
{
    require(codec.base.bitStream.validate_offset_bits(8L))

    @ghost val oldCdc = snapshot(codec)
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(): Unit = ().ensuring(_ => GetBitCountUnsigned(ULong.fromRaw(255) - ULong.fromRaw(0)) == 8)
            bitCountLemma()
        }
    }
    val pVal = codec.base.decodeConstrainedPosWholeNumber(ULong.fromRaw(0), ULong.fromRaw(255)) // uper:135

    TBase_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TBase](l)
        case Right(_) => RightMut[ErrorCode, TBase](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TBase]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 8L && TBase_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TBase_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TBase]) =
{
    require(codec.base.bitStream.validate_offset_bits(8L))
    val cpy = snapshot(codec)
    val res = TBase_ACN_Decode(cpy)
    (cpy, res)
}