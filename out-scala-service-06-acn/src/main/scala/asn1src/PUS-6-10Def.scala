/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TTM_6_10_DataArea --------------------------------------------*/

case class TTM_6_10_DataArea_checksum(arr: Vector[UByte])
{
    require(this.arr.length == 2)
}

case class TTM_6_10_DataArea (
    startAddress: TPUSC_UINT32, 
    length: TPUSC_UINT32, 
    checksum: TTM_6_10_DataArea_checksum
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775727L))
        val size_0 = 32L
        val size_1 = 32L
        val size_2 = 16L
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        res == 80L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775727L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775727L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775727L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775727L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775727L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775727L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775727L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775727L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TM_6_10_DATAAREA_CHECKSUM: Int = 110 /*(SIZE (16)) */

@inline @cCode.inline val ERR_TM_6_10_DATAAREA: Int = 115 /* */
@inline @cCode.inline val ERR_TM_6_10_DATAAREA_STARTADDRESS_2_2: Int = 95 /* */
@inline @cCode.inline val ERR_TM_6_10_DATAAREA_LENGTH_2: Int = 105 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TM_6_10_DATAAREA: Int = 118 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_6_10_DATAAREA_STARTADDRESS_2_2: Int = 98 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_6_10_DATAAREA_LENGTH_2: Int = 108 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_6_10_DATAAREA_CHECKSUM: Int = 113 /*  */
@inline @cCode.inline val TTM_6_10_DataArea_REQUIRED_BYTES_FOR_ACN_ENCODING = 10
@inline @cCode.inline val TTM_6_10_DataArea_REQUIRED_BITS_FOR_ACN_ENCODING = 80

@inline @cCode.inline val ERR_ACN_DECODE_TM_6_10_DATAAREA: Int = 119 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_6_10_DATAAREA_STARTADDRESS_2_2: Int = 99 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_6_10_DATAAREA_LENGTH_2: Int = 109 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_6_10_DATAAREA_CHECKSUM: Int = 114 /*  */
/*-- TTM_6_10_CheckedRawMemoryDartaReport --------------------------------------------*/


case class TTM_6_10_CheckedRawMemoryDartaReport_dataArea (nCount: Int, arr: Vector[TTM_6_10_DataArea])
{
    require(this.arr.size <= 63 && 1 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854770767L))
        TTM_6_10_CheckedRawMemoryDartaReport_dataArea.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 5040L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854770767L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854770767L))
        TTM_6_10_CheckedRawMemoryDartaReport_dataArea.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854770767L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854770767L))
        require((offset % 8L) == (otherOffset % 8L))
        TTM_6_10_CheckedRawMemoryDartaReport_dataArea.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854770767L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854770767L))
        require((offset % 16L) == (otherOffset % 16L))
        TTM_6_10_CheckedRawMemoryDartaReport_dataArea.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854770767L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854770767L))
        require((offset % 32L) == (otherOffset % 32L))
        TTM_6_10_CheckedRawMemoryDartaReport_dataArea.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TTM_6_10_CheckedRawMemoryDartaReport_dataArea {
    def sizeRange(ls: Vector[TTM_6_10_DataArea], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 80L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(elemSize == 80L)
            elemSize + TTM_6_10_CheckedRawMemoryDartaReport_dataArea.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 80L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TTM_6_10_DataArea], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 80L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 80L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 80L)
            assert(elemSizeOtherOff == 80L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TTM_6_10_CheckedRawMemoryDartaReport_dataArea.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTM_6_10_CheckedRawMemoryDartaReport_dataArea.sizeRange(ls, offset, from, to) == TTM_6_10_CheckedRawMemoryDartaReport_dataArea.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TTM_6_10_DataArea], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 80L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 80L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 80L)
            assert(elemSizeOtherOff == 80L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TTM_6_10_CheckedRawMemoryDartaReport_dataArea.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTM_6_10_CheckedRawMemoryDartaReport_dataArea.sizeRange(ls, offset, from, to) == TTM_6_10_CheckedRawMemoryDartaReport_dataArea.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TTM_6_10_DataArea], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 80L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 80L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 80L)
            assert(elemSizeOtherOff == 80L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TTM_6_10_CheckedRawMemoryDartaReport_dataArea.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTM_6_10_CheckedRawMemoryDartaReport_dataArea.sizeRange(ls, offset, from, to) == TTM_6_10_CheckedRawMemoryDartaReport_dataArea.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TTM_6_10_DataArea], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 80L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 80L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 80L)
            assert(elemSizeOtherOff == 80L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TTM_6_10_CheckedRawMemoryDartaReport_dataArea.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTM_6_10_CheckedRawMemoryDartaReport_dataArea.sizeRange(ls, offset, from, to) == TTM_6_10_CheckedRawMemoryDartaReport_dataArea.sizeRange(ls, otherOffset, from, to)
    }
}

case class TTM_6_10_CheckedRawMemoryDartaReport (
    memory_ID: OptionMut[TMemory_ID], 
    dataArea: TTM_6_10_CheckedRawMemoryDartaReport_dataArea
) {
    require(this.memory_ID.isDefined)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854770703L))
        val size_0 = (this.memory_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        })
        val size_1 = 32L
        val size_2 = this.dataArea.size(offset + size_0 + size_1)
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 5104L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854770703L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854770703L))
        val size_0_offset = (this.memory_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        })
        val size_0_otherOffset = this.memory_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.dataArea.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.dataArea.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.dataArea.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854770703L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854770703L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = (this.memory_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        })
        val size_0_otherOffset = this.memory_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.dataArea.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.dataArea.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.dataArea.sizeLemmaNextByte(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854770703L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854770703L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = (this.memory_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        })
        val size_0_otherOffset = this.memory_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.dataArea.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.dataArea.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.dataArea.sizeLemmaNextWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854770703L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854770703L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = (this.memory_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        })
        val size_0_otherOffset = this.memory_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.dataArea.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.dataArea.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.dataArea.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TM_6_10_CHECKEDRAWMEMORYDARTAREPORT_DATAAREA: Int = 74 /*(SIZE(1 .. maxTM-6-10-DataAreaCount)) */
@inline @cCode.inline val ERR_TM_6_10_CHECKEDRAWMEMORYDARTAREPORT_DATAAREA_ELM_2: Int = 69 /* */

@inline @cCode.inline val ERR_TM_6_10_CHECKEDRAWMEMORYDARTAREPORT: Int = 79 /*(WITH COMPONENTS {memory-ID PRESENT}) */
@inline @cCode.inline val ERR_TM_6_10_CHECKEDRAWMEMORYDARTAREPORT_MEMORY_ID_2: Int = 27 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TM_6_10_CHECKEDRAWMEMORYDARTAREPORT: Int = 82 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_6_10_CHECKEDRAWMEMORYDARTAREPORT_MEMORY_ID_2: Int = 30 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_6_10_CHECKEDRAWMEMORYDARTAREPORT_N_UNINITIALIZED: Int = 83 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_6_10_CHECKEDRAWMEMORYDARTAREPORT_N: Int = 32 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_6_10_CHECKEDRAWMEMORYDARTAREPORT_DATAAREA: Int = 77 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_6_10_CHECKEDRAWMEMORYDARTAREPORT_DATAAREA_ELM_2: Int = 72 /*  */
@inline @cCode.inline val TTM_6_10_CheckedRawMemoryDartaReport_REQUIRED_BYTES_FOR_ACN_ENCODING = 638
@inline @cCode.inline val TTM_6_10_CheckedRawMemoryDartaReport_REQUIRED_BITS_FOR_ACN_ENCODING = 5104

@inline @cCode.inline val ERR_ACN_DECODE_TM_6_10_CHECKEDRAWMEMORYDARTAREPORT: Int = 84 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_6_10_CHECKEDRAWMEMORYDARTAREPORT_MEMORY_ID_2: Int = 31 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_6_10_CHECKEDRAWMEMORYDARTAREPORT_N: Int = 33 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_6_10_CHECKEDRAWMEMORYDARTAREPORT_DATAAREA: Int = 78 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_6_10_CHECKEDRAWMEMORYDARTAREPORT_DATAAREA_ELM_2: Int = 73 /*  */

// @inline @cCode.inline val maxTM_6_10_DataAreaCount: Int = 63 // defined in body

