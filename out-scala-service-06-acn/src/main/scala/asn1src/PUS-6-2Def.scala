/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TTC_6_2_DataArea --------------------------------------------*/

case class TTC_6_2_DataArea_checksum(arr: Vector[UByte])
{
    require(this.arr.length == 2)
}

case class TTC_6_2_DataArea (
    startAddress: TPUSC_UINT32, 
    dataToLoad: TMemoryData, 
    checksum: OptionMut[TTC_6_2_DataArea_checksum]
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854742966L))
        val size_0 = 1L
        val size_1 = 32L
        val size_2 = this.dataToLoad.size(offset + size_0 + size_1)
        val size_3 = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        size_0 + size_1 + size_2 + size_3
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 32841L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854742966L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854742966L))
        val size_0_offset = 1L
        val size_0_otherOffset = 1L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.dataToLoad.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.dataToLoad.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.dataToLoad.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        val size_3_offset = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        val size_3_otherOffset = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854742966L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854742966L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 1L
        val size_0_otherOffset = 1L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.dataToLoad.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.dataToLoad.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.dataToLoad.sizeLemmaNextByte(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        val size_3_offset = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        val size_3_otherOffset = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854742966L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854742966L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 1L
        val size_0_otherOffset = 1L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.dataToLoad.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.dataToLoad.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.dataToLoad.sizeLemmaNextWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        val size_3_offset = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        val size_3_otherOffset = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854742966L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854742966L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 1L
        val size_0_otherOffset = 1L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.dataToLoad.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.dataToLoad.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.dataToLoad.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        val size_3_offset = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        val size_3_otherOffset = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_6_2_DATAAREA_CHECKSUM: Int = 1401 /*(SIZE (16)) */

@inline @cCode.inline val ERR_TC_6_2_DATAAREA: Int = 1406 /* */
@inline @cCode.inline val ERR_TC_6_2_DATAAREA_STARTADDRESS_2_2: Int = 1376 /* */
@inline @cCode.inline val ERR_TC_6_2_DATAAREA_DATATOLOAD_2: Int = 1396 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_2_DATAAREA: Int = 1409 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_2_DATAAREA_STARTADDRESS_2_2: Int = 1379 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_2_DATAAREA_DATATOLOAD_2: Int = 1399 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_2_DATAAREA_CHECKSUM: Int = 1404 /*  */
@inline @cCode.inline val TTC_6_2_DataArea_REQUIRED_BYTES_FOR_ACN_ENCODING = 4106
@inline @cCode.inline val TTC_6_2_DataArea_REQUIRED_BITS_FOR_ACN_ENCODING = 32841

@inline @cCode.inline val ERR_ACN_DECODE_TC_6_2_DATAAREA: Int = 1410 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_2_DATAAREA_STARTADDRESS_2_2: Int = 1380 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_2_DATAAREA_DATATOLOAD_2: Int = 1400 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_2_DATAAREA_CHECKSUM: Int = 1405 /*  */
/*-- TTC_6_2_LoadRawMemoryDataAreas --------------------------------------------*/


case class TTC_6_2_LoadRawMemoryDataAreas_dataAreas (nCount: Int, arr: Vector[TTC_6_2_DataArea])
{
    require(this.arr.size <= 63 && 1 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036852706824L))
        TTC_6_2_LoadRawMemoryDataAreas_dataAreas.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 2068983L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036852706824L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036852706824L))
        TTC_6_2_LoadRawMemoryDataAreas_dataAreas.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036852706824L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036852706824L))
        require((offset % 8L) == (otherOffset % 8L))
        TTC_6_2_LoadRawMemoryDataAreas_dataAreas.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036852706824L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036852706824L))
        require((offset % 16L) == (otherOffset % 16L))
        TTC_6_2_LoadRawMemoryDataAreas_dataAreas.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036852706824L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036852706824L))
        require((offset % 32L) == (otherOffset % 32L))
        TTC_6_2_LoadRawMemoryDataAreas_dataAreas.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TTC_6_2_LoadRawMemoryDataAreas_dataAreas {
    def sizeRange(ls: Vector[TTC_6_2_DataArea], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32841L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(0L <= elemSize && elemSize <= 32841L)
            elemSize + TTC_6_2_LoadRawMemoryDataAreas_dataAreas.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 32841L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TTC_6_2_DataArea], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32841L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32841L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 32841L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 32841L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TTC_6_2_LoadRawMemoryDataAreas_dataAreas.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_6_2_LoadRawMemoryDataAreas_dataAreas.sizeRange(ls, offset, from, to) == TTC_6_2_LoadRawMemoryDataAreas_dataAreas.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TTC_6_2_DataArea], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32841L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32841L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 32841L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 32841L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TTC_6_2_LoadRawMemoryDataAreas_dataAreas.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_6_2_LoadRawMemoryDataAreas_dataAreas.sizeRange(ls, offset, from, to) == TTC_6_2_LoadRawMemoryDataAreas_dataAreas.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TTC_6_2_DataArea], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32841L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32841L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 32841L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 32841L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TTC_6_2_LoadRawMemoryDataAreas_dataAreas.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_6_2_LoadRawMemoryDataAreas_dataAreas.sizeRange(ls, offset, from, to) == TTC_6_2_LoadRawMemoryDataAreas_dataAreas.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TTC_6_2_DataArea], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32841L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32841L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 32841L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 32841L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TTC_6_2_LoadRawMemoryDataAreas_dataAreas.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_6_2_LoadRawMemoryDataAreas_dataAreas.sizeRange(ls, offset, from, to) == TTC_6_2_LoadRawMemoryDataAreas_dataAreas.sizeRange(ls, otherOffset, from, to)
    }
}

case class TTC_6_2_LoadRawMemoryDataAreas (
    memory_ID: OptionMut[TMemory_ID], 
    dataAreas: TTC_6_2_LoadRawMemoryDataAreas_dataAreas
) {
    require(this.memory_ID.isDefined)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036852706760L))
        val size_0 = (this.memory_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        })
        val size_1 = 32L
        val size_2 = this.dataAreas.size(offset + size_0 + size_1)
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 2069047L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036852706760L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036852706760L))
        val size_0_offset = (this.memory_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        })
        val size_0_otherOffset = this.memory_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.dataAreas.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.dataAreas.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.dataAreas.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036852706760L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036852706760L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = (this.memory_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        })
        val size_0_otherOffset = this.memory_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.dataAreas.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.dataAreas.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.dataAreas.sizeLemmaNextByte(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036852706760L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036852706760L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = (this.memory_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        })
        val size_0_otherOffset = this.memory_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.dataAreas.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.dataAreas.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.dataAreas.sizeLemmaNextWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036852706760L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036852706760L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = (this.memory_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        })
        val size_0_otherOffset = this.memory_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.dataAreas.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.dataAreas.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.dataAreas.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_6_2_LOADRAWMEMORYDATAAREAS_DATAAREAS: Int = 1355 /*(SIZE(1 .. maxTC-6-2-DataAreasCount)) */
@inline @cCode.inline val ERR_TC_6_2_LOADRAWMEMORYDATAAREAS_DATAAREAS_ELM_2: Int = 1350 /* */

@inline @cCode.inline val ERR_TC_6_2_LOADRAWMEMORYDATAAREAS: Int = 1360 /*(WITH COMPONENTS {memory-ID PRESENT}) */
@inline @cCode.inline val ERR_TC_6_2_LOADRAWMEMORYDATAAREAS_MEMORY_ID_2: Int = 1298 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_2_LOADRAWMEMORYDATAAREAS: Int = 1363 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_2_LOADRAWMEMORYDATAAREAS_MEMORY_ID_2: Int = 1301 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_2_LOADRAWMEMORYDATAAREAS_N_UNINITIALIZED: Int = 1364 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_2_LOADRAWMEMORYDATAAREAS_N: Int = 1303 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_2_LOADRAWMEMORYDATAAREAS_DATAAREAS: Int = 1358 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_2_LOADRAWMEMORYDATAAREAS_DATAAREAS_ELM_2: Int = 1353 /*  */
@inline @cCode.inline val TTC_6_2_LoadRawMemoryDataAreas_REQUIRED_BYTES_FOR_ACN_ENCODING = 258631
@inline @cCode.inline val TTC_6_2_LoadRawMemoryDataAreas_REQUIRED_BITS_FOR_ACN_ENCODING = 2069047

@inline @cCode.inline val ERR_ACN_DECODE_TC_6_2_LOADRAWMEMORYDATAAREAS: Int = 1365 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_2_LOADRAWMEMORYDATAAREAS_MEMORY_ID_2: Int = 1302 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_2_LOADRAWMEMORYDATAAREAS_N: Int = 1304 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_2_LOADRAWMEMORYDATAAREAS_DATAAREAS: Int = 1359 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_2_LOADRAWMEMORYDATAAREAS_DATAAREAS_ELM_2: Int = 1354 /*  */

// @inline @cCode.inline val maxTC_6_2_DataAreasCount: Int = 63 // defined in body

