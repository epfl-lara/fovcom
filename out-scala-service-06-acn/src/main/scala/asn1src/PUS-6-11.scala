/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._


def TBitMaskMultipleMemid_memId1_IsConstraintValid(@annotation.unused pVal: TBitMaskMultipleMemid_memId1): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = Right(0)
    ret
}

def TBitMaskMultipleMemid_IsConstraintValid(pVal: TBitMaskMultipleMemid): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    pVal match
        case TBitMaskMultipleMemid.BitMaskMultipleMemid_memId1_PRESENT(memId1) =>
            ret = TBitMaskMultipleMemid_memId1_IsConstraintValid(memId1)
    ret
}

def TBitMaskMultipleMemid_memId1_Initialize(): TBitMaskMultipleMemid_memId1 = TBitMaskMultipleMemid_memId1(Vector.fill(4)(0.toRawUByte))
def TBitMaskMultipleMemid_Initialize(): TBitMaskMultipleMemid = TBitMaskMultipleMemid.BitMaskMultipleMemid_memId1_PRESENT(TBitMaskMultipleMemid_memId1(Vector.fill(4)(0.toRawUByte)))

def TDataToLoadMultipleMemid_memId1_IsConstraintValid(@annotation.unused pVal: TDataToLoadMultipleMemid_memId1): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = Right(0)
    ret
}

def TDataToLoadMultipleMemid_IsConstraintValid(pVal: TDataToLoadMultipleMemid): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    pVal match
        case TDataToLoadMultipleMemid.DataToLoadMultipleMemid_memId1_PRESENT(memId1) =>
            ret = TDataToLoadMultipleMemid_memId1_IsConstraintValid(memId1)
    ret
}

def TDataToLoadMultipleMemid_memId1_Initialize(): TDataToLoadMultipleMemid_memId1 = TDataToLoadMultipleMemid_memId1(Vector.fill(4)(0.toRawUByte))
def TDataToLoadMultipleMemid_Initialize(): TDataToLoadMultipleMemid = TDataToLoadMultipleMemid.DataToLoadMultipleMemid_memId1_PRESENT(TDataToLoadMultipleMemid_memId1(Vector.fill(4)(0.toRawUByte)))

def TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_IsConstraintValid(pVal: TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TPUSC_UINT32_IsConstraintValid(pVal.startAddress)
    if ret.isRight then
        ret = TBitMaskMultipleMemid_IsConstraintValid(pVal.bitMask)
        if ret.isRight then
            ret = TDataToLoadMultipleMemid_IsConstraintValid(pVal.dataToLoad)
    ret
}

def TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_Initialize(): TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid = TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid(startAddress = ULong.fromRaw(0L), bitMask = TBitMaskMultipleMemid_Initialize(), dataToLoad = TDataToLoadMultipleMemid_Initialize())

@opaque @inlineOnce 
def TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_ACN_Encode(pVal: TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(128L))
    TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_memory_ID = {

        val TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_memory_ID00 = pVal.dataToLoad match
            case TDataToLoadMultipleMemid.DataToLoadMultipleMemid_memId1_PRESENT(_) =>TMemory_ID.TmemId1

        val TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_memory_ID01 = pVal.bitMask match
            case TBitMaskMultipleMemid.BitMaskMultipleMemid_memId1_PRESENT(_) =>TMemory_ID.TmemId1


        val TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_memory_ID = TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_memory_ID00


        if !((TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_memory_ID == TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_memory_ID00) && (TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_memory_ID == TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_memory_ID01)) then
            return Left(998)
        TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_memory_ID
    }
    /* Encode TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_memory_ID */
    val intVal_TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_memory_ID = TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_memory_ID match
        case TMemory_ID.TmemId1 => ULong.fromRaw(0L)

    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(0))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(intVal_TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_memory_ID)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(intVal_TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_memory_ID)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 128L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode startAddress */
    TPUSC_UINT32_ACN_Encode(pVal.startAddress, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 96L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode bitMask */
    TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_bitMask_ACN_Encode(codec, pVal, TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_memory_ID, pVal.bitMask) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_3.base.bitStream, codec.base.bitStream, 64L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 96L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = pVal.bitMask match {
        case TBitMaskMultipleMemid.BitMaskMultipleMemid_memId1_PRESENT(memId1) =>
            32L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    @ghost val codec_0_4 = snapshot(codec)
    /* Encode dataToLoad */
    TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_dataToLoad_ACN_Encode(codec, pVal, TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_memory_ID, pVal.dataToLoad) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 128L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_3 = pVal.dataToLoad match {
        case TDataToLoadMultipleMemid.DataToLoadMultipleMemid_memId1_PRESENT(memId1) =>
            32L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 128L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2 + size_3)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_bitMask_ACN_Encode(codec: ACN, pVal: TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid, TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_memory_ID: TMemory_ID, bitMask: TBitMaskMultipleMemid): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(32L))
    @ghost val oldCdc = snapshot(codec)
    TBitMaskMultipleMemid_IsConstraintValid(bitMask) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    bitMask match
        case TBitMaskMultipleMemid.BitMaskMultipleMemid_memId1_PRESENT(memId1) =>
            codec.base.encodeOctetString_no_length_vec(memId1.arr, 4.toInt)
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + bitMask.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_dataToLoad_ACN_Encode(codec: ACN, pVal: TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid, TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_memory_ID: TMemory_ID, dataToLoad: TDataToLoadMultipleMemid): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(32L))
    @ghost val oldCdc = snapshot(codec)
    TDataToLoadMultipleMemid_IsConstraintValid(dataToLoad) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    dataToLoad match
        case TDataToLoadMultipleMemid.DataToLoadMultipleMemid_memId1_PRESENT(memId1) =>
            codec.base.encodeOctetString_no_length_vec(memId1.arr, 4.toInt)
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + dataToLoad.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid] =
{
    require(codec.base.bitStream.validate_offset_bits(128L))

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_memory_ID */
    val intVal_TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_memory_ID = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    val TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_memory_ID = intVal_TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_memory_ID.toRaw match
        case 0 => TMemory_ID.TmemId1
        case _ => return LeftMut(ERR_ACN_DECODE_TC_6_11_LOADARAWMEMORYATOMICDATAAREAINANONINTERRUPTABLETRANSACTIONMULTIPLEMEMID_MEMORY_ID)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 128L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode startAddress */
    val pVal_startAddress = TPUSC_UINT32_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 96L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode bitMask */
    val pVal_bitMask = TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_bitMask_ACN_Decode(codec, TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_memory_ID) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_3.base.bitStream, codec.base.bitStream, 64L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 96L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = pVal_bitMask match {
        case TBitMaskMultipleMemid.BitMaskMultipleMemid_memId1_PRESENT(memId1) =>
            32L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    @ghost val codec_0_4 = snapshot(codec)
    /* Decode dataToLoad */
    val pVal_dataToLoad = TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_dataToLoad_ACN_Decode(codec, TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_memory_ID) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 128L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_3 = pVal_dataToLoad match {
        case TDataToLoadMultipleMemid.DataToLoadMultipleMemid_memId1_PRESENT(memId1) =>
            32L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 128L)
    }
    val pVal = TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid(pVal_startAddress, pVal_bitMask, pVal_dataToLoad)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2 + size_3)
    }

    TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid](l)
        case Right(_) => RightMut[ErrorCode, TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid]) =
{
    require(codec.base.bitStream.validate_offset_bits(128L))
    val cpy = snapshot(codec)
    val res = TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_bitMask_ACN_Decode(codec: ACN, TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_memory_ID: TMemory_ID): EitherMut[Int, TBitMaskMultipleMemid] = {
    require(codec.base.bitStream.validate_offset_bits(32L))
    @ghost val oldCdc = snapshot(codec)
    val bitMask = TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_memory_ID match
        case TMemory_ID.TmemId1 =>
            val memId1 = TBitMaskMultipleMemid_memId1(codec.base.decodeOctetString_no_length_vec(4))
            TBitMaskMultipleMemid.BitMaskMultipleMemid_memId1_PRESENT(memId1)
    TBitMaskMultipleMemid_IsConstraintValid(bitMask) match {
        case Left(l) =>
            LeftMut[Int, TBitMaskMultipleMemid](l)
        case Right(_) =>
            RightMut[Int, TBitMaskMultipleMemid](bitMask)
    }
}.ensuring { (res: EitherMut[Int, TBitMaskMultipleMemid]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TBitMaskMultipleMemid_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_bitMask_ACN_Decode_pure(codec: ACN, TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_memory_ID: TMemory_ID): (ACN, EitherMut[Int, TBitMaskMultipleMemid]) = {
    require(codec.base.bitStream.validate_offset_bits(32L))
    val cpy = snapshot(codec)
    val res = TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_bitMask_ACN_Decode(cpy, TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_memory_ID)
    (cpy, res)
}

@opaque @inlineOnce
def TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_dataToLoad_ACN_Decode(codec: ACN, TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_memory_ID: TMemory_ID): EitherMut[Int, TDataToLoadMultipleMemid] = {
    require(codec.base.bitStream.validate_offset_bits(32L))
    @ghost val oldCdc = snapshot(codec)
    val dataToLoad = TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_memory_ID match
        case TMemory_ID.TmemId1 =>
            val memId1 = TDataToLoadMultipleMemid_memId1(codec.base.decodeOctetString_no_length_vec(4))
            TDataToLoadMultipleMemid.DataToLoadMultipleMemid_memId1_PRESENT(memId1)
    TDataToLoadMultipleMemid_IsConstraintValid(dataToLoad) match {
        case Left(l) =>
            LeftMut[Int, TDataToLoadMultipleMemid](l)
        case Right(_) =>
            RightMut[Int, TDataToLoadMultipleMemid](dataToLoad)
    }
}.ensuring { (res: EitherMut[Int, TDataToLoadMultipleMemid]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TDataToLoadMultipleMemid_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_dataToLoad_ACN_Decode_pure(codec: ACN, TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_memory_ID: TMemory_ID): (ACN, EitherMut[Int, TDataToLoadMultipleMemid]) = {
    require(codec.base.bitStream.validate_offset_bits(32L))
    val cpy = snapshot(codec)
    val res = TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_dataToLoad_ACN_Decode(cpy, TC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_memory_ID)
    (cpy, res)
}

def TBitMask_IsConstraintValid(@annotation.unused pVal: TBitMask): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = Right(0)
    ret
}

def TBitMask_Initialize(): TBitMask = TBitMask(Vector.fill(4)(0.toRawUByte))

@opaque @inlineOnce 
def TBitMask_ACN_Encode(pVal: TBitMask, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(32L))
    TBitMask_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    codec.base.encodeOctetString_no_length_vec(pVal.arr, 4.toInt)
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 32L
    }
}

@opaque @inlineOnce 
def TBitMask_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TBitMask] =
{
    require(codec.base.bitStream.validate_offset_bits(32L))

    @ghost val oldCdc = snapshot(codec)
    val pVal = TBitMask(codec.base.decodeOctetString_no_length_vec(4))

    TBitMask_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TBitMask](l)
        case Right(_) => RightMut[ErrorCode, TBitMask](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TBitMask]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 32L && TBitMask_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TBitMask_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TBitMask]) =
{
    require(codec.base.bitStream.validate_offset_bits(32L))
    val cpy = snapshot(codec)
    val res = TBitMask_ACN_Decode(cpy)
    (cpy, res)
}

def TDataToLoad_IsConstraintValid(@annotation.unused pVal: TDataToLoad): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = Right(0)
    ret
}

def TDataToLoad_Initialize(): TDataToLoad = TDataToLoad(Vector.fill(4)(0.toRawUByte))

@opaque @inlineOnce 
def TDataToLoad_ACN_Encode(pVal: TDataToLoad, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(32L))
    TDataToLoad_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    codec.base.encodeOctetString_no_length_vec(pVal.arr, 4.toInt)
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 32L
    }
}

@opaque @inlineOnce 
def TDataToLoad_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TDataToLoad] =
{
    require(codec.base.bitStream.validate_offset_bits(32L))

    @ghost val oldCdc = snapshot(codec)
    val pVal = TDataToLoad(codec.base.decodeOctetString_no_length_vec(4))

    TDataToLoad_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TDataToLoad](l)
        case Right(_) => RightMut[ErrorCode, TDataToLoad](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TDataToLoad]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 32L && TDataToLoad_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TDataToLoad_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TDataToLoad]) =
{
    require(codec.base.bitStream.validate_offset_bits(32L))
    val cpy = snapshot(codec)
    val res = TDataToLoad_ACN_Decode(cpy)
    (cpy, res)
}

def TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransaction_IsConstraintValid(pVal: TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransaction): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TPUSC_UINT32_IsConstraintValid(pVal.startAddress)
    if ret.isRight then
        ret = TBitMask_IsConstraintValid(pVal.bitMask)
        if ret.isRight then
            ret = TDataToLoad_IsConstraintValid(pVal.dataToLoad)
    ret
}

def TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransaction_Initialize(): TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransaction = TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransaction(startAddress = ULong.fromRaw(0L), bitMask = TBitMask(Vector.fill(4)(0.toRawUByte)), dataToLoad = TDataToLoad(Vector.fill(4)(0.toRawUByte)))

@opaque @inlineOnce 
def TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransaction_ACN_Encode(pVal: TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransaction, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(96L))
    TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransaction_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode startAddress */
    TPUSC_UINT32_ACN_Encode(pVal.startAddress, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 96L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode bitMask */
    TBitMask_ACN_Encode(pVal.bitMask, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 64L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode dataToLoad */
    TDataToLoad_ACN_Encode(pVal.dataToLoad, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 96L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 96L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransaction_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransaction] =
{
    require(codec.base.bitStream.validate_offset_bits(96L))

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode startAddress */
    val pVal_startAddress = TPUSC_UINT32_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 96L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode bitMask */
    val pVal_bitMask = TBitMask_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 64L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode dataToLoad */
    val pVal_dataToLoad = TDataToLoad_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 96L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 96L)
    }
    val pVal = TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransaction(pVal_startAddress, pVal_bitMask, pVal_dataToLoad)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }

    TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransaction_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransaction](l)
        case Right(_) => RightMut[ErrorCode, TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransaction](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransaction]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransaction_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransaction_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransaction]) =
{
    require(codec.base.bitStream.validate_offset_bits(96L))
    val cpy = snapshot(codec)
    val res = TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransaction_ACN_Decode(cpy)
    (cpy, res)
}