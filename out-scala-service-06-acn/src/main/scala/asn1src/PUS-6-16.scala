/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._


def TTC_6_16_DisableTheWriteProtectionOfAMemory_IsConstraintValid(pVal: TTC_6_16_DisableTheWriteProtectionOfAMemory): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    pVal.memory_ID match
        case SomeMut(memory_ID) =>
            ret = TMemory_ID_IsConstraintValid(memory_ID)
        case NoneMut() =>
    if ret.isRight then
        ret = (pVal.memory_ID.isDefined == true) match
            case true =>
                Right(0)
            case false =>
                Left(45)
    ret
}

def TTC_6_16_DisableTheWriteProtectionOfAMemory_Initialize(): TTC_6_16_DisableTheWriteProtectionOfAMemory = TTC_6_16_DisableTheWriteProtectionOfAMemory(memory_ID = SomeMut(TMemory_ID.TmemId1))

@opaque @inlineOnce 
def TTC_6_16_DisableTheWriteProtectionOfAMemory_ACN_Encode(pVal: TTC_6_16_DisableTheWriteProtectionOfAMemory, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(32L))
    TTC_6_16_DisableTheWriteProtectionOfAMemory_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    TC_6_16_DisableTheWriteProtectionOfAMemory_memory_ID_Optional_ACN_Encode(codec, pVal, pVal.memory_ID) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = pVal.memory_ID match {
        case SomeMut(v) =>
            32L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 32L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TC_6_16_DisableTheWriteProtectionOfAMemory_memory_ID_Optional_ACN_Encode(codec: ACN, pVal: TTC_6_16_DisableTheWriteProtectionOfAMemory, memory_ID: OptionMut[TMemory_ID]): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(32L))
    @ghost val oldCdc = snapshot(codec)
    /* Encode memory_ID */
    /* marked as ALWAYS PRESENT, so it must be Some */
    memory_ID match
        case SomeMut(memory_ID) =>
            TMemory_ID_ACN_Encode(memory_ID, codec, false) match // uper:6
                case Right(_) =>
                case Left(err) => return Left(err)
        case NoneMut() => return Left(628)
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 32L
    }
}



@opaque @inlineOnce 
def TTC_6_16_DisableTheWriteProtectionOfAMemory_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTC_6_16_DisableTheWriteProtectionOfAMemory] =
{
    require(codec.base.bitStream.validate_offset_bits(32L))

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val pVal_memory_ID = TC_6_16_DisableTheWriteProtectionOfAMemory_memory_ID_Optional_ACN_Decode(codec) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = pVal_memory_ID match {
        case SomeMut(v) =>
            32L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 32L)
    }
    val pVal = TTC_6_16_DisableTheWriteProtectionOfAMemory(pVal_memory_ID)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0)
    }

    TTC_6_16_DisableTheWriteProtectionOfAMemory_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTC_6_16_DisableTheWriteProtectionOfAMemory](l)
        case Right(_) => RightMut[ErrorCode, TTC_6_16_DisableTheWriteProtectionOfAMemory](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTC_6_16_DisableTheWriteProtectionOfAMemory]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_6_16_DisableTheWriteProtectionOfAMemory_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTC_6_16_DisableTheWriteProtectionOfAMemory_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTC_6_16_DisableTheWriteProtectionOfAMemory]) =
{
    require(codec.base.bitStream.validate_offset_bits(32L))
    val cpy = snapshot(codec)
    val res = TTC_6_16_DisableTheWriteProtectionOfAMemory_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def TC_6_16_DisableTheWriteProtectionOfAMemory_memory_ID_Optional_ACN_Decode(codec: ACN): EitherMut[Int, OptionMut[TMemory_ID]] = {
    require(codec.base.bitStream.validate_offset_bits(32L))
    @ghost val oldCdc = snapshot(codec)
    /* Decode memory_ID */
    /* marked as ALWAYS PRESENT */
    val memory_ID: OptionMut[TMemory_ID] =
        val pVal_memory_ID = TMemory_ID_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        SomeMut(pVal_memory_ID)
    RightMut[Int, OptionMut[TMemory_ID]](memory_ID)
}.ensuring { (res: EitherMut[Int, OptionMut[TMemory_ID]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            resVal.isDefined && old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 32L
    }
}



@ghost @pure
def TC_6_16_DisableTheWriteProtectionOfAMemory_memory_ID_Optional_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[Int, OptionMut[TMemory_ID]]) = {
    require(codec.base.bitStream.validate_offset_bits(32L))
    val cpy = snapshot(codec)
    val res = TC_6_16_DisableTheWriteProtectionOfAMemory_memory_ID_Optional_ACN_Decode(cpy)
    (cpy, res)
}

