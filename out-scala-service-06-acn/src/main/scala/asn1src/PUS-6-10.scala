/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

val maxTM_6_10_DataAreaCount: Int = 63 // variables:188

def TTM_6_10_DataArea_checksum_IsConstraintValid(@annotation.unused pVal: TTM_6_10_DataArea_checksum): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = Right(0)
    ret
}

def TTM_6_10_DataArea_IsConstraintValid(pVal: TTM_6_10_DataArea): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TPUSC_UINT32_IsConstraintValid(pVal.startAddress)
    if ret.isRight then
        ret = TPUSC_UINT32_IsConstraintValid(pVal.length)
        if ret.isRight then
            ret = TTM_6_10_DataArea_checksum_IsConstraintValid(pVal.checksum)
    ret
}

def TTM_6_10_DataArea_checksum_Initialize(): TTM_6_10_DataArea_checksum = TTM_6_10_DataArea_checksum(Vector.fill(2)(0.toRawUByte))
def TTM_6_10_DataArea_Initialize(): TTM_6_10_DataArea = TTM_6_10_DataArea(startAddress = ULong.fromRaw(0L), length = ULong.fromRaw(0L), checksum = TTM_6_10_DataArea_checksum(Vector.fill(2)(0.toRawUByte)))

@opaque @inlineOnce 
def TTM_6_10_DataArea_ACN_Encode(pVal: TTM_6_10_DataArea, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(80L))
    TTM_6_10_DataArea_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode startAddress */
    TPUSC_UINT32_ACN_Encode(pVal.startAddress, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 80L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode length */
    TPUSC_UINT32_ACN_Encode(pVal.length, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 48L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode checksum */
    assert(16.toInt >= 0) // overflow may happen during cast
    codec.base.bitStream.appendBitsMSBFirstVec(pVal.checksum.arr, 16.toInt)

    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 80L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = 16L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 80L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTM_6_10_DataArea_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTM_6_10_DataArea] =
{
    require(codec.base.bitStream.validate_offset_bits(80L))

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode startAddress */
    val pVal_startAddress = TPUSC_UINT32_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 80L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode length */
    val pVal_length = TPUSC_UINT32_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 48L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode checksum */
    val pVal_checksum = TTM_6_10_DataArea_checksum(codec.base.bitStream.readBitsVec(16.toInt))
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 80L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = 16L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 80L)
    }
    val pVal = TTM_6_10_DataArea(pVal_startAddress, pVal_length, pVal_checksum)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }

    TTM_6_10_DataArea_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTM_6_10_DataArea](l)
        case Right(_) => RightMut[ErrorCode, TTM_6_10_DataArea](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTM_6_10_DataArea]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_6_10_DataArea_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTM_6_10_DataArea_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTM_6_10_DataArea]) =
{
    require(codec.base.bitStream.validate_offset_bits(80L))
    val cpy = snapshot(codec)
    val res = TTM_6_10_DataArea_ACN_Decode(cpy)
    (cpy, res)
}

def TTM_6_10_CheckedRawMemoryDartaReport_dataArea_IsConstraintValid(pVal: TTM_6_10_CheckedRawMemoryDartaReport_dataArea): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = ((1 <= pVal.nCount) && (pVal.nCount <= 63)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TTM_6_10_DataArea_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TTM_6_10_CheckedRawMemoryDartaReport_IsConstraintValid(pVal: TTM_6_10_CheckedRawMemoryDartaReport): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    pVal.memory_ID match
        case SomeMut(memory_ID) =>
            ret = TMemory_ID_IsConstraintValid(memory_ID)
        case NoneMut() =>
    if ret.isRight then
        ret = TTM_6_10_CheckedRawMemoryDartaReport_dataArea_IsConstraintValid(pVal.dataArea)
    if ret.isRight then
        ret = (pVal.memory_ID.isDefined == true) match
            case true =>
                Right(0)
            case false =>
                Left(45)
    ret
}

def TTM_6_10_CheckedRawMemoryDartaReport_dataArea_Initialize(): TTM_6_10_CheckedRawMemoryDartaReport_dataArea = TTM_6_10_CheckedRawMemoryDartaReport_dataArea(1, Vector.fill(63)(TTM_6_10_DataArea_Initialize()))
def TTM_6_10_CheckedRawMemoryDartaReport_Initialize(): TTM_6_10_CheckedRawMemoryDartaReport = TTM_6_10_CheckedRawMemoryDartaReport(memory_ID = SomeMut(TMemory_ID.TmemId1), dataArea = TTM_6_10_CheckedRawMemoryDartaReport_dataArea_Initialize())

@opaque @inlineOnce 
def TTM_6_10_CheckedRawMemoryDartaReport_ACN_Encode(pVal: TTM_6_10_CheckedRawMemoryDartaReport, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(5104L))
    var i1: Int = 0
    TTM_6_10_CheckedRawMemoryDartaReport_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    TM_6_10_CheckedRawMemoryDartaReport_memory_ID_Optional_ACN_Encode(codec, pVal, pVal.memory_ID) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 5104L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = pVal.memory_ID match {
        case SomeMut(v) =>
            32L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    val TM_6_10_CheckedRawMemoryDartaReport_n = ULong.fromRaw(pVal.dataArea.nCount)
    if TM_6_10_CheckedRawMemoryDartaReport_n < ULong.fromRaw(1) || TM_6_10_CheckedRawMemoryDartaReport_n > ULong.fromRaw(63) then
        return Left(860)
    /* Encode TM_6_10_CheckedRawMemoryDartaReport_n */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(TM_6_10_CheckedRawMemoryDartaReport_n)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(TM_6_10_CheckedRawMemoryDartaReport_n)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 5072L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode dataArea */
    TM_6_10_CheckedRawMemoryDartaReport_dataArea_ACN_Encode(codec, pVal, TM_6_10_CheckedRawMemoryDartaReport_n, pVal.dataArea) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 5104L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = pVal.dataArea.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 5104L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TM_6_10_CheckedRawMemoryDartaReport_memory_ID_Optional_ACN_Encode(codec: ACN, pVal: TTM_6_10_CheckedRawMemoryDartaReport, memory_ID: OptionMut[TMemory_ID]): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(32L))
    @ghost val oldCdc = snapshot(codec)
    /* Encode memory_ID */
    /* marked as ALWAYS PRESENT, so it must be Some */
    memory_ID match
        case SomeMut(memory_ID) =>
            TMemory_ID_ACN_Encode(memory_ID, codec, false) match // uper:6
                case Right(_) =>
                case Left(err) => return Left(err)
        case NoneMut() => return Left(628)
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 32L
    }
}



@opaque @inlineOnce
def PUS_6_10_TTM_6_10_CheckedRawMemoryDartaReport_dataArea_pVal_dataArea_dataArea_Encode_loop(codec: ACN, dataArea: TTM_6_10_CheckedRawMemoryDartaReport_dataArea, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= dataArea.nCount))
    require((1 <= dataArea.nCount) && (dataArea.nCount <= dataArea.arr.size) && (dataArea.arr.size <= 63))
    require(codec.base.bitStream.validate_offset_bits((80L * (dataArea.nCount - i1))))
    decreases(dataArea.nCount - i1)
    if (i1 == dataArea.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 80L * (dataArea.nCount - i1), 80L)
        }
        TTM_6_10_DataArea_ACN_Encode(dataArea.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(80L * (i1 + 1) == 80L * i1 + 80L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 80L * (dataArea.nCount - i1), 80L)
            check(codec.base.bitStream.validate_offset_bits(80L * (dataArea.nCount - (i1 + 1))))
        }
        val res = PUS_6_10_TTM_6_10_CheckedRawMemoryDartaReport_dataArea_pVal_dataArea_dataArea_Encode_loop(codec, dataArea, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TTM_6_10_CheckedRawMemoryDartaReport_dataArea.sizeRange(dataArea.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, dataArea.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + dataArea.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TTM_6_10_CheckedRawMemoryDartaReport_dataArea.sizeRange(dataArea.arr, codecSnap1.base.bitStream.bitIndex, i1, dataArea.nCount) == dataArea.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TTM_6_10_CheckedRawMemoryDartaReport_dataArea.sizeRange(dataArea.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, dataArea.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TTM_6_10_CheckedRawMemoryDartaReport_dataArea.sizeRange(dataArea.arr, codecSnap1.base.bitStream.bitIndex, i1, dataArea.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_6_10_CheckedRawMemoryDartaReport_dataArea.sizeRange(dataArea.arr, old(codec).base.bitStream.bitIndex, i1, dataArea.nCount)
    }
}



@opaque @inlineOnce
def TM_6_10_CheckedRawMemoryDartaReport_dataArea_ACN_Encode(codec: ACN, pVal: TTM_6_10_CheckedRawMemoryDartaReport, TM_6_10_CheckedRawMemoryDartaReport_n: ULong, dataArea: TTM_6_10_CheckedRawMemoryDartaReport_dataArea): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(5040L))
    @ghost val oldCdc = snapshot(codec)
    TTM_6_10_CheckedRawMemoryDartaReport_dataArea_IsConstraintValid(dataArea) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    PUS_6_10_TTM_6_10_CheckedRawMemoryDartaReport_dataArea_pVal_dataArea_dataArea_Encode_loop(codec, dataArea, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                dataArea.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + dataArea.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTM_6_10_CheckedRawMemoryDartaReport_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTM_6_10_CheckedRawMemoryDartaReport] =
{
    require(codec.base.bitStream.validate_offset_bits(5104L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val pVal_memory_ID = TM_6_10_CheckedRawMemoryDartaReport_memory_ID_Optional_ACN_Decode(codec) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 5104L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = pVal_memory_ID match {
        case SomeMut(v) =>
            32L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode TM_6_10_CheckedRawMemoryDartaReport_n */
    val TM_6_10_CheckedRawMemoryDartaReport_n = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 5072L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode dataArea */
    val pVal_dataArea = TM_6_10_CheckedRawMemoryDartaReport_dataArea_ACN_Decode(codec, TM_6_10_CheckedRawMemoryDartaReport_n) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 5104L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = pVal_dataArea.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 5104L)
    }
    val pVal = TTM_6_10_CheckedRawMemoryDartaReport(pVal_memory_ID, pVal_dataArea)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }

    TTM_6_10_CheckedRawMemoryDartaReport_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTM_6_10_CheckedRawMemoryDartaReport](l)
        case Right(_) => RightMut[ErrorCode, TTM_6_10_CheckedRawMemoryDartaReport](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTM_6_10_CheckedRawMemoryDartaReport]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_6_10_CheckedRawMemoryDartaReport_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTM_6_10_CheckedRawMemoryDartaReport_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTM_6_10_CheckedRawMemoryDartaReport]) =
{
    require(codec.base.bitStream.validate_offset_bits(5104L))
    val cpy = snapshot(codec)
    val res = TTM_6_10_CheckedRawMemoryDartaReport_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def TM_6_10_CheckedRawMemoryDartaReport_memory_ID_Optional_ACN_Decode(codec: ACN): EitherMut[Int, OptionMut[TMemory_ID]] = {
    require(codec.base.bitStream.validate_offset_bits(32L))
    @ghost val oldCdc = snapshot(codec)
    /* Decode memory_ID */
    /* marked as ALWAYS PRESENT */
    val memory_ID: OptionMut[TMemory_ID] =
        val pVal_memory_ID = TMemory_ID_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        SomeMut(pVal_memory_ID)
    RightMut[Int, OptionMut[TMemory_ID]](memory_ID)
}.ensuring { (res: EitherMut[Int, OptionMut[TMemory_ID]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            resVal.isDefined && old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 32L
    }
}



@ghost @pure
def TM_6_10_CheckedRawMemoryDartaReport_memory_ID_Optional_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[Int, OptionMut[TMemory_ID]]) = {
    require(codec.base.bitStream.validate_offset_bits(32L))
    val cpy = snapshot(codec)
    val res = TM_6_10_CheckedRawMemoryDartaReport_memory_ID_Optional_ACN_Decode(cpy)
    (cpy, res)
}



@opaque @inlineOnce
def PUS_6_10_TTM_6_10_CheckedRawMemoryDartaReport_dataArea_pVal_dataArea_dataArea_Decode_loop(codec: ACN, nCount: Int, dataArea: Vector[TTM_6_10_DataArea], i1: Int): EitherMut[Int, Vector[TTM_6_10_DataArea]] = {
    require((1 <= nCount) && (nCount <= 63))
    require((0 <= i1) && (i1 <= nCount))
    require(dataArea.size == i1)
    require(codec.base.bitStream.validate_offset_bits((80L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(dataArea)
            vecRangesEqSlicedLemma(dataArea, dataArea, 0, dataArea.size, 0, i1)
        }
        RightMut[Int, Vector[TTM_6_10_DataArea]](dataArea)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 80L * (nCount - i1), 80L)
        }
        val dataArea_arr_i1_ = TTM_6_10_DataArea_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(80L * (i1 + 1) == 80L * i1 + 80L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 80L * (nCount - i1), 80L)
            check(codec.base.bitStream.validate_offset_bits(80L * (nCount - (i1 + 1))))
        }
        val res = PUS_6_10_TTM_6_10_CheckedRawMemoryDartaReport_dataArea_pVal_dataArea_dataArea_Decode_loop(codec, nCount, dataArea.append(dataArea_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(dataArea, newVec, dataArea_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(dataArea.append(dataArea_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(dataArea.list, dataArea_arr_i1_, i1)
                    Vector.listApplyEqVecApply(dataArea.append(dataArea_arr_i1_), i1)
                    check(dataArea_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TTM_6_10_DataArea]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(dataArea, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_6_10_CheckedRawMemoryDartaReport_dataArea.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def TM_6_10_CheckedRawMemoryDartaReport_dataArea_ACN_Decode(codec: ACN, TM_6_10_CheckedRawMemoryDartaReport_n: ULong): EitherMut[Int, TTM_6_10_CheckedRawMemoryDartaReport_dataArea] = {
    require(codec.base.bitStream.validate_offset_bits(5040L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val dataArea =
        if ((ULong.fromRaw(1) <= TM_6_10_CheckedRawMemoryDartaReport_n) && (TM_6_10_CheckedRawMemoryDartaReport_n <= ULong.fromRaw(63))) then
            val dataArea_nCount = TM_6_10_CheckedRawMemoryDartaReport_n.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val dataArea = PUS_6_10_TTM_6_10_CheckedRawMemoryDartaReport_dataArea_pVal_dataArea_dataArea_Decode_loop(codec, dataArea_nCount, Vector.empty[TTM_6_10_DataArea], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val dataArea = TTM_6_10_CheckedRawMemoryDartaReport_dataArea(dataArea_nCount, bdg)
                    ghostExpr {
                        dataArea.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    dataArea
            }
            dataArea
        else return LeftMut(ERR_ACN_DECODE_TM_6_10_CHECKEDRAWMEMORYDARTAREPORT_DATAAREA)
    TTM_6_10_CheckedRawMemoryDartaReport_dataArea_IsConstraintValid(dataArea) match {
        case Left(l) =>
            LeftMut[Int, TTM_6_10_CheckedRawMemoryDartaReport_dataArea](l)
        case Right(_) =>
            RightMut[Int, TTM_6_10_CheckedRawMemoryDartaReport_dataArea](dataArea)
    }
}.ensuring { (res: EitherMut[Int, TTM_6_10_CheckedRawMemoryDartaReport_dataArea]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_6_10_CheckedRawMemoryDartaReport_dataArea_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TM_6_10_CheckedRawMemoryDartaReport_dataArea_ACN_Decode_pure(codec: ACN, TM_6_10_CheckedRawMemoryDartaReport_n: ULong): (ACN, EitherMut[Int, TTM_6_10_CheckedRawMemoryDartaReport_dataArea]) = {
    require(codec.base.bitStream.validate_offset_bits(5040L))
    val cpy = snapshot(codec)
    val res = TM_6_10_CheckedRawMemoryDartaReport_dataArea_ACN_Decode(cpy, TM_6_10_CheckedRawMemoryDartaReport_n)
    (cpy, res)
}