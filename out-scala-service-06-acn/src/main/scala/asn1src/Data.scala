/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._


def TMemoryData_IsConstraintValid(pVal: TMemoryData): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TPUSC_OCTSTR_VARIABLE_LEN_IsConstraintValid(pVal.data)
    ret
}

def TMemoryData_Initialize(): TMemoryData = TMemoryData(data = TPUSC_OCTSTR_VARIABLE_LEN(0, Vector.fill(4095)(0.toRawUByte)))

@opaque @inlineOnce 
def TMemoryData_ACN_Encode(pVal: TMemoryData, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(32792L))
    TMemoryData_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val MemoryData_length = ULong.fromRaw(pVal.data.nCount)
    if MemoryData_length < ULong.fromRaw(0) || MemoryData_length > ULong.fromRaw(4095) then
        return Left(860)
    /* Encode MemoryData_length */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(MemoryData_length)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(MemoryData_length)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 32792L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode data */
    codec.base.encodeOctetString_no_length_vec(pVal.data.arr, pVal.data.nCount.toInt)
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32792L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 8L * pVal.data.nCount
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 32792L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TMemoryData_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TMemoryData] =
{
    require(codec.base.bitStream.validate_offset_bits(32792L))

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode MemoryData_length */
    val MemoryData_length = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 32792L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode data */
    val pVal_data =
        if ((MemoryData_length <= ULong.fromRaw(4095))) then
            TPUSC_OCTSTR_VARIABLE_LEN(MemoryData_length.toRaw.toInt, codec.base.decodeOctetString_no_length_vec(MemoryData_length.toRaw.toInt))
        else return LeftMut(ERR_ACN_DECODE_MEMORYDATA_DATA)
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32792L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 8L * pVal_data.nCount
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 32792L)
    }
    val pVal = TMemoryData(pVal_data)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }

    TMemoryData_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TMemoryData](l)
        case Right(_) => RightMut[ErrorCode, TMemoryData](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TMemoryData]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TMemoryData_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TMemoryData_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TMemoryData]) =
{
    require(codec.base.bitStream.validate_offset_bits(32792L))
    val cpy = snapshot(codec)
    val res = TMemoryData_ACN_Decode(cpy)
    (cpy, res)
}