/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TCheckObjectInstruction --------------------------------------------*/

case class TCheckObjectInstruction (
    offset: TPUSC_UINT32, 
    length: TPUSC_UINT32
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        val size_0 = 32L
        val size_1 = 32L
        size_0 + size_1
    }.ensuring { (res: Long) => 
        res == 64L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775743L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775743L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775743L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775743L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_CHECKOBJECTINSTRUCTION: Int = 2068 /* */
@inline @cCode.inline val ERR_CHECKOBJECTINSTRUCTION_OFFSET_2: Int = 2053 /* */
@inline @cCode.inline val ERR_CHECKOBJECTINSTRUCTION_LENGTH_2: Int = 2063 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_CHECKOBJECTINSTRUCTION: Int = 2071 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CHECKOBJECTINSTRUCTION_OFFSET_2: Int = 2056 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CHECKOBJECTINSTRUCTION_LENGTH_2: Int = 2066 /*  */
@inline @cCode.inline val TCheckObjectInstruction_REQUIRED_BYTES_FOR_ACN_ENCODING = 8
@inline @cCode.inline val TCheckObjectInstruction_REQUIRED_BITS_FOR_ACN_ENCODING = 64

@inline @cCode.inline val ERR_ACN_DECODE_CHECKOBJECTINSTRUCTION: Int = 2072 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CHECKOBJECTINSTRUCTION_OFFSET_2: Int = 2057 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CHECKOBJECTINSTRUCTION_LENGTH_2: Int = 2067 /*  */
/*-- TTC_6_7_CheckObjectMemoryData --------------------------------------------*/


case class TTC_6_7_CheckObjectMemoryData_checkObjectInstructions (nCount: Int, arr: Vector[TCheckObjectInstruction])
{
    require(this.arr.size <= 63 && 1 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854771775L))
        TTC_6_7_CheckObjectMemoryData_checkObjectInstructions.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 4032L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771775L))
        TTC_6_7_CheckObjectMemoryData_checkObjectInstructions.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771775L))
        require((offset % 8L) == (otherOffset % 8L))
        TTC_6_7_CheckObjectMemoryData_checkObjectInstructions.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771775L))
        require((offset % 16L) == (otherOffset % 16L))
        TTC_6_7_CheckObjectMemoryData_checkObjectInstructions.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771775L))
        require((offset % 32L) == (otherOffset % 32L))
        TTC_6_7_CheckObjectMemoryData_checkObjectInstructions.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TTC_6_7_CheckObjectMemoryData_checkObjectInstructions {
    def sizeRange(ls: Vector[TCheckObjectInstruction], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 64L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(elemSize == 64L)
            elemSize + TTC_6_7_CheckObjectMemoryData_checkObjectInstructions.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 64L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TCheckObjectInstruction], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 64L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 64L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 64L)
            assert(elemSizeOtherOff == 64L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TTC_6_7_CheckObjectMemoryData_checkObjectInstructions.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_6_7_CheckObjectMemoryData_checkObjectInstructions.sizeRange(ls, offset, from, to) == TTC_6_7_CheckObjectMemoryData_checkObjectInstructions.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TCheckObjectInstruction], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 64L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 64L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 64L)
            assert(elemSizeOtherOff == 64L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TTC_6_7_CheckObjectMemoryData_checkObjectInstructions.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_6_7_CheckObjectMemoryData_checkObjectInstructions.sizeRange(ls, offset, from, to) == TTC_6_7_CheckObjectMemoryData_checkObjectInstructions.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TCheckObjectInstruction], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 64L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 64L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 64L)
            assert(elemSizeOtherOff == 64L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TTC_6_7_CheckObjectMemoryData_checkObjectInstructions.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_6_7_CheckObjectMemoryData_checkObjectInstructions.sizeRange(ls, offset, from, to) == TTC_6_7_CheckObjectMemoryData_checkObjectInstructions.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TCheckObjectInstruction], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 64L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 64L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 64L)
            assert(elemSizeOtherOff == 64L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TTC_6_7_CheckObjectMemoryData_checkObjectInstructions.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_6_7_CheckObjectMemoryData_checkObjectInstructions.sizeRange(ls, offset, from, to) == TTC_6_7_CheckObjectMemoryData_checkObjectInstructions.sizeRange(ls, otherOffset, from, to)
    }
}

case class TTC_6_7_CheckObjectMemoryData (
    base_ID: TBase, 
    checkObjectInstructions: TTC_6_7_CheckObjectMemoryData_checkObjectInstructions
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854771735L))
        val size_0 = 8L
        val size_1 = 32L
        val size_2 = this.checkObjectInstructions.size(offset + size_0 + size_1)
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 4072L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771735L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771735L))
        val size_0_offset = 8L
        val size_0_otherOffset = 8L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.checkObjectInstructions.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.checkObjectInstructions.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.checkObjectInstructions.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771735L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771735L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 8L
        val size_0_otherOffset = 8L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.checkObjectInstructions.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.checkObjectInstructions.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.checkObjectInstructions.sizeLemmaNextByte(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771735L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771735L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 8L
        val size_0_otherOffset = 8L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.checkObjectInstructions.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.checkObjectInstructions.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.checkObjectInstructions.sizeLemmaNextWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771735L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771735L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 8L
        val size_0_otherOffset = 8L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.checkObjectInstructions.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.checkObjectInstructions.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.checkObjectInstructions.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_6_7_CHECKOBJECTMEMORYDATA_CHECKOBJECTINSTRUCTIONS: Int = 1978 /*(SIZE(1 .. maxTC-6-7-CheckObjectInstructionCount)) */
@inline @cCode.inline val ERR_TC_6_7_CHECKOBJECTMEMORYDATA_CHECKOBJECTINSTRUCTIONS_ELM_2: Int = 1973 /* */

@inline @cCode.inline val ERR_TC_6_7_CHECKOBJECTMEMORYDATA: Int = 1983 /* */
@inline @cCode.inline val ERR_TC_6_7_CHECKOBJECTMEMORYDATA_BASE_ID_2: Int = 1941 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_7_CHECKOBJECTMEMORYDATA: Int = 1986 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_7_CHECKOBJECTMEMORYDATA_BASE_ID_2: Int = 1944 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_7_CHECKOBJECTMEMORYDATA_N_UNINITIALIZED: Int = 1987 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_7_CHECKOBJECTMEMORYDATA_N: Int = 1946 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_7_CHECKOBJECTMEMORYDATA_CHECKOBJECTINSTRUCTIONS: Int = 1981 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_7_CHECKOBJECTMEMORYDATA_CHECKOBJECTINSTRUCTIONS_ELM_2: Int = 1976 /*  */
@inline @cCode.inline val TTC_6_7_CheckObjectMemoryData_REQUIRED_BYTES_FOR_ACN_ENCODING = 509
@inline @cCode.inline val TTC_6_7_CheckObjectMemoryData_REQUIRED_BITS_FOR_ACN_ENCODING = 4072

@inline @cCode.inline val ERR_ACN_DECODE_TC_6_7_CHECKOBJECTMEMORYDATA: Int = 1988 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_7_CHECKOBJECTMEMORYDATA_BASE_ID_2: Int = 1945 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_7_CHECKOBJECTMEMORYDATA_N: Int = 1947 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_7_CHECKOBJECTMEMORYDATA_CHECKOBJECTINSTRUCTIONS: Int = 1982 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_7_CHECKOBJECTMEMORYDATA_CHECKOBJECTINSTRUCTIONS_ELM_2: Int = 1977 /*  */
/*-- TTC_6_7_CheckObjectMemoryDataMultipleMemid --------------------------------------------*/


case class TTC_6_7_CheckObjectMemoryDataMultipleMemid_checkObjectInstructions (nCount: Int, arr: Vector[TCheckObjectInstruction])
{
    require(this.arr.size <= 63 && 1 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854771775L))
        TTC_6_7_CheckObjectMemoryDataMultipleMemid_checkObjectInstructions.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 4032L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771775L))
        TTC_6_7_CheckObjectMemoryDataMultipleMemid_checkObjectInstructions.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771775L))
        require((offset % 8L) == (otherOffset % 8L))
        TTC_6_7_CheckObjectMemoryDataMultipleMemid_checkObjectInstructions.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771775L))
        require((offset % 16L) == (otherOffset % 16L))
        TTC_6_7_CheckObjectMemoryDataMultipleMemid_checkObjectInstructions.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771775L))
        require((offset % 32L) == (otherOffset % 32L))
        TTC_6_7_CheckObjectMemoryDataMultipleMemid_checkObjectInstructions.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TTC_6_7_CheckObjectMemoryDataMultipleMemid_checkObjectInstructions {
    def sizeRange(ls: Vector[TCheckObjectInstruction], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 64L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(elemSize == 64L)
            elemSize + TTC_6_7_CheckObjectMemoryDataMultipleMemid_checkObjectInstructions.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 64L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TCheckObjectInstruction], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 64L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 64L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 64L)
            assert(elemSizeOtherOff == 64L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TTC_6_7_CheckObjectMemoryDataMultipleMemid_checkObjectInstructions.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_6_7_CheckObjectMemoryDataMultipleMemid_checkObjectInstructions.sizeRange(ls, offset, from, to) == TTC_6_7_CheckObjectMemoryDataMultipleMemid_checkObjectInstructions.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TCheckObjectInstruction], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 64L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 64L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 64L)
            assert(elemSizeOtherOff == 64L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TTC_6_7_CheckObjectMemoryDataMultipleMemid_checkObjectInstructions.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_6_7_CheckObjectMemoryDataMultipleMemid_checkObjectInstructions.sizeRange(ls, offset, from, to) == TTC_6_7_CheckObjectMemoryDataMultipleMemid_checkObjectInstructions.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TCheckObjectInstruction], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 64L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 64L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 64L)
            assert(elemSizeOtherOff == 64L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TTC_6_7_CheckObjectMemoryDataMultipleMemid_checkObjectInstructions.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_6_7_CheckObjectMemoryDataMultipleMemid_checkObjectInstructions.sizeRange(ls, offset, from, to) == TTC_6_7_CheckObjectMemoryDataMultipleMemid_checkObjectInstructions.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TCheckObjectInstruction], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 64L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 64L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 64L)
            assert(elemSizeOtherOff == 64L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TTC_6_7_CheckObjectMemoryDataMultipleMemid_checkObjectInstructions.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_6_7_CheckObjectMemoryDataMultipleMemid_checkObjectInstructions.sizeRange(ls, offset, from, to) == TTC_6_7_CheckObjectMemoryDataMultipleMemid_checkObjectInstructions.sizeRange(ls, otherOffset, from, to)
    }
}

case class TTC_6_7_CheckObjectMemoryDataMultipleMemid (
    base_ID: TBaseMultipleMemid, 
    checkObjectInstructions: TTC_6_7_CheckObjectMemoryDataMultipleMemid_checkObjectInstructions
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854771703L))
        val size_0 = 32L
        val size_1 = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        val size_2 = 32L
        val size_3 = this.checkObjectInstructions.size(offset + size_0 + size_1 + size_2)
        size_0 + size_1 + size_2 + size_3
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 4104L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771703L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771703L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        val size_1_otherOffset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        this.base_ID.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = this.checkObjectInstructions.size(offset + size_0_offset + size_1_offset + size_2_offset)
        val size_3_otherOffset = this.checkObjectInstructions.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        this.checkObjectInstructions.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset + size_2_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771703L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771703L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        val size_1_otherOffset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        this.base_ID.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = this.checkObjectInstructions.size(offset + size_0_offset + size_1_offset + size_2_offset)
        val size_3_otherOffset = this.checkObjectInstructions.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        this.checkObjectInstructions.sizeLemmaNextByte(offset + size_0_offset + size_1_offset + size_2_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771703L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771703L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        val size_1_otherOffset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        this.base_ID.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = this.checkObjectInstructions.size(offset + size_0_offset + size_1_offset + size_2_offset)
        val size_3_otherOffset = this.checkObjectInstructions.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        this.checkObjectInstructions.sizeLemmaNextWord(offset + size_0_offset + size_1_offset + size_2_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771703L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771703L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        val size_1_otherOffset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        this.base_ID.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = this.checkObjectInstructions.size(offset + size_0_offset + size_1_offset + size_2_offset)
        val size_3_otherOffset = this.checkObjectInstructions.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        this.checkObjectInstructions.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset + size_2_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_6_7_CHECKOBJECTMEMORYDATAMULTIPLEMEMID_CHECKOBJECTINSTRUCTIONS: Int = 2036 /*(SIZE(1 .. maxTC-6-7-CheckObjectInstructionCount)) */
@inline @cCode.inline val ERR_TC_6_7_CHECKOBJECTMEMORYDATAMULTIPLEMEMID_CHECKOBJECTINSTRUCTIONS_ELM_2: Int = 2031 /* */

@inline @cCode.inline val ERR_TC_6_7_CHECKOBJECTMEMORYDATAMULTIPLEMEMID: Int = 2041 /* */
@inline @cCode.inline val ERR_TC_6_7_CHECKOBJECTMEMORYDATAMULTIPLEMEMID_BASE_ID_2: Int = 2001 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_7_CHECKOBJECTMEMORYDATAMULTIPLEMEMID: Int = 2044 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_7_CHECKOBJECTMEMORYDATAMULTIPLEMEMID_MEMORY_ID_UNINITIALIZED: Int = 2045 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_7_CHECKOBJECTMEMORYDATAMULTIPLEMEMID_MEMORY_ID: Int = 1989 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_7_CHECKOBJECTMEMORYDATAMULTIPLEMEMID_BASE_ID: Int = 1999 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_7_CHECKOBJECTMEMORYDATAMULTIPLEMEMID_BASE_ID_MEMID1: Int = 1994 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_7_CHECKOBJECTMEMORYDATAMULTIPLEMEMID_N_UNINITIALIZED: Int = 2046 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_7_CHECKOBJECTMEMORYDATAMULTIPLEMEMID_N: Int = 2004 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_7_CHECKOBJECTMEMORYDATAMULTIPLEMEMID_CHECKOBJECTINSTRUCTIONS: Int = 2039 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_7_CHECKOBJECTMEMORYDATAMULTIPLEMEMID_CHECKOBJECTINSTRUCTIONS_ELM_2: Int = 2034 /*  */
@inline @cCode.inline val TTC_6_7_CheckObjectMemoryDataMultipleMemid_REQUIRED_BYTES_FOR_ACN_ENCODING = 513
@inline @cCode.inline val TTC_6_7_CheckObjectMemoryDataMultipleMemid_REQUIRED_BITS_FOR_ACN_ENCODING = 4104

@inline @cCode.inline val ERR_ACN_DECODE_TC_6_7_CHECKOBJECTMEMORYDATAMULTIPLEMEMID: Int = 2047 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_7_CHECKOBJECTMEMORYDATAMULTIPLEMEMID_MEMORY_ID: Int = 1990 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_7_CHECKOBJECTMEMORYDATAMULTIPLEMEMID_BASE_ID: Int = 2000 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_7_CHECKOBJECTMEMORYDATAMULTIPLEMEMID_BASE_ID_MEMID1: Int = 1995 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_7_CHECKOBJECTMEMORYDATAMULTIPLEMEMID_N: Int = 2005 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_7_CHECKOBJECTMEMORYDATAMULTIPLEMEMID_CHECKOBJECTINSTRUCTIONS: Int = 2040 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_7_CHECKOBJECTMEMORYDATAMULTIPLEMEMID_CHECKOBJECTINSTRUCTIONS_ELM_2: Int = 2035 /*  */

// @inline @cCode.inline val maxTC_6_7_CheckObjectInstructionCount: Int = 63 // defined in body

