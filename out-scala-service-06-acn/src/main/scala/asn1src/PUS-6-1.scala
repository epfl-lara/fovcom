/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

val maxTC_6_1_LoadObjectInstructionCount: Int = 63 // variables:188

def TLoadObjectInstruction_checksum_IsConstraintValid(@annotation.unused pVal: TLoadObjectInstruction_checksum): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = Right(0)
    ret
}

def TLoadObjectInstruction_IsConstraintValid(pVal: TLoadObjectInstruction): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TPUSC_UINT32_IsConstraintValid(pVal.offset)
    if ret.isRight then
        ret = TMemoryData_IsConstraintValid(pVal.dataToLoad)
        if ret.isRight then
            pVal.checksum match
                case SomeMut(checksum) =>
                    ret = TLoadObjectInstruction_checksum_IsConstraintValid(checksum)
                case NoneMut() =>
    if ret.isRight then
        ret = (pVal.checksum.isDefined == true) match
            case true =>
                Right(0)
            case false =>
                Left(45)
    ret
}

def TLoadObjectInstruction_checksum_Initialize(): TLoadObjectInstruction_checksum = TLoadObjectInstruction_checksum(Vector.fill(2)(0.toRawUByte))
def TLoadObjectInstruction_Initialize(): TLoadObjectInstruction = TLoadObjectInstruction(offset = ULong.fromRaw(0L), dataToLoad = TMemoryData_Initialize(), checksum = SomeMut(TLoadObjectInstruction_checksum(Vector.fill(2)(0.toRawUByte))))

@opaque @inlineOnce 
def TLoadObjectInstruction_ACN_Encode(pVal: TLoadObjectInstruction, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(32840L))
    TLoadObjectInstruction_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode offset */
    TPUSC_UINT32_ACN_Encode(pVal.offset, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 32840L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode dataToLoad */
    TMemoryData_ACN_Encode(pVal.dataToLoad, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 32808L, 32792L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32824L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.dataToLoad.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    LoadObjectInstruction_checksum_Optional_ACN_Encode(codec, pVal, pVal.checksum) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32840L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = pVal.checksum match {
        case SomeMut(v) =>
            16L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 32840L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def LoadObjectInstruction_checksum_Optional_ACN_Encode(codec: ACN, pVal: TLoadObjectInstruction, checksum: OptionMut[TLoadObjectInstruction_checksum]): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(16L))
    @ghost val oldCdc = snapshot(codec)
    checksum match {
        case SomeMut(v) =>
            TLoadObjectInstruction_checksum_IsConstraintValid(v) match {
                case Left(l) =>
                    return Left[Int, Int](l)
                case Right(_) =>
            }
        case NoneMut() =>
            ()
    }
    /* Encode checksum */
    /* marked as ALWAYS PRESENT, so it must be Some */
    checksum match
        case SomeMut(checksum) =>
            assert(16.toInt >= 0) // overflow may happen during cast
            codec.base.bitStream.appendBitsMSBFirstVec(checksum.arr, 16.toInt)
    
        case NoneMut() => return Left(628)
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 16L
    }
}



@opaque @inlineOnce 
def TLoadObjectInstruction_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TLoadObjectInstruction] =
{
    require(codec.base.bitStream.validate_offset_bits(32840L))

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode offset */
    val pVal_offset = TPUSC_UINT32_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 32840L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode dataToLoad */
    val pVal_dataToLoad = TMemoryData_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 32808L, 32792L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32824L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_dataToLoad.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    val pVal_checksum = LoadObjectInstruction_checksum_Optional_ACN_Decode(codec) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32840L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = pVal_checksum match {
        case SomeMut(v) =>
            16L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 32840L)
    }
    val pVal = TLoadObjectInstruction(pVal_offset, pVal_dataToLoad, pVal_checksum)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }

    TLoadObjectInstruction_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TLoadObjectInstruction](l)
        case Right(_) => RightMut[ErrorCode, TLoadObjectInstruction](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TLoadObjectInstruction]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TLoadObjectInstruction_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TLoadObjectInstruction_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TLoadObjectInstruction]) =
{
    require(codec.base.bitStream.validate_offset_bits(32840L))
    val cpy = snapshot(codec)
    val res = TLoadObjectInstruction_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def LoadObjectInstruction_checksum_Optional_ACN_Decode(codec: ACN): EitherMut[Int, OptionMut[TLoadObjectInstruction_checksum]] = {
    require(codec.base.bitStream.validate_offset_bits(16L))
    @ghost val oldCdc = snapshot(codec)
    /* Decode checksum */
    /* marked as ALWAYS PRESENT */
    val checksum: OptionMut[TLoadObjectInstruction_checksum] =
        val pVal_checksum = TLoadObjectInstruction_checksum(codec.base.bitStream.readBitsVec(16.toInt))
        SomeMut(pVal_checksum)
    checksum match {
        case SomeMut(v) =>
            TLoadObjectInstruction_checksum_IsConstraintValid(v) match {
                case Left(l) =>
                    LeftMut[Int, OptionMut[TLoadObjectInstruction_checksum]](l)
                case Right(_) =>
                    RightMut[Int, OptionMut[TLoadObjectInstruction_checksum]](checksum)
            }
        case NoneMut() =>
            RightMut[Int, OptionMut[TLoadObjectInstruction_checksum]](checksum)
    }
}.ensuring { (res: EitherMut[Int, OptionMut[TLoadObjectInstruction_checksum]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            resVal.isDefined && old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 16L && (resVal match {
                case SomeMut(v) =>
                    TLoadObjectInstruction_checksum_IsConstraintValid(v).isRight
                case NoneMut() =>
                    true
            })
    }
}



@ghost @pure
def LoadObjectInstruction_checksum_Optional_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[Int, OptionMut[TLoadObjectInstruction_checksum]]) = {
    require(codec.base.bitStream.validate_offset_bits(16L))
    val cpy = snapshot(codec)
    val res = LoadObjectInstruction_checksum_Optional_ACN_Decode(cpy)
    (cpy, res)
}



def TTC_6_1_LoadObjectMemoryData_loadObjectInstructions_IsConstraintValid(pVal: TTC_6_1_LoadObjectMemoryData_loadObjectInstructions): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = ((1 <= pVal.nCount) && (pVal.nCount <= 63)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TLoadObjectInstruction_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TTC_6_1_LoadObjectMemoryData_IsConstraintValid(pVal: TTC_6_1_LoadObjectMemoryData): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TBase_IsConstraintValid(pVal.base_ID)
    if ret.isRight then
        ret = TTC_6_1_LoadObjectMemoryData_loadObjectInstructions_IsConstraintValid(pVal.loadObjectInstructions)
    ret
}

def TTC_6_1_LoadObjectMemoryData_loadObjectInstructions_Initialize(): TTC_6_1_LoadObjectMemoryData_loadObjectInstructions = TTC_6_1_LoadObjectMemoryData_loadObjectInstructions(1, Vector.fill(63)(TLoadObjectInstruction_Initialize()))
def TTC_6_1_LoadObjectMemoryData_Initialize(): TTC_6_1_LoadObjectMemoryData = TTC_6_1_LoadObjectMemoryData(base_ID = ULong.fromRaw(0L), loadObjectInstructions = TTC_6_1_LoadObjectMemoryData_loadObjectInstructions_Initialize())

@opaque @inlineOnce 
def TTC_6_1_LoadObjectMemoryData_ACN_Encode(pVal: TTC_6_1_LoadObjectMemoryData, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(2068960L))
    var i1: Int = 0
    TTC_6_1_LoadObjectMemoryData_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode base_ID */
    TBase_ACN_Encode(pVal.base_ID, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 2068960L, 8L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 8L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 8L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    val TC_6_1_LoadObjectMemoryData_n = ULong.fromRaw(pVal.loadObjectInstructions.nCount)
    if TC_6_1_LoadObjectMemoryData_n < ULong.fromRaw(1) || TC_6_1_LoadObjectMemoryData_n > ULong.fromRaw(63) then
        return Left(860)
    /* Encode TC_6_1_LoadObjectMemoryData_n */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(TC_6_1_LoadObjectMemoryData_n)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(TC_6_1_LoadObjectMemoryData_n)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 2068952L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 40L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode loadObjectInstructions */
    TC_6_1_LoadObjectMemoryData_loadObjectInstructions_ACN_Encode(codec, pVal, TC_6_1_LoadObjectMemoryData_n, pVal.loadObjectInstructions) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 2068960L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = pVal.loadObjectInstructions.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 2068960L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def PUS_6_1_TTC_6_1_LoadObjectMemoryData_loadObjectInstructions_pVal_loadObjectInstructions_loadObjectInstructions_Encode_loop(codec: ACN, loadObjectInstructions: TTC_6_1_LoadObjectMemoryData_loadObjectInstructions, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= loadObjectInstructions.nCount))
    require((1 <= loadObjectInstructions.nCount) && (loadObjectInstructions.nCount <= loadObjectInstructions.arr.size) && (loadObjectInstructions.arr.size <= 63))
    require(codec.base.bitStream.validate_offset_bits((32840L * (loadObjectInstructions.nCount - i1))))
    decreases(loadObjectInstructions.nCount - i1)
    if (i1 == loadObjectInstructions.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 32840L * (loadObjectInstructions.nCount - i1), 32840L)
        }
        TLoadObjectInstruction_ACN_Encode(loadObjectInstructions.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(32840L * (i1 + 1) == 32840L * i1 + 32840L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 32840L * (loadObjectInstructions.nCount - i1), 32840L)
            check(codec.base.bitStream.validate_offset_bits(32840L * (loadObjectInstructions.nCount - (i1 + 1))))
        }
        val res = PUS_6_1_TTC_6_1_LoadObjectMemoryData_loadObjectInstructions_pVal_loadObjectInstructions_loadObjectInstructions_Encode_loop(codec, loadObjectInstructions, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TTC_6_1_LoadObjectMemoryData_loadObjectInstructions.sizeRange(loadObjectInstructions.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, loadObjectInstructions.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + loadObjectInstructions.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TTC_6_1_LoadObjectMemoryData_loadObjectInstructions.sizeRange(loadObjectInstructions.arr, codecSnap1.base.bitStream.bitIndex, i1, loadObjectInstructions.nCount) == loadObjectInstructions.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TTC_6_1_LoadObjectMemoryData_loadObjectInstructions.sizeRange(loadObjectInstructions.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, loadObjectInstructions.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TTC_6_1_LoadObjectMemoryData_loadObjectInstructions.sizeRange(loadObjectInstructions.arr, codecSnap1.base.bitStream.bitIndex, i1, loadObjectInstructions.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTC_6_1_LoadObjectMemoryData_loadObjectInstructions.sizeRange(loadObjectInstructions.arr, old(codec).base.bitStream.bitIndex, i1, loadObjectInstructions.nCount)
    }
}



@opaque @inlineOnce
def TC_6_1_LoadObjectMemoryData_loadObjectInstructions_ACN_Encode(codec: ACN, pVal: TTC_6_1_LoadObjectMemoryData, TC_6_1_LoadObjectMemoryData_n: ULong, loadObjectInstructions: TTC_6_1_LoadObjectMemoryData_loadObjectInstructions): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(2068920L))
    @ghost val oldCdc = snapshot(codec)
    TTC_6_1_LoadObjectMemoryData_loadObjectInstructions_IsConstraintValid(loadObjectInstructions) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    PUS_6_1_TTC_6_1_LoadObjectMemoryData_loadObjectInstructions_pVal_loadObjectInstructions_loadObjectInstructions_Encode_loop(codec, loadObjectInstructions, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                loadObjectInstructions.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + loadObjectInstructions.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTC_6_1_LoadObjectMemoryData_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTC_6_1_LoadObjectMemoryData] =
{
    require(codec.base.bitStream.validate_offset_bits(2068960L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode base_ID */
    val pVal_base_ID = TBase_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 2068960L, 8L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 8L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 8L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode TC_6_1_LoadObjectMemoryData_n */
    val TC_6_1_LoadObjectMemoryData_n = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 2068952L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 40L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode loadObjectInstructions */
    val pVal_loadObjectInstructions = TC_6_1_LoadObjectMemoryData_loadObjectInstructions_ACN_Decode(codec, TC_6_1_LoadObjectMemoryData_n) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 2068960L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = pVal_loadObjectInstructions.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 2068960L)
    }
    val pVal = TTC_6_1_LoadObjectMemoryData(pVal_base_ID, pVal_loadObjectInstructions)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }

    TTC_6_1_LoadObjectMemoryData_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTC_6_1_LoadObjectMemoryData](l)
        case Right(_) => RightMut[ErrorCode, TTC_6_1_LoadObjectMemoryData](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTC_6_1_LoadObjectMemoryData]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_6_1_LoadObjectMemoryData_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTC_6_1_LoadObjectMemoryData_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTC_6_1_LoadObjectMemoryData]) =
{
    require(codec.base.bitStream.validate_offset_bits(2068960L))
    val cpy = snapshot(codec)
    val res = TTC_6_1_LoadObjectMemoryData_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def PUS_6_1_TTC_6_1_LoadObjectMemoryData_loadObjectInstructions_pVal_loadObjectInstructions_loadObjectInstructions_Decode_loop(codec: ACN, nCount: Int, loadObjectInstructions: Vector[TLoadObjectInstruction], i1: Int): EitherMut[Int, Vector[TLoadObjectInstruction]] = {
    require((1 <= nCount) && (nCount <= 63))
    require((0 <= i1) && (i1 <= nCount))
    require(loadObjectInstructions.size == i1)
    require(codec.base.bitStream.validate_offset_bits((32840L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(loadObjectInstructions)
            vecRangesEqSlicedLemma(loadObjectInstructions, loadObjectInstructions, 0, loadObjectInstructions.size, 0, i1)
        }
        RightMut[Int, Vector[TLoadObjectInstruction]](loadObjectInstructions)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 32840L * (nCount - i1), 32840L)
        }
        val loadObjectInstructions_arr_i1_ = TLoadObjectInstruction_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(32840L * (i1 + 1) == 32840L * i1 + 32840L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 32840L * (nCount - i1), 32840L)
            check(codec.base.bitStream.validate_offset_bits(32840L * (nCount - (i1 + 1))))
        }
        val res = PUS_6_1_TTC_6_1_LoadObjectMemoryData_loadObjectInstructions_pVal_loadObjectInstructions_loadObjectInstructions_Decode_loop(codec, nCount, loadObjectInstructions.append(loadObjectInstructions_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(loadObjectInstructions, newVec, loadObjectInstructions_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(loadObjectInstructions.append(loadObjectInstructions_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(loadObjectInstructions.list, loadObjectInstructions_arr_i1_, i1)
                    Vector.listApplyEqVecApply(loadObjectInstructions.append(loadObjectInstructions_arr_i1_), i1)
                    check(loadObjectInstructions_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TLoadObjectInstruction]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(loadObjectInstructions, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTC_6_1_LoadObjectMemoryData_loadObjectInstructions.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def TC_6_1_LoadObjectMemoryData_loadObjectInstructions_ACN_Decode(codec: ACN, TC_6_1_LoadObjectMemoryData_n: ULong): EitherMut[Int, TTC_6_1_LoadObjectMemoryData_loadObjectInstructions] = {
    require(codec.base.bitStream.validate_offset_bits(2068920L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val loadObjectInstructions =
        if ((ULong.fromRaw(1) <= TC_6_1_LoadObjectMemoryData_n) && (TC_6_1_LoadObjectMemoryData_n <= ULong.fromRaw(63))) then
            val loadObjectInstructions_nCount = TC_6_1_LoadObjectMemoryData_n.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val loadObjectInstructions = PUS_6_1_TTC_6_1_LoadObjectMemoryData_loadObjectInstructions_pVal_loadObjectInstructions_loadObjectInstructions_Decode_loop(codec, loadObjectInstructions_nCount, Vector.empty[TLoadObjectInstruction], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val loadObjectInstructions = TTC_6_1_LoadObjectMemoryData_loadObjectInstructions(loadObjectInstructions_nCount, bdg)
                    ghostExpr {
                        loadObjectInstructions.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    loadObjectInstructions
            }
            loadObjectInstructions
        else return LeftMut(ERR_ACN_DECODE_TC_6_1_LOADOBJECTMEMORYDATA_LOADOBJECTINSTRUCTIONS)
    TTC_6_1_LoadObjectMemoryData_loadObjectInstructions_IsConstraintValid(loadObjectInstructions) match {
        case Left(l) =>
            LeftMut[Int, TTC_6_1_LoadObjectMemoryData_loadObjectInstructions](l)
        case Right(_) =>
            RightMut[Int, TTC_6_1_LoadObjectMemoryData_loadObjectInstructions](loadObjectInstructions)
    }
}.ensuring { (res: EitherMut[Int, TTC_6_1_LoadObjectMemoryData_loadObjectInstructions]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_6_1_LoadObjectMemoryData_loadObjectInstructions_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TC_6_1_LoadObjectMemoryData_loadObjectInstructions_ACN_Decode_pure(codec: ACN, TC_6_1_LoadObjectMemoryData_n: ULong): (ACN, EitherMut[Int, TTC_6_1_LoadObjectMemoryData_loadObjectInstructions]) = {
    require(codec.base.bitStream.validate_offset_bits(2068920L))
    val cpy = snapshot(codec)
    val res = TC_6_1_LoadObjectMemoryData_loadObjectInstructions_ACN_Decode(cpy, TC_6_1_LoadObjectMemoryData_n)
    (cpy, res)
}

def TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions_IsConstraintValid(pVal: TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = ((1 <= pVal.nCount) && (pVal.nCount <= 63)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TLoadObjectInstruction_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TTC_6_1_LoadObjectMemoryDataMultipleMemid_IsConstraintValid(pVal: TTC_6_1_LoadObjectMemoryDataMultipleMemid): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TBaseMultipleMemid_IsConstraintValid(pVal.base_ID)
    if ret.isRight then
        ret = TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions_IsConstraintValid(pVal.loadObjectInstructions)
    ret
}

def TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions_Initialize(): TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions = TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions(1, Vector.fill(63)(TLoadObjectInstruction_Initialize()))
def TTC_6_1_LoadObjectMemoryDataMultipleMemid_Initialize(): TTC_6_1_LoadObjectMemoryDataMultipleMemid = TTC_6_1_LoadObjectMemoryDataMultipleMemid(base_ID = TBaseMultipleMemid_Initialize(), loadObjectInstructions = TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions_Initialize())

@opaque @inlineOnce 
def TTC_6_1_LoadObjectMemoryDataMultipleMemid_ACN_Encode(pVal: TTC_6_1_LoadObjectMemoryDataMultipleMemid, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(2068992L))
    var i1: Int = 0
    TTC_6_1_LoadObjectMemoryDataMultipleMemid_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val TC_6_1_LoadObjectMemoryDataMultipleMemid_memory_ID = pVal.base_ID match
        case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(_) =>TMemory_ID.TmemId1

    /* Encode TC_6_1_LoadObjectMemoryDataMultipleMemid_memory_ID */
    val intVal_TC_6_1_LoadObjectMemoryDataMultipleMemid_memory_ID = TC_6_1_LoadObjectMemoryDataMultipleMemid_memory_ID match
        case TMemory_ID.TmemId1 => ULong.fromRaw(0L)

    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(0))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(intVal_TC_6_1_LoadObjectMemoryDataMultipleMemid_memory_ID)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(intVal_TC_6_1_LoadObjectMemoryDataMultipleMemid_memory_ID)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 2068992L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode base_ID */
    TC_6_1_LoadObjectMemoryDataMultipleMemid_base_ID_ACN_Encode(codec, pVal, TC_6_1_LoadObjectMemoryDataMultipleMemid_memory_ID, pVal.base_ID) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 2068960L, 8L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 40L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.base_ID match {
        case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
            8L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    val TC_6_1_LoadObjectMemoryDataMultipleMemid_n = ULong.fromRaw(pVal.loadObjectInstructions.nCount)
    if TC_6_1_LoadObjectMemoryDataMultipleMemid_n < ULong.fromRaw(1) || TC_6_1_LoadObjectMemoryDataMultipleMemid_n > ULong.fromRaw(63) then
        return Left(860)
    /* Encode TC_6_1_LoadObjectMemoryDataMultipleMemid_n */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(TC_6_1_LoadObjectMemoryDataMultipleMemid_n)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(TC_6_1_LoadObjectMemoryDataMultipleMemid_n)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_3.base.bitStream, codec.base.bitStream, 2068952L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 72L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    @ghost val codec_0_4 = snapshot(codec)
    /* Encode loadObjectInstructions */
    TC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions_ACN_Encode(codec, pVal, TC_6_1_LoadObjectMemoryDataMultipleMemid_n, pVal.loadObjectInstructions) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 2068992L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_3 = pVal.loadObjectInstructions.size(codec_0_4.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 2068992L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2 + size_3)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TC_6_1_LoadObjectMemoryDataMultipleMemid_base_ID_ACN_Encode(codec: ACN, pVal: TTC_6_1_LoadObjectMemoryDataMultipleMemid, TC_6_1_LoadObjectMemoryDataMultipleMemid_memory_ID: TMemory_ID, base_ID: TBaseMultipleMemid): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(8L))
    @ghost val oldCdc = snapshot(codec)
    TBaseMultipleMemid_IsConstraintValid(base_ID) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    base_ID match
        case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
            locally {
                ghostExpr {
                    @opaque @inlineOnce
                    def bitCountLemma(): Unit = ().ensuring(_ => GetBitCountUnsigned(ULong.fromRaw(255) - ULong.fromRaw(0)) == 8)
                    bitCountLemma()
                }
            }
            codec.base.encodeConstrainedPosWholeNumber(memId1, 0.toRawULong, 255.toRawULong)
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + base_ID.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def PUS_6_1_TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions_pVal_loadObjectInstructions_loadObjectInstructions_Encode_loop(codec: ACN, loadObjectInstructions: TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= loadObjectInstructions.nCount))
    require((1 <= loadObjectInstructions.nCount) && (loadObjectInstructions.nCount <= loadObjectInstructions.arr.size) && (loadObjectInstructions.arr.size <= 63))
    require(codec.base.bitStream.validate_offset_bits((32840L * (loadObjectInstructions.nCount - i1))))
    decreases(loadObjectInstructions.nCount - i1)
    if (i1 == loadObjectInstructions.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 32840L * (loadObjectInstructions.nCount - i1), 32840L)
        }
        TLoadObjectInstruction_ACN_Encode(loadObjectInstructions.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(32840L * (i1 + 1) == 32840L * i1 + 32840L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 32840L * (loadObjectInstructions.nCount - i1), 32840L)
            check(codec.base.bitStream.validate_offset_bits(32840L * (loadObjectInstructions.nCount - (i1 + 1))))
        }
        val res = PUS_6_1_TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions_pVal_loadObjectInstructions_loadObjectInstructions_Encode_loop(codec, loadObjectInstructions, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions.sizeRange(loadObjectInstructions.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, loadObjectInstructions.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + loadObjectInstructions.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions.sizeRange(loadObjectInstructions.arr, codecSnap1.base.bitStream.bitIndex, i1, loadObjectInstructions.nCount) == loadObjectInstructions.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions.sizeRange(loadObjectInstructions.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, loadObjectInstructions.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions.sizeRange(loadObjectInstructions.arr, codecSnap1.base.bitStream.bitIndex, i1, loadObjectInstructions.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions.sizeRange(loadObjectInstructions.arr, old(codec).base.bitStream.bitIndex, i1, loadObjectInstructions.nCount)
    }
}



@opaque @inlineOnce
def TC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions_ACN_Encode(codec: ACN, pVal: TTC_6_1_LoadObjectMemoryDataMultipleMemid, TC_6_1_LoadObjectMemoryDataMultipleMemid_n: ULong, loadObjectInstructions: TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(2068920L))
    @ghost val oldCdc = snapshot(codec)
    TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions_IsConstraintValid(loadObjectInstructions) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    PUS_6_1_TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions_pVal_loadObjectInstructions_loadObjectInstructions_Encode_loop(codec, loadObjectInstructions, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                loadObjectInstructions.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + loadObjectInstructions.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTC_6_1_LoadObjectMemoryDataMultipleMemid_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTC_6_1_LoadObjectMemoryDataMultipleMemid] =
{
    require(codec.base.bitStream.validate_offset_bits(2068992L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode TC_6_1_LoadObjectMemoryDataMultipleMemid_memory_ID */
    val intVal_TC_6_1_LoadObjectMemoryDataMultipleMemid_memory_ID = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    val TC_6_1_LoadObjectMemoryDataMultipleMemid_memory_ID = intVal_TC_6_1_LoadObjectMemoryDataMultipleMemid_memory_ID.toRaw match
        case 0 => TMemory_ID.TmemId1
        case _ => return LeftMut(ERR_ACN_DECODE_TC_6_1_LOADOBJECTMEMORYDATAMULTIPLEMEMID_MEMORY_ID)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 2068992L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode base_ID */
    val pVal_base_ID = TC_6_1_LoadObjectMemoryDataMultipleMemid_base_ID_ACN_Decode(codec, TC_6_1_LoadObjectMemoryDataMultipleMemid_memory_ID) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 2068960L, 8L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 40L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_base_ID match {
        case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
            8L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode TC_6_1_LoadObjectMemoryDataMultipleMemid_n */
    val TC_6_1_LoadObjectMemoryDataMultipleMemid_n = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_3.base.bitStream, codec.base.bitStream, 2068952L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 72L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    @ghost val codec_0_4 = snapshot(codec)
    /* Decode loadObjectInstructions */
    val pVal_loadObjectInstructions = TC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions_ACN_Decode(codec, TC_6_1_LoadObjectMemoryDataMultipleMemid_n) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 2068992L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_3 = pVal_loadObjectInstructions.size(codec_0_4.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 2068992L)
    }
    val pVal = TTC_6_1_LoadObjectMemoryDataMultipleMemid(pVal_base_ID, pVal_loadObjectInstructions)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2 + size_3)
    }

    TTC_6_1_LoadObjectMemoryDataMultipleMemid_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTC_6_1_LoadObjectMemoryDataMultipleMemid](l)
        case Right(_) => RightMut[ErrorCode, TTC_6_1_LoadObjectMemoryDataMultipleMemid](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTC_6_1_LoadObjectMemoryDataMultipleMemid]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_6_1_LoadObjectMemoryDataMultipleMemid_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTC_6_1_LoadObjectMemoryDataMultipleMemid_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTC_6_1_LoadObjectMemoryDataMultipleMemid]) =
{
    require(codec.base.bitStream.validate_offset_bits(2068992L))
    val cpy = snapshot(codec)
    val res = TTC_6_1_LoadObjectMemoryDataMultipleMemid_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def TC_6_1_LoadObjectMemoryDataMultipleMemid_base_ID_ACN_Decode(codec: ACN, TC_6_1_LoadObjectMemoryDataMultipleMemid_memory_ID: TMemory_ID): EitherMut[Int, TBaseMultipleMemid] = {
    require(codec.base.bitStream.validate_offset_bits(8L))
    @ghost val oldCdc = snapshot(codec)
    val base_ID = TC_6_1_LoadObjectMemoryDataMultipleMemid_memory_ID match
        case TMemory_ID.TmemId1 =>
            locally {
                ghostExpr {
                    @opaque @inlineOnce
                    def bitCountLemma(): Unit = ().ensuring(_ => GetBitCountUnsigned(ULong.fromRaw(255) - ULong.fromRaw(0)) == 8)
                    bitCountLemma()
                }
            }
            val memId1 = codec.base.decodeConstrainedPosWholeNumber(ULong.fromRaw(0), ULong.fromRaw(255)) // uper:135
            TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1)
    TBaseMultipleMemid_IsConstraintValid(base_ID) match {
        case Left(l) =>
            LeftMut[Int, TBaseMultipleMemid](l)
        case Right(_) =>
            RightMut[Int, TBaseMultipleMemid](base_ID)
    }
}.ensuring { (res: EitherMut[Int, TBaseMultipleMemid]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TBaseMultipleMemid_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TC_6_1_LoadObjectMemoryDataMultipleMemid_base_ID_ACN_Decode_pure(codec: ACN, TC_6_1_LoadObjectMemoryDataMultipleMemid_memory_ID: TMemory_ID): (ACN, EitherMut[Int, TBaseMultipleMemid]) = {
    require(codec.base.bitStream.validate_offset_bits(8L))
    val cpy = snapshot(codec)
    val res = TC_6_1_LoadObjectMemoryDataMultipleMemid_base_ID_ACN_Decode(cpy, TC_6_1_LoadObjectMemoryDataMultipleMemid_memory_ID)
    (cpy, res)
}

@opaque @inlineOnce
def PUS_6_1_TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions_pVal_loadObjectInstructions_loadObjectInstructions_Decode_loop(codec: ACN, nCount: Int, loadObjectInstructions: Vector[TLoadObjectInstruction], i1: Int): EitherMut[Int, Vector[TLoadObjectInstruction]] = {
    require((1 <= nCount) && (nCount <= 63))
    require((0 <= i1) && (i1 <= nCount))
    require(loadObjectInstructions.size == i1)
    require(codec.base.bitStream.validate_offset_bits((32840L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(loadObjectInstructions)
            vecRangesEqSlicedLemma(loadObjectInstructions, loadObjectInstructions, 0, loadObjectInstructions.size, 0, i1)
        }
        RightMut[Int, Vector[TLoadObjectInstruction]](loadObjectInstructions)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 32840L * (nCount - i1), 32840L)
        }
        val loadObjectInstructions_arr_i1_ = TLoadObjectInstruction_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(32840L * (i1 + 1) == 32840L * i1 + 32840L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 32840L * (nCount - i1), 32840L)
            check(codec.base.bitStream.validate_offset_bits(32840L * (nCount - (i1 + 1))))
        }
        val res = PUS_6_1_TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions_pVal_loadObjectInstructions_loadObjectInstructions_Decode_loop(codec, nCount, loadObjectInstructions.append(loadObjectInstructions_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(loadObjectInstructions, newVec, loadObjectInstructions_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(loadObjectInstructions.append(loadObjectInstructions_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(loadObjectInstructions.list, loadObjectInstructions_arr_i1_, i1)
                    Vector.listApplyEqVecApply(loadObjectInstructions.append(loadObjectInstructions_arr_i1_), i1)
                    check(loadObjectInstructions_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TLoadObjectInstruction]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(loadObjectInstructions, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def TC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions_ACN_Decode(codec: ACN, TC_6_1_LoadObjectMemoryDataMultipleMemid_n: ULong): EitherMut[Int, TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions] = {
    require(codec.base.bitStream.validate_offset_bits(2068920L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val loadObjectInstructions =
        if ((ULong.fromRaw(1) <= TC_6_1_LoadObjectMemoryDataMultipleMemid_n) && (TC_6_1_LoadObjectMemoryDataMultipleMemid_n <= ULong.fromRaw(63))) then
            val loadObjectInstructions_nCount = TC_6_1_LoadObjectMemoryDataMultipleMemid_n.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val loadObjectInstructions = PUS_6_1_TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions_pVal_loadObjectInstructions_loadObjectInstructions_Decode_loop(codec, loadObjectInstructions_nCount, Vector.empty[TLoadObjectInstruction], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val loadObjectInstructions = TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions(loadObjectInstructions_nCount, bdg)
                    ghostExpr {
                        loadObjectInstructions.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    loadObjectInstructions
            }
            loadObjectInstructions
        else return LeftMut(ERR_ACN_DECODE_TC_6_1_LOADOBJECTMEMORYDATAMULTIPLEMEMID_LOADOBJECTINSTRUCTIONS)
    TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions_IsConstraintValid(loadObjectInstructions) match {
        case Left(l) =>
            LeftMut[Int, TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions](l)
        case Right(_) =>
            RightMut[Int, TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions](loadObjectInstructions)
    }
}.ensuring { (res: EitherMut[Int, TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions_ACN_Decode_pure(codec: ACN, TC_6_1_LoadObjectMemoryDataMultipleMemid_n: ULong): (ACN, EitherMut[Int, TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions]) = {
    require(codec.base.bitStream.validate_offset_bits(2068920L))
    val cpy = snapshot(codec)
    val res = TC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions_ACN_Decode(cpy, TC_6_1_LoadObjectMemoryDataMultipleMemid_n)
    (cpy, res)
}