/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TLoadObjectInstruction --------------------------------------------*/

case class TLoadObjectInstruction_checksum(arr: Vector[UByte])
{
    require(this.arr.length == 2)
}

case class TLoadObjectInstruction (
    offset: TPUSC_UINT32, 
    dataToLoad: TMemoryData, 
    checksum: OptionMut[TLoadObjectInstruction_checksum]
) {
    require(this.checksum.isDefined)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854742967L))
        val size_0 = 32L
        val size_1 = this.dataToLoad.size(offset + size_0)
        val size_2 = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 32840L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854742967L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854742967L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.dataToLoad.size(offset + size_0_offset)
        val size_1_otherOffset = this.dataToLoad.size(otherOffset + size_0_otherOffset)
        this.dataToLoad.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        val size_2_otherOffset = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854742967L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854742967L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.dataToLoad.size(offset + size_0_offset)
        val size_1_otherOffset = this.dataToLoad.size(otherOffset + size_0_otherOffset)
        this.dataToLoad.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        val size_2_otherOffset = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854742967L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854742967L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.dataToLoad.size(offset + size_0_offset)
        val size_1_otherOffset = this.dataToLoad.size(otherOffset + size_0_otherOffset)
        this.dataToLoad.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        val size_2_otherOffset = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854742967L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854742967L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.dataToLoad.size(offset + size_0_offset)
        val size_1_otherOffset = this.dataToLoad.size(otherOffset + size_0_otherOffset)
        this.dataToLoad.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        val size_2_otherOffset = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_LOADOBJECTINSTRUCTION_CHECKSUM: Int = 726 /*(SIZE(16)) */

@inline @cCode.inline val ERR_LOADOBJECTINSTRUCTION: Int = 731 /*(WITH COMPONENTS {checksum PRESENT}) */
@inline @cCode.inline val ERR_LOADOBJECTINSTRUCTION_OFFSET_2: Int = 701 /* */
@inline @cCode.inline val ERR_LOADOBJECTINSTRUCTION_DATATOLOAD_2: Int = 721 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_LOADOBJECTINSTRUCTION: Int = 734 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_LOADOBJECTINSTRUCTION_OFFSET_2: Int = 704 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_LOADOBJECTINSTRUCTION_DATATOLOAD_2: Int = 724 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_LOADOBJECTINSTRUCTION_CHECKSUM: Int = 729 /*  */
@inline @cCode.inline val TLoadObjectInstruction_REQUIRED_BYTES_FOR_ACN_ENCODING = 4105
@inline @cCode.inline val TLoadObjectInstruction_REQUIRED_BITS_FOR_ACN_ENCODING = 32840

@inline @cCode.inline val ERR_ACN_DECODE_LOADOBJECTINSTRUCTION: Int = 735 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_LOADOBJECTINSTRUCTION_OFFSET_2: Int = 705 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_LOADOBJECTINSTRUCTION_DATATOLOAD_2: Int = 725 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_LOADOBJECTINSTRUCTION_CHECKSUM: Int = 730 /*  */
/*-- TTC_6_1_LoadObjectMemoryData --------------------------------------------*/


case class TTC_6_1_LoadObjectMemoryData_loadObjectInstructions (nCount: Int, arr: Vector[TLoadObjectInstruction])
{
    require(this.arr.size <= 63 && 1 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036852706887L))
        TTC_6_1_LoadObjectMemoryData_loadObjectInstructions.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 2068920L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036852706887L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036852706887L))
        TTC_6_1_LoadObjectMemoryData_loadObjectInstructions.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036852706887L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036852706887L))
        require((offset % 8L) == (otherOffset % 8L))
        TTC_6_1_LoadObjectMemoryData_loadObjectInstructions.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036852706887L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036852706887L))
        require((offset % 16L) == (otherOffset % 16L))
        TTC_6_1_LoadObjectMemoryData_loadObjectInstructions.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036852706887L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036852706887L))
        require((offset % 32L) == (otherOffset % 32L))
        TTC_6_1_LoadObjectMemoryData_loadObjectInstructions.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TTC_6_1_LoadObjectMemoryData_loadObjectInstructions {
    def sizeRange(ls: Vector[TLoadObjectInstruction], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32840L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(0L <= elemSize && elemSize <= 32840L)
            elemSize + TTC_6_1_LoadObjectMemoryData_loadObjectInstructions.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 32840L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TLoadObjectInstruction], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32840L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32840L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 32840L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 32840L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TTC_6_1_LoadObjectMemoryData_loadObjectInstructions.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_6_1_LoadObjectMemoryData_loadObjectInstructions.sizeRange(ls, offset, from, to) == TTC_6_1_LoadObjectMemoryData_loadObjectInstructions.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TLoadObjectInstruction], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32840L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32840L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 32840L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 32840L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TTC_6_1_LoadObjectMemoryData_loadObjectInstructions.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_6_1_LoadObjectMemoryData_loadObjectInstructions.sizeRange(ls, offset, from, to) == TTC_6_1_LoadObjectMemoryData_loadObjectInstructions.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TLoadObjectInstruction], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32840L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32840L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 32840L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 32840L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TTC_6_1_LoadObjectMemoryData_loadObjectInstructions.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_6_1_LoadObjectMemoryData_loadObjectInstructions.sizeRange(ls, offset, from, to) == TTC_6_1_LoadObjectMemoryData_loadObjectInstructions.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TLoadObjectInstruction], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32840L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32840L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 32840L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 32840L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TTC_6_1_LoadObjectMemoryData_loadObjectInstructions.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_6_1_LoadObjectMemoryData_loadObjectInstructions.sizeRange(ls, offset, from, to) == TTC_6_1_LoadObjectMemoryData_loadObjectInstructions.sizeRange(ls, otherOffset, from, to)
    }
}

case class TTC_6_1_LoadObjectMemoryData (
    base_ID: TBase, 
    loadObjectInstructions: TTC_6_1_LoadObjectMemoryData_loadObjectInstructions
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036852706847L))
        val size_0 = 8L
        val size_1 = 32L
        val size_2 = this.loadObjectInstructions.size(offset + size_0 + size_1)
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 2068960L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036852706847L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036852706847L))
        val size_0_offset = 8L
        val size_0_otherOffset = 8L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.loadObjectInstructions.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.loadObjectInstructions.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.loadObjectInstructions.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036852706847L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036852706847L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 8L
        val size_0_otherOffset = 8L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.loadObjectInstructions.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.loadObjectInstructions.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.loadObjectInstructions.sizeLemmaNextByte(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036852706847L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036852706847L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 8L
        val size_0_otherOffset = 8L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.loadObjectInstructions.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.loadObjectInstructions.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.loadObjectInstructions.sizeLemmaNextWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036852706847L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036852706847L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 8L
        val size_0_otherOffset = 8L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.loadObjectInstructions.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.loadObjectInstructions.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.loadObjectInstructions.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_6_1_LOADOBJECTMEMORYDATA_LOADOBJECTINSTRUCTIONS: Int = 611 /*(SIZE(1 .. maxTC-6-1-LoadObjectInstructionCount)) */
@inline @cCode.inline val ERR_TC_6_1_LOADOBJECTMEMORYDATA_LOADOBJECTINSTRUCTIONS_ELM_2: Int = 606 /* */

@inline @cCode.inline val ERR_TC_6_1_LOADOBJECTMEMORYDATA: Int = 616 /* */
@inline @cCode.inline val ERR_TC_6_1_LOADOBJECTMEMORYDATA_BASE_ID_2: Int = 559 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_1_LOADOBJECTMEMORYDATA: Int = 619 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_1_LOADOBJECTMEMORYDATA_BASE_ID_2: Int = 562 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_1_LOADOBJECTMEMORYDATA_N_UNINITIALIZED: Int = 620 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_1_LOADOBJECTMEMORYDATA_N: Int = 564 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_1_LOADOBJECTMEMORYDATA_LOADOBJECTINSTRUCTIONS: Int = 614 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_1_LOADOBJECTMEMORYDATA_LOADOBJECTINSTRUCTIONS_ELM_2: Int = 609 /*  */
@inline @cCode.inline val TTC_6_1_LoadObjectMemoryData_REQUIRED_BYTES_FOR_ACN_ENCODING = 258620
@inline @cCode.inline val TTC_6_1_LoadObjectMemoryData_REQUIRED_BITS_FOR_ACN_ENCODING = 2068960

@inline @cCode.inline val ERR_ACN_DECODE_TC_6_1_LOADOBJECTMEMORYDATA: Int = 621 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_1_LOADOBJECTMEMORYDATA_BASE_ID_2: Int = 563 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_1_LOADOBJECTMEMORYDATA_N: Int = 565 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_1_LOADOBJECTMEMORYDATA_LOADOBJECTINSTRUCTIONS: Int = 615 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_1_LOADOBJECTMEMORYDATA_LOADOBJECTINSTRUCTIONS_ELM_2: Int = 610 /*  */
/*-- TTC_6_1_LoadObjectMemoryDataMultipleMemid --------------------------------------------*/


case class TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions (nCount: Int, arr: Vector[TLoadObjectInstruction])
{
    require(this.arr.size <= 63 && 1 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036852706887L))
        TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 2068920L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036852706887L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036852706887L))
        TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036852706887L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036852706887L))
        require((offset % 8L) == (otherOffset % 8L))
        TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036852706887L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036852706887L))
        require((offset % 16L) == (otherOffset % 16L))
        TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036852706887L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036852706887L))
        require((offset % 32L) == (otherOffset % 32L))
        TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions {
    def sizeRange(ls: Vector[TLoadObjectInstruction], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32840L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(0L <= elemSize && elemSize <= 32840L)
            elemSize + TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 32840L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TLoadObjectInstruction], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32840L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32840L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 32840L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 32840L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions.sizeRange(ls, offset, from, to) == TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TLoadObjectInstruction], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32840L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32840L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 32840L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 32840L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions.sizeRange(ls, offset, from, to) == TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TLoadObjectInstruction], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32840L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32840L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 32840L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 32840L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions.sizeRange(ls, offset, from, to) == TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TLoadObjectInstruction], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32840L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32840L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 32840L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 32840L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions.sizeRange(ls, offset, from, to) == TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions.sizeRange(ls, otherOffset, from, to)
    }
}

case class TTC_6_1_LoadObjectMemoryDataMultipleMemid (
    base_ID: TBaseMultipleMemid, 
    loadObjectInstructions: TTC_6_1_LoadObjectMemoryDataMultipleMemid_loadObjectInstructions
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036852706815L))
        val size_0 = 32L
        val size_1 = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        val size_2 = 32L
        val size_3 = this.loadObjectInstructions.size(offset + size_0 + size_1 + size_2)
        size_0 + size_1 + size_2 + size_3
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 2068992L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036852706815L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036852706815L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        val size_1_otherOffset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        this.base_ID.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = this.loadObjectInstructions.size(offset + size_0_offset + size_1_offset + size_2_offset)
        val size_3_otherOffset = this.loadObjectInstructions.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        this.loadObjectInstructions.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset + size_2_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036852706815L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036852706815L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        val size_1_otherOffset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        this.base_ID.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = this.loadObjectInstructions.size(offset + size_0_offset + size_1_offset + size_2_offset)
        val size_3_otherOffset = this.loadObjectInstructions.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        this.loadObjectInstructions.sizeLemmaNextByte(offset + size_0_offset + size_1_offset + size_2_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036852706815L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036852706815L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        val size_1_otherOffset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        this.base_ID.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = this.loadObjectInstructions.size(offset + size_0_offset + size_1_offset + size_2_offset)
        val size_3_otherOffset = this.loadObjectInstructions.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        this.loadObjectInstructions.sizeLemmaNextWord(offset + size_0_offset + size_1_offset + size_2_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036852706815L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036852706815L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        val size_1_otherOffset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        this.base_ID.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = this.loadObjectInstructions.size(offset + size_0_offset + size_1_offset + size_2_offset)
        val size_3_otherOffset = this.loadObjectInstructions.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        this.loadObjectInstructions.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset + size_2_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_6_1_LOADOBJECTMEMORYDATAMULTIPLEMEMID_LOADOBJECTINSTRUCTIONS: Int = 684 /*(SIZE(1 .. maxTC-6-1-LoadObjectInstructionCount)) */
@inline @cCode.inline val ERR_TC_6_1_LOADOBJECTMEMORYDATAMULTIPLEMEMID_LOADOBJECTINSTRUCTIONS_ELM_2: Int = 679 /* */

@inline @cCode.inline val ERR_TC_6_1_LOADOBJECTMEMORYDATAMULTIPLEMEMID: Int = 689 /* */
@inline @cCode.inline val ERR_TC_6_1_LOADOBJECTMEMORYDATAMULTIPLEMEMID_BASE_ID_2: Int = 634 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_1_LOADOBJECTMEMORYDATAMULTIPLEMEMID: Int = 692 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_1_LOADOBJECTMEMORYDATAMULTIPLEMEMID_MEMORY_ID_UNINITIALIZED: Int = 693 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_1_LOADOBJECTMEMORYDATAMULTIPLEMEMID_MEMORY_ID: Int = 622 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_1_LOADOBJECTMEMORYDATAMULTIPLEMEMID_BASE_ID: Int = 632 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_1_LOADOBJECTMEMORYDATAMULTIPLEMEMID_BASE_ID_MEMID1: Int = 627 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_1_LOADOBJECTMEMORYDATAMULTIPLEMEMID_N_UNINITIALIZED: Int = 694 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_1_LOADOBJECTMEMORYDATAMULTIPLEMEMID_N: Int = 637 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_1_LOADOBJECTMEMORYDATAMULTIPLEMEMID_LOADOBJECTINSTRUCTIONS: Int = 687 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_1_LOADOBJECTMEMORYDATAMULTIPLEMEMID_LOADOBJECTINSTRUCTIONS_ELM_2: Int = 682 /*  */
@inline @cCode.inline val TTC_6_1_LoadObjectMemoryDataMultipleMemid_REQUIRED_BYTES_FOR_ACN_ENCODING = 258624
@inline @cCode.inline val TTC_6_1_LoadObjectMemoryDataMultipleMemid_REQUIRED_BITS_FOR_ACN_ENCODING = 2068992

@inline @cCode.inline val ERR_ACN_DECODE_TC_6_1_LOADOBJECTMEMORYDATAMULTIPLEMEMID: Int = 695 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_1_LOADOBJECTMEMORYDATAMULTIPLEMEMID_MEMORY_ID: Int = 623 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_1_LOADOBJECTMEMORYDATAMULTIPLEMEMID_BASE_ID: Int = 633 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_1_LOADOBJECTMEMORYDATAMULTIPLEMEMID_BASE_ID_MEMID1: Int = 628 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_1_LOADOBJECTMEMORYDATAMULTIPLEMEMID_N: Int = 638 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_1_LOADOBJECTMEMORYDATAMULTIPLEMEMID_LOADOBJECTINSTRUCTIONS: Int = 688 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_1_LOADOBJECTMEMORYDATAMULTIPLEMEMID_LOADOBJECTINSTRUCTIONS_ELM_2: Int = 683 /*  */

// @inline @cCode.inline val maxTC_6_1_LoadObjectInstructionCount: Int = 63 // defined in body

