/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TTC_6_17_CheckAnObjectMemoryObject --------------------------------------------*/

case class TTC_6_17_CheckAnObjectMemoryObject (
    base_ID: TBase
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775799L))
        val size_0 = 8L
        (size_0)
    }.ensuring { (res: Long) => 
        res == 8L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775799L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775799L))
        val size_0_offset = 8L
        val size_0_otherOffset = 8L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775799L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775799L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 8L
        val size_0_otherOffset = 8L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775799L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775799L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 8L
        val size_0_otherOffset = 8L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775799L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775799L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 8L
        val size_0_otherOffset = 8L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_6_17_CHECKANOBJECTMEMORYOBJECT: Int = 314 /* */
@inline @cCode.inline val ERR_TC_6_17_CHECKANOBJECTMEMORYOBJECT_BASE_ID_2: Int = 309 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_17_CHECKANOBJECTMEMORYOBJECT: Int = 317 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_17_CHECKANOBJECTMEMORYOBJECT_BASE_ID_2: Int = 312 /*  */
@inline @cCode.inline val TTC_6_17_CheckAnObjectMemoryObject_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TTC_6_17_CheckAnObjectMemoryObject_REQUIRED_BITS_FOR_ACN_ENCODING = 8

@inline @cCode.inline val ERR_ACN_DECODE_TC_6_17_CHECKANOBJECTMEMORYOBJECT: Int = 318 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_17_CHECKANOBJECTMEMORYOBJECT_BASE_ID_2: Int = 313 /*  */
/*-- TTC_6_17_CheckAnObjectMemoryObjectMultipleMemid --------------------------------------------*/

case class TTC_6_17_CheckAnObjectMemoryObjectMultipleMemid (
    base_ID: TBaseMultipleMemid
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775767L))
        val size_0 = 32L
        val size_1 = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        size_0 + size_1
    }.ensuring { (res: Long) => 
        res == 40L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775767L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775767L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        val size_1_otherOffset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        this.base_ID.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775767L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775767L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        val size_1_otherOffset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        this.base_ID.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775767L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775767L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        val size_1_otherOffset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        this.base_ID.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775767L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775767L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        val size_1_otherOffset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        this.base_ID.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_6_17_CHECKANOBJECTMEMORYOBJECTMULTIPLEMEMID: Int = 334 /* */
@inline @cCode.inline val ERR_TC_6_17_CHECKANOBJECTMEMORYOBJECTMULTIPLEMEMID_BASE_ID_2: Int = 331 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_17_CHECKANOBJECTMEMORYOBJECTMULTIPLEMEMID: Int = 337 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_17_CHECKANOBJECTMEMORYOBJECTMULTIPLEMEMID_MEMORY_ID_UNINITIALIZED: Int = 338 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_17_CHECKANOBJECTMEMORYOBJECTMULTIPLEMEMID_MEMORY_ID: Int = 319 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_17_CHECKANOBJECTMEMORYOBJECTMULTIPLEMEMID_BASE_ID: Int = 329 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_17_CHECKANOBJECTMEMORYOBJECTMULTIPLEMEMID_BASE_ID_MEMID1: Int = 324 /*  */
@inline @cCode.inline val TTC_6_17_CheckAnObjectMemoryObjectMultipleMemid_REQUIRED_BYTES_FOR_ACN_ENCODING = 5
@inline @cCode.inline val TTC_6_17_CheckAnObjectMemoryObjectMultipleMemid_REQUIRED_BITS_FOR_ACN_ENCODING = 40

@inline @cCode.inline val ERR_ACN_DECODE_TC_6_17_CHECKANOBJECTMEMORYOBJECTMULTIPLEMEMID: Int = 339 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_17_CHECKANOBJECTMEMORYOBJECTMULTIPLEMEMID_MEMORY_ID: Int = 320 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_17_CHECKANOBJECTMEMORYOBJECTMULTIPLEMEMID_BASE_ID: Int = 330 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_17_CHECKANOBJECTMEMORYOBJECTMULTIPLEMEMID_BASE_ID_MEMID1: Int = 325 /*  */


