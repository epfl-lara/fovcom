/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

val maxTM_6_6_DataDumpCount: Int = 63 // variables:188

def TDataDump_checksum_IsConstraintValid(@annotation.unused pVal: TDataDump_checksum): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = Right(0)
    ret
}

def TDataDump_IsConstraintValid(pVal: TDataDump): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TPUSC_UINT32_IsConstraintValid(pVal.startAddress)
    if ret.isRight then
        ret = TMemoryData_IsConstraintValid(pVal.dumpedData)
        if ret.isRight then
            pVal.checksum match
                case SomeMut(checksum) =>
                    ret = TDataDump_checksum_IsConstraintValid(checksum)
                case NoneMut() =>
    ret
}

def TDataDump_checksum_Initialize(): TDataDump_checksum = TDataDump_checksum(Vector.fill(2)(0.toRawUByte))
def TDataDump_Initialize(): TDataDump = TDataDump(startAddress = ULong.fromRaw(0L), dumpedData = TMemoryData_Initialize(), checksum = SomeMut(TDataDump_checksum(Vector.fill(2)(0.toRawUByte))))

@opaque @inlineOnce
def TDataDump_ACN_Encode(pVal: TDataDump, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(32841))
    TDataDump_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    codec.base.bitStream.appendBit(pVal.checksum.isDefined)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 32841L, 1L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 1L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 1L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode startAddress */
    TPUSC_UINT32_ACN_Encode(pVal.startAddress, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 32840L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 33L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode dumpedData */
    TMemoryData_ACN_Encode(pVal.dumpedData, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_3.base.bitStream, codec.base.bitStream, 32808L, 32792L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32825L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = pVal.dumpedData.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    @ghost val codec_0_4 = snapshot(codec)
    DataDump_checksum_Optional_ACN_Encode(codec, pVal, pVal.checksum) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32841L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_3 = pVal.checksum match {
        case SomeMut(v) =>
            16L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 32841L)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def DataDump_checksum_Optional_ACN_Encode(codec: ACN, pVal: TDataDump, checksum: OptionMut[TDataDump_checksum]): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(16L))
    @ghost val oldCdc = snapshot(codec)
    checksum match {
        case SomeMut(v) =>
            TDataDump_checksum_IsConstraintValid(v) match {
                case Left(l) =>
                    return Left[Int, Int](l)
                case Right(_) =>
            }
        case NoneMut() =>
            ()
    }
    /* Encode checksum */
    checksum match
        case SomeMut(checksum) =>
            assert(16.toInt >= 0) // overflow may happen during cast
            codec.base.bitStream.appendBitsMSBFirstVec(checksum.arr, 16.toInt)

        case NoneMut() =>
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + (if (checksum.isDefined) {
                16L
            } else {
                0L
            })
    }
}



@opaque @inlineOnce
def TDataDump_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TDataDump] =
{
    require(codec.base.bitStream.validate_offset_bits(32841))
    var checksum_exist: Boolean = false

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    checksum_exist = codec.base.bitStream.readBit()
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 32841L, 1L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 1L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 1L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode startAddress */
    val pVal_startAddress = TPUSC_UINT32_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 32840L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 33L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode dumpedData */
    val pVal_dumpedData = TMemoryData_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_3.base.bitStream, codec.base.bitStream, 32808L, 32792L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32825L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = pVal_dumpedData.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    @ghost val codec_0_4 = snapshot(codec)
    val pVal_checksum = DataDump_checksum_Optional_ACN_Decode(codec, checksum_exist) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32841L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_3 = pVal_checksum match {
        case SomeMut(v) =>
            16L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 32841L)
    }
    val pVal = TDataDump(pVal_startAddress, pVal_dumpedData, pVal_checksum)

    TDataDump_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TDataDump](l)
        case Right(_) => RightMut[ErrorCode, TDataDump](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TDataDump]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TDataDump_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TDataDump_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TDataDump]) =
{
    require(codec.base.bitStream.validate_offset_bits(32841))
    val cpy = snapshot(codec)
    val res = TDataDump_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def DataDump_checksum_Optional_ACN_Decode(codec: ACN, checksum_exist: Boolean): EitherMut[Int, OptionMut[TDataDump_checksum]] = {
    require(codec.base.bitStream.validate_offset_bits(16L))
    @ghost val oldCdc = snapshot(codec)
    /* Decode checksum */
    val checksum: OptionMut[TDataDump_checksum] =
        if checksum_exist then
            val pVal_checksum = TDataDump_checksum(codec.base.bitStream.readBitsVec(16.toInt))
            SomeMut(pVal_checksum)
        else NoneMut[TDataDump_checksum]()
    checksum match {
        case SomeMut(v) =>
            TDataDump_checksum_IsConstraintValid(v) match {
                case Left(l) =>
                    LeftMut[Int, OptionMut[TDataDump_checksum]](l)
                case Right(_) =>
                    RightMut[Int, OptionMut[TDataDump_checksum]](checksum)
            }
        case NoneMut() =>
            RightMut[Int, OptionMut[TDataDump_checksum]](checksum)
    }
}.ensuring { (res: EitherMut[Int, OptionMut[TDataDump_checksum]]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + (if (resVal.isDefined) {
                16L
            } else {
                0L
            }) && (resVal match {
                case SomeMut(v) =>
                    TDataDump_checksum_IsConstraintValid(v).isRight
                case NoneMut() =>
                    true
            })
    }
}



@ghost @pure
def DataDump_checksum_Optional_ACN_Decode_pure(codec: ACN, checksum_exist: Boolean): (ACN, EitherMut[Int, OptionMut[TDataDump_checksum]]) = {
    require(codec.base.bitStream.validate_offset_bits(16L))
    val cpy = snapshot(codec)
    val res = DataDump_checksum_Optional_ACN_Decode(cpy, checksum_exist)
    (cpy, res)
}



def TTM_6_6_DumpedRawMemoryDataReport_dataDumps_IsConstraintValid(pVal: TTM_6_6_DumpedRawMemoryDataReport_dataDumps): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = ((1 <= pVal.nCount) && (pVal.nCount <= 63)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TDataDump_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TTM_6_6_DumpedRawMemoryDataReport_IsConstraintValid(pVal: TTM_6_6_DumpedRawMemoryDataReport): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    pVal.memory_ID match
        case SomeMut(memory_ID) =>
            ret = TMemory_ID_IsConstraintValid(memory_ID)
        case NoneMut() =>
    if ret.isRight then
        ret = TTM_6_6_DumpedRawMemoryDataReport_dataDumps_IsConstraintValid(pVal.dataDumps)
    if ret.isRight then
        ret = (pVal.memory_ID.isDefined == true) match
            case true =>
                Right(0)
            case false =>
                Left(45)
    ret
}

def TTM_6_6_DumpedRawMemoryDataReport_dataDumps_Initialize(): TTM_6_6_DumpedRawMemoryDataReport_dataDumps = TTM_6_6_DumpedRawMemoryDataReport_dataDumps(1, Vector.fill(63)(TDataDump_Initialize()))
def TTM_6_6_DumpedRawMemoryDataReport_Initialize(): TTM_6_6_DumpedRawMemoryDataReport = TTM_6_6_DumpedRawMemoryDataReport(memory_ID = SomeMut(TMemory_ID.TmemId1), dataDumps = TTM_6_6_DumpedRawMemoryDataReport_dataDumps_Initialize())

@opaque @inlineOnce
def TTM_6_6_DumpedRawMemoryDataReport_ACN_Encode(pVal: TTM_6_6_DumpedRawMemoryDataReport, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(2069047))
    var i1: Int = 0
    TTM_6_6_DumpedRawMemoryDataReport_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    TM_6_6_DumpedRawMemoryDataReport_memory_ID_Optional_ACN_Encode(codec, pVal, pVal.memory_ID) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 2069047L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = pVal.memory_ID match {
        case SomeMut(v) =>
            32L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    val TM_6_6_DumpedRawMemoryDataReport_n = ULong.fromRaw(pVal.dataDumps.nCount)
    if TM_6_6_DumpedRawMemoryDataReport_n < ULong.fromRaw(1) || TM_6_6_DumpedRawMemoryDataReport_n > ULong.fromRaw(63) then
        return Left(860)
    /* Encode TM_6_6_DumpedRawMemoryDataReport_n */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(TM_6_6_DumpedRawMemoryDataReport_n)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(TM_6_6_DumpedRawMemoryDataReport_n)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 2069015L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode dataDumps */
    TM_6_6_DumpedRawMemoryDataReport_dataDumps_ACN_Encode(codec, pVal, freshCopy(pVal.dataDumps)) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 2069047L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = pVal.dataDumps.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 2069047L)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TM_6_6_DumpedRawMemoryDataReport_memory_ID_Optional_ACN_Encode(codec: ACN, pVal: TTM_6_6_DumpedRawMemoryDataReport, memory_ID: OptionMut[TMemory_ID]): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(32L))
    @ghost val oldCdc = snapshot(codec)
    /* Encode memory_ID */
    /* marked as ALWAYS PRESENT, so it must be Some */
    memory_ID match
        case SomeMut(memory_ID) =>
            TMemory_ID_ACN_Encode(memory_ID, codec, false) match // uper:6
                case Right(_) =>
                case Left(err) => return Left(err)
        case NoneMut() => return Left(628)
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            memory_ID.isDefined && old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 32L
    }
}



@opaque @inlineOnce
def PUS_6_6_TTM_6_6_DumpedRawMemoryDataReport_dataDumps_pVal_dataDumps_dataDumps_Encode_loop(codec: ACN, dataDumps: TTM_6_6_DumpedRawMemoryDataReport_dataDumps, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= dataDumps.nCount))
    require(1 <= dataDumps.nCount && dataDumps.nCount <= dataDumps.arr.size && dataDumps.arr.size <= 63) // TODO
    require(codec.base.bitStream.validate_offset_bits((32841L * (dataDumps.nCount - i1))))
    decreases(dataDumps.nCount - i1)
    if (i1 == dataDumps.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 32841L * (dataDumps.nCount - i1), 32841L)
        }
        TDataDump_ACN_Encode(dataDumps.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(32841L * (i1 + 1) == 32841L * i1 + 32841L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 32841L * (dataDumps.nCount - i1), 32841L)
            check(codec.base.bitStream.validate_offset_bits(32841L * (dataDumps.nCount - (i1 + 1))))
        }
        val res = PUS_6_6_TTM_6_6_DumpedRawMemoryDataReport_dataDumps_pVal_dataDumps_dataDumps_Encode_loop(codec, dataDumps, i1 + 1)
        ghostExpr {
            res match {
                case Left(_) =>
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TTM_6_6_DumpedRawMemoryDataReport_dataDumps.sizeRange(dataDumps.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, dataDumps.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + dataDumps.arr(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TTM_6_6_DumpedRawMemoryDataReport_dataDumps.sizeRange(dataDumps.arr, codecSnap1.base.bitStream.bitIndex, i1, dataDumps.nCount) ==
                        dataDumps.arr(i1).size(codecSnap1.base.bitStream.bitIndex) +
                        TTM_6_6_DumpedRawMemoryDataReport_dataDumps.sizeRange(dataDumps.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, dataDumps.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TTM_6_6_DumpedRawMemoryDataReport_dataDumps.sizeRange(dataDumps.arr, codecSnap1.base.bitStream.bitIndex, i1, dataDumps.nCount))
            }
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_6_6_DumpedRawMemoryDataReport_dataDumps.sizeRange(dataDumps.arr, old(codec).base.bitStream.bitIndex, i1, dataDumps.nCount)
    }
}



@opaque @inlineOnce
def TM_6_6_DumpedRawMemoryDataReport_dataDumps_ACN_Encode(codec: ACN, pVal: TTM_6_6_DumpedRawMemoryDataReport, dataDumps: TTM_6_6_DumpedRawMemoryDataReport_dataDumps): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(2068983L))
    @ghost val oldCdc = snapshot(codec)
    TTM_6_6_DumpedRawMemoryDataReport_dataDumps_IsConstraintValid(dataDumps) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    PUS_6_6_TTM_6_6_DumpedRawMemoryDataReport_dataDumps_pVal_dataDumps_dataDumps_Encode_loop(codec, dataDumps, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                dataDumps.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + dataDumps.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TTM_6_6_DumpedRawMemoryDataReport_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTM_6_6_DumpedRawMemoryDataReport] =
{
    require(codec.base.bitStream.validate_offset_bits(2069047))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val pVal_memory_ID = TM_6_6_DumpedRawMemoryDataReport_memory_ID_Optional_ACN_Decode(codec) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 2069047L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = pVal_memory_ID match {
        case SomeMut(v) =>
            32L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode TM_6_6_DumpedRawMemoryDataReport_n */
    val TM_6_6_DumpedRawMemoryDataReport_n = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 2069015L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode dataDumps */
    val pVal_dataDumps = TM_6_6_DumpedRawMemoryDataReport_dataDumps_ACN_Decode(codec, TM_6_6_DumpedRawMemoryDataReport_n) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 2069047L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = pVal_dataDumps.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 2069047L)
    }
    val pVal = TTM_6_6_DumpedRawMemoryDataReport(pVal_memory_ID, pVal_dataDumps)

    TTM_6_6_DumpedRawMemoryDataReport_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTM_6_6_DumpedRawMemoryDataReport](l)
        case Right(_) => RightMut[ErrorCode, TTM_6_6_DumpedRawMemoryDataReport](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTM_6_6_DumpedRawMemoryDataReport]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_6_6_DumpedRawMemoryDataReport_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TTM_6_6_DumpedRawMemoryDataReport_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTM_6_6_DumpedRawMemoryDataReport]) =
{
    require(codec.base.bitStream.validate_offset_bits(2069047))
    val cpy = snapshot(codec)
    val res = TTM_6_6_DumpedRawMemoryDataReport_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def TM_6_6_DumpedRawMemoryDataReport_memory_ID_Optional_ACN_Decode(codec: ACN): EitherMut[Int, OptionMut[TMemory_ID]] = {
    require(codec.base.bitStream.validate_offset_bits(32L))
    @ghost val oldCdc = snapshot(codec)
    /* Decode memory_ID */
    /* marked as ALWAYS PRESENT */
    val memory_ID: OptionMut[TMemory_ID] =
        val pVal_memory_ID = TMemory_ID_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        SomeMut(pVal_memory_ID)
    RightMut[Int, OptionMut[TMemory_ID]](memory_ID)
}.ensuring { (res: EitherMut[Int, OptionMut[TMemory_ID]]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            resVal.isDefined && old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 32L
    }
}



@ghost @pure
def TM_6_6_DumpedRawMemoryDataReport_memory_ID_Optional_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[Int, OptionMut[TMemory_ID]]) = {
    require(codec.base.bitStream.validate_offset_bits(32L))
    val cpy = snapshot(codec)
    val res = TM_6_6_DumpedRawMemoryDataReport_memory_ID_Optional_ACN_Decode(cpy)
    (cpy, res)
}



@opaque @inlineOnce
def PUS_6_6_TTM_6_6_DumpedRawMemoryDataReport_dataDumps_pVal_dataDumps_dataDumps_Decode_loop(codec: ACN, nCount: Int, dataDumps: Vector[TDataDump], i1: Int): EitherMut[Int, Vector[TDataDump]] = {
    require((1 <= nCount) && (nCount <= 63))
    require((0 <= i1) && (i1 <= nCount))
    require(dataDumps.size == i1)
    require(codec.base.bitStream.validate_offset_bits((32841L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(dataDumps)
            vecRangesEqSlicedLemma(dataDumps, dataDumps, 0, dataDumps.size, 0, i1)
        }
        RightMut[Int, Vector[TDataDump]](dataDumps)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 32841L * (nCount - i1), 32841L)
        }
        val dataDumps_arr_i1_ = TDataDump_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(32841L * (i1 + 1) == 32841L * i1 + 32841L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 32841L * (nCount - i1), 32841L)
            check(codec.base.bitStream.validate_offset_bits(32841L * (nCount - (i1 + 1))))
        }
        val res = PUS_6_6_TTM_6_6_DumpedRawMemoryDataReport_dataDumps_pVal_dataDumps_dataDumps_Decode_loop(codec, nCount, dataDumps.append(dataDumps_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(dataDumps, newVec, dataDumps_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(dataDumps.append(dataDumps_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(dataDumps.list, dataDumps_arr_i1_, i1)
                    Vector.listApplyEqVecApply(dataDumps.append(dataDumps_arr_i1_), i1)
                    check(dataDumps_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TDataDump]]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(dataDumps, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_6_6_DumpedRawMemoryDataReport_dataDumps.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def TM_6_6_DumpedRawMemoryDataReport_dataDumps_ACN_Decode(codec: ACN, TM_6_6_DumpedRawMemoryDataReport_n: ULong): EitherMut[Int, TTM_6_6_DumpedRawMemoryDataReport_dataDumps] = {
    require(codec.base.bitStream.validate_offset_bits(2068983L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val dataDumps =
        if ((ULong.fromRaw(1) <= TM_6_6_DumpedRawMemoryDataReport_n) && (TM_6_6_DumpedRawMemoryDataReport_n <= ULong.fromRaw(63))) then
            val dataDumps_nCount = TM_6_6_DumpedRawMemoryDataReport_n.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val dataDumps = PUS_6_6_TTM_6_6_DumpedRawMemoryDataReport_dataDumps_pVal_dataDumps_dataDumps_Decode_loop(codec, dataDumps_nCount, Vector.empty[TDataDump], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val dataDumps = TTM_6_6_DumpedRawMemoryDataReport_dataDumps(dataDumps_nCount, bdg)
                    ghostExpr {
                        dataDumps.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    dataDumps
            }
            dataDumps
        else return LeftMut(ERR_ACN_DECODE_TM_6_6_DUMPEDRAWMEMORYDATAREPORT_DATADUMPS)
    TTM_6_6_DumpedRawMemoryDataReport_dataDumps_IsConstraintValid(dataDumps) match {
        case Left(l) =>
            LeftMut[Int, TTM_6_6_DumpedRawMemoryDataReport_dataDumps](l)
        case Right(_) =>
            RightMut[Int, TTM_6_6_DumpedRawMemoryDataReport_dataDumps](dataDumps)
    }
}.ensuring { (res: EitherMut[Int, TTM_6_6_DumpedRawMemoryDataReport_dataDumps]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_6_6_DumpedRawMemoryDataReport_dataDumps_IsConstraintValid(resVal).isRight
    }
}