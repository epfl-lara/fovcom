/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TBitMaskMultipleMemid --------------------------------------------*/
case class TBitMaskMultipleMemid_memId1(arr: Vector[UByte])
{
    require(this.arr.length == 4)
}

enum TBitMaskMultipleMemid:
    case BitMaskMultipleMemid_memId1_PRESENT(memId1: TBitMaskMultipleMemid_memId1)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        this match {
            case TBitMaskMultipleMemid.BitMaskMultipleMemid_memId1_PRESENT(memId1) =>
                32L
        }
    }.ensuring { (res: Long) => 
        res == 32L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        this match {
            case TBitMaskMultipleMemid.BitMaskMultipleMemid_memId1_PRESENT(memId1) =>
                ()
        }
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        require((offset % 8L) == (otherOffset % 8L))
        this match {
            case TBitMaskMultipleMemid.BitMaskMultipleMemid_memId1_PRESENT(memId1) =>
                ()
        }
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        require((offset % 16L) == (otherOffset % 16L))
        this match {
            case TBitMaskMultipleMemid.BitMaskMultipleMemid_memId1_PRESENT(memId1) =>
                ()
        }
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        require((offset % 32L) == (otherOffset % 32L))
        this match {
            case TBitMaskMultipleMemid.BitMaskMultipleMemid_memId1_PRESENT(memId1) =>
                ()
        }
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

@inline @cCode.inline val ERR_BITMASKMULTIPLEMEMID_MEMID1: Int = 210 /*(SIZE(4)) */

@inline @cCode.inline val ERR_BITMASKMULTIPLEMEMID: Int = 215 /* */

 
 
/*-- TDataToLoadMultipleMemid --------------------------------------------*/
case class TDataToLoadMultipleMemid_memId1(arr: Vector[UByte])
{
    require(this.arr.length == 4)
}

enum TDataToLoadMultipleMemid:
    case DataToLoadMultipleMemid_memId1_PRESENT(memId1: TDataToLoadMultipleMemid_memId1)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        this match {
            case TDataToLoadMultipleMemid.DataToLoadMultipleMemid_memId1_PRESENT(memId1) =>
                32L
        }
    }.ensuring { (res: Long) => 
        res == 32L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        this match {
            case TDataToLoadMultipleMemid.DataToLoadMultipleMemid_memId1_PRESENT(memId1) =>
                ()
        }
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        require((offset % 8L) == (otherOffset % 8L))
        this match {
            case TDataToLoadMultipleMemid.DataToLoadMultipleMemid_memId1_PRESENT(memId1) =>
                ()
        }
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        require((offset % 16L) == (otherOffset % 16L))
        this match {
            case TDataToLoadMultipleMemid.DataToLoadMultipleMemid_memId1_PRESENT(memId1) =>
                ()
        }
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        require((offset % 32L) == (otherOffset % 32L))
        this match {
            case TDataToLoadMultipleMemid.DataToLoadMultipleMemid_memId1_PRESENT(memId1) =>
                ()
        }
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

@inline @cCode.inline val ERR_DATATOLOADMULTIPLEMEMID_MEMID1: Int = 220 /*(SIZE(4)) */

@inline @cCode.inline val ERR_DATATOLOADMULTIPLEMEMID: Int = 225 /* */

 
 
/*-- TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid --------------------------------------------*/

case class TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid (
    startAddress: TPUSC_UINT32, 
    bitMask: TBitMaskMultipleMemid, 
    dataToLoad: TDataToLoadMultipleMemid
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775679L))
        val size_0 = 32L
        val size_1 = 32L
        val size_2 = this.bitMask match {
            case TBitMaskMultipleMemid.BitMaskMultipleMemid_memId1_PRESENT(memId1) =>
                32L
        }
        val size_3 = this.dataToLoad match {
            case TDataToLoadMultipleMemid.DataToLoadMultipleMemid_memId1_PRESENT(memId1) =>
                32L
        }
        size_0 + size_1 + size_2 + size_3
    }.ensuring { (res: Long) => 
        res == 128L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775679L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775679L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.bitMask match {
            case TBitMaskMultipleMemid.BitMaskMultipleMemid_memId1_PRESENT(memId1) =>
                32L
        }
        val size_2_otherOffset = this.bitMask match {
            case TBitMaskMultipleMemid.BitMaskMultipleMemid_memId1_PRESENT(memId1) =>
                32L
        }
        this.bitMask.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        val size_3_offset = this.dataToLoad match {
            case TDataToLoadMultipleMemid.DataToLoadMultipleMemid_memId1_PRESENT(memId1) =>
                32L
        }
        val size_3_otherOffset = this.dataToLoad match {
            case TDataToLoadMultipleMemid.DataToLoadMultipleMemid_memId1_PRESENT(memId1) =>
                32L
        }
        this.dataToLoad.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset + size_2_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775679L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775679L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.bitMask match {
            case TBitMaskMultipleMemid.BitMaskMultipleMemid_memId1_PRESENT(memId1) =>
                32L
        }
        val size_2_otherOffset = this.bitMask match {
            case TBitMaskMultipleMemid.BitMaskMultipleMemid_memId1_PRESENT(memId1) =>
                32L
        }
        this.bitMask.sizeLemmaNextByte(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        val size_3_offset = this.dataToLoad match {
            case TDataToLoadMultipleMemid.DataToLoadMultipleMemid_memId1_PRESENT(memId1) =>
                32L
        }
        val size_3_otherOffset = this.dataToLoad match {
            case TDataToLoadMultipleMemid.DataToLoadMultipleMemid_memId1_PRESENT(memId1) =>
                32L
        }
        this.dataToLoad.sizeLemmaNextByte(offset + size_0_offset + size_1_offset + size_2_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775679L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775679L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.bitMask match {
            case TBitMaskMultipleMemid.BitMaskMultipleMemid_memId1_PRESENT(memId1) =>
                32L
        }
        val size_2_otherOffset = this.bitMask match {
            case TBitMaskMultipleMemid.BitMaskMultipleMemid_memId1_PRESENT(memId1) =>
                32L
        }
        this.bitMask.sizeLemmaNextWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        val size_3_offset = this.dataToLoad match {
            case TDataToLoadMultipleMemid.DataToLoadMultipleMemid_memId1_PRESENT(memId1) =>
                32L
        }
        val size_3_otherOffset = this.dataToLoad match {
            case TDataToLoadMultipleMemid.DataToLoadMultipleMemid_memId1_PRESENT(memId1) =>
                32L
        }
        this.dataToLoad.sizeLemmaNextWord(offset + size_0_offset + size_1_offset + size_2_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775679L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775679L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.bitMask match {
            case TBitMaskMultipleMemid.BitMaskMultipleMemid_memId1_PRESENT(memId1) =>
                32L
        }
        val size_2_otherOffset = this.bitMask match {
            case TBitMaskMultipleMemid.BitMaskMultipleMemid_memId1_PRESENT(memId1) =>
                32L
        }
        this.bitMask.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        val size_3_offset = this.dataToLoad match {
            case TDataToLoadMultipleMemid.DataToLoadMultipleMemid_memId1_PRESENT(memId1) =>
                32L
        }
        val size_3_otherOffset = this.dataToLoad match {
            case TDataToLoadMultipleMemid.DataToLoadMultipleMemid_memId1_PRESENT(memId1) =>
                32L
        }
        this.dataToLoad.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset + size_2_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_6_11_LOADARAWMEMORYATOMICDATAAREAINANONINTERRUPTABLETRANSACTIONMULTIPLEMEMID: Int = 204 /* */
@inline @cCode.inline val ERR_TC_6_11_LOADARAWMEMORYATOMICDATAAREAINANONINTERRUPTABLETRANSACTIONMULTIPLEMEMID_STARTADDRESS_2_2: Int = 173 /* */
@inline @cCode.inline val ERR_TC_6_11_LOADARAWMEMORYATOMICDATAAREAINANONINTERRUPTABLETRANSACTIONMULTIPLEMEMID_BITMASK_2: Int = 188 /* */
@inline @cCode.inline val ERR_TC_6_11_LOADARAWMEMORYATOMICDATAAREAINANONINTERRUPTABLETRANSACTIONMULTIPLEMEMID_DATATOLOAD_2: Int = 201 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_11_LOADARAWMEMORYATOMICDATAAREAINANONINTERRUPTABLETRANSACTIONMULTIPLEMEMID: Int = 207 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_UPDATE_TC_6_11_LOADARAWMEMORYATOMICDATAAREAINANONINTERRUPTABLETRANSACTIONMULTIPLEMEMID_MEMORY_ID: Int = 162 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_11_LOADARAWMEMORYATOMICDATAAREAINANONINTERRUPTABLETRANSACTIONMULTIPLEMEMID_MEMORY_ID_UNINITIALIZED: Int = 208 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_11_LOADARAWMEMORYATOMICDATAAREAINANONINTERRUPTABLETRANSACTIONMULTIPLEMEMID_MEMORY_ID: Int = 160 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_11_LOADARAWMEMORYATOMICDATAAREAINANONINTERRUPTABLETRANSACTIONMULTIPLEMEMID_STARTADDRESS_2_2: Int = 176 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_11_LOADARAWMEMORYATOMICDATAAREAINANONINTERRUPTABLETRANSACTIONMULTIPLEMEMID_BITMASK: Int = 186 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_11_LOADARAWMEMORYATOMICDATAAREAINANONINTERRUPTABLETRANSACTIONMULTIPLEMEMID_BITMASK_MEMID1: Int = 181 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_11_LOADARAWMEMORYATOMICDATAAREAINANONINTERRUPTABLETRANSACTIONMULTIPLEMEMID_DATATOLOAD: Int = 199 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_11_LOADARAWMEMORYATOMICDATAAREAINANONINTERRUPTABLETRANSACTIONMULTIPLEMEMID_DATATOLOAD_MEMID1: Int = 194 /*  */
@inline @cCode.inline val TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_REQUIRED_BYTES_FOR_ACN_ENCODING = 16
@inline @cCode.inline val TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransactionMultipleMemid_REQUIRED_BITS_FOR_ACN_ENCODING = 128

@inline @cCode.inline val ERR_ACN_DECODE_TC_6_11_LOADARAWMEMORYATOMICDATAAREAINANONINTERRUPTABLETRANSACTIONMULTIPLEMEMID: Int = 209 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_11_LOADARAWMEMORYATOMICDATAAREAINANONINTERRUPTABLETRANSACTIONMULTIPLEMEMID_MEMORY_ID: Int = 161 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_11_LOADARAWMEMORYATOMICDATAAREAINANONINTERRUPTABLETRANSACTIONMULTIPLEMEMID_STARTADDRESS_2_2: Int = 177 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_11_LOADARAWMEMORYATOMICDATAAREAINANONINTERRUPTABLETRANSACTIONMULTIPLEMEMID_BITMASK: Int = 187 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_11_LOADARAWMEMORYATOMICDATAAREAINANONINTERRUPTABLETRANSACTIONMULTIPLEMEMID_BITMASK_MEMID1: Int = 182 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_11_LOADARAWMEMORYATOMICDATAAREAINANONINTERRUPTABLETRANSACTIONMULTIPLEMEMID_DATATOLOAD: Int = 200 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_11_LOADARAWMEMORYATOMICDATAAREAINANONINTERRUPTABLETRANSACTIONMULTIPLEMEMID_DATATOLOAD_MEMID1: Int = 195 /*  */
case class TBitMask(arr: Vector[UByte])
{
    require(this.arr.length == 4)
}

@inline @cCode.inline val ERR_BITMASK: Int = 230 /*(SIZE(4)) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_BITMASK: Int = 233 /*  */
@inline @cCode.inline val TBitMask_REQUIRED_BYTES_FOR_ACN_ENCODING = 4
@inline @cCode.inline val TBitMask_REQUIRED_BITS_FOR_ACN_ENCODING = 32

@inline @cCode.inline val ERR_ACN_DECODE_BITMASK: Int = 234 /*  */
case class TDataToLoad(arr: Vector[UByte])
{
    require(this.arr.length == 4)
}

@inline @cCode.inline val ERR_DATATOLOAD: Int = 235 /*(SIZE(4)) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_DATATOLOAD: Int = 238 /*  */
@inline @cCode.inline val TDataToLoad_REQUIRED_BYTES_FOR_ACN_ENCODING = 4
@inline @cCode.inline val TDataToLoad_REQUIRED_BITS_FOR_ACN_ENCODING = 32

@inline @cCode.inline val ERR_ACN_DECODE_DATATOLOAD: Int = 239 /*  */
/*-- TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransaction --------------------------------------------*/

case class TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransaction (
    startAddress: TPUSC_UINT32, 
    bitMask: TBitMask, 
    dataToLoad: TDataToLoad
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775711L))
        val size_0 = 32L
        val size_1 = 32L
        val size_2 = 32L
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        res == 96L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775711L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775711L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775711L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775711L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775711L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775711L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775711L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775711L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_6_11_LOADARAWMEMORYATOMICDATAAREAINANONINTERRUPTABLETRANSACTION: Int = 155 /* */
@inline @cCode.inline val ERR_TC_6_11_LOADARAWMEMORYATOMICDATAAREAINANONINTERRUPTABLETRANSACTION_STARTADDRESS_2_2: Int = 130 /* */
@inline @cCode.inline val ERR_TC_6_11_LOADARAWMEMORYATOMICDATAAREAINANONINTERRUPTABLETRANSACTION_BITMASK_2: Int = 140 /* */
@inline @cCode.inline val ERR_TC_6_11_LOADARAWMEMORYATOMICDATAAREAINANONINTERRUPTABLETRANSACTION_DATATOLOAD_2: Int = 150 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_11_LOADARAWMEMORYATOMICDATAAREAINANONINTERRUPTABLETRANSACTION: Int = 158 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_11_LOADARAWMEMORYATOMICDATAAREAINANONINTERRUPTABLETRANSACTION_STARTADDRESS_2_2: Int = 133 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_11_LOADARAWMEMORYATOMICDATAAREAINANONINTERRUPTABLETRANSACTION_BITMASK_2: Int = 143 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_11_LOADARAWMEMORYATOMICDATAAREAINANONINTERRUPTABLETRANSACTION_DATATOLOAD_2: Int = 153 /*  */
@inline @cCode.inline val TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransaction_REQUIRED_BYTES_FOR_ACN_ENCODING = 12
@inline @cCode.inline val TTC_6_11_LoadARawMemoryAtomicDataAreaInANonInterruptableTransaction_REQUIRED_BITS_FOR_ACN_ENCODING = 96

@inline @cCode.inline val ERR_ACN_DECODE_TC_6_11_LOADARAWMEMORYATOMICDATAAREAINANONINTERRUPTABLETRANSACTION: Int = 159 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_11_LOADARAWMEMORYATOMICDATAAREAINANONINTERRUPTABLETRANSACTION_STARTADDRESS_2_2: Int = 134 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_11_LOADARAWMEMORYATOMICDATAAREAINANONINTERRUPTABLETRANSACTION_BITMASK_2: Int = 144 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_11_LOADARAWMEMORYATOMICDATAAREAINANONINTERRUPTABLETRANSACTION_DATATOLOAD_2: Int = 154 /*  */


