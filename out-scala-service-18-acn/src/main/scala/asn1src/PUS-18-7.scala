/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._


def TTC_18_7_CommunicateParametersToOBCP_IsConstraintValid(pVal: TTC_18_7_CommunicateParametersToOBCP): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TOBCPArgumentValues_IsConstraintValid(pVal.argumentValues)
    ret
}

def TTC_18_7_CommunicateParametersToOBCP_Initialize(): TTC_18_7_CommunicateParametersToOBCP = TTC_18_7_CommunicateParametersToOBCP(argumentValues = TOBCPArgumentValues_Initialize())

@opaque @inlineOnce 
def TTC_18_7_CommunicateParametersToOBCP_ACN_Encode(pVal: TTC_18_7_CommunicateParametersToOBCP, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(43L))
    var i1: Int = 0
    TTC_18_7_CommunicateParametersToOBCP_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val TC_18_7_CommunicateParametersToOBCP_obcp_ID = pVal.argumentValues match
        case _: TOBCPArgumentValues.arg0_PRESENT =>
            Vector.fromList(List(UByte.fromRaw(0x6F), UByte.fromRaw(0x62), UByte.fromRaw(0x63), UByte.fromRaw(0x70), UByte.fromRaw(0x31), UByte.fromRaw(0x00)))
    /* Encode TC_18_7_CommunicateParametersToOBCP_obcp_ID */
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    PUS_18_7_TOBCP_ID_pVal_TC_18_7_CommunicateParametersToOBCP_obcp_ID_Encode_loop(codec, TC_18_7_CommunicateParametersToOBCP_obcp_ID, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 43L, 35L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 35L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 35L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode argumentValues */
    TC_18_7_CommunicateParametersToOBCP_argumentValues_ACN_Encode(codec, pVal, TC_18_7_CommunicateParametersToOBCP_obcp_ID, pVal.argumentValues) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 43L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.argumentValues match {
        case TOBCPArgumentValues.arg0_PRESENT(arg0) =>
            8L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 43L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def PUS_18_7_TOBCP_ID_pVal_TC_18_7_CommunicateParametersToOBCP_obcp_ID_Encode_loop(codec: ACN, TC_18_7_CommunicateParametersToOBCP_obcp_ID: Vector[UByte], i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= 5))
    require(TC_18_7_CommunicateParametersToOBCP_obcp_ID.size == (6))
    require(codec.base.bitStream.validate_offset_bits((7L * (5 - i1))))
    decreases(5 - i1)
    if (i1 == 5) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        if (!(UByte.fromRaw(0.toByte) <= TC_18_7_CommunicateParametersToOBCP_obcp_ID.apply(i1) && TC_18_7_CommunicateParametersToOBCP_obcp_ID.apply(i1) <= UByte.fromRaw(127.toByte))) {
            return Left[Int, Int](1)
        } else {
            ()
        }
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 7L * (5 - i1), 7L)
        }
        codec.base.encodeConstrainedWholeNumber(TC_18_7_CommunicateParametersToOBCP_obcp_ID(i1).toRaw, 0, 127)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(7L * (i1 + 1) == 7L * i1 + 7L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 7L * (5 - i1), 7L)
            check(codec.base.bitStream.validate_offset_bits(7L * (5 - (i1 + 1))))
        }
        val res = PUS_18_7_TOBCP_ID_pVal_TC_18_7_CommunicateParametersToOBCP_obcp_ID_Encode_loop(codec, TC_18_7_CommunicateParametersToOBCP_obcp_ID, i1 + 1)
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 7L * (5 - i1)
    }
}



@opaque @inlineOnce
def TC_18_7_CommunicateParametersToOBCP_argumentValues_ACN_Encode(codec: ACN, pVal: TTC_18_7_CommunicateParametersToOBCP, TC_18_7_CommunicateParametersToOBCP_obcp_ID: Vector[UByte], argumentValues: TOBCPArgumentValues): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(8L))
    @ghost val oldCdc = snapshot(codec)
    TOBCPArgumentValues_IsConstraintValid(argumentValues) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    argumentValues match
        case TOBCPArgumentValues.arg0_PRESENT(arg0) =>
            codec.enc_Int_PositiveInteger_ConstSize_8(arg0)
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + argumentValues.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTC_18_7_CommunicateParametersToOBCP_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTC_18_7_CommunicateParametersToOBCP] =
{
    require(codec.base.bitStream.validate_offset_bits(43L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode TC_18_7_CommunicateParametersToOBCP_obcp_ID */
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    val TC_18_7_CommunicateParametersToOBCP_obcp_ID = PUS_18_7_TOBCP_ID_pVal_TC_18_7_CommunicateParametersToOBCP_obcp_ID_Decode_loop(codec, Vector.empty[UByte], 0) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(bdg) =>
            bdg
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 43L, 35L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 35L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 35L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode argumentValues */
    val pVal_argumentValues = TC_18_7_CommunicateParametersToOBCP_argumentValues_ACN_Decode(codec, TC_18_7_CommunicateParametersToOBCP_obcp_ID) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 43L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_argumentValues match {
        case TOBCPArgumentValues.arg0_PRESENT(arg0) =>
            8L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 43L)
    }
    val pVal = TTC_18_7_CommunicateParametersToOBCP(pVal_argumentValues)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }

    TTC_18_7_CommunicateParametersToOBCP_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTC_18_7_CommunicateParametersToOBCP](l)
        case Right(_) => RightMut[ErrorCode, TTC_18_7_CommunicateParametersToOBCP](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTC_18_7_CommunicateParametersToOBCP]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_18_7_CommunicateParametersToOBCP_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTC_18_7_CommunicateParametersToOBCP_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTC_18_7_CommunicateParametersToOBCP]) =
{
    require(codec.base.bitStream.validate_offset_bits(43L))
    val cpy = snapshot(codec)
    val res = TTC_18_7_CommunicateParametersToOBCP_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def PUS_18_7_TOBCP_ID_pVal_TC_18_7_CommunicateParametersToOBCP_obcp_ID_Decode_loop(codec: ACN, TC_18_7_CommunicateParametersToOBCP_obcp_ID: Vector[UByte], i1: Int): EitherMut[Int, Vector[UByte]] = {
    require((0 <= i1) && (i1 <= 5))
    require(TC_18_7_CommunicateParametersToOBCP_obcp_ID.size == i1)
    require(codec.base.bitStream.validate_offset_bits((7L * (5 - i1))))
    decreases(5 - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == 5) {
        ghostExpr {
            vecRangesEqReflexiveLemma(TC_18_7_CommunicateParametersToOBCP_obcp_ID.append(UByte.fromRaw(0.toByte)))
            vecRangesEqSlicedLemma(TC_18_7_CommunicateParametersToOBCP_obcp_ID.append(UByte.fromRaw(0.toByte)), TC_18_7_CommunicateParametersToOBCP_obcp_ID.append(UByte.fromRaw(0.toByte)), 0, TC_18_7_CommunicateParametersToOBCP_obcp_ID.append(UByte.fromRaw(0.toByte)).size, 0, i1)
        }
        RightMut[Int, Vector[UByte]](TC_18_7_CommunicateParametersToOBCP_obcp_ID.append(UByte.fromRaw(0.toByte)))
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 7L * (5 - i1), 7L)
        }
        val TC_18_7_CommunicateParametersToOBCP_obcp_ID_arr_i1_ = UByte.fromRaw(codec.base.decodeConstrainedWholeNumberByte(0, 127)) // uper:109
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(7L * (i1 + 1) == 7L * i1 + 7L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 7L * (5 - i1), 7L)
            check(codec.base.bitStream.validate_offset_bits(7L * (5 - (i1 + 1))))
        }
        val res = PUS_18_7_TOBCP_ID_pVal_TC_18_7_CommunicateParametersToOBCP_obcp_ID_Decode_loop(codec, TC_18_7_CommunicateParametersToOBCP_obcp_ID.append(TC_18_7_CommunicateParametersToOBCP_obcp_ID_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(TC_18_7_CommunicateParametersToOBCP_obcp_ID, newVec, TC_18_7_CommunicateParametersToOBCP_obcp_ID_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(TC_18_7_CommunicateParametersToOBCP_obcp_ID.append(TC_18_7_CommunicateParametersToOBCP_obcp_ID_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(TC_18_7_CommunicateParametersToOBCP_obcp_ID.list, TC_18_7_CommunicateParametersToOBCP_obcp_ID_arr_i1_, i1)
                    Vector.listApplyEqVecApply(TC_18_7_CommunicateParametersToOBCP_obcp_ID.append(TC_18_7_CommunicateParametersToOBCP_obcp_ID_arr_i1_), i1)
                    check(TC_18_7_CommunicateParametersToOBCP_obcp_ID_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[UByte]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == 6 && vecRangesEq(TC_18_7_CommunicateParametersToOBCP_obcp_ID, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 7L * (5 - i1)
    }
}



@opaque @inlineOnce
def TC_18_7_CommunicateParametersToOBCP_argumentValues_ACN_Decode(codec: ACN, TC_18_7_CommunicateParametersToOBCP_obcp_ID: Vector[UByte]): EitherMut[Int, TOBCPArgumentValues] = {
    require(codec.base.bitStream.validate_offset_bits(8L))
    @ghost val oldCdc = snapshot(codec)
    val argumentValues = if ((TC_18_7_CommunicateParametersToOBCP_obcp_ID.sameElements(Vector.fromList(List[UByte](UByte.fromRaw(0x6F), UByte.fromRaw(0x62), UByte.fromRaw(0x63), UByte.fromRaw(0x70), UByte.fromRaw(0x31), UByte.fromRaw(0x00)))))) {
        val arg0 = codec.dec_Int_PositiveInteger_ConstSize_8()
    
        TOBCPArgumentValues.arg0_PRESENT(arg0)
    }
    else return LeftMut(ERR_ACN_DECODE_TC_18_7_COMMUNICATEPARAMETERSTOOBCP_ARGUMENTVALUES)
    TOBCPArgumentValues_IsConstraintValid(argumentValues) match {
        case Left(l) =>
            LeftMut[Int, TOBCPArgumentValues](l)
        case Right(_) =>
            RightMut[Int, TOBCPArgumentValues](argumentValues)
    }
}.ensuring { (res: EitherMut[Int, TOBCPArgumentValues]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TOBCPArgumentValues_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TC_18_7_CommunicateParametersToOBCP_argumentValues_ACN_Decode_pure(codec: ACN, TC_18_7_CommunicateParametersToOBCP_obcp_ID: Vector[UByte]): (ACN, EitherMut[Int, TOBCPArgumentValues]) = {
    require(codec.base.bitStream.validate_offset_bits(8L))
    val cpy = snapshot(codec)
    val res = TC_18_7_CommunicateParametersToOBCP_argumentValues_ACN_Decode(cpy, TC_18_7_CommunicateParametersToOBCP_obcp_ID)
    (cpy, res)
}