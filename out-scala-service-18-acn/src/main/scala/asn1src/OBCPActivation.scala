/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._


def TOBCPActivation_IsConstraintValid(pVal: TOBCPActivation): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    pVal.observabilityLevel match
        case SomeMut(observabilityLevel) =>
            ret = TOBCPObservabilityLevel_IsConstraintValid(observabilityLevel)
        case NoneMut() =>
    if ret.isRight then
        ret = TOBCPArgumentValues_IsConstraintValid(pVal.argumentValues)
    if ret.isRight then
        ret = (pVal.observabilityLevel.isDefined == true) match
            case true =>
                Right(0)
            case false =>
                Left(45)
    ret
}

def TOBCPActivation_Initialize(): TOBCPActivation = TOBCPActivation(observabilityLevel = SomeMut(TOBCPObservabilityLevel.Tno_observability), argumentValues = TOBCPArgumentValues_Initialize())

@opaque @inlineOnce 
def TOBCPActivation_ACN_Encode(pVal: TOBCPActivation, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(45L))
    var i1: Int = 0
    TOBCPActivation_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val OBCPActivation_obcp_ID = pVal.argumentValues match
        case _: TOBCPArgumentValues.arg0_PRESENT =>
            Vector.fromList(List(UByte.fromRaw(0x6F), UByte.fromRaw(0x62), UByte.fromRaw(0x63), UByte.fromRaw(0x70), UByte.fromRaw(0x31), UByte.fromRaw(0x00)))
    /* Encode OBCPActivation_obcp_ID */
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    OBCPActivation_TOBCP_ID_pVal_OBCPActivation_obcp_ID_Encode_loop(codec, OBCPActivation_obcp_ID, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 45L, 35L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 35L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 35L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    OBCPActivation_observabilityLevel_Optional_ACN_Encode(codec, pVal, pVal.observabilityLevel) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 10L, 2L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 37L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.observabilityLevel match {
        case SomeMut(v) =>
            2L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode argumentValues */
    OBCPActivation_argumentValues_ACN_Encode(codec, pVal, OBCPActivation_obcp_ID, pVal.argumentValues) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 45L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = pVal.argumentValues match {
        case TOBCPArgumentValues.arg0_PRESENT(arg0) =>
            8L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 45L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def OBCPActivation_TOBCP_ID_pVal_OBCPActivation_obcp_ID_Encode_loop(codec: ACN, OBCPActivation_obcp_ID: Vector[UByte], i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= 5))
    require(OBCPActivation_obcp_ID.size == (6))
    require(codec.base.bitStream.validate_offset_bits((7L * (5 - i1))))
    decreases(5 - i1)
    if (i1 == 5) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        if (!(UByte.fromRaw(0.toByte) <= OBCPActivation_obcp_ID.apply(i1) && OBCPActivation_obcp_ID.apply(i1) <= UByte.fromRaw(127.toByte))) {
            return Left[Int, Int](1)
        } else {
            ()
        }
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 7L * (5 - i1), 7L)
        }
        codec.base.encodeConstrainedWholeNumber(OBCPActivation_obcp_ID(i1).toRaw, 0, 127)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(7L * (i1 + 1) == 7L * i1 + 7L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 7L * (5 - i1), 7L)
            check(codec.base.bitStream.validate_offset_bits(7L * (5 - (i1 + 1))))
        }
        val res = OBCPActivation_TOBCP_ID_pVal_OBCPActivation_obcp_ID_Encode_loop(codec, OBCPActivation_obcp_ID, i1 + 1)
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 7L * (5 - i1)
    }
}



@opaque @inlineOnce
def OBCPActivation_observabilityLevel_Optional_ACN_Encode(codec: ACN, pVal: TOBCPActivation, observabilityLevel: OptionMut[TOBCPObservabilityLevel]): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(2L))
    @ghost val oldCdc = snapshot(codec)
    /* Encode observabilityLevel */
    /* marked as ALWAYS PRESENT, so it must be Some */
    observabilityLevel match
        case SomeMut(observabilityLevel) =>
            TOBCPObservabilityLevel_ACN_Encode(observabilityLevel, codec, false) match // uper:6
                case Right(_) =>
                case Left(err) => return Left(err)
        case NoneMut() => return Left(628)
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 2L
    }
}



@opaque @inlineOnce
def OBCPActivation_argumentValues_ACN_Encode(codec: ACN, pVal: TOBCPActivation, OBCPActivation_obcp_ID: Vector[UByte], argumentValues: TOBCPArgumentValues): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(8L))
    @ghost val oldCdc = snapshot(codec)
    TOBCPArgumentValues_IsConstraintValid(argumentValues) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    argumentValues match
        case TOBCPArgumentValues.arg0_PRESENT(arg0) =>
            codec.enc_Int_PositiveInteger_ConstSize_8(arg0)
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + argumentValues.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TOBCPActivation_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TOBCPActivation] =
{
    require(codec.base.bitStream.validate_offset_bits(45L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode OBCPActivation_obcp_ID */
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    val OBCPActivation_obcp_ID = OBCPActivation_TOBCP_ID_pVal_OBCPActivation_obcp_ID_Decode_loop(codec, Vector.empty[UByte], 0) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(bdg) =>
            bdg
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 45L, 35L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 35L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 35L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    val pVal_observabilityLevel = OBCPActivation_observabilityLevel_Optional_ACN_Decode(codec) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 10L, 2L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 37L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_observabilityLevel match {
        case SomeMut(v) =>
            2L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode argumentValues */
    val pVal_argumentValues = OBCPActivation_argumentValues_ACN_Decode(codec, OBCPActivation_obcp_ID) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 45L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = pVal_argumentValues match {
        case TOBCPArgumentValues.arg0_PRESENT(arg0) =>
            8L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 45L)
    }
    val pVal = TOBCPActivation(pVal_observabilityLevel, pVal_argumentValues)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }

    TOBCPActivation_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TOBCPActivation](l)
        case Right(_) => RightMut[ErrorCode, TOBCPActivation](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TOBCPActivation]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TOBCPActivation_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TOBCPActivation_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TOBCPActivation]) =
{
    require(codec.base.bitStream.validate_offset_bits(45L))
    val cpy = snapshot(codec)
    val res = TOBCPActivation_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def OBCPActivation_TOBCP_ID_pVal_OBCPActivation_obcp_ID_Decode_loop(codec: ACN, OBCPActivation_obcp_ID: Vector[UByte], i1: Int): EitherMut[Int, Vector[UByte]] = {
    require((0 <= i1) && (i1 <= 5))
    require(OBCPActivation_obcp_ID.size == i1)
    require(codec.base.bitStream.validate_offset_bits((7L * (5 - i1))))
    decreases(5 - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == 5) {
        ghostExpr {
            vecRangesEqReflexiveLemma(OBCPActivation_obcp_ID.append(UByte.fromRaw(0.toByte)))
            vecRangesEqSlicedLemma(OBCPActivation_obcp_ID.append(UByte.fromRaw(0.toByte)), OBCPActivation_obcp_ID.append(UByte.fromRaw(0.toByte)), 0, OBCPActivation_obcp_ID.append(UByte.fromRaw(0.toByte)).size, 0, i1)
        }
        RightMut[Int, Vector[UByte]](OBCPActivation_obcp_ID.append(UByte.fromRaw(0.toByte)))
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 7L * (5 - i1), 7L)
        }
        val OBCPActivation_obcp_ID_arr_i1_ = UByte.fromRaw(codec.base.decodeConstrainedWholeNumberByte(0, 127)) // uper:109
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(7L * (i1 + 1) == 7L * i1 + 7L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 7L * (5 - i1), 7L)
            check(codec.base.bitStream.validate_offset_bits(7L * (5 - (i1 + 1))))
        }
        val res = OBCPActivation_TOBCP_ID_pVal_OBCPActivation_obcp_ID_Decode_loop(codec, OBCPActivation_obcp_ID.append(OBCPActivation_obcp_ID_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(OBCPActivation_obcp_ID, newVec, OBCPActivation_obcp_ID_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(OBCPActivation_obcp_ID.append(OBCPActivation_obcp_ID_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(OBCPActivation_obcp_ID.list, OBCPActivation_obcp_ID_arr_i1_, i1)
                    Vector.listApplyEqVecApply(OBCPActivation_obcp_ID.append(OBCPActivation_obcp_ID_arr_i1_), i1)
                    check(OBCPActivation_obcp_ID_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[UByte]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == 6 && vecRangesEq(OBCPActivation_obcp_ID, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 7L * (5 - i1)
    }
}



@opaque @inlineOnce
def OBCPActivation_observabilityLevel_Optional_ACN_Decode(codec: ACN): EitherMut[Int, OptionMut[TOBCPObservabilityLevel]] = {
    require(codec.base.bitStream.validate_offset_bits(2L))
    @ghost val oldCdc = snapshot(codec)
    /* Decode observabilityLevel */
    /* marked as ALWAYS PRESENT */
    val observabilityLevel: OptionMut[TOBCPObservabilityLevel] =
        val pVal_observabilityLevel = TOBCPObservabilityLevel_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        SomeMut(pVal_observabilityLevel)
    RightMut[Int, OptionMut[TOBCPObservabilityLevel]](observabilityLevel)
}.ensuring { (res: EitherMut[Int, OptionMut[TOBCPObservabilityLevel]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            resVal.isDefined && old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 2L
    }
}



@ghost @pure
def OBCPActivation_observabilityLevel_Optional_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[Int, OptionMut[TOBCPObservabilityLevel]]) = {
    require(codec.base.bitStream.validate_offset_bits(2L))
    val cpy = snapshot(codec)
    val res = OBCPActivation_observabilityLevel_Optional_ACN_Decode(cpy)
    (cpy, res)
}



@opaque @inlineOnce
def OBCPActivation_argumentValues_ACN_Decode(codec: ACN, OBCPActivation_obcp_ID: Vector[UByte]): EitherMut[Int, TOBCPArgumentValues] = {
    require(codec.base.bitStream.validate_offset_bits(8L))
    @ghost val oldCdc = snapshot(codec)
    val argumentValues = if ((OBCPActivation_obcp_ID.sameElements(Vector.fromList(List[UByte](UByte.fromRaw(0x6F), UByte.fromRaw(0x62), UByte.fromRaw(0x63), UByte.fromRaw(0x70), UByte.fromRaw(0x31), UByte.fromRaw(0x00)))))) {
        val arg0 = codec.dec_Int_PositiveInteger_ConstSize_8()
    
        TOBCPArgumentValues.arg0_PRESENT(arg0)
    }
    else return LeftMut(ERR_ACN_DECODE_OBCPACTIVATION_ARGUMENTVALUES)
    TOBCPArgumentValues_IsConstraintValid(argumentValues) match {
        case Left(l) =>
            LeftMut[Int, TOBCPArgumentValues](l)
        case Right(_) =>
            RightMut[Int, TOBCPArgumentValues](argumentValues)
    }
}.ensuring { (res: EitherMut[Int, TOBCPArgumentValues]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TOBCPArgumentValues_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def OBCPActivation_argumentValues_ACN_Decode_pure(codec: ACN, OBCPActivation_obcp_ID: Vector[UByte]): (ACN, EitherMut[Int, TOBCPArgumentValues]) = {
    require(codec.base.bitStream.validate_offset_bits(8L))
    val cpy = snapshot(codec)
    val res = OBCPActivation_argumentValues_ACN_Decode(cpy, OBCPActivation_obcp_ID)
    (cpy, res)
}