/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TTC_18_19_LoadByReferenceAndActivateOBCP --------------------------------------------*/

case class TTC_18_19_LoadByReferenceAndActivateOBCP (
    filePath: OptionMut[TFilePath], 
    obcpActivation: TOBCPActivation
) {
    require(this.filePath.isDefined)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854718408L))
        val size_0 = (this.filePath match {
            case SomeMut(v) =>
                v.size(offset)
            case NoneMut() =>
                0L
        })
        val size_1 = this.obcpActivation.size(offset + size_0)
        size_0 + size_1
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 57399L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854718408L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854718408L))
        val size_0_offset = (this.filePath match {
            case SomeMut(v) =>
                v.size(offset)
            case NoneMut() =>
                0L
        })
        val size_0_otherOffset = this.filePath match {
            case SomeMut(v) =>
                v.size(otherOffset)
            case NoneMut() =>
                0L
        }
        this.filePath match {
            case SomeMut(v) =>
                v.sizeLemmaAnyOffset(offset, otherOffset)
            case NoneMut() =>
                ()
        }
        val size_1_offset = this.obcpActivation.size(offset + size_0_offset)
        val size_1_otherOffset = this.obcpActivation.size(otherOffset + size_0_otherOffset)
        this.obcpActivation.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854718408L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854718408L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = (this.filePath match {
            case SomeMut(v) =>
                v.size(offset)
            case NoneMut() =>
                0L
        })
        val size_0_otherOffset = this.filePath match {
            case SomeMut(v) =>
                v.size(otherOffset)
            case NoneMut() =>
                0L
        }
        this.filePath match {
            case SomeMut(v) =>
                v.sizeLemmaNextByte(offset, otherOffset)
            case NoneMut() =>
                ()
        }
        val size_1_offset = this.obcpActivation.size(offset + size_0_offset)
        val size_1_otherOffset = this.obcpActivation.size(otherOffset + size_0_otherOffset)
        this.obcpActivation.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854718408L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854718408L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = (this.filePath match {
            case SomeMut(v) =>
                v.size(offset)
            case NoneMut() =>
                0L
        })
        val size_0_otherOffset = this.filePath match {
            case SomeMut(v) =>
                v.size(otherOffset)
            case NoneMut() =>
                0L
        }
        this.filePath match {
            case SomeMut(v) =>
                v.sizeLemmaNextWord(offset, otherOffset)
            case NoneMut() =>
                ()
        }
        val size_1_offset = this.obcpActivation.size(offset + size_0_offset)
        val size_1_otherOffset = this.obcpActivation.size(otherOffset + size_0_otherOffset)
        this.obcpActivation.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854718408L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854718408L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = (this.filePath match {
            case SomeMut(v) =>
                v.size(offset)
            case NoneMut() =>
                0L
        })
        val size_0_otherOffset = this.filePath match {
            case SomeMut(v) =>
                v.size(otherOffset)
            case NoneMut() =>
                0L
        }
        this.filePath match {
            case SomeMut(v) =>
                v.sizeLemmaNextDWord(offset, otherOffset)
            case NoneMut() =>
                ()
        }
        val size_1_offset = this.obcpActivation.size(offset + size_0_offset)
        val size_1_otherOffset = this.obcpActivation.size(otherOffset + size_0_otherOffset)
        this.obcpActivation.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_18_19_LOADBYREFERENCEANDACTIVATEOBCP: Int = 362 /*(WITH COMPONENTS {filePath PRESENT}) */
@inline @cCode.inline val ERR_TC_18_19_LOADBYREFERENCEANDACTIVATEOBCP_FILEPATH_2: Int = 322 /* */
@inline @cCode.inline val ERR_TC_18_19_LOADBYREFERENCEANDACTIVATEOBCP_OBCPACTIVATION_2: Int = 357 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_18_19_LOADBYREFERENCEANDACTIVATEOBCP: Int = 365 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_18_19_LOADBYREFERENCEANDACTIVATEOBCP_FILEPATH_2: Int = 325 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_18_19_LOADBYREFERENCEANDACTIVATEOBCP_OBCPACTIVATION_2: Int = 360 /*  */
@inline @cCode.inline val TTC_18_19_LoadByReferenceAndActivateOBCP_REQUIRED_BYTES_FOR_ACN_ENCODING = 7175
@inline @cCode.inline val TTC_18_19_LoadByReferenceAndActivateOBCP_REQUIRED_BITS_FOR_ACN_ENCODING = 57399

@inline @cCode.inline val ERR_ACN_DECODE_TC_18_19_LOADBYREFERENCEANDACTIVATEOBCP: Int = 366 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_18_19_LOADBYREFERENCEANDACTIVATEOBCP_FILEPATH_2: Int = 326 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_18_19_LOADBYREFERENCEANDACTIVATEOBCP_OBCPACTIVATION_2: Int = 361 /*  */


