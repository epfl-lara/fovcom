/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TTM_18_18_AbortedOBCPReport --------------------------------------------*/


case class TTM_18_18_AbortedOBCPReport_obcp_IDs (nCount: Int, arr: Vector[TOBCP_ID])
{
    require(this.arr.size <= 15 && 1 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775282L))
        TTM_18_18_AbortedOBCPReport_obcp_IDs.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 525L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775282L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775282L))
        TTM_18_18_AbortedOBCPReport_obcp_IDs.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775282L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775282L))
        require((offset % 8L) == (otherOffset % 8L))
        TTM_18_18_AbortedOBCPReport_obcp_IDs.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775282L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775282L))
        require((offset % 16L) == (otherOffset % 16L))
        TTM_18_18_AbortedOBCPReport_obcp_IDs.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775282L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775282L))
        require((offset % 32L) == (otherOffset % 32L))
        TTM_18_18_AbortedOBCPReport_obcp_IDs.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TTM_18_18_AbortedOBCPReport_obcp_IDs {
    def sizeRange(ls: Vector[Vector[UByte]], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 15))
        require((0L <= offset) && (offset <= 9223372036854775807L - 35L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = 35L
            assert(elemSize == 35L)
            elemSize + TTM_18_18_AbortedOBCPReport_obcp_IDs.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 35L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[Vector[UByte]], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 15))
        require((0L <= offset) && (offset <= 9223372036854775807L - 35L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 35L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 35L
            val elemSizeOtherOff = 35L
            assert(elemSizeOff == 35L)
            assert(elemSizeOtherOff == 35L)
            TTM_18_18_AbortedOBCPReport_obcp_IDs.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTM_18_18_AbortedOBCPReport_obcp_IDs.sizeRange(ls, offset, from, to) == TTM_18_18_AbortedOBCPReport_obcp_IDs.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[Vector[UByte]], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 15))
        require((0L <= offset) && (offset <= 9223372036854775807L - 35L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 35L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 35L
            val elemSizeOtherOff = 35L
            assert(elemSizeOff == 35L)
            assert(elemSizeOtherOff == 35L)
            TTM_18_18_AbortedOBCPReport_obcp_IDs.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTM_18_18_AbortedOBCPReport_obcp_IDs.sizeRange(ls, offset, from, to) == TTM_18_18_AbortedOBCPReport_obcp_IDs.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[Vector[UByte]], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 15))
        require((0L <= offset) && (offset <= 9223372036854775807L - 35L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 35L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 35L
            val elemSizeOtherOff = 35L
            assert(elemSizeOff == 35L)
            assert(elemSizeOtherOff == 35L)
            TTM_18_18_AbortedOBCPReport_obcp_IDs.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTM_18_18_AbortedOBCPReport_obcp_IDs.sizeRange(ls, offset, from, to) == TTM_18_18_AbortedOBCPReport_obcp_IDs.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[Vector[UByte]], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 15))
        require((0L <= offset) && (offset <= 9223372036854775807L - 35L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 35L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 35L
            val elemSizeOtherOff = 35L
            assert(elemSizeOff == 35L)
            assert(elemSizeOtherOff == 35L)
            TTM_18_18_AbortedOBCPReport_obcp_IDs.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTM_18_18_AbortedOBCPReport_obcp_IDs.sizeRange(ls, offset, from, to) == TTM_18_18_AbortedOBCPReport_obcp_IDs.sizeRange(ls, otherOffset, from, to)
    }
}

case class TTM_18_18_AbortedOBCPReport (
    obcp_IDs: TTM_18_18_AbortedOBCPReport_obcp_IDs
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775250L))
        val size_0 = 32L
        val size_1 = this.obcp_IDs.size(offset + size_0)
        size_0 + size_1
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 557L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775250L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775250L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.obcp_IDs.size(offset + size_0_offset)
        val size_1_otherOffset = this.obcp_IDs.size(otherOffset + size_0_otherOffset)
        this.obcp_IDs.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775250L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775250L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.obcp_IDs.size(offset + size_0_offset)
        val size_1_otherOffset = this.obcp_IDs.size(otherOffset + size_0_otherOffset)
        this.obcp_IDs.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775250L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775250L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.obcp_IDs.size(offset + size_0_offset)
        val size_1_otherOffset = this.obcp_IDs.size(otherOffset + size_0_otherOffset)
        this.obcp_IDs.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775250L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775250L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.obcp_IDs.size(offset + size_0_offset)
        val size_1_otherOffset = this.obcp_IDs.size(otherOffset + size_0_otherOffset)
        this.obcp_IDs.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TM_18_18_ABORTEDOBCPREPORT_OBCP_IDS: Int = 286 /*(SIZE(1 .. maxTM-18-18-AbortedOBCPReportsCount)) */
@inline @cCode.inline val ERR_TM_18_18_ABORTEDOBCPREPORT_OBCP_IDS_ELM_2: Int = 281 /* */

@inline @cCode.inline val ERR_TM_18_18_ABORTEDOBCPREPORT: Int = 291 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TM_18_18_ABORTEDOBCPREPORT: Int = 294 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_18_18_ABORTEDOBCPREPORT_N_UNINITIALIZED: Int = 295 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_18_18_ABORTEDOBCPREPORT_N: Int = 274 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_18_18_ABORTEDOBCPREPORT_OBCP_IDS: Int = 289 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_18_18_ABORTEDOBCPREPORT_OBCP_IDS_ELM_2: Int = 284 /*  */
@inline @cCode.inline val TTM_18_18_AbortedOBCPReport_REQUIRED_BYTES_FOR_ACN_ENCODING = 70
@inline @cCode.inline val TTM_18_18_AbortedOBCPReport_REQUIRED_BITS_FOR_ACN_ENCODING = 557

@inline @cCode.inline val ERR_ACN_DECODE_TM_18_18_ABORTEDOBCPREPORT: Int = 296 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_18_18_ABORTEDOBCPREPORT_N: Int = 275 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_18_18_ABORTEDOBCPREPORT_OBCP_IDS: Int = 290 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_18_18_ABORTEDOBCPREPORT_OBCP_IDS_ELM_2: Int = 285 /*  */

// @inline @cCode.inline val maxTM_18_18_AbortedOBCPReportsCount: Int = 15 // defined in body

