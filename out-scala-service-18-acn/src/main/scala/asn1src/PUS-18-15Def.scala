/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TTC_18_15_ResumeAndExecuteOneOBCPStep --------------------------------------------*/

case class TTC_18_15_ResumeAndExecuteOneOBCPStep (
    obcp_ID: TOBCP_ID
) {
    require(6 == this.obcp_ID.length && this.obcp_ID.indexOfOrLength(UByte.fromRaw(0.toByte)) <= 5)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775772L))
        val size_0 = (35L)
        (size_0)
    }.ensuring { (res: Long) => 
        res == 35L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775772L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775772L))
        val size_0_offset = (35L)
        val size_0_otherOffset = 35L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775772L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775772L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = (35L)
        val size_0_otherOffset = 35L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775772L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775772L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = (35L)
        val size_0_otherOffset = 35L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775772L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775772L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = (35L)
        val size_0_otherOffset = 35L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_18_15_RESUMEANDEXECUTEONEOBCPSTEP: Int = 197 /* */
@inline @cCode.inline val ERR_TC_18_15_RESUMEANDEXECUTEONEOBCPSTEP_OBCP_ID_2: Int = 192 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_18_15_RESUMEANDEXECUTEONEOBCPSTEP: Int = 200 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_18_15_RESUMEANDEXECUTEONEOBCPSTEP_OBCP_ID_2: Int = 195 /*  */
@inline @cCode.inline val TTC_18_15_ResumeAndExecuteOneOBCPStep_REQUIRED_BYTES_FOR_ACN_ENCODING = 5
@inline @cCode.inline val TTC_18_15_ResumeAndExecuteOneOBCPStep_REQUIRED_BITS_FOR_ACN_ENCODING = 35

@inline @cCode.inline val ERR_ACN_DECODE_TC_18_15_RESUMEANDEXECUTEONEOBCPSTEP: Int = 201 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_18_15_RESUMEANDEXECUTEONEOBCPSTEP_OBCP_ID_2: Int = 196 /*  */


