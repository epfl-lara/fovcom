/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TTC_11_14_Groups --------------------------------------------*/


case class TTC_11_14_Groups_subschedule_ID (nCount: Int, arr: Vector[TGroup_ID])
{
    require(this.arr.size <= 4095 && 0 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854644767L))
        TTC_11_14_Groups_subschedule_ID.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 131040L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854644767L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854644767L))
        TTC_11_14_Groups_subschedule_ID.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854644767L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854644767L))
        require((offset % 8L) == (otherOffset % 8L))
        TTC_11_14_Groups_subschedule_ID.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854644767L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854644767L))
        require((offset % 16L) == (otherOffset % 16L))
        TTC_11_14_Groups_subschedule_ID.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854644767L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854644767L))
        require((offset % 32L) == (otherOffset % 32L))
        TTC_11_14_Groups_subschedule_ID.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TTC_11_14_Groups_subschedule_ID {
    def sizeRange(ls: Vector[ULong], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 4095))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = 32L
            assert(elemSize == 32L)
            elemSize + TTC_11_14_Groups_subschedule_ID.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 32L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[ULong], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 4095))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 32L
            val elemSizeOtherOff = 32L
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            TTC_11_14_Groups_subschedule_ID.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_11_14_Groups_subschedule_ID.sizeRange(ls, offset, from, to) == TTC_11_14_Groups_subschedule_ID.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[ULong], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 4095))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 32L
            val elemSizeOtherOff = 32L
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            TTC_11_14_Groups_subschedule_ID.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_11_14_Groups_subschedule_ID.sizeRange(ls, offset, from, to) == TTC_11_14_Groups_subschedule_ID.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[ULong], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 4095))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 32L
            val elemSizeOtherOff = 32L
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            TTC_11_14_Groups_subschedule_ID.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_11_14_Groups_subschedule_ID.sizeRange(ls, offset, from, to) == TTC_11_14_Groups_subschedule_ID.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[ULong], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 4095))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 32L
            val elemSizeOtherOff = 32L
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            TTC_11_14_Groups_subschedule_ID.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_11_14_Groups_subschedule_ID.sizeRange(ls, offset, from, to) == TTC_11_14_Groups_subschedule_ID.sizeRange(ls, otherOffset, from, to)
    }
}

case class TTC_11_14_Groups (
    subschedule_ID: TTC_11_14_Groups_subschedule_ID
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854644735L))
        val size_0 = 32L
        val size_1 = this.subschedule_ID.size(offset + size_0)
        size_0 + size_1
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 131072L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854644735L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854644735L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.subschedule_ID.size(offset + size_0_offset)
        val size_1_otherOffset = this.subschedule_ID.size(otherOffset + size_0_otherOffset)
        this.subschedule_ID.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854644735L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854644735L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.subschedule_ID.size(offset + size_0_offset)
        val size_1_otherOffset = this.subschedule_ID.size(otherOffset + size_0_otherOffset)
        this.subschedule_ID.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854644735L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854644735L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.subschedule_ID.size(offset + size_0_offset)
        val size_1_otherOffset = this.subschedule_ID.size(otherOffset + size_0_otherOffset)
        this.subschedule_ID.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854644735L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854644735L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.subschedule_ID.size(offset + size_0_offset)
        val size_1_otherOffset = this.subschedule_ID.size(otherOffset + size_0_otherOffset)
        this.subschedule_ID.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_11_14_GROUPS_SUBSCHEDULE_ID: Int = 917 /*(SIZE(0 .. maxTC-11-14-Group-ID-Count)) */
@inline @cCode.inline val ERR_TC_11_14_GROUPS_SUBSCHEDULE_ID_ELM_2: Int = 912 /* */

@inline @cCode.inline val ERR_TC_11_14_GROUPS: Int = 922 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_11_14_GROUPS: Int = 925 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_11_14_GROUPS_N2_UNINITIALIZED: Int = 926 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_11_14_GROUPS_N2: Int = 905 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_11_14_GROUPS_SUBSCHEDULE_ID: Int = 920 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_11_14_GROUPS_SUBSCHEDULE_ID_ELM_2: Int = 915 /*  */
@inline @cCode.inline val TTC_11_14_Groups_REQUIRED_BYTES_FOR_ACN_ENCODING = 16384
@inline @cCode.inline val TTC_11_14_Groups_REQUIRED_BITS_FOR_ACN_ENCODING = 131072

@inline @cCode.inline val ERR_ACN_DECODE_TC_11_14_GROUPS: Int = 927 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_11_14_GROUPS_N2: Int = 906 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_11_14_GROUPS_SUBSCHEDULE_ID: Int = 921 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_11_14_GROUPS_SUBSCHEDULE_ID_ELM_2: Int = 916 /*  */
/*-- TTC_11_14_SubSchedules --------------------------------------------*/


case class TTC_11_14_SubSchedules_subschedule_ID (nCount: Int, arr: Vector[TSubSchedule_ID])
{
    require(this.arr.size <= 4095 && 0 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854644767L))
        TTC_11_14_SubSchedules_subschedule_ID.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 131040L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854644767L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854644767L))
        TTC_11_14_SubSchedules_subschedule_ID.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854644767L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854644767L))
        require((offset % 8L) == (otherOffset % 8L))
        TTC_11_14_SubSchedules_subschedule_ID.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854644767L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854644767L))
        require((offset % 16L) == (otherOffset % 16L))
        TTC_11_14_SubSchedules_subschedule_ID.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854644767L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854644767L))
        require((offset % 32L) == (otherOffset % 32L))
        TTC_11_14_SubSchedules_subschedule_ID.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TTC_11_14_SubSchedules_subschedule_ID {
    def sizeRange(ls: Vector[ULong], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 4095))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = 32L
            assert(elemSize == 32L)
            elemSize + TTC_11_14_SubSchedules_subschedule_ID.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 32L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[ULong], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 4095))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 32L
            val elemSizeOtherOff = 32L
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            TTC_11_14_SubSchedules_subschedule_ID.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_11_14_SubSchedules_subschedule_ID.sizeRange(ls, offset, from, to) == TTC_11_14_SubSchedules_subschedule_ID.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[ULong], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 4095))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 32L
            val elemSizeOtherOff = 32L
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            TTC_11_14_SubSchedules_subschedule_ID.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_11_14_SubSchedules_subschedule_ID.sizeRange(ls, offset, from, to) == TTC_11_14_SubSchedules_subschedule_ID.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[ULong], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 4095))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 32L
            val elemSizeOtherOff = 32L
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            TTC_11_14_SubSchedules_subschedule_ID.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_11_14_SubSchedules_subschedule_ID.sizeRange(ls, offset, from, to) == TTC_11_14_SubSchedules_subschedule_ID.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[ULong], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 4095))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 32L
            val elemSizeOtherOff = 32L
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            TTC_11_14_SubSchedules_subschedule_ID.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_11_14_SubSchedules_subschedule_ID.sizeRange(ls, offset, from, to) == TTC_11_14_SubSchedules_subschedule_ID.sizeRange(ls, otherOffset, from, to)
    }
}

case class TTC_11_14_SubSchedules (
    subschedule_ID: TTC_11_14_SubSchedules_subschedule_ID
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854644735L))
        val size_0 = 32L
        val size_1 = this.subschedule_ID.size(offset + size_0)
        size_0 + size_1
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 131072L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854644735L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854644735L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.subschedule_ID.size(offset + size_0_offset)
        val size_1_otherOffset = this.subschedule_ID.size(otherOffset + size_0_otherOffset)
        this.subschedule_ID.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854644735L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854644735L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.subschedule_ID.size(offset + size_0_offset)
        val size_1_otherOffset = this.subschedule_ID.size(otherOffset + size_0_otherOffset)
        this.subschedule_ID.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854644735L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854644735L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.subschedule_ID.size(offset + size_0_offset)
        val size_1_otherOffset = this.subschedule_ID.size(otherOffset + size_0_otherOffset)
        this.subschedule_ID.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854644735L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854644735L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.subschedule_ID.size(offset + size_0_offset)
        val size_1_otherOffset = this.subschedule_ID.size(otherOffset + size_0_otherOffset)
        this.subschedule_ID.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_11_14_SUBSCHEDULES_SUBSCHEDULE_ID: Int = 894 /*(SIZE(0 .. maxTC-11-14-SubSchedule-ID-Count)) */
@inline @cCode.inline val ERR_TC_11_14_SUBSCHEDULES_SUBSCHEDULE_ID_ELM_2: Int = 889 /* */

@inline @cCode.inline val ERR_TC_11_14_SUBSCHEDULES: Int = 899 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_11_14_SUBSCHEDULES: Int = 902 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_11_14_SUBSCHEDULES_N1_UNINITIALIZED: Int = 903 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_11_14_SUBSCHEDULES_N1: Int = 882 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_11_14_SUBSCHEDULES_SUBSCHEDULE_ID: Int = 897 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_11_14_SUBSCHEDULES_SUBSCHEDULE_ID_ELM_2: Int = 892 /*  */
@inline @cCode.inline val TTC_11_14_SubSchedules_REQUIRED_BYTES_FOR_ACN_ENCODING = 16384
@inline @cCode.inline val TTC_11_14_SubSchedules_REQUIRED_BITS_FOR_ACN_ENCODING = 131072

@inline @cCode.inline val ERR_ACN_DECODE_TC_11_14_SUBSCHEDULES: Int = 904 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_11_14_SUBSCHEDULES_N1: Int = 883 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_11_14_SUBSCHEDULES_SUBSCHEDULE_ID: Int = 898 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_11_14_SUBSCHEDULES_SUBSCHEDULE_ID_ELM_2: Int = 893 /*  */
/*-- TTC_11_14_SummaryReportTheTimeBasedScheduledActivitiesIdentifiedByAFilter --------------------------------------------*/

case class TTC_11_14_SummaryReportTheTimeBasedScheduledActivitiesIdentifiedByAFilter (
    timeWindow: TTimeWindow, 
    subschedules: OptionMut[TTC_11_14_SubSchedules], 
    groups: OptionMut[TTC_11_14_Groups]
) {
    require(this.subschedules.isDefined && this.groups.isDefined)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854513533L))
        val size_0 = this.timeWindow.size(offset)
        val size_1 = this.subschedules match {
            case SomeMut(v) =>
                v.size(offset + size_0)
            case NoneMut() =>
                0L
        }
        val size_2 = this.groups match {
            case SomeMut(v) =>
                v.size(offset + size_0 + size_1)
            case NoneMut() =>
                0L
        }
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 262274L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854513533L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854513533L))
        val size_0_offset = this.timeWindow.size(offset)
        val size_0_otherOffset = this.timeWindow.size(otherOffset)
        this.timeWindow.sizeLemmaAnyOffset(offset, otherOffset)
        val size_1_offset = this.subschedules match {
            case SomeMut(v) =>
                v.size(offset + size_0_offset)
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.subschedules match {
            case SomeMut(v) =>
                v.size(otherOffset + size_0_otherOffset)
            case NoneMut() =>
                0L
        }
        this.subschedules match {
            case SomeMut(v) =>
                v.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
            case NoneMut() =>
                ()
        }
        val size_2_offset = this.groups match {
            case SomeMut(v) =>
                v.size(offset + size_0_offset + size_1_offset)
            case NoneMut() =>
                0L
        }
        val size_2_otherOffset = this.groups match {
            case SomeMut(v) =>
                v.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
            case NoneMut() =>
                0L
        }
        this.groups match {
            case SomeMut(v) =>
                v.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
            case NoneMut() =>
                ()
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854513533L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854513533L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = this.timeWindow.size(offset)
        val size_0_otherOffset = this.timeWindow.size(otherOffset)
        this.timeWindow.sizeLemmaNextByte(offset, otherOffset)
        val size_1_offset = this.subschedules match {
            case SomeMut(v) =>
                v.size(offset + size_0_offset)
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.subschedules match {
            case SomeMut(v) =>
                v.size(otherOffset + size_0_otherOffset)
            case NoneMut() =>
                0L
        }
        this.subschedules match {
            case SomeMut(v) =>
                v.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
            case NoneMut() =>
                ()
        }
        val size_2_offset = this.groups match {
            case SomeMut(v) =>
                v.size(offset + size_0_offset + size_1_offset)
            case NoneMut() =>
                0L
        }
        val size_2_otherOffset = this.groups match {
            case SomeMut(v) =>
                v.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
            case NoneMut() =>
                0L
        }
        this.groups match {
            case SomeMut(v) =>
                v.sizeLemmaNextByte(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
            case NoneMut() =>
                ()
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854513533L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854513533L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = this.timeWindow.size(offset)
        val size_0_otherOffset = this.timeWindow.size(otherOffset)
        this.timeWindow.sizeLemmaNextWord(offset, otherOffset)
        val size_1_offset = this.subschedules match {
            case SomeMut(v) =>
                v.size(offset + size_0_offset)
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.subschedules match {
            case SomeMut(v) =>
                v.size(otherOffset + size_0_otherOffset)
            case NoneMut() =>
                0L
        }
        this.subschedules match {
            case SomeMut(v) =>
                v.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
            case NoneMut() =>
                ()
        }
        val size_2_offset = this.groups match {
            case SomeMut(v) =>
                v.size(offset + size_0_offset + size_1_offset)
            case NoneMut() =>
                0L
        }
        val size_2_otherOffset = this.groups match {
            case SomeMut(v) =>
                v.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
            case NoneMut() =>
                0L
        }
        this.groups match {
            case SomeMut(v) =>
                v.sizeLemmaNextWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
            case NoneMut() =>
                ()
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854513533L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854513533L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = this.timeWindow.size(offset)
        val size_0_otherOffset = this.timeWindow.size(otherOffset)
        this.timeWindow.sizeLemmaNextDWord(offset, otherOffset)
        val size_1_offset = this.subschedules match {
            case SomeMut(v) =>
                v.size(offset + size_0_offset)
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.subschedules match {
            case SomeMut(v) =>
                v.size(otherOffset + size_0_otherOffset)
            case NoneMut() =>
                0L
        }
        this.subschedules match {
            case SomeMut(v) =>
                v.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
            case NoneMut() =>
                ()
        }
        val size_2_offset = this.groups match {
            case SomeMut(v) =>
                v.size(offset + size_0_offset + size_1_offset)
            case NoneMut() =>
                0L
        }
        val size_2_otherOffset = this.groups match {
            case SomeMut(v) =>
                v.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
            case NoneMut() =>
                0L
        }
        this.groups match {
            case SomeMut(v) =>
                v.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
            case NoneMut() =>
                ()
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_11_14_SUMMARYREPORTTHETIMEBASEDSCHEDULEDACTIVITIESIDENTIFIEDBYAFILTER: Int = 877 /*(WITH COMPONENTS
{
    subschedules PRESENT,
    groups PRESENT
}) */
@inline @cCode.inline val ERR_TC_11_14_SUMMARYREPORTTHETIMEBASEDSCHEDULEDACTIVITIESIDENTIFIEDBYAFILTER_TIMEWINDOW_2: Int = 818 /* */
@inline @cCode.inline val ERR_TC_11_14_SUMMARYREPORTTHETIMEBASEDSCHEDULEDACTIVITIESIDENTIFIEDBYAFILTER_SUBSCHEDULES_2: Int = 845 /* */
@inline @cCode.inline val ERR_TC_11_14_SUMMARYREPORTTHETIMEBASEDSCHEDULEDACTIVITIESIDENTIFIEDBYAFILTER_GROUPS_2: Int = 872 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_11_14_SUMMARYREPORTTHETIMEBASEDSCHEDULEDACTIVITIESIDENTIFIEDBYAFILTER: Int = 880 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_11_14_SUMMARYREPORTTHETIMEBASEDSCHEDULEDACTIVITIESIDENTIFIEDBYAFILTER_TIMEWINDOW_2: Int = 821 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_11_14_SUMMARYREPORTTHETIMEBASEDSCHEDULEDACTIVITIESIDENTIFIEDBYAFILTER_SUBSCHEDULES_2: Int = 848 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_11_14_SUMMARYREPORTTHETIMEBASEDSCHEDULEDACTIVITIESIDENTIFIEDBYAFILTER_GROUPS_2: Int = 875 /*  */
@inline @cCode.inline val TTC_11_14_SummaryReportTheTimeBasedScheduledActivitiesIdentifiedByAFilter_REQUIRED_BYTES_FOR_ACN_ENCODING = 32785
@inline @cCode.inline val TTC_11_14_SummaryReportTheTimeBasedScheduledActivitiesIdentifiedByAFilter_REQUIRED_BITS_FOR_ACN_ENCODING = 262274

@inline @cCode.inline val ERR_ACN_DECODE_TC_11_14_SUMMARYREPORTTHETIMEBASEDSCHEDULEDACTIVITIESIDENTIFIEDBYAFILTER: Int = 881 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_11_14_SUMMARYREPORTTHETIMEBASEDSCHEDULEDACTIVITIESIDENTIFIEDBYAFILTER_TIMEWINDOW_2: Int = 822 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_11_14_SUMMARYREPORTTHETIMEBASEDSCHEDULEDACTIVITIESIDENTIFIEDBYAFILTER_SUBSCHEDULES_2: Int = 849 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_11_14_SUMMARYREPORTTHETIMEBASEDSCHEDULEDACTIVITIESIDENTIFIEDBYAFILTER_GROUPS_2: Int = 876 /*  */

// @inline @cCode.inline val maxTC_11_14_Group_ID_Count: Int = 4095 // defined in body
// @inline @cCode.inline val maxTC_11_14_SubSchedule_ID_Count: Int = 4095 // defined in body

