/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

val maxTM_11_19_StatusCount: Int = 4095 // variables:188

def TTM_11_19_Status_IsConstraintValid(pVal: TTM_11_19_Status): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TSubSchedule_ID_IsConstraintValid(pVal.subschedule_ID)
    if ret.isRight then
        ret = TSubScheduleStatus_IsConstraintValid(pVal.subscheduleStatus)
    ret
}

def TTM_11_19_Status_Initialize(): TTM_11_19_Status = TTM_11_19_Status(subschedule_ID = ULong.fromRaw(0L), subscheduleStatus = TSubScheduleStatus.TSubScheduleStatus_disabled)

@opaque @inlineOnce 
def TTM_11_19_Status_ACN_Encode(pVal: TTM_11_19_Status, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(33L))
    TTM_11_19_Status_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode subschedule_ID */
    TSubSchedule_ID_ACN_Encode(pVal.subschedule_ID, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 33L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode subscheduleStatus */
    TSubScheduleStatus_ACN_Encode(pVal.subscheduleStatus, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 33L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 1L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 33L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTM_11_19_Status_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTM_11_19_Status] =
{
    require(codec.base.bitStream.validate_offset_bits(33L))

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode subschedule_ID */
    val pVal_subschedule_ID = TSubSchedule_ID_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 33L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode subscheduleStatus */
    val pVal_subscheduleStatus = TSubScheduleStatus_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 33L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 1L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 33L)
    }
    val pVal = TTM_11_19_Status(pVal_subschedule_ID, pVal_subscheduleStatus)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }

    TTM_11_19_Status_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTM_11_19_Status](l)
        case Right(_) => RightMut[ErrorCode, TTM_11_19_Status](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTM_11_19_Status]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_11_19_Status_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTM_11_19_Status_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTM_11_19_Status]) =
{
    require(codec.base.bitStream.validate_offset_bits(33L))
    val cpy = snapshot(codec)
    val res = TTM_11_19_Status_ACN_Decode(cpy)
    (cpy, res)
}

def TTM_11_19_TimeBasedSubScheduleStatusReport_subscheduleStatuses_IsConstraintValid(pVal: TTM_11_19_TimeBasedSubScheduleStatusReport_subscheduleStatuses): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = (pVal.nCount <= 4095) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TTM_11_19_Status_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TTM_11_19_TimeBasedSubScheduleStatusReport_IsConstraintValid(pVal: TTM_11_19_TimeBasedSubScheduleStatusReport): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TTM_11_19_TimeBasedSubScheduleStatusReport_subscheduleStatuses_IsConstraintValid(pVal.subscheduleStatuses)
    ret
}

def TTM_11_19_TimeBasedSubScheduleStatusReport_subscheduleStatuses_Initialize(): TTM_11_19_TimeBasedSubScheduleStatusReport_subscheduleStatuses = TTM_11_19_TimeBasedSubScheduleStatusReport_subscheduleStatuses(0, Vector.fill(4095)(TTM_11_19_Status_Initialize()))
def TTM_11_19_TimeBasedSubScheduleStatusReport_Initialize(): TTM_11_19_TimeBasedSubScheduleStatusReport = TTM_11_19_TimeBasedSubScheduleStatusReport(subscheduleStatuses = TTM_11_19_TimeBasedSubScheduleStatusReport_subscheduleStatuses_Initialize())

@opaque @inlineOnce 
def TTM_11_19_TimeBasedSubScheduleStatusReport_ACN_Encode(pVal: TTM_11_19_TimeBasedSubScheduleStatusReport, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(135167L))
    var i1: Int = 0
    TTM_11_19_TimeBasedSubScheduleStatusReport_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val TM_11_19_TimeBasedSubScheduleStatusReport_n = ULong.fromRaw(pVal.subscheduleStatuses.nCount)
    if TM_11_19_TimeBasedSubScheduleStatusReport_n < ULong.fromRaw(0) || TM_11_19_TimeBasedSubScheduleStatusReport_n > ULong.fromRaw(4095) then
        return Left(860)
    /* Encode TM_11_19_TimeBasedSubScheduleStatusReport_n */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(TM_11_19_TimeBasedSubScheduleStatusReport_n)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(TM_11_19_TimeBasedSubScheduleStatusReport_n)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 135167L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode subscheduleStatuses */
    TM_11_19_TimeBasedSubScheduleStatusReport_subscheduleStatuses_ACN_Encode(codec, pVal, TM_11_19_TimeBasedSubScheduleStatusReport_n, pVal.subscheduleStatuses) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 135167L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.subscheduleStatuses.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 135167L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def PUS_11_19_TTM_11_19_TimeBasedSubScheduleStatusReport_subscheduleStatuses_pVal_subscheduleStatuses_subscheduleStatuses_Encode_loop(codec: ACN, subscheduleStatuses: TTM_11_19_TimeBasedSubScheduleStatusReport_subscheduleStatuses, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= subscheduleStatuses.nCount))
    require((0 <= subscheduleStatuses.nCount) && (subscheduleStatuses.nCount <= subscheduleStatuses.arr.size) && (subscheduleStatuses.arr.size <= 4095))
    require(codec.base.bitStream.validate_offset_bits((33L * (subscheduleStatuses.nCount - i1))))
    decreases(subscheduleStatuses.nCount - i1)
    if (i1 == subscheduleStatuses.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 33L * (subscheduleStatuses.nCount - i1), 33L)
        }
        TTM_11_19_Status_ACN_Encode(subscheduleStatuses.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(33L * (i1 + 1) == 33L * i1 + 33L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 33L * (subscheduleStatuses.nCount - i1), 33L)
            check(codec.base.bitStream.validate_offset_bits(33L * (subscheduleStatuses.nCount - (i1 + 1))))
        }
        val res = PUS_11_19_TTM_11_19_TimeBasedSubScheduleStatusReport_subscheduleStatuses_pVal_subscheduleStatuses_subscheduleStatuses_Encode_loop(codec, subscheduleStatuses, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TTM_11_19_TimeBasedSubScheduleStatusReport_subscheduleStatuses.sizeRange(subscheduleStatuses.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, subscheduleStatuses.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + subscheduleStatuses.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TTM_11_19_TimeBasedSubScheduleStatusReport_subscheduleStatuses.sizeRange(subscheduleStatuses.arr, codecSnap1.base.bitStream.bitIndex, i1, subscheduleStatuses.nCount) == subscheduleStatuses.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TTM_11_19_TimeBasedSubScheduleStatusReport_subscheduleStatuses.sizeRange(subscheduleStatuses.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, subscheduleStatuses.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TTM_11_19_TimeBasedSubScheduleStatusReport_subscheduleStatuses.sizeRange(subscheduleStatuses.arr, codecSnap1.base.bitStream.bitIndex, i1, subscheduleStatuses.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_11_19_TimeBasedSubScheduleStatusReport_subscheduleStatuses.sizeRange(subscheduleStatuses.arr, old(codec).base.bitStream.bitIndex, i1, subscheduleStatuses.nCount)
    }
}



@opaque @inlineOnce
def TM_11_19_TimeBasedSubScheduleStatusReport_subscheduleStatuses_ACN_Encode(codec: ACN, pVal: TTM_11_19_TimeBasedSubScheduleStatusReport, TM_11_19_TimeBasedSubScheduleStatusReport_n: ULong, subscheduleStatuses: TTM_11_19_TimeBasedSubScheduleStatusReport_subscheduleStatuses): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(135135L))
    @ghost val oldCdc = snapshot(codec)
    TTM_11_19_TimeBasedSubScheduleStatusReport_subscheduleStatuses_IsConstraintValid(subscheduleStatuses) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    PUS_11_19_TTM_11_19_TimeBasedSubScheduleStatusReport_subscheduleStatuses_pVal_subscheduleStatuses_subscheduleStatuses_Encode_loop(codec, subscheduleStatuses, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                subscheduleStatuses.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + subscheduleStatuses.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTM_11_19_TimeBasedSubScheduleStatusReport_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTM_11_19_TimeBasedSubScheduleStatusReport] =
{
    require(codec.base.bitStream.validate_offset_bits(135167L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode TM_11_19_TimeBasedSubScheduleStatusReport_n */
    val TM_11_19_TimeBasedSubScheduleStatusReport_n = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 135167L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode subscheduleStatuses */
    val pVal_subscheduleStatuses = TM_11_19_TimeBasedSubScheduleStatusReport_subscheduleStatuses_ACN_Decode(codec, TM_11_19_TimeBasedSubScheduleStatusReport_n) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 135167L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_subscheduleStatuses.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 135167L)
    }
    val pVal = TTM_11_19_TimeBasedSubScheduleStatusReport(pVal_subscheduleStatuses)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }

    TTM_11_19_TimeBasedSubScheduleStatusReport_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTM_11_19_TimeBasedSubScheduleStatusReport](l)
        case Right(_) => RightMut[ErrorCode, TTM_11_19_TimeBasedSubScheduleStatusReport](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTM_11_19_TimeBasedSubScheduleStatusReport]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_11_19_TimeBasedSubScheduleStatusReport_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTM_11_19_TimeBasedSubScheduleStatusReport_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTM_11_19_TimeBasedSubScheduleStatusReport]) =
{
    require(codec.base.bitStream.validate_offset_bits(135167L))
    val cpy = snapshot(codec)
    val res = TTM_11_19_TimeBasedSubScheduleStatusReport_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def PUS_11_19_TTM_11_19_TimeBasedSubScheduleStatusReport_subscheduleStatuses_pVal_subscheduleStatuses_subscheduleStatuses_Decode_loop(codec: ACN, nCount: Int, subscheduleStatuses: Vector[TTM_11_19_Status], i1: Int): EitherMut[Int, Vector[TTM_11_19_Status]] = {
    require((0 <= nCount) && (nCount <= 4095))
    require((0 <= i1) && (i1 <= nCount))
    require(subscheduleStatuses.size == i1)
    require(codec.base.bitStream.validate_offset_bits((33L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(subscheduleStatuses)
            vecRangesEqSlicedLemma(subscheduleStatuses, subscheduleStatuses, 0, subscheduleStatuses.size, 0, i1)
        }
        RightMut[Int, Vector[TTM_11_19_Status]](subscheduleStatuses)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 33L * (nCount - i1), 33L)
        }
        val subscheduleStatuses_arr_i1_ = TTM_11_19_Status_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(33L * (i1 + 1) == 33L * i1 + 33L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 33L * (nCount - i1), 33L)
            check(codec.base.bitStream.validate_offset_bits(33L * (nCount - (i1 + 1))))
        }
        val res = PUS_11_19_TTM_11_19_TimeBasedSubScheduleStatusReport_subscheduleStatuses_pVal_subscheduleStatuses_subscheduleStatuses_Decode_loop(codec, nCount, subscheduleStatuses.append(subscheduleStatuses_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(subscheduleStatuses, newVec, subscheduleStatuses_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(subscheduleStatuses.append(subscheduleStatuses_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(subscheduleStatuses.list, subscheduleStatuses_arr_i1_, i1)
                    Vector.listApplyEqVecApply(subscheduleStatuses.append(subscheduleStatuses_arr_i1_), i1)
                    check(subscheduleStatuses_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TTM_11_19_Status]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(subscheduleStatuses, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_11_19_TimeBasedSubScheduleStatusReport_subscheduleStatuses.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def TM_11_19_TimeBasedSubScheduleStatusReport_subscheduleStatuses_ACN_Decode(codec: ACN, TM_11_19_TimeBasedSubScheduleStatusReport_n: ULong): EitherMut[Int, TTM_11_19_TimeBasedSubScheduleStatusReport_subscheduleStatuses] = {
    require(codec.base.bitStream.validate_offset_bits(135135L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val subscheduleStatuses =
        if ((TM_11_19_TimeBasedSubScheduleStatusReport_n <= ULong.fromRaw(4095))) then
            val subscheduleStatuses_nCount = TM_11_19_TimeBasedSubScheduleStatusReport_n.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val subscheduleStatuses = PUS_11_19_TTM_11_19_TimeBasedSubScheduleStatusReport_subscheduleStatuses_pVal_subscheduleStatuses_subscheduleStatuses_Decode_loop(codec, subscheduleStatuses_nCount, Vector.empty[TTM_11_19_Status], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val subscheduleStatuses = TTM_11_19_TimeBasedSubScheduleStatusReport_subscheduleStatuses(subscheduleStatuses_nCount, bdg)
                    ghostExpr {
                        subscheduleStatuses.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    subscheduleStatuses
            }
            subscheduleStatuses
        else return LeftMut(ERR_ACN_DECODE_TM_11_19_TIMEBASEDSUBSCHEDULESTATUSREPORT_SUBSCHEDULESTATUSES)
    TTM_11_19_TimeBasedSubScheduleStatusReport_subscheduleStatuses_IsConstraintValid(subscheduleStatuses) match {
        case Left(l) =>
            LeftMut[Int, TTM_11_19_TimeBasedSubScheduleStatusReport_subscheduleStatuses](l)
        case Right(_) =>
            RightMut[Int, TTM_11_19_TimeBasedSubScheduleStatusReport_subscheduleStatuses](subscheduleStatuses)
    }
}.ensuring { (res: EitherMut[Int, TTM_11_19_TimeBasedSubScheduleStatusReport_subscheduleStatuses]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_11_19_TimeBasedSubScheduleStatusReport_subscheduleStatuses_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TM_11_19_TimeBasedSubScheduleStatusReport_subscheduleStatuses_ACN_Decode_pure(codec: ACN, TM_11_19_TimeBasedSubScheduleStatusReport_n: ULong): (ACN, EitherMut[Int, TTM_11_19_TimeBasedSubScheduleStatusReport_subscheduleStatuses]) = {
    require(codec.base.bitStream.validate_offset_bits(135135L))
    val cpy = snapshot(codec)
    val res = TM_11_19_TimeBasedSubScheduleStatusReport_subscheduleStatuses_ACN_Decode(cpy, TM_11_19_TimeBasedSubScheduleStatusReport_n)
    (cpy, res)
}