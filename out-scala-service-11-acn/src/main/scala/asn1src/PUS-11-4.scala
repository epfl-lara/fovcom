/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

val maxTC_11_4_ActivityCount: Int = 4095 // variables:188

def TTC_11_4_Activity_IsConstraintValid(pVal: TTC_11_4_Activity): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    pVal.group_ID match
        case SomeMut(group_ID) =>
            ret = TGroup_ID_IsConstraintValid(group_ID)
        case NoneMut() =>
    if ret.isRight then
        ret = TCDS_AbsoluteTime_PFC_2_IsConstraintValid(pVal.releaseTime)
        if ret.isRight then
            ret = TDummyType_IsConstraintValid(pVal.request)
    if ret.isRight then
        ret = (pVal.group_ID.isDefined == true) match
            case true =>
                Right(0)
            case false =>
                Left(45)
    ret
}

def TTC_11_4_Activity_Initialize(): TTC_11_4_Activity = TTC_11_4_Activity(group_ID = SomeMut(ULong.fromRaw(0L)), releaseTime = TCDS_AbsoluteTime_PFC_2_Initialize(), request = ULong.fromRaw(15L))

@opaque @inlineOnce 
def TTC_11_4_Activity_ACN_Encode(pVal: TTC_11_4_Activity, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(100L))
    TTC_11_4_Activity_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    TC_11_4_Activity_group_ID_Optional_ACN_Encode(codec, pVal, pVal.group_ID) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 100L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = pVal.group_ID match {
        case SomeMut(v) =>
            32L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode releaseTime */
    TCDS_AbsoluteTime_PFC_2_ACN_Encode(pVal.releaseTime, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 68L, 64L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 96L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.releaseTime.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode request */
    TDummyType_ACN_Encode(pVal.request, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 100L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = 4L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 100L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TC_11_4_Activity_group_ID_Optional_ACN_Encode(codec: ACN, pVal: TTC_11_4_Activity, group_ID: OptionMut[ULong]): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(32L))
    @ghost val oldCdc = snapshot(codec)
    /* Encode group_ID */
    /* marked as ALWAYS PRESENT, so it must be Some */
    group_ID match
        case SomeMut(group_ID) =>
            TGroup_ID_ACN_Encode(group_ID, codec, false) match // uper:6
                case Right(_) =>
                case Left(err) => return Left(err)
        case NoneMut() => return Left(628)
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 32L
    }
}



@opaque @inlineOnce 
def TTC_11_4_Activity_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTC_11_4_Activity] =
{
    require(codec.base.bitStream.validate_offset_bits(100L))

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val pVal_group_ID = TC_11_4_Activity_group_ID_Optional_ACN_Decode(codec) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 100L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = pVal_group_ID match {
        case SomeMut(v) =>
            32L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode releaseTime */
    val pVal_releaseTime = TCDS_AbsoluteTime_PFC_2_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 68L, 64L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 96L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_releaseTime.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode request */
    val pVal_request = TDummyType_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 100L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = 4L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 100L)
    }
    val pVal = TTC_11_4_Activity(pVal_group_ID, pVal_releaseTime, pVal_request)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }

    TTC_11_4_Activity_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTC_11_4_Activity](l)
        case Right(_) => RightMut[ErrorCode, TTC_11_4_Activity](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTC_11_4_Activity]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_11_4_Activity_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTC_11_4_Activity_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTC_11_4_Activity]) =
{
    require(codec.base.bitStream.validate_offset_bits(100L))
    val cpy = snapshot(codec)
    val res = TTC_11_4_Activity_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def TC_11_4_Activity_group_ID_Optional_ACN_Decode(codec: ACN): EitherMut[Int, OptionMut[ULong]] = {
    require(codec.base.bitStream.validate_offset_bits(32L))
    @ghost val oldCdc = snapshot(codec)
    /* Decode group_ID */
    /* marked as ALWAYS PRESENT */
    val group_ID: OptionMut[TGroup_ID] =
        val pVal_group_ID = TGroup_ID_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        SomeMut(pVal_group_ID)
    RightMut[Int, OptionMut[ULong]](group_ID)
}.ensuring { (res: EitherMut[Int, OptionMut[ULong]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            resVal.isDefined && old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 32L
    }
}



@ghost @pure
def TC_11_4_Activity_group_ID_Optional_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[Int, OptionMut[ULong]]) = {
    require(codec.base.bitStream.validate_offset_bits(32L))
    val cpy = snapshot(codec)
    val res = TC_11_4_Activity_group_ID_Optional_ACN_Decode(cpy)
    (cpy, res)
}



def TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities_IsConstraintValid(pVal: TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = ((1 <= pVal.nCount) && (pVal.nCount <= 4095)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TTC_11_4_Activity_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_IsConstraintValid(pVal: TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    pVal.subschedule_ID match
        case SomeMut(subschedule_ID) =>
            ret = TSubSchedule_ID_IsConstraintValid(subschedule_ID)
        case NoneMut() =>
    if ret.isRight then
        ret = TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities_IsConstraintValid(pVal.activities)
    if ret.isRight then
        ret = (pVal.subschedule_ID.isDefined == true) match
            case true =>
                Right(0)
            case false =>
                Left(45)
    ret
}

def TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities_Initialize(): TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities = TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities(1, Vector.fill(4095)(TTC_11_4_Activity_Initialize()))
def TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_Initialize(): TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule = TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule(subschedule_ID = SomeMut(ULong.fromRaw(0L)), activities = TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities_Initialize())

@opaque @inlineOnce 
def TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_ACN_Encode(pVal: TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(409564L))
    var i1: Int = 0
    TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    TC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_subschedule_ID_Optional_ACN_Encode(codec, pVal, pVal.subschedule_ID) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 409564L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = pVal.subschedule_ID match {
        case SomeMut(v) =>
            32L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    val TC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_n = ULong.fromRaw(pVal.activities.nCount)
    if TC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_n < ULong.fromRaw(1) || TC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_n > ULong.fromRaw(4095) then
        return Left(860)
    /* Encode TC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_n */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(TC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_n)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(TC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_n)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 409532L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode activities */
    TC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities_ACN_Encode(codec, pVal, TC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_n, pVal.activities) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 409564L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = pVal.activities.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 409564L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_subschedule_ID_Optional_ACN_Encode(codec: ACN, pVal: TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule, subschedule_ID: OptionMut[ULong]): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(32L))
    @ghost val oldCdc = snapshot(codec)
    /* Encode subschedule_ID */
    /* marked as ALWAYS PRESENT, so it must be Some */
    subschedule_ID match
        case SomeMut(subschedule_ID) =>
            TSubSchedule_ID_ACN_Encode(subschedule_ID, codec, false) match // uper:6
                case Right(_) =>
                case Left(err) => return Left(err)
        case NoneMut() => return Left(628)
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 32L
    }
}



@opaque @inlineOnce
def PUS_11_4_TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities_pVal_activities_activities_Encode_loop(codec: ACN, activities: TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= activities.nCount))
    require((1 <= activities.nCount) && (activities.nCount <= activities.arr.size) && (activities.arr.size <= 4095))
    require(codec.base.bitStream.validate_offset_bits((100L * (activities.nCount - i1))))
    decreases(activities.nCount - i1)
    if (i1 == activities.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 100L * (activities.nCount - i1), 100L)
        }
        TTC_11_4_Activity_ACN_Encode(activities.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(100L * (i1 + 1) == 100L * i1 + 100L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 100L * (activities.nCount - i1), 100L)
            check(codec.base.bitStream.validate_offset_bits(100L * (activities.nCount - (i1 + 1))))
        }
        val res = PUS_11_4_TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities_pVal_activities_activities_Encode_loop(codec, activities, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities.sizeRange(activities.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, activities.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + activities.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities.sizeRange(activities.arr, codecSnap1.base.bitStream.bitIndex, i1, activities.nCount) == activities.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities.sizeRange(activities.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, activities.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities.sizeRange(activities.arr, codecSnap1.base.bitStream.bitIndex, i1, activities.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities.sizeRange(activities.arr, old(codec).base.bitStream.bitIndex, i1, activities.nCount)
    }
}



@opaque @inlineOnce
def TC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities_ACN_Encode(codec: ACN, pVal: TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule, TC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_n: ULong, activities: TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(409500L))
    @ghost val oldCdc = snapshot(codec)
    TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities_IsConstraintValid(activities) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    PUS_11_4_TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities_pVal_activities_activities_Encode_loop(codec, activities, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                activities.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + activities.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule] =
{
    require(codec.base.bitStream.validate_offset_bits(409564L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val pVal_subschedule_ID = TC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_subschedule_ID_Optional_ACN_Decode(codec) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 409564L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = pVal_subschedule_ID match {
        case SomeMut(v) =>
            32L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode TC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_n */
    val TC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_n = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 409532L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode activities */
    val pVal_activities = TC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities_ACN_Decode(codec, TC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_n) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 409564L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = pVal_activities.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 409564L)
    }
    val pVal = TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule(pVal_subschedule_ID, pVal_activities)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }

    TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule](l)
        case Right(_) => RightMut[ErrorCode, TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule]) =
{
    require(codec.base.bitStream.validate_offset_bits(409564L))
    val cpy = snapshot(codec)
    val res = TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def TC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_subschedule_ID_Optional_ACN_Decode(codec: ACN): EitherMut[Int, OptionMut[ULong]] = {
    require(codec.base.bitStream.validate_offset_bits(32L))
    @ghost val oldCdc = snapshot(codec)
    /* Decode subschedule_ID */
    /* marked as ALWAYS PRESENT */
    val subschedule_ID: OptionMut[TSubSchedule_ID] =
        val pVal_subschedule_ID = TSubSchedule_ID_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        SomeMut(pVal_subschedule_ID)
    RightMut[Int, OptionMut[ULong]](subschedule_ID)
}.ensuring { (res: EitherMut[Int, OptionMut[ULong]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            resVal.isDefined && old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 32L
    }
}



@ghost @pure
def TC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_subschedule_ID_Optional_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[Int, OptionMut[ULong]]) = {
    require(codec.base.bitStream.validate_offset_bits(32L))
    val cpy = snapshot(codec)
    val res = TC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_subschedule_ID_Optional_ACN_Decode(cpy)
    (cpy, res)
}



@opaque @inlineOnce
def PUS_11_4_TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities_pVal_activities_activities_Decode_loop(codec: ACN, nCount: Int, activities: Vector[TTC_11_4_Activity], i1: Int): EitherMut[Int, Vector[TTC_11_4_Activity]] = {
    require((1 <= nCount) && (nCount <= 4095))
    require((0 <= i1) && (i1 <= nCount))
    require(activities.size == i1)
    require(codec.base.bitStream.validate_offset_bits((100L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(activities)
            vecRangesEqSlicedLemma(activities, activities, 0, activities.size, 0, i1)
        }
        RightMut[Int, Vector[TTC_11_4_Activity]](activities)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 100L * (nCount - i1), 100L)
        }
        val activities_arr_i1_ = TTC_11_4_Activity_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(100L * (i1 + 1) == 100L * i1 + 100L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 100L * (nCount - i1), 100L)
            check(codec.base.bitStream.validate_offset_bits(100L * (nCount - (i1 + 1))))
        }
        val res = PUS_11_4_TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities_pVal_activities_activities_Decode_loop(codec, nCount, activities.append(activities_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(activities, newVec, activities_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(activities.append(activities_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(activities.list, activities_arr_i1_, i1)
                    Vector.listApplyEqVecApply(activities.append(activities_arr_i1_), i1)
                    check(activities_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TTC_11_4_Activity]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(activities, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def TC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities_ACN_Decode(codec: ACN, TC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_n: ULong): EitherMut[Int, TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities] = {
    require(codec.base.bitStream.validate_offset_bits(409500L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val activities =
        if ((ULong.fromRaw(1) <= TC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_n) && (TC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_n <= ULong.fromRaw(4095))) then
            val activities_nCount = TC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_n.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val activities = PUS_11_4_TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities_pVal_activities_activities_Decode_loop(codec, activities_nCount, Vector.empty[TTC_11_4_Activity], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val activities = TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities(activities_nCount, bdg)
                    ghostExpr {
                        activities.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    activities
            }
            activities
        else return LeftMut(ERR_ACN_DECODE_TC_11_4_INSERTACTIVITIESINTOTHETIMEBASEDSCHEDULE_ACTIVITIES)
    TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities_IsConstraintValid(activities) match {
        case Left(l) =>
            LeftMut[Int, TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities](l)
        case Right(_) =>
            RightMut[Int, TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities](activities)
    }
}.ensuring { (res: EitherMut[Int, TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities_ACN_Decode_pure(codec: ACN, TC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_n: ULong): (ACN, EitherMut[Int, TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities]) = {
    require(codec.base.bitStream.validate_offset_bits(409500L))
    val cpy = snapshot(codec)
    val res = TC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities_ACN_Decode(cpy, TC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_n)
    (cpy, res)
}