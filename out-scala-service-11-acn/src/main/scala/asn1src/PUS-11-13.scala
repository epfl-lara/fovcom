/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

val maxTM_11_13_ReportCount: Int = 4095 // variables:188

def TTM_11_13_Report_IsConstraintValid(pVal: TTM_11_13_Report): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    pVal.subschedule_ID match
        case SomeMut(subschedule_ID) =>
            ret = TSubSchedule_ID_IsConstraintValid(subschedule_ID)
        case NoneMut() =>
    if ret.isRight then
        pVal.group_ID match
            case SomeMut(group_ID) =>
                ret = TGroup_ID_IsConstraintValid(group_ID)
            case NoneMut() =>
        if ret.isRight then
            ret = TCDS_AbsoluteTime_PFC_2_IsConstraintValid(pVal.releaseTime)
            if ret.isRight then
                ret = TRequest_ID_IsConstraintValid(pVal.request_ID)
    if ret.isRight then
        ret = (pVal.subschedule_ID.isDefined == true) match
            case true =>
                Right(0)
            case false =>
                Left(45)
        if ret.isRight then
            ret = (pVal.group_ID.isDefined == true) match
                case true =>
                    Right(0)
                case false =>
                    Left(45)
    ret
}

def TTM_11_13_Report_Initialize(): TTM_11_13_Report = TTM_11_13_Report(subschedule_ID = SomeMut(ULong.fromRaw(0L)), group_ID = SomeMut(ULong.fromRaw(0L)), releaseTime = TCDS_AbsoluteTime_PFC_2_Initialize(), request_ID = TRequest_ID_Initialize())

@opaque @inlineOnce 
def TTM_11_13_Report_ACN_Encode(pVal: TTM_11_13_Report, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(187L))
    TTM_11_13_Report_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    TM_11_13_Report_subschedule_ID_Optional_ACN_Encode(codec, pVal, pVal.subschedule_ID) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 187L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = pVal.subschedule_ID match {
        case SomeMut(v) =>
            32L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    TM_11_13_Report_group_ID_Optional_ACN_Encode(codec, pVal, pVal.group_ID) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 155L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.group_ID match {
        case SomeMut(v) =>
            32L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode releaseTime */
    TCDS_AbsoluteTime_PFC_2_ACN_Encode(pVal.releaseTime, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_3.base.bitStream, codec.base.bitStream, 123L, 64L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 128L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = pVal.releaseTime.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    @ghost val codec_0_4 = snapshot(codec)
    /* Encode request_ID */
    TRequest_ID_ACN_Encode(pVal.request_ID, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 187L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_3 = pVal.request_ID.size(codec_0_4.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 187L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2 + size_3)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TM_11_13_Report_subschedule_ID_Optional_ACN_Encode(codec: ACN, pVal: TTM_11_13_Report, subschedule_ID: OptionMut[ULong]): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(32L))
    @ghost val oldCdc = snapshot(codec)
    /* Encode subschedule_ID */
    /* marked as ALWAYS PRESENT, so it must be Some */
    subschedule_ID match
        case SomeMut(subschedule_ID) =>
            TSubSchedule_ID_ACN_Encode(subschedule_ID, codec, false) match // uper:6
                case Right(_) =>
                case Left(err) => return Left(err)
        case NoneMut() => return Left(628)
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 32L
    }
}



@opaque @inlineOnce
def TM_11_13_Report_group_ID_Optional_ACN_Encode(codec: ACN, pVal: TTM_11_13_Report, group_ID: OptionMut[ULong]): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(32L))
    @ghost val oldCdc = snapshot(codec)
    /* Encode group_ID */
    /* marked as ALWAYS PRESENT, so it must be Some */
    group_ID match
        case SomeMut(group_ID) =>
            TGroup_ID_ACN_Encode(group_ID, codec, false) match // uper:6
                case Right(_) =>
                case Left(err) => return Left(err)
        case NoneMut() => return Left(628)
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 32L
    }
}



@opaque @inlineOnce 
def TTM_11_13_Report_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTM_11_13_Report] =
{
    require(codec.base.bitStream.validate_offset_bits(187L))

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val pVal_subschedule_ID = TM_11_13_Report_subschedule_ID_Optional_ACN_Decode(codec) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 187L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = pVal_subschedule_ID match {
        case SomeMut(v) =>
            32L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    val pVal_group_ID = TM_11_13_Report_group_ID_Optional_ACN_Decode(codec) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 155L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_group_ID match {
        case SomeMut(v) =>
            32L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode releaseTime */
    val pVal_releaseTime = TCDS_AbsoluteTime_PFC_2_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_3.base.bitStream, codec.base.bitStream, 123L, 64L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 128L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = pVal_releaseTime.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    @ghost val codec_0_4 = snapshot(codec)
    /* Decode request_ID */
    val pVal_request_ID = TRequest_ID_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 187L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_3 = pVal_request_ID.size(codec_0_4.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 187L)
    }
    val pVal = TTM_11_13_Report(pVal_subschedule_ID, pVal_group_ID, pVal_releaseTime, pVal_request_ID)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2 + size_3)
    }

    TTM_11_13_Report_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTM_11_13_Report](l)
        case Right(_) => RightMut[ErrorCode, TTM_11_13_Report](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTM_11_13_Report]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_11_13_Report_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTM_11_13_Report_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTM_11_13_Report]) =
{
    require(codec.base.bitStream.validate_offset_bits(187L))
    val cpy = snapshot(codec)
    val res = TTM_11_13_Report_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def TM_11_13_Report_subschedule_ID_Optional_ACN_Decode(codec: ACN): EitherMut[Int, OptionMut[ULong]] = {
    require(codec.base.bitStream.validate_offset_bits(32L))
    @ghost val oldCdc = snapshot(codec)
    /* Decode subschedule_ID */
    /* marked as ALWAYS PRESENT */
    val subschedule_ID: OptionMut[TSubSchedule_ID] =
        val pVal_subschedule_ID = TSubSchedule_ID_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        SomeMut(pVal_subschedule_ID)
    RightMut[Int, OptionMut[ULong]](subschedule_ID)
}.ensuring { (res: EitherMut[Int, OptionMut[ULong]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            resVal.isDefined && old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 32L
    }
}



@ghost @pure
def TM_11_13_Report_subschedule_ID_Optional_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[Int, OptionMut[ULong]]) = {
    require(codec.base.bitStream.validate_offset_bits(32L))
    val cpy = snapshot(codec)
    val res = TM_11_13_Report_subschedule_ID_Optional_ACN_Decode(cpy)
    (cpy, res)
}



@opaque @inlineOnce
def TM_11_13_Report_group_ID_Optional_ACN_Decode(codec: ACN): EitherMut[Int, OptionMut[ULong]] = {
    require(codec.base.bitStream.validate_offset_bits(32L))
    @ghost val oldCdc = snapshot(codec)
    /* Decode group_ID */
    /* marked as ALWAYS PRESENT */
    val group_ID: OptionMut[TGroup_ID] =
        val pVal_group_ID = TGroup_ID_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        SomeMut(pVal_group_ID)
    RightMut[Int, OptionMut[ULong]](group_ID)
}.ensuring { (res: EitherMut[Int, OptionMut[ULong]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            resVal.isDefined && old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 32L
    }
}



@ghost @pure
def TM_11_13_Report_group_ID_Optional_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[Int, OptionMut[ULong]]) = {
    require(codec.base.bitStream.validate_offset_bits(32L))
    val cpy = snapshot(codec)
    val res = TM_11_13_Report_group_ID_Optional_ACN_Decode(cpy)
    (cpy, res)
}



def TTM_11_13_TimeBasedScheduleSummaryReport_report_IsConstraintValid(pVal: TTM_11_13_TimeBasedScheduleSummaryReport_report): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = (pVal.nCount <= 4095) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TTM_11_13_Report_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TTM_11_13_TimeBasedScheduleSummaryReport_IsConstraintValid(pVal: TTM_11_13_TimeBasedScheduleSummaryReport): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TTM_11_13_TimeBasedScheduleSummaryReport_report_IsConstraintValid(pVal.report)
    ret
}

def TTM_11_13_TimeBasedScheduleSummaryReport_report_Initialize(): TTM_11_13_TimeBasedScheduleSummaryReport_report = TTM_11_13_TimeBasedScheduleSummaryReport_report(0, Vector.fill(4095)(TTM_11_13_Report_Initialize()))
def TTM_11_13_TimeBasedScheduleSummaryReport_Initialize(): TTM_11_13_TimeBasedScheduleSummaryReport = TTM_11_13_TimeBasedScheduleSummaryReport(report = TTM_11_13_TimeBasedScheduleSummaryReport_report_Initialize())

@opaque @inlineOnce 
def TTM_11_13_TimeBasedScheduleSummaryReport_ACN_Encode(pVal: TTM_11_13_TimeBasedScheduleSummaryReport, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(765797L))
    var i1: Int = 0
    TTM_11_13_TimeBasedScheduleSummaryReport_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val TM_11_13_TimeBasedScheduleSummaryReport_n = ULong.fromRaw(pVal.report.nCount)
    if TM_11_13_TimeBasedScheduleSummaryReport_n < ULong.fromRaw(0) || TM_11_13_TimeBasedScheduleSummaryReport_n > ULong.fromRaw(4095) then
        return Left(860)
    /* Encode TM_11_13_TimeBasedScheduleSummaryReport_n */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(TM_11_13_TimeBasedScheduleSummaryReport_n)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(TM_11_13_TimeBasedScheduleSummaryReport_n)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 765797L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode report */
    TM_11_13_TimeBasedScheduleSummaryReport_report_ACN_Encode(codec, pVal, TM_11_13_TimeBasedScheduleSummaryReport_n, pVal.report) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 765797L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.report.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 765797L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def PUS_11_13_TTM_11_13_TimeBasedScheduleSummaryReport_report_pVal_report_report_Encode_loop(codec: ACN, report: TTM_11_13_TimeBasedScheduleSummaryReport_report, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= report.nCount))
    require((0 <= report.nCount) && (report.nCount <= report.arr.size) && (report.arr.size <= 4095))
    require(codec.base.bitStream.validate_offset_bits((187L * (report.nCount - i1))))
    decreases(report.nCount - i1)
    if (i1 == report.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 187L * (report.nCount - i1), 187L)
        }
        TTM_11_13_Report_ACN_Encode(report.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(187L * (i1 + 1) == 187L * i1 + 187L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 187L * (report.nCount - i1), 187L)
            check(codec.base.bitStream.validate_offset_bits(187L * (report.nCount - (i1 + 1))))
        }
        val res = PUS_11_13_TTM_11_13_TimeBasedScheduleSummaryReport_report_pVal_report_report_Encode_loop(codec, report, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TTM_11_13_TimeBasedScheduleSummaryReport_report.sizeRange(report.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, report.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + report.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TTM_11_13_TimeBasedScheduleSummaryReport_report.sizeRange(report.arr, codecSnap1.base.bitStream.bitIndex, i1, report.nCount) == report.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TTM_11_13_TimeBasedScheduleSummaryReport_report.sizeRange(report.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, report.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TTM_11_13_TimeBasedScheduleSummaryReport_report.sizeRange(report.arr, codecSnap1.base.bitStream.bitIndex, i1, report.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_11_13_TimeBasedScheduleSummaryReport_report.sizeRange(report.arr, old(codec).base.bitStream.bitIndex, i1, report.nCount)
    }
}



@opaque @inlineOnce
def TM_11_13_TimeBasedScheduleSummaryReport_report_ACN_Encode(codec: ACN, pVal: TTM_11_13_TimeBasedScheduleSummaryReport, TM_11_13_TimeBasedScheduleSummaryReport_n: ULong, report: TTM_11_13_TimeBasedScheduleSummaryReport_report): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(765765L))
    @ghost val oldCdc = snapshot(codec)
    TTM_11_13_TimeBasedScheduleSummaryReport_report_IsConstraintValid(report) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    PUS_11_13_TTM_11_13_TimeBasedScheduleSummaryReport_report_pVal_report_report_Encode_loop(codec, report, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                report.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + report.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTM_11_13_TimeBasedScheduleSummaryReport_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTM_11_13_TimeBasedScheduleSummaryReport] =
{
    require(codec.base.bitStream.validate_offset_bits(765797L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode TM_11_13_TimeBasedScheduleSummaryReport_n */
    val TM_11_13_TimeBasedScheduleSummaryReport_n = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 765797L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode report */
    val pVal_report = TM_11_13_TimeBasedScheduleSummaryReport_report_ACN_Decode(codec, TM_11_13_TimeBasedScheduleSummaryReport_n) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 765797L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_report.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 765797L)
    }
    val pVal = TTM_11_13_TimeBasedScheduleSummaryReport(pVal_report)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }

    TTM_11_13_TimeBasedScheduleSummaryReport_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTM_11_13_TimeBasedScheduleSummaryReport](l)
        case Right(_) => RightMut[ErrorCode, TTM_11_13_TimeBasedScheduleSummaryReport](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTM_11_13_TimeBasedScheduleSummaryReport]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_11_13_TimeBasedScheduleSummaryReport_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTM_11_13_TimeBasedScheduleSummaryReport_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTM_11_13_TimeBasedScheduleSummaryReport]) =
{
    require(codec.base.bitStream.validate_offset_bits(765797L))
    val cpy = snapshot(codec)
    val res = TTM_11_13_TimeBasedScheduleSummaryReport_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def PUS_11_13_TTM_11_13_TimeBasedScheduleSummaryReport_report_pVal_report_report_Decode_loop(codec: ACN, nCount: Int, report: Vector[TTM_11_13_Report], i1: Int): EitherMut[Int, Vector[TTM_11_13_Report]] = {
    require((0 <= nCount) && (nCount <= 4095))
    require((0 <= i1) && (i1 <= nCount))
    require(report.size == i1)
    require(codec.base.bitStream.validate_offset_bits((187L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(report)
            vecRangesEqSlicedLemma(report, report, 0, report.size, 0, i1)
        }
        RightMut[Int, Vector[TTM_11_13_Report]](report)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 187L * (nCount - i1), 187L)
        }
        val report_arr_i1_ = TTM_11_13_Report_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(187L * (i1 + 1) == 187L * i1 + 187L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 187L * (nCount - i1), 187L)
            check(codec.base.bitStream.validate_offset_bits(187L * (nCount - (i1 + 1))))
        }
        val res = PUS_11_13_TTM_11_13_TimeBasedScheduleSummaryReport_report_pVal_report_report_Decode_loop(codec, nCount, report.append(report_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(report, newVec, report_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(report.append(report_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(report.list, report_arr_i1_, i1)
                    Vector.listApplyEqVecApply(report.append(report_arr_i1_), i1)
                    check(report_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TTM_11_13_Report]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(report, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_11_13_TimeBasedScheduleSummaryReport_report.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def TM_11_13_TimeBasedScheduleSummaryReport_report_ACN_Decode(codec: ACN, TM_11_13_TimeBasedScheduleSummaryReport_n: ULong): EitherMut[Int, TTM_11_13_TimeBasedScheduleSummaryReport_report] = {
    require(codec.base.bitStream.validate_offset_bits(765765L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val report =
        if ((TM_11_13_TimeBasedScheduleSummaryReport_n <= ULong.fromRaw(4095))) then
            val report_nCount = TM_11_13_TimeBasedScheduleSummaryReport_n.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val report = PUS_11_13_TTM_11_13_TimeBasedScheduleSummaryReport_report_pVal_report_report_Decode_loop(codec, report_nCount, Vector.empty[TTM_11_13_Report], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val report = TTM_11_13_TimeBasedScheduleSummaryReport_report(report_nCount, bdg)
                    ghostExpr {
                        report.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    report
            }
            report
        else return LeftMut(ERR_ACN_DECODE_TM_11_13_TIMEBASEDSCHEDULESUMMARYREPORT_REPORT)
    TTM_11_13_TimeBasedScheduleSummaryReport_report_IsConstraintValid(report) match {
        case Left(l) =>
            LeftMut[Int, TTM_11_13_TimeBasedScheduleSummaryReport_report](l)
        case Right(_) =>
            RightMut[Int, TTM_11_13_TimeBasedScheduleSummaryReport_report](report)
    }
}.ensuring { (res: EitherMut[Int, TTM_11_13_TimeBasedScheduleSummaryReport_report]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_11_13_TimeBasedScheduleSummaryReport_report_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TM_11_13_TimeBasedScheduleSummaryReport_report_ACN_Decode_pure(codec: ACN, TM_11_13_TimeBasedScheduleSummaryReport_n: ULong): (ACN, EitherMut[Int, TTM_11_13_TimeBasedScheduleSummaryReport_report]) = {
    require(codec.base.bitStream.validate_offset_bits(765765L))
    val cpy = snapshot(codec)
    val res = TM_11_13_TimeBasedScheduleSummaryReport_report_ACN_Decode(cpy, TM_11_13_TimeBasedScheduleSummaryReport_n)
    (cpy, res)
}