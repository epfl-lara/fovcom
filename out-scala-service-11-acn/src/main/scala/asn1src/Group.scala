/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._


def TGroup_ID_IsConstraintValid(pVal: TGroup_ID): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = (pVal <= ULong.fromRaw(4294967295L)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    ret
}

def TGroup_ID_Initialize(): TGroup_ID = ULong.fromRaw(0L)

@opaque @inlineOnce 
def TGroup_ID_ACN_Encode(pVal: TGroup_ID, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(32L))
    TGroup_ID_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(pVal)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(pVal)
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 32L
    }
}

@opaque @inlineOnce 
def TGroup_ID_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TGroup_ID] =
{
    require(codec.base.bitStream.validate_offset_bits(32L))

    @ghost val oldCdc = snapshot(codec)
    val pVal = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()


    TGroup_ID_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TGroup_ID](l)
        case Right(_) => RightMut[ErrorCode, TGroup_ID](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TGroup_ID]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 32L && TGroup_ID_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TGroup_ID_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TGroup_ID]) =
{
    require(codec.base.bitStream.validate_offset_bits(32L))
    val cpy = snapshot(codec)
    val res = TGroup_ID_ACN_Decode(cpy)
    (cpy, res)
}

def TGroupStatus_IsConstraintValid(pVal: TGroupStatus): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = (((pVal == TGroupStatus.TGroupStatus_disabled)) || ((pVal == TGroupStatus.TGroupStatus_enabled))) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    ret
}

def TGroupStatus_Initialize(): TGroupStatus = TGroupStatus.TGroupStatus_disabled

@opaque @inlineOnce 
def TGroupStatus_ACN_Encode(pVal: TGroupStatus, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(1L))
    TGroupStatus_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    val intVal_pVal = pVal match
        case TGroupStatus.TGroupStatus_disabled => ULong.fromRaw(0L)
        case TGroupStatus.TGroupStatus_enabled => ULong.fromRaw(1L)

    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(): Unit = ().ensuring(_ => GetBitCountUnsigned(ULong.fromRaw(1) - ULong.fromRaw(0)) == 1)
            bitCountLemma()
        }
    }
    codec.base.encodeConstrainedPosWholeNumber(intVal_pVal, 0.toRawULong, 1.toRawULong)
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 1L
    }
}

@opaque @inlineOnce 
def TGroupStatus_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TGroupStatus] =
{
    require(codec.base.bitStream.validate_offset_bits(1L))

    @ghost val oldCdc = snapshot(codec)
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(): Unit = ().ensuring(_ => GetBitCountUnsigned(ULong.fromRaw(1) - ULong.fromRaw(0)) == 1)
            bitCountLemma()
        }
    }
    val intVal_pVal = codec.base.decodeConstrainedPosWholeNumber(ULong.fromRaw(0), ULong.fromRaw(1)) // uper:135
    val pVal = intVal_pVal.toRaw match
        case 0 => TGroupStatus.TGroupStatus_disabled
        case 1 => TGroupStatus.TGroupStatus_enabled
        case _ => return LeftMut(ERR_ACN_DECODE_GROUPSTATUS)

    TGroupStatus_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TGroupStatus](l)
        case Right(_) => RightMut[ErrorCode, TGroupStatus](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TGroupStatus]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 1L && TGroupStatus_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TGroupStatus_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TGroupStatus]) =
{
    require(codec.base.bitStream.validate_offset_bits(1L))
    val cpy = snapshot(codec)
    val res = TGroupStatus_ACN_Decode(cpy)
    (cpy, res)
}