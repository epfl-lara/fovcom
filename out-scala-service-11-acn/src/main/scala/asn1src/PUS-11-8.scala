/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

val maxTC_11_8_Group_ID_Count: Int = 4095 // variables:188
val maxTC_11_8_SubSchedule_ID_Count: Int = 4095 // variables:188

def TTC_11_8_Groups_subschedule_ID_IsConstraintValid(pVal: TTC_11_8_Groups_subschedule_ID): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = (pVal.nCount <= 4095) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TGroup_ID_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TTC_11_8_Groups_IsConstraintValid(pVal: TTC_11_8_Groups): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TTC_11_8_Groups_subschedule_ID_IsConstraintValid(pVal.subschedule_ID)
    ret
}

def TTC_11_8_Groups_subschedule_ID_Initialize(): TTC_11_8_Groups_subschedule_ID = TTC_11_8_Groups_subschedule_ID(0, Vector.fill(4095)(ULong.fromRaw(0L)))
def TTC_11_8_Groups_Initialize(): TTC_11_8_Groups = TTC_11_8_Groups(subschedule_ID = TTC_11_8_Groups_subschedule_ID_Initialize())

@opaque @inlineOnce 
def TTC_11_8_Groups_ACN_Encode(pVal: TTC_11_8_Groups, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(131072L))
    var i1: Int = 0
    TTC_11_8_Groups_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val TC_11_8_Groups_n2 = ULong.fromRaw(pVal.subschedule_ID.nCount)
    if TC_11_8_Groups_n2 < ULong.fromRaw(0) || TC_11_8_Groups_n2 > ULong.fromRaw(4095) then
        return Left(860)
    /* Encode TC_11_8_Groups_n2 */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(TC_11_8_Groups_n2)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(TC_11_8_Groups_n2)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 131072L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode subschedule_ID */
    TC_11_8_Groups_subschedule_ID_ACN_Encode(codec, pVal, TC_11_8_Groups_n2, pVal.subschedule_ID) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 131072L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.subschedule_ID.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 131072L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def PUS_11_8_TTC_11_8_Groups_subschedule_ID_pVal_subschedule_ID_subschedule_ID_Encode_loop(codec: ACN, subschedule_ID: TTC_11_8_Groups_subschedule_ID, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= subschedule_ID.nCount))
    require((0 <= subschedule_ID.nCount) && (subschedule_ID.nCount <= subschedule_ID.arr.size) && (subschedule_ID.arr.size <= 4095))
    require(codec.base.bitStream.validate_offset_bits((32L * (subschedule_ID.nCount - i1))))
    decreases(subschedule_ID.nCount - i1)
    if (i1 == subschedule_ID.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 32L * (subschedule_ID.nCount - i1), 32L)
        }
        TGroup_ID_ACN_Encode(subschedule_ID.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(32L * (i1 + 1) == 32L * i1 + 32L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 32L * (subschedule_ID.nCount - i1), 32L)
            check(codec.base.bitStream.validate_offset_bits(32L * (subschedule_ID.nCount - (i1 + 1))))
        }
        val res = PUS_11_8_TTC_11_8_Groups_subschedule_ID_pVal_subschedule_ID_subschedule_ID_Encode_loop(codec, subschedule_ID, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TTC_11_8_Groups_subschedule_ID.sizeRange(subschedule_ID.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, subschedule_ID.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + 32L)
                    assert(TTC_11_8_Groups_subschedule_ID.sizeRange(subschedule_ID.arr, codecSnap1.base.bitStream.bitIndex, i1, subschedule_ID.nCount) == TTC_11_8_Groups_subschedule_ID.sizeRange(subschedule_ID.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, subschedule_ID.nCount) + 32L)
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TTC_11_8_Groups_subschedule_ID.sizeRange(subschedule_ID.arr, codecSnap1.base.bitStream.bitIndex, i1, subschedule_ID.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTC_11_8_Groups_subschedule_ID.sizeRange(subschedule_ID.arr, old(codec).base.bitStream.bitIndex, i1, subschedule_ID.nCount)
    }
}



@opaque @inlineOnce
def TC_11_8_Groups_subschedule_ID_ACN_Encode(codec: ACN, pVal: TTC_11_8_Groups, TC_11_8_Groups_n2: ULong, subschedule_ID: TTC_11_8_Groups_subschedule_ID): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(131040L))
    @ghost val oldCdc = snapshot(codec)
    TTC_11_8_Groups_subschedule_ID_IsConstraintValid(subschedule_ID) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    PUS_11_8_TTC_11_8_Groups_subschedule_ID_pVal_subschedule_ID_subschedule_ID_Encode_loop(codec, subschedule_ID, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                subschedule_ID.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + subschedule_ID.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTC_11_8_Groups_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTC_11_8_Groups] =
{
    require(codec.base.bitStream.validate_offset_bits(131072L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode TC_11_8_Groups_n2 */
    val TC_11_8_Groups_n2 = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 131072L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode subschedule_ID */
    val pVal_subschedule_ID = TC_11_8_Groups_subschedule_ID_ACN_Decode(codec, TC_11_8_Groups_n2) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 131072L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_subschedule_ID.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 131072L)
    }
    val pVal = TTC_11_8_Groups(pVal_subschedule_ID)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }

    TTC_11_8_Groups_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTC_11_8_Groups](l)
        case Right(_) => RightMut[ErrorCode, TTC_11_8_Groups](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTC_11_8_Groups]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_11_8_Groups_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTC_11_8_Groups_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTC_11_8_Groups]) =
{
    require(codec.base.bitStream.validate_offset_bits(131072L))
    val cpy = snapshot(codec)
    val res = TTC_11_8_Groups_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def PUS_11_8_TTC_11_8_Groups_subschedule_ID_pVal_subschedule_ID_subschedule_ID_Decode_loop(codec: ACN, nCount: Int, subschedule_ID: Vector[ULong], i1: Int): EitherMut[Int, Vector[ULong]] = {
    require((0 <= nCount) && (nCount <= 4095))
    require((0 <= i1) && (i1 <= nCount))
    require(subschedule_ID.size == i1)
    require(codec.base.bitStream.validate_offset_bits((32L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(subschedule_ID)
            vecRangesEqSlicedLemma(subschedule_ID, subschedule_ID, 0, subschedule_ID.size, 0, i1)
        }
        RightMut[Int, Vector[ULong]](subschedule_ID)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 32L * (nCount - i1), 32L)
        }
        val subschedule_ID_arr_i1_ = TGroup_ID_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(32L * (i1 + 1) == 32L * i1 + 32L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 32L * (nCount - i1), 32L)
            check(codec.base.bitStream.validate_offset_bits(32L * (nCount - (i1 + 1))))
        }
        val res = PUS_11_8_TTC_11_8_Groups_subschedule_ID_pVal_subschedule_ID_subschedule_ID_Decode_loop(codec, nCount, subschedule_ID.append(subschedule_ID_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(subschedule_ID, newVec, subschedule_ID_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(subschedule_ID.append(subschedule_ID_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(subschedule_ID.list, subschedule_ID_arr_i1_, i1)
                    Vector.listApplyEqVecApply(subschedule_ID.append(subschedule_ID_arr_i1_), i1)
                    check(subschedule_ID_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[ULong]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(subschedule_ID, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTC_11_8_Groups_subschedule_ID.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def TC_11_8_Groups_subschedule_ID_ACN_Decode(codec: ACN, TC_11_8_Groups_n2: ULong): EitherMut[Int, TTC_11_8_Groups_subschedule_ID] = {
    require(codec.base.bitStream.validate_offset_bits(131040L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val subschedule_ID =
        if ((TC_11_8_Groups_n2 <= ULong.fromRaw(4095))) then
            val subschedule_ID_nCount = TC_11_8_Groups_n2.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val subschedule_ID = PUS_11_8_TTC_11_8_Groups_subschedule_ID_pVal_subschedule_ID_subschedule_ID_Decode_loop(codec, subschedule_ID_nCount, Vector.empty[ULong], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val subschedule_ID = TTC_11_8_Groups_subschedule_ID(subschedule_ID_nCount, bdg)
                    ghostExpr {
                        subschedule_ID.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    subschedule_ID
            }
            subschedule_ID
        else return LeftMut(ERR_ACN_DECODE_TC_11_8_GROUPS_SUBSCHEDULE_ID)
    TTC_11_8_Groups_subschedule_ID_IsConstraintValid(subschedule_ID) match {
        case Left(l) =>
            LeftMut[Int, TTC_11_8_Groups_subschedule_ID](l)
        case Right(_) =>
            RightMut[Int, TTC_11_8_Groups_subschedule_ID](subschedule_ID)
    }
}.ensuring { (res: EitherMut[Int, TTC_11_8_Groups_subschedule_ID]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_11_8_Groups_subschedule_ID_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TC_11_8_Groups_subschedule_ID_ACN_Decode_pure(codec: ACN, TC_11_8_Groups_n2: ULong): (ACN, EitherMut[Int, TTC_11_8_Groups_subschedule_ID]) = {
    require(codec.base.bitStream.validate_offset_bits(131040L))
    val cpy = snapshot(codec)
    val res = TC_11_8_Groups_subschedule_ID_ACN_Decode(cpy, TC_11_8_Groups_n2)
    (cpy, res)
}

def TTC_11_8_SubSchedules_subschedule_ID_IsConstraintValid(pVal: TTC_11_8_SubSchedules_subschedule_ID): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = (pVal.nCount <= 4095) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TSubSchedule_ID_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TTC_11_8_SubSchedules_IsConstraintValid(pVal: TTC_11_8_SubSchedules): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TTC_11_8_SubSchedules_subschedule_ID_IsConstraintValid(pVal.subschedule_ID)
    ret
}

def TTC_11_8_SubSchedules_subschedule_ID_Initialize(): TTC_11_8_SubSchedules_subschedule_ID = TTC_11_8_SubSchedules_subschedule_ID(0, Vector.fill(4095)(ULong.fromRaw(0L)))
def TTC_11_8_SubSchedules_Initialize(): TTC_11_8_SubSchedules = TTC_11_8_SubSchedules(subschedule_ID = TTC_11_8_SubSchedules_subschedule_ID_Initialize())

@opaque @inlineOnce 
def TTC_11_8_SubSchedules_ACN_Encode(pVal: TTC_11_8_SubSchedules, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(131072L))
    var i1: Int = 0
    TTC_11_8_SubSchedules_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val TC_11_8_SubSchedules_n1 = ULong.fromRaw(pVal.subschedule_ID.nCount)
    if TC_11_8_SubSchedules_n1 < ULong.fromRaw(0) || TC_11_8_SubSchedules_n1 > ULong.fromRaw(4095) then
        return Left(860)
    /* Encode TC_11_8_SubSchedules_n1 */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(TC_11_8_SubSchedules_n1)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(TC_11_8_SubSchedules_n1)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 131072L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode subschedule_ID */
    TC_11_8_SubSchedules_subschedule_ID_ACN_Encode(codec, pVal, TC_11_8_SubSchedules_n1, pVal.subschedule_ID) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 131072L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.subschedule_ID.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 131072L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def PUS_11_8_TTC_11_8_SubSchedules_subschedule_ID_pVal_subschedule_ID_subschedule_ID_Encode_loop(codec: ACN, subschedule_ID: TTC_11_8_SubSchedules_subschedule_ID, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= subschedule_ID.nCount))
    require((0 <= subschedule_ID.nCount) && (subschedule_ID.nCount <= subschedule_ID.arr.size) && (subschedule_ID.arr.size <= 4095))
    require(codec.base.bitStream.validate_offset_bits((32L * (subschedule_ID.nCount - i1))))
    decreases(subschedule_ID.nCount - i1)
    if (i1 == subschedule_ID.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 32L * (subschedule_ID.nCount - i1), 32L)
        }
        TSubSchedule_ID_ACN_Encode(subschedule_ID.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(32L * (i1 + 1) == 32L * i1 + 32L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 32L * (subschedule_ID.nCount - i1), 32L)
            check(codec.base.bitStream.validate_offset_bits(32L * (subschedule_ID.nCount - (i1 + 1))))
        }
        val res = PUS_11_8_TTC_11_8_SubSchedules_subschedule_ID_pVal_subschedule_ID_subschedule_ID_Encode_loop(codec, subschedule_ID, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TTC_11_8_SubSchedules_subschedule_ID.sizeRange(subschedule_ID.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, subschedule_ID.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + 32L)
                    assert(TTC_11_8_SubSchedules_subschedule_ID.sizeRange(subschedule_ID.arr, codecSnap1.base.bitStream.bitIndex, i1, subschedule_ID.nCount) == TTC_11_8_SubSchedules_subschedule_ID.sizeRange(subschedule_ID.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, subschedule_ID.nCount) + 32L)
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TTC_11_8_SubSchedules_subschedule_ID.sizeRange(subschedule_ID.arr, codecSnap1.base.bitStream.bitIndex, i1, subschedule_ID.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTC_11_8_SubSchedules_subschedule_ID.sizeRange(subschedule_ID.arr, old(codec).base.bitStream.bitIndex, i1, subschedule_ID.nCount)
    }
}



@opaque @inlineOnce
def TC_11_8_SubSchedules_subschedule_ID_ACN_Encode(codec: ACN, pVal: TTC_11_8_SubSchedules, TC_11_8_SubSchedules_n1: ULong, subschedule_ID: TTC_11_8_SubSchedules_subschedule_ID): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(131040L))
    @ghost val oldCdc = snapshot(codec)
    TTC_11_8_SubSchedules_subschedule_ID_IsConstraintValid(subschedule_ID) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    PUS_11_8_TTC_11_8_SubSchedules_subschedule_ID_pVal_subschedule_ID_subschedule_ID_Encode_loop(codec, subschedule_ID, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                subschedule_ID.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + subschedule_ID.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTC_11_8_SubSchedules_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTC_11_8_SubSchedules] =
{
    require(codec.base.bitStream.validate_offset_bits(131072L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode TC_11_8_SubSchedules_n1 */
    val TC_11_8_SubSchedules_n1 = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 131072L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode subschedule_ID */
    val pVal_subschedule_ID = TC_11_8_SubSchedules_subschedule_ID_ACN_Decode(codec, TC_11_8_SubSchedules_n1) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 131072L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_subschedule_ID.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 131072L)
    }
    val pVal = TTC_11_8_SubSchedules(pVal_subschedule_ID)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }

    TTC_11_8_SubSchedules_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTC_11_8_SubSchedules](l)
        case Right(_) => RightMut[ErrorCode, TTC_11_8_SubSchedules](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTC_11_8_SubSchedules]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_11_8_SubSchedules_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTC_11_8_SubSchedules_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTC_11_8_SubSchedules]) =
{
    require(codec.base.bitStream.validate_offset_bits(131072L))
    val cpy = snapshot(codec)
    val res = TTC_11_8_SubSchedules_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def PUS_11_8_TTC_11_8_SubSchedules_subschedule_ID_pVal_subschedule_ID_subschedule_ID_Decode_loop(codec: ACN, nCount: Int, subschedule_ID: Vector[ULong], i1: Int): EitherMut[Int, Vector[ULong]] = {
    require((0 <= nCount) && (nCount <= 4095))
    require((0 <= i1) && (i1 <= nCount))
    require(subschedule_ID.size == i1)
    require(codec.base.bitStream.validate_offset_bits((32L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(subschedule_ID)
            vecRangesEqSlicedLemma(subschedule_ID, subschedule_ID, 0, subschedule_ID.size, 0, i1)
        }
        RightMut[Int, Vector[ULong]](subschedule_ID)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 32L * (nCount - i1), 32L)
        }
        val subschedule_ID_arr_i1_ = TSubSchedule_ID_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(32L * (i1 + 1) == 32L * i1 + 32L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 32L * (nCount - i1), 32L)
            check(codec.base.bitStream.validate_offset_bits(32L * (nCount - (i1 + 1))))
        }
        val res = PUS_11_8_TTC_11_8_SubSchedules_subschedule_ID_pVal_subschedule_ID_subschedule_ID_Decode_loop(codec, nCount, subschedule_ID.append(subschedule_ID_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(subschedule_ID, newVec, subschedule_ID_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(subschedule_ID.append(subschedule_ID_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(subschedule_ID.list, subschedule_ID_arr_i1_, i1)
                    Vector.listApplyEqVecApply(subschedule_ID.append(subschedule_ID_arr_i1_), i1)
                    check(subschedule_ID_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[ULong]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(subschedule_ID, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTC_11_8_SubSchedules_subschedule_ID.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def TC_11_8_SubSchedules_subschedule_ID_ACN_Decode(codec: ACN, TC_11_8_SubSchedules_n1: ULong): EitherMut[Int, TTC_11_8_SubSchedules_subschedule_ID] = {
    require(codec.base.bitStream.validate_offset_bits(131040L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val subschedule_ID =
        if ((TC_11_8_SubSchedules_n1 <= ULong.fromRaw(4095))) then
            val subschedule_ID_nCount = TC_11_8_SubSchedules_n1.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val subschedule_ID = PUS_11_8_TTC_11_8_SubSchedules_subschedule_ID_pVal_subschedule_ID_subschedule_ID_Decode_loop(codec, subschedule_ID_nCount, Vector.empty[ULong], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val subschedule_ID = TTC_11_8_SubSchedules_subschedule_ID(subschedule_ID_nCount, bdg)
                    ghostExpr {
                        subschedule_ID.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    subschedule_ID
            }
            subschedule_ID
        else return LeftMut(ERR_ACN_DECODE_TC_11_8_SUBSCHEDULES_SUBSCHEDULE_ID)
    TTC_11_8_SubSchedules_subschedule_ID_IsConstraintValid(subschedule_ID) match {
        case Left(l) =>
            LeftMut[Int, TTC_11_8_SubSchedules_subschedule_ID](l)
        case Right(_) =>
            RightMut[Int, TTC_11_8_SubSchedules_subschedule_ID](subschedule_ID)
    }
}.ensuring { (res: EitherMut[Int, TTC_11_8_SubSchedules_subschedule_ID]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_11_8_SubSchedules_subschedule_ID_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TC_11_8_SubSchedules_subschedule_ID_ACN_Decode_pure(codec: ACN, TC_11_8_SubSchedules_n1: ULong): (ACN, EitherMut[Int, TTC_11_8_SubSchedules_subschedule_ID]) = {
    require(codec.base.bitStream.validate_offset_bits(131040L))
    val cpy = snapshot(codec)
    val res = TC_11_8_SubSchedules_subschedule_ID_ACN_Decode(cpy, TC_11_8_SubSchedules_n1)
    (cpy, res)
}

def TTC_11_8_TimeShiftTheScheduledActivitiesIdentifiedByAFilter_IsConstraintValid(pVal: TTC_11_8_TimeShiftTheScheduledActivitiesIdentifiedByAFilter): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TCDS_RelativeTime_PFC_2_IsConstraintValid(pVal.timeOffset)
    if ret.isRight then
        ret = TTimeWindow_IsConstraintValid(pVal.timeWindow)
        if ret.isRight then
            pVal.subschedules match
                case SomeMut(subschedules) =>
                    ret = TTC_11_8_SubSchedules_IsConstraintValid(subschedules)
                case NoneMut() =>
            if ret.isRight then
                pVal.groups match
                    case SomeMut(groups) =>
                        ret = TTC_11_8_Groups_IsConstraintValid(groups)
                    case NoneMut() =>
    if ret.isRight then
        ret = (pVal.subschedules.isDefined == true) match
            case true =>
                Right(0)
            case false =>
                Left(45)
        if ret.isRight then
            ret = (pVal.groups.isDefined == true) match
                case true =>
                    Right(0)
                case false =>
                    Left(45)
    ret
}

def TTC_11_8_TimeShiftTheScheduledActivitiesIdentifiedByAFilter_Initialize(): TTC_11_8_TimeShiftTheScheduledActivitiesIdentifiedByAFilter = TTC_11_8_TimeShiftTheScheduledActivitiesIdentifiedByAFilter(timeOffset = TCDS_RelativeTime_PFC_2_Initialize(), timeWindow = TTimeWindow_Initialize(), subschedules = SomeMut(TTC_11_8_SubSchedules_Initialize()), groups = SomeMut(TTC_11_8_Groups_Initialize()))

@opaque @inlineOnce 
def TTC_11_8_TimeShiftTheScheduledActivitiesIdentifiedByAFilter_ACN_Encode(pVal: TTC_11_8_TimeShiftTheScheduledActivitiesIdentifiedByAFilter, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(262338L))
    TTC_11_8_TimeShiftTheScheduledActivitiesIdentifiedByAFilter_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode timeOffset */
    TCDS_RelativeTime_PFC_2_ACN_Encode(pVal.timeOffset, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 262338L, 64L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = pVal.timeOffset.size(codec_0_1.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode timeWindow */
    TTimeWindow_ACN_Encode(pVal.timeWindow, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 262274L, 130L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 194L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.timeWindow.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    TC_11_8_TimeShiftTheScheduledActivitiesIdentifiedByAFilter_subschedules_Optional_ACN_Encode(codec, pVal, pVal.subschedules) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_3.base.bitStream, codec.base.bitStream, 262144L, 131072L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 131266L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = pVal.subschedules match {
        case SomeMut(v) =>
            v.size(codec_0_3.base.bitStream.bitIndex)
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    @ghost val codec_0_4 = snapshot(codec)
    TC_11_8_TimeShiftTheScheduledActivitiesIdentifiedByAFilter_groups_Optional_ACN_Encode(codec, pVal, pVal.groups) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 262338L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_3 = pVal.groups match {
        case SomeMut(v) =>
            v.size(codec_0_4.base.bitStream.bitIndex)
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 262338L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2 + size_3)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TC_11_8_TimeShiftTheScheduledActivitiesIdentifiedByAFilter_subschedules_Optional_ACN_Encode(codec: ACN, pVal: TTC_11_8_TimeShiftTheScheduledActivitiesIdentifiedByAFilter, subschedules: OptionMut[TTC_11_8_SubSchedules]): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(131072L))
    @ghost val oldCdc = snapshot(codec)
    /* Encode subschedules */
    /* marked as ALWAYS PRESENT, so it must be Some */
    subschedules match
        case SomeMut(subschedules) =>
            TTC_11_8_SubSchedules_ACN_Encode(subschedules, codec, false) match // uper:6
                case Right(_) =>
                case Left(err) => return Left(err)
        case NoneMut() => return Left(628)
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + subschedules.get.size(old(codec).base.bitStream.bitIndex)
    }
}



@opaque @inlineOnce
def TC_11_8_TimeShiftTheScheduledActivitiesIdentifiedByAFilter_groups_Optional_ACN_Encode(codec: ACN, pVal: TTC_11_8_TimeShiftTheScheduledActivitiesIdentifiedByAFilter, groups: OptionMut[TTC_11_8_Groups]): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(131072L))
    @ghost val oldCdc = snapshot(codec)
    /* Encode groups */
    /* marked as ALWAYS PRESENT, so it must be Some */
    groups match
        case SomeMut(groups) =>
            TTC_11_8_Groups_ACN_Encode(groups, codec, false) match // uper:6
                case Right(_) =>
                case Left(err) => return Left(err)
        case NoneMut() => return Left(628)
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + groups.get.size(old(codec).base.bitStream.bitIndex)
    }
}



@opaque @inlineOnce 
def TTC_11_8_TimeShiftTheScheduledActivitiesIdentifiedByAFilter_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTC_11_8_TimeShiftTheScheduledActivitiesIdentifiedByAFilter] =
{
    require(codec.base.bitStream.validate_offset_bits(262338L))

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode timeOffset */
    val pVal_timeOffset = TCDS_RelativeTime_PFC_2_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 262338L, 64L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = pVal_timeOffset.size(codec_0_1.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode timeWindow */
    val pVal_timeWindow = TTimeWindow_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 262274L, 130L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 194L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_timeWindow.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    val pVal_subschedules = TC_11_8_TimeShiftTheScheduledActivitiesIdentifiedByAFilter_subschedules_Optional_ACN_Decode(codec) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_3.base.bitStream, codec.base.bitStream, 262144L, 131072L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 131266L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = pVal_subschedules match {
        case SomeMut(v) =>
            v.size(codec_0_3.base.bitStream.bitIndex)
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    @ghost val codec_0_4 = snapshot(codec)
    val pVal_groups = TC_11_8_TimeShiftTheScheduledActivitiesIdentifiedByAFilter_groups_Optional_ACN_Decode(codec) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 262338L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_3 = pVal_groups match {
        case SomeMut(v) =>
            v.size(codec_0_4.base.bitStream.bitIndex)
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 262338L)
    }
    val pVal = TTC_11_8_TimeShiftTheScheduledActivitiesIdentifiedByAFilter(pVal_timeOffset, pVal_timeWindow, pVal_subschedules, pVal_groups)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2 + size_3)
    }

    TTC_11_8_TimeShiftTheScheduledActivitiesIdentifiedByAFilter_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTC_11_8_TimeShiftTheScheduledActivitiesIdentifiedByAFilter](l)
        case Right(_) => RightMut[ErrorCode, TTC_11_8_TimeShiftTheScheduledActivitiesIdentifiedByAFilter](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTC_11_8_TimeShiftTheScheduledActivitiesIdentifiedByAFilter]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_11_8_TimeShiftTheScheduledActivitiesIdentifiedByAFilter_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTC_11_8_TimeShiftTheScheduledActivitiesIdentifiedByAFilter_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTC_11_8_TimeShiftTheScheduledActivitiesIdentifiedByAFilter]) =
{
    require(codec.base.bitStream.validate_offset_bits(262338L))
    val cpy = snapshot(codec)
    val res = TTC_11_8_TimeShiftTheScheduledActivitiesIdentifiedByAFilter_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def TC_11_8_TimeShiftTheScheduledActivitiesIdentifiedByAFilter_subschedules_Optional_ACN_Decode(codec: ACN): EitherMut[Int, OptionMut[TTC_11_8_SubSchedules]] = {
    require(codec.base.bitStream.validate_offset_bits(131072L))
    @ghost val oldCdc = snapshot(codec)
    /* Decode subschedules */
    /* marked as ALWAYS PRESENT */
    val subschedules: OptionMut[TTC_11_8_SubSchedules] =
        val pVal_subschedules = TTC_11_8_SubSchedules_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        SomeMut(pVal_subschedules)
    RightMut[Int, OptionMut[TTC_11_8_SubSchedules]](subschedules)
}.ensuring { (res: EitherMut[Int, OptionMut[TTC_11_8_SubSchedules]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            resVal.isDefined && old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.get.size(old(codec).base.bitStream.bitIndex)
    }
}



@ghost @pure
def TC_11_8_TimeShiftTheScheduledActivitiesIdentifiedByAFilter_subschedules_Optional_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[Int, OptionMut[TTC_11_8_SubSchedules]]) = {
    require(codec.base.bitStream.validate_offset_bits(131072L))
    val cpy = snapshot(codec)
    val res = TC_11_8_TimeShiftTheScheduledActivitiesIdentifiedByAFilter_subschedules_Optional_ACN_Decode(cpy)
    (cpy, res)
}



@opaque @inlineOnce
def TC_11_8_TimeShiftTheScheduledActivitiesIdentifiedByAFilter_groups_Optional_ACN_Decode(codec: ACN): EitherMut[Int, OptionMut[TTC_11_8_Groups]] = {
    require(codec.base.bitStream.validate_offset_bits(131072L))
    @ghost val oldCdc = snapshot(codec)
    /* Decode groups */
    /* marked as ALWAYS PRESENT */
    val groups: OptionMut[TTC_11_8_Groups] =
        val pVal_groups = TTC_11_8_Groups_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        SomeMut(pVal_groups)
    RightMut[Int, OptionMut[TTC_11_8_Groups]](groups)
}.ensuring { (res: EitherMut[Int, OptionMut[TTC_11_8_Groups]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            resVal.isDefined && old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.get.size(old(codec).base.bitStream.bitIndex)
    }
}



@ghost @pure
def TC_11_8_TimeShiftTheScheduledActivitiesIdentifiedByAFilter_groups_Optional_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[Int, OptionMut[TTC_11_8_Groups]]) = {
    require(codec.base.bitStream.validate_offset_bits(131072L))
    val cpy = snapshot(codec)
    val res = TC_11_8_TimeShiftTheScheduledActivitiesIdentifiedByAFilter_groups_Optional_ACN_Decode(cpy)
    (cpy, res)
}

