/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TTM_3_10_SuperCommutatedParameterSet --------------------------------------------*/


case class TTM_3_10_SuperCommutatedParameterSet_parameter_ID (nCount: Int, arr: Vector[TParameter_ID])
{
    require(this.arr.size <= 255 && 0 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854767647L))
        TTM_3_10_SuperCommutatedParameterSet_parameter_ID.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 8160L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767647L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767647L))
        TTM_3_10_SuperCommutatedParameterSet_parameter_ID.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767647L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767647L))
        require((offset % 8L) == (otherOffset % 8L))
        TTM_3_10_SuperCommutatedParameterSet_parameter_ID.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767647L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767647L))
        require((offset % 16L) == (otherOffset % 16L))
        TTM_3_10_SuperCommutatedParameterSet_parameter_ID.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767647L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767647L))
        require((offset % 32L) == (otherOffset % 32L))
        TTM_3_10_SuperCommutatedParameterSet_parameter_ID.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TTM_3_10_SuperCommutatedParameterSet_parameter_ID {
    def sizeRange(ls: Vector[TParameter_ID], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 255))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = 32L
            assert(elemSize == 32L)
            elemSize + TTM_3_10_SuperCommutatedParameterSet_parameter_ID.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 32L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TParameter_ID], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 255))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 32L
            val elemSizeOtherOff = 32L
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            TTM_3_10_SuperCommutatedParameterSet_parameter_ID.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTM_3_10_SuperCommutatedParameterSet_parameter_ID.sizeRange(ls, offset, from, to) == TTM_3_10_SuperCommutatedParameterSet_parameter_ID.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TParameter_ID], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 255))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 32L
            val elemSizeOtherOff = 32L
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            TTM_3_10_SuperCommutatedParameterSet_parameter_ID.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTM_3_10_SuperCommutatedParameterSet_parameter_ID.sizeRange(ls, offset, from, to) == TTM_3_10_SuperCommutatedParameterSet_parameter_ID.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TParameter_ID], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 255))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 32L
            val elemSizeOtherOff = 32L
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            TTM_3_10_SuperCommutatedParameterSet_parameter_ID.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTM_3_10_SuperCommutatedParameterSet_parameter_ID.sizeRange(ls, offset, from, to) == TTM_3_10_SuperCommutatedParameterSet_parameter_ID.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TParameter_ID], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 255))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 32L
            val elemSizeOtherOff = 32L
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            TTM_3_10_SuperCommutatedParameterSet_parameter_ID.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTM_3_10_SuperCommutatedParameterSet_parameter_ID.sizeRange(ls, offset, from, to) == TTM_3_10_SuperCommutatedParameterSet_parameter_ID.sizeRange(ls, otherOffset, from, to)
    }
}

case class TTM_3_10_SuperCommutatedParameterSet (
    superCommutatedSampleRepetitionNumber: TPUSC_UINT32, 
    parameter_ID: TTM_3_10_SuperCommutatedParameterSet_parameter_ID
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854767583L))
        val size_0 = 32L
        val size_1 = 32L
        val size_2 = this.parameter_ID.size(offset + size_0 + size_1)
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 8224L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767583L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767583L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.parameter_ID.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.parameter_ID.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.parameter_ID.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767583L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767583L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.parameter_ID.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.parameter_ID.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.parameter_ID.sizeLemmaNextByte(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767583L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767583L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.parameter_ID.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.parameter_ID.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.parameter_ID.sizeLemmaNextWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767583L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767583L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.parameter_ID.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.parameter_ID.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.parameter_ID.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TM_3_10_SUPERCOMMUTATEDPARAMETERSET_PARAMETER_ID: Int = 237 /*(SIZE(0 .. maxTM-3-10-Parameter-ID-Count)) */
@inline @cCode.inline val ERR_TM_3_10_SUPERCOMMUTATEDPARAMETERSET_PARAMETER_ID_ELM_2: Int = 232 /* */

@inline @cCode.inline val ERR_TM_3_10_SUPERCOMMUTATEDPARAMETERSET: Int = 242 /* */
@inline @cCode.inline val ERR_TM_3_10_SUPERCOMMUTATEDPARAMETERSET_SUPERCOMMUTATEDSAMPLEREPETITIONNUMBER_2: Int = 220 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TM_3_10_SUPERCOMMUTATEDPARAMETERSET: Int = 245 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_3_10_SUPERCOMMUTATEDPARAMETERSET_SUPERCOMMUTATEDSAMPLEREPETITIONNUMBER_2: Int = 223 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_3_10_SUPERCOMMUTATEDPARAMETERSET_N2_UNINITIALIZED: Int = 246 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_3_10_SUPERCOMMUTATEDPARAMETERSET_N2: Int = 225 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_3_10_SUPERCOMMUTATEDPARAMETERSET_PARAMETER_ID: Int = 240 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_3_10_SUPERCOMMUTATEDPARAMETERSET_PARAMETER_ID_ELM_2: Int = 235 /*  */
@inline @cCode.inline val TTM_3_10_SuperCommutatedParameterSet_REQUIRED_BYTES_FOR_ACN_ENCODING = 1028
@inline @cCode.inline val TTM_3_10_SuperCommutatedParameterSet_REQUIRED_BITS_FOR_ACN_ENCODING = 8224

@inline @cCode.inline val ERR_ACN_DECODE_TM_3_10_SUPERCOMMUTATEDPARAMETERSET: Int = 247 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_3_10_SUPERCOMMUTATEDPARAMETERSET_SUPERCOMMUTATEDSAMPLEREPETITIONNUMBER_2: Int = 224 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_3_10_SUPERCOMMUTATEDPARAMETERSET_N2: Int = 226 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_3_10_SUPERCOMMUTATEDPARAMETERSET_PARAMETER_ID: Int = 241 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_3_10_SUPERCOMMUTATEDPARAMETERSET_PARAMETER_ID_ELM_2: Int = 236 /*  */
/*-- TTM_3_10_HousekeepingParameterReportStructureReport --------------------------------------------*/


case class TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID (nCount: Int, arr: Vector[TParameter_ID])
{
    require(this.arr.size <= 255 && 0 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854767647L))
        TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 8160L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767647L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767647L))
        TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767647L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767647L))
        require((offset % 8L) == (otherOffset % 8L))
        TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767647L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767647L))
        require((offset % 16L) == (otherOffset % 16L))
        TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767647L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767647L))
        require((offset % 32L) == (otherOffset % 32L))
        TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID {
    def sizeRange(ls: Vector[TParameter_ID], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 255))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = 32L
            assert(elemSize == 32L)
            elemSize + TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 32L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TParameter_ID], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 255))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 32L
            val elemSizeOtherOff = 32L
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID.sizeRange(ls, offset, from, to) == TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TParameter_ID], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 255))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 32L
            val elemSizeOtherOff = 32L
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID.sizeRange(ls, offset, from, to) == TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TParameter_ID], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 255))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 32L
            val elemSizeOtherOff = 32L
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID.sizeRange(ls, offset, from, to) == TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TParameter_ID], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 255))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 32L
            val elemSizeOtherOff = 32L
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID.sizeRange(ls, offset, from, to) == TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID.sizeRange(ls, otherOffset, from, to)
    }
}


case class TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet (nCount: Int, arr: Vector[TTM_3_10_SuperCommutatedParameterSet])
{
    require(this.arr.size <= 127 && 0 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036853731359L))
        TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 1044448L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036853731359L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036853731359L))
        TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036853731359L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036853731359L))
        require((offset % 8L) == (otherOffset % 8L))
        TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036853731359L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036853731359L))
        require((offset % 16L) == (otherOffset % 16L))
        TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036853731359L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036853731359L))
        require((offset % 32L) == (otherOffset % 32L))
        TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet {
    def sizeRange(ls: Vector[TTM_3_10_SuperCommutatedParameterSet], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 8224L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(0L <= elemSize && elemSize <= 8224L)
            elemSize + TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 8224L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TTM_3_10_SuperCommutatedParameterSet], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 8224L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 8224L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 8224L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 8224L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet.sizeRange(ls, offset, from, to) == TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TTM_3_10_SuperCommutatedParameterSet], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 8224L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 8224L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 8224L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 8224L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet.sizeRange(ls, offset, from, to) == TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TTM_3_10_SuperCommutatedParameterSet], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 8224L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 8224L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 8224L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 8224L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet.sizeRange(ls, offset, from, to) == TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TTM_3_10_SuperCommutatedParameterSet], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 8224L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 8224L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 8224L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 8224L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet.sizeRange(ls, offset, from, to) == TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet.sizeRange(ls, otherOffset, from, to)
    }
}

case class TTM_3_10_HousekeepingParameterReportStructureReport (
    housekeepingParameterReportStructure_ID: THousekeepingParameterReportStructure_ID, 
    periodicGenerationActionStatus: OptionMut[TPeriodicGenerationActionStatus], 
    collectionInterval: TPUSC_UINT32, 
    parameter_ID: TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID, 
    superCommutatedParameterSet: TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet
) {
    require(this.periodicGenerationActionStatus.isDefined)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036853723070L))
        val size_0 = 32L
        val size_1 = this.periodicGenerationActionStatus match {
            case SomeMut(v) =>
                1L
            case NoneMut() =>
                0L
        }
        val size_2 = 32L
        val size_3 = 32L
        val size_4 = this.parameter_ID.size(offset + size_0 + size_1 + size_2 + size_3)
        val size_5 = 32L
        val size_6 = this.superCommutatedParameterSet.size(offset + size_0 + size_1 + size_2 + size_3 + size_4 + size_5)
        size_0 + size_1 + size_2 + size_3 + size_4 + size_5 + size_6
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 1052737L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036853723070L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036853723070L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.periodicGenerationActionStatus match {
            case SomeMut(v) =>
                1L
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.periodicGenerationActionStatus match {
            case SomeMut(v) =>
                1L
            case NoneMut() =>
                0L
        }
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = 32L
        val size_3_otherOffset = 32L
        val size_4_offset = this.parameter_ID.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset)
        val size_4_otherOffset = this.parameter_ID.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset)
        this.parameter_ID.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset)
        val size_5_offset = 32L
        val size_5_otherOffset = 32L
        val size_6_offset = this.superCommutatedParameterSet.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset + size_5_offset)
        val size_6_otherOffset = this.superCommutatedParameterSet.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset + size_5_otherOffset)
        this.superCommutatedParameterSet.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset + size_5_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset + size_5_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036853723070L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036853723070L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.periodicGenerationActionStatus match {
            case SomeMut(v) =>
                1L
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.periodicGenerationActionStatus match {
            case SomeMut(v) =>
                1L
            case NoneMut() =>
                0L
        }
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = 32L
        val size_3_otherOffset = 32L
        val size_4_offset = this.parameter_ID.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset)
        val size_4_otherOffset = this.parameter_ID.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset)
        this.parameter_ID.sizeLemmaNextByte(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset)
        val size_5_offset = 32L
        val size_5_otherOffset = 32L
        val size_6_offset = this.superCommutatedParameterSet.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset + size_5_offset)
        val size_6_otherOffset = this.superCommutatedParameterSet.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset + size_5_otherOffset)
        this.superCommutatedParameterSet.sizeLemmaNextByte(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset + size_5_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset + size_5_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036853723070L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036853723070L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.periodicGenerationActionStatus match {
            case SomeMut(v) =>
                1L
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.periodicGenerationActionStatus match {
            case SomeMut(v) =>
                1L
            case NoneMut() =>
                0L
        }
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = 32L
        val size_3_otherOffset = 32L
        val size_4_offset = this.parameter_ID.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset)
        val size_4_otherOffset = this.parameter_ID.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset)
        this.parameter_ID.sizeLemmaNextWord(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset)
        val size_5_offset = 32L
        val size_5_otherOffset = 32L
        val size_6_offset = this.superCommutatedParameterSet.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset + size_5_offset)
        val size_6_otherOffset = this.superCommutatedParameterSet.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset + size_5_otherOffset)
        this.superCommutatedParameterSet.sizeLemmaNextWord(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset + size_5_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset + size_5_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036853723070L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036853723070L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.periodicGenerationActionStatus match {
            case SomeMut(v) =>
                1L
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.periodicGenerationActionStatus match {
            case SomeMut(v) =>
                1L
            case NoneMut() =>
                0L
        }
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = 32L
        val size_3_otherOffset = 32L
        val size_4_offset = this.parameter_ID.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset)
        val size_4_otherOffset = this.parameter_ID.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset)
        this.parameter_ID.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset)
        val size_5_offset = 32L
        val size_5_otherOffset = 32L
        val size_6_offset = this.superCommutatedParameterSet.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset + size_5_offset)
        val size_6_otherOffset = this.superCommutatedParameterSet.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset + size_5_otherOffset)
        this.superCommutatedParameterSet.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset + size_5_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset + size_5_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TM_3_10_HOUSEKEEPINGPARAMETERREPORTSTRUCTUREREPORT_PARAMETER_ID: Int = 159 /*(SIZE(0 .. maxTM-3-10-Parameter-ID-Count)) */
@inline @cCode.inline val ERR_TM_3_10_HOUSEKEEPINGPARAMETERREPORTSTRUCTUREREPORT_PARAMETER_ID_ELM_2: Int = 154 /* */

@inline @cCode.inline val ERR_TM_3_10_HOUSEKEEPINGPARAMETERREPORTSTRUCTUREREPORT_SUPERCOMMUTATEDPARAMETERSET: Int = 203 /*(SIZE(0 .. maxTM-3-10-SuperComutatedParameterSetCount)) */
@inline @cCode.inline val ERR_TM_3_10_HOUSEKEEPINGPARAMETERREPORTSTRUCTUREREPORT_SUPERCOMMUTATEDPARAMETERSET_ELM_2: Int = 198 /* */

@inline @cCode.inline val ERR_TM_3_10_HOUSEKEEPINGPARAMETERREPORTSTRUCTUREREPORT: Int = 208 /*(WITH COMPONENTS {periodicGenerationActionStatus PRESENT}) */
@inline @cCode.inline val ERR_TM_3_10_HOUSEKEEPINGPARAMETERREPORTSTRUCTUREREPORT_HOUSEKEEPINGPARAMETERREPORTSTRUCTURE_ID_2: Int = 117 /* */
@inline @cCode.inline val ERR_TM_3_10_HOUSEKEEPINGPARAMETERREPORTSTRUCTUREREPORT_PERIODICGENERATIONACTIONSTATUS_2: Int = 127 /* */
@inline @cCode.inline val ERR_TM_3_10_HOUSEKEEPINGPARAMETERREPORTSTRUCTUREREPORT_COLLECTIONINTERVAL_2_2: Int = 142 /* */

 
 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TM_3_10_HOUSEKEEPINGPARAMETERREPORTSTRUCTUREREPORT: Int = 211 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_3_10_HOUSEKEEPINGPARAMETERREPORTSTRUCTUREREPORT_HOUSEKEEPINGPARAMETERREPORTSTRUCTURE_ID_2: Int = 120 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_3_10_HOUSEKEEPINGPARAMETERREPORTSTRUCTUREREPORT_PERIODICGENERATIONACTIONSTATUS_2: Int = 130 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_3_10_HOUSEKEEPINGPARAMETERREPORTSTRUCTUREREPORT_COLLECTIONINTERVAL_2_2: Int = 145 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_3_10_HOUSEKEEPINGPARAMETERREPORTSTRUCTUREREPORT_N1_UNINITIALIZED: Int = 212 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_3_10_HOUSEKEEPINGPARAMETERREPORTSTRUCTUREREPORT_N1: Int = 147 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_3_10_HOUSEKEEPINGPARAMETERREPORTSTRUCTUREREPORT_PARAMETER_ID: Int = 162 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_3_10_HOUSEKEEPINGPARAMETERREPORTSTRUCTUREREPORT_PARAMETER_ID_ELM_2: Int = 157 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_3_10_HOUSEKEEPINGPARAMETERREPORTSTRUCTUREREPORT_NFA_UNINITIALIZED: Int = 213 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_3_10_HOUSEKEEPINGPARAMETERREPORTSTRUCTUREREPORT_NFA: Int = 164 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_3_10_HOUSEKEEPINGPARAMETERREPORTSTRUCTUREREPORT_SUPERCOMMUTATEDPARAMETERSET: Int = 206 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_3_10_HOUSEKEEPINGPARAMETERREPORTSTRUCTUREREPORT_SUPERCOMMUTATEDPARAMETERSET_ELM_2: Int = 201 /*  */
@inline @cCode.inline val TTM_3_10_HousekeepingParameterReportStructureReport_REQUIRED_BYTES_FOR_ACN_ENCODING = 131593
@inline @cCode.inline val TTM_3_10_HousekeepingParameterReportStructureReport_REQUIRED_BITS_FOR_ACN_ENCODING = 1052737

@inline @cCode.inline val ERR_ACN_DECODE_TM_3_10_HOUSEKEEPINGPARAMETERREPORTSTRUCTUREREPORT: Int = 214 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_3_10_HOUSEKEEPINGPARAMETERREPORTSTRUCTUREREPORT_HOUSEKEEPINGPARAMETERREPORTSTRUCTURE_ID_2: Int = 121 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_3_10_HOUSEKEEPINGPARAMETERREPORTSTRUCTUREREPORT_PERIODICGENERATIONACTIONSTATUS_2: Int = 131 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_3_10_HOUSEKEEPINGPARAMETERREPORTSTRUCTUREREPORT_COLLECTIONINTERVAL_2_2: Int = 146 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_3_10_HOUSEKEEPINGPARAMETERREPORTSTRUCTUREREPORT_N1: Int = 148 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_3_10_HOUSEKEEPINGPARAMETERREPORTSTRUCTUREREPORT_PARAMETER_ID: Int = 163 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_3_10_HOUSEKEEPINGPARAMETERREPORTSTRUCTUREREPORT_PARAMETER_ID_ELM_2: Int = 158 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_3_10_HOUSEKEEPINGPARAMETERREPORTSTRUCTUREREPORT_NFA: Int = 165 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_3_10_HOUSEKEEPINGPARAMETERREPORTSTRUCTUREREPORT_SUPERCOMMUTATEDPARAMETERSET: Int = 207 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_3_10_HOUSEKEEPINGPARAMETERREPORTSTRUCTUREREPORT_SUPERCOMMUTATEDPARAMETERSET_ELM_2: Int = 202 /*  */

// @inline @cCode.inline val maxTM_3_10_Parameter_ID_Count: Int = 255 // defined in body
// @inline @cCode.inline val maxTM_3_10_SuperComutatedParameterSetCount: Int = 127 // defined in body

