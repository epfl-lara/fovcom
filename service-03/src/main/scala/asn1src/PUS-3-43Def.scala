/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TParameterReportingDefiniton --------------------------------------------*/

case class TParameterReportingDefiniton (
    parameterReportStructure_ID: TParameterReportStructure_ID
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775770L))
        val size_0 = 5L
        val size_1 = this.parameterReportStructure_ID match {
            case TParameterReportStructure_ID.housekeepingParameterReportStructure_ID_PRESENT(housekeepingParameterReportStructure_ID) =>
                32L
            case TParameterReportStructure_ID.diagnosticParameterReportStructure_ID_PRESENT(diagnosticParameterReportStructure_ID) =>
                32L
        }
        size_0 + size_1
    }.ensuring { (res: Long) => 
        res == 37L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775770L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775770L))
        val size_0_offset = 5L
        val size_0_otherOffset = 5L
        val size_1_offset = this.parameterReportStructure_ID match {
            case TParameterReportStructure_ID.housekeepingParameterReportStructure_ID_PRESENT(housekeepingParameterReportStructure_ID) =>
                32L
            case TParameterReportStructure_ID.diagnosticParameterReportStructure_ID_PRESENT(diagnosticParameterReportStructure_ID) =>
                32L
        }
        val size_1_otherOffset = this.parameterReportStructure_ID match {
            case TParameterReportStructure_ID.housekeepingParameterReportStructure_ID_PRESENT(housekeepingParameterReportStructure_ID) =>
                32L
            case TParameterReportStructure_ID.diagnosticParameterReportStructure_ID_PRESENT(diagnosticParameterReportStructure_ID) =>
                32L
        }
        this.parameterReportStructure_ID.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775770L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775770L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 5L
        val size_0_otherOffset = 5L
        val size_1_offset = this.parameterReportStructure_ID match {
            case TParameterReportStructure_ID.housekeepingParameterReportStructure_ID_PRESENT(housekeepingParameterReportStructure_ID) =>
                32L
            case TParameterReportStructure_ID.diagnosticParameterReportStructure_ID_PRESENT(diagnosticParameterReportStructure_ID) =>
                32L
        }
        val size_1_otherOffset = this.parameterReportStructure_ID match {
            case TParameterReportStructure_ID.housekeepingParameterReportStructure_ID_PRESENT(housekeepingParameterReportStructure_ID) =>
                32L
            case TParameterReportStructure_ID.diagnosticParameterReportStructure_ID_PRESENT(diagnosticParameterReportStructure_ID) =>
                32L
        }
        this.parameterReportStructure_ID.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775770L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775770L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 5L
        val size_0_otherOffset = 5L
        val size_1_offset = this.parameterReportStructure_ID match {
            case TParameterReportStructure_ID.housekeepingParameterReportStructure_ID_PRESENT(housekeepingParameterReportStructure_ID) =>
                32L
            case TParameterReportStructure_ID.diagnosticParameterReportStructure_ID_PRESENT(diagnosticParameterReportStructure_ID) =>
                32L
        }
        val size_1_otherOffset = this.parameterReportStructure_ID match {
            case TParameterReportStructure_ID.housekeepingParameterReportStructure_ID_PRESENT(housekeepingParameterReportStructure_ID) =>
                32L
            case TParameterReportStructure_ID.diagnosticParameterReportStructure_ID_PRESENT(diagnosticParameterReportStructure_ID) =>
                32L
        }
        this.parameterReportStructure_ID.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775770L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775770L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 5L
        val size_0_otherOffset = 5L
        val size_1_offset = this.parameterReportStructure_ID match {
            case TParameterReportStructure_ID.housekeepingParameterReportStructure_ID_PRESENT(housekeepingParameterReportStructure_ID) =>
                32L
            case TParameterReportStructure_ID.diagnosticParameterReportStructure_ID_PRESENT(diagnosticParameterReportStructure_ID) =>
                32L
        }
        val size_1_otherOffset = this.parameterReportStructure_ID match {
            case TParameterReportStructure_ID.housekeepingParameterReportStructure_ID_PRESENT(housekeepingParameterReportStructure_ID) =>
                32L
            case TParameterReportStructure_ID.diagnosticParameterReportStructure_ID_PRESENT(diagnosticParameterReportStructure_ID) =>
                32L
        }
        this.parameterReportStructure_ID.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_PARAMETERREPORTINGDEFINITON: Int = 2593 /* */
@inline @cCode.inline val ERR_PARAMETERREPORTINGDEFINITON_PARAMETERREPORTSTRUCTURE_ID_2: Int = 2590 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PARAMETERREPORTINGDEFINITON: Int = 2596 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PARAMETERREPORTINGDEFINITON_PARAMETERREPORTSTRUCTURETYPE_UNINITIALIZED: Int = 2597 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PARAMETERREPORTINGDEFINITON_PARAMETERREPORTSTRUCTURETYPE: Int = 2563 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PARAMETERREPORTINGDEFINITON_PARAMETERREPORTSTRUCTURE_ID: Int = 2588 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PARAMETERREPORTINGDEFINITON_PARAMETERREPORTSTRUCTURE_ID_HOUSEKEEPINGPARAMETERREPORTSTRUCTURE_ID_2: Int = 2573 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PARAMETERREPORTINGDEFINITON_PARAMETERREPORTSTRUCTURE_ID_DIAGNOSTICPARAMETERREPORTSTRUCTURE_ID_2: Int = 2583 /*  */
@inline @cCode.inline val TParameterReportingDefiniton_REQUIRED_BYTES_FOR_ACN_ENCODING = 5
@inline @cCode.inline val TParameterReportingDefiniton_REQUIRED_BITS_FOR_ACN_ENCODING = 37

@inline @cCode.inline val ERR_ACN_DECODE_PARAMETERREPORTINGDEFINITON: Int = 2598 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PARAMETERREPORTINGDEFINITON_PARAMETERREPORTSTRUCTURETYPE: Int = 2564 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PARAMETERREPORTINGDEFINITON_PARAMETERREPORTSTRUCTURE_ID: Int = 2589 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PARAMETERREPORTINGDEFINITON_PARAMETERREPORTSTRUCTURE_ID_HOUSEKEEPINGPARAMETERREPORTSTRUCTURE_ID_2: Int = 2574 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PARAMETERREPORTINGDEFINITON_PARAMETERREPORTSTRUCTURE_ID_DIAGNOSTICPARAMETERREPORTSTRUCTURE_ID_2: Int = 2584 /*  */
/*-- TTC_3_43_ApidParameterReporingDefinitions --------------------------------------------*/


case class TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions (nCount: Int, arr: Vector[TParameterReportingDefiniton])
{
    require(this.arr.size <= 127 && 1 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854771108L))
        TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 4699L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771108L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771108L))
        TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771108L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771108L))
        require((offset % 8L) == (otherOffset % 8L))
        TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771108L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771108L))
        require((offset % 16L) == (otherOffset % 16L))
        TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771108L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771108L))
        require((offset % 32L) == (otherOffset % 32L))
        TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions {
    def sizeRange(ls: Vector[TParameterReportingDefiniton], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 37L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(elemSize == 37L)
            elemSize + TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 37L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TParameterReportingDefiniton], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 37L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 37L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 37L)
            assert(elemSizeOtherOff == 37L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions.sizeRange(ls, offset, from, to) == TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TParameterReportingDefiniton], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 37L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 37L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 37L)
            assert(elemSizeOtherOff == 37L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions.sizeRange(ls, offset, from, to) == TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TParameterReportingDefiniton], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 37L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 37L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 37L)
            assert(elemSizeOtherOff == 37L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions.sizeRange(ls, offset, from, to) == TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TParameterReportingDefiniton], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 37L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 37L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 37L)
            assert(elemSizeOtherOff == 37L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions.sizeRange(ls, offset, from, to) == TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions.sizeRange(ls, otherOffset, from, to)
    }
}

case class TTC_3_43_ApidParameterReporingDefinitions (
    applicationProcess_ID: TApplicationProcess_ID, 
    parameterReportingDefinitions: TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854771065L))
        val size_0 = 11L
        val size_1 = 32L
        val size_2 = this.parameterReportingDefinitions.size(offset + size_0 + size_1)
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 4742L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771065L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771065L))
        val size_0_offset = 11L
        val size_0_otherOffset = 11L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.parameterReportingDefinitions.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.parameterReportingDefinitions.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.parameterReportingDefinitions.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771065L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771065L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 11L
        val size_0_otherOffset = 11L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.parameterReportingDefinitions.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.parameterReportingDefinitions.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.parameterReportingDefinitions.sizeLemmaNextByte(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771065L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771065L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 11L
        val size_0_otherOffset = 11L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.parameterReportingDefinitions.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.parameterReportingDefinitions.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.parameterReportingDefinitions.sizeLemmaNextWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771065L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771065L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 11L
        val size_0_otherOffset = 11L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.parameterReportingDefinitions.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.parameterReportingDefinitions.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.parameterReportingDefinitions.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_3_43_APIDPARAMETERREPORINGDEFINITIONS_PARAMETERREPORTINGDEFINITIONS: Int = 2552 /*(SIZE(1 .. maxTC-3-43-ParameterReportingDefinitionCount)) */
@inline @cCode.inline val ERR_TC_3_43_APIDPARAMETERREPORINGDEFINITIONS_PARAMETERREPORTINGDEFINITIONS_ELM_2: Int = 2547 /* */

@inline @cCode.inline val ERR_TC_3_43_APIDPARAMETERREPORINGDEFINITIONS: Int = 2557 /* */
@inline @cCode.inline val ERR_TC_3_43_APIDPARAMETERREPORINGDEFINITIONS_APPLICATIONPROCESS_ID_2: Int = 2505 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_43_APIDPARAMETERREPORINGDEFINITIONS: Int = 2560 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_43_APIDPARAMETERREPORINGDEFINITIONS_APPLICATIONPROCESS_ID_2: Int = 2508 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_43_APIDPARAMETERREPORINGDEFINITIONS_N2_UNINITIALIZED: Int = 2561 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_43_APIDPARAMETERREPORINGDEFINITIONS_N2: Int = 2510 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_43_APIDPARAMETERREPORINGDEFINITIONS_PARAMETERREPORTINGDEFINITIONS: Int = 2555 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_43_APIDPARAMETERREPORINGDEFINITIONS_PARAMETERREPORTINGDEFINITIONS_ELM_2: Int = 2550 /*  */
@inline @cCode.inline val TTC_3_43_ApidParameterReporingDefinitions_REQUIRED_BYTES_FOR_ACN_ENCODING = 593
@inline @cCode.inline val TTC_3_43_ApidParameterReporingDefinitions_REQUIRED_BITS_FOR_ACN_ENCODING = 4742

@inline @cCode.inline val ERR_ACN_DECODE_TC_3_43_APIDPARAMETERREPORINGDEFINITIONS: Int = 2562 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_3_43_APIDPARAMETERREPORINGDEFINITIONS_APPLICATIONPROCESS_ID_2: Int = 2509 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_3_43_APIDPARAMETERREPORINGDEFINITIONS_N2: Int = 2511 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_3_43_APIDPARAMETERREPORINGDEFINITIONS_PARAMETERREPORTINGDEFINITIONS: Int = 2556 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_3_43_APIDPARAMETERREPORINGDEFINITIONS_PARAMETERREPORTINGDEFINITIONS_ELM_2: Int = 2551 /*  */
/*-- TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid --------------------------------------------*/


case class TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions (nCount: Int, arr: Vector[TTC_3_43_ApidParameterReporingDefinitions])
{
    require(this.arr.size <= 127 && 1 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854173573L))
        TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 602234L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854173573L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854173573L))
        TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854173573L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854173573L))
        require((offset % 8L) == (otherOffset % 8L))
        TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854173573L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854173573L))
        require((offset % 16L) == (otherOffset % 16L))
        TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854173573L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854173573L))
        require((offset % 32L) == (otherOffset % 32L))
        TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions {
    def sizeRange(ls: Vector[TTC_3_43_ApidParameterReporingDefinitions], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 4742L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(0L <= elemSize && elemSize <= 4742L)
            elemSize + TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 4742L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TTC_3_43_ApidParameterReporingDefinitions], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 4742L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 4742L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 4742L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 4742L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions.sizeRange(ls, offset, from, to) == TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TTC_3_43_ApidParameterReporingDefinitions], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 4742L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 4742L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 4742L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 4742L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions.sizeRange(ls, offset, from, to) == TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TTC_3_43_ApidParameterReporingDefinitions], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 4742L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 4742L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 4742L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 4742L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions.sizeRange(ls, offset, from, to) == TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TTC_3_43_ApidParameterReporingDefinitions], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 4742L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 4742L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 4742L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 4742L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions.sizeRange(ls, offset, from, to) == TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions.sizeRange(ls, otherOffset, from, to)
    }
}

case class TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid (
    parameterFunctionalReportingDefinition_ID: TParameterFunctionalReportingDefinition_ID, 
    apidParameterReportingDefinitions: TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854173509L))
        val size_0 = 32L
        val size_1 = 32L
        val size_2 = this.apidParameterReportingDefinitions.size(offset + size_0 + size_1)
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 602298L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854173509L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854173509L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.apidParameterReportingDefinitions.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.apidParameterReportingDefinitions.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.apidParameterReportingDefinitions.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854173509L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854173509L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.apidParameterReportingDefinitions.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.apidParameterReportingDefinitions.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.apidParameterReportingDefinitions.sizeLemmaNextByte(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854173509L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854173509L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.apidParameterReportingDefinitions.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.apidParameterReportingDefinitions.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.apidParameterReportingDefinitions.sizeLemmaNextWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854173509L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854173509L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.apidParameterReportingDefinitions.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.apidParameterReportingDefinitions.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.apidParameterReportingDefinitions.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_3_43_REMOVEPARAMETERREPORTDEFINITIONSFROMAPARAMETERFUNCTIONALREPORTINGDEFINITIONMULTIPLEAPID_APIDPARAMETERREPORTINGDEFINITIONS: Int = 2426 /*(SIZE(1 .. maxTC-3-43-ApidParameterReportingDefinitionCount)) */
@inline @cCode.inline val ERR_TC_3_43_REMOVEPARAMETERREPORTDEFINITIONSFROMAPARAMETERFUNCTIONALREPORTINGDEFINITIONMULTIPLEAPID_APIDPARAMETERREPORTINGDEFINITIONS_ELM_2: Int = 2421 /* */

@inline @cCode.inline val ERR_TC_3_43_REMOVEPARAMETERREPORTDEFINITIONSFROMAPARAMETERFUNCTIONALREPORTINGDEFINITIONMULTIPLEAPID: Int = 2431 /* */
@inline @cCode.inline val ERR_TC_3_43_REMOVEPARAMETERREPORTDEFINITIONSFROMAPARAMETERFUNCTIONALREPORTINGDEFINITIONMULTIPLEAPID_PARAMETERFUNCTIONALREPORTINGDEFINITION_ID_2: Int = 2352 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_43_REMOVEPARAMETERREPORTDEFINITIONSFROMAPARAMETERFUNCTIONALREPORTINGDEFINITIONMULTIPLEAPID: Int = 2434 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_43_REMOVEPARAMETERREPORTDEFINITIONSFROMAPARAMETERFUNCTIONALREPORTINGDEFINITIONMULTIPLEAPID_PARAMETERFUNCTIONALREPORTINGDEFINITION_ID_2: Int = 2355 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_43_REMOVEPARAMETERREPORTDEFINITIONSFROMAPARAMETERFUNCTIONALREPORTINGDEFINITIONMULTIPLEAPID_N1_UNINITIALIZED: Int = 2435 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_43_REMOVEPARAMETERREPORTDEFINITIONSFROMAPARAMETERFUNCTIONALREPORTINGDEFINITIONMULTIPLEAPID_N1: Int = 2357 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_43_REMOVEPARAMETERREPORTDEFINITIONSFROMAPARAMETERFUNCTIONALREPORTINGDEFINITIONMULTIPLEAPID_APIDPARAMETERREPORTINGDEFINITIONS: Int = 2429 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_43_REMOVEPARAMETERREPORTDEFINITIONSFROMAPARAMETERFUNCTIONALREPORTINGDEFINITIONMULTIPLEAPID_APIDPARAMETERREPORTINGDEFINITIONS_ELM_2: Int = 2424 /*  */
@inline @cCode.inline val TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_REQUIRED_BYTES_FOR_ACN_ENCODING = 75288
@inline @cCode.inline val TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_REQUIRED_BITS_FOR_ACN_ENCODING = 602298

@inline @cCode.inline val ERR_ACN_DECODE_TC_3_43_REMOVEPARAMETERREPORTDEFINITIONSFROMAPARAMETERFUNCTIONALREPORTINGDEFINITIONMULTIPLEAPID: Int = 2436 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_3_43_REMOVEPARAMETERREPORTDEFINITIONSFROMAPARAMETERFUNCTIONALREPORTINGDEFINITIONMULTIPLEAPID_PARAMETERFUNCTIONALREPORTINGDEFINITION_ID_2: Int = 2356 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_3_43_REMOVEPARAMETERREPORTDEFINITIONSFROMAPARAMETERFUNCTIONALREPORTINGDEFINITIONMULTIPLEAPID_N1: Int = 2358 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_3_43_REMOVEPARAMETERREPORTDEFINITIONSFROMAPARAMETERFUNCTIONALREPORTINGDEFINITIONMULTIPLEAPID_APIDPARAMETERREPORTINGDEFINITIONS: Int = 2430 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_3_43_REMOVEPARAMETERREPORTDEFINITIONSFROMAPARAMETERFUNCTIONALREPORTINGDEFINITIONMULTIPLEAPID_APIDPARAMETERREPORTINGDEFINITIONS_ELM_2: Int = 2425 /*  */
/*-- TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition --------------------------------------------*/


case class TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions (nCount: Int, arr: Vector[TParameterReportingDefiniton])
{
    require(this.arr.size <= 127 && 1 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854771108L))
        TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 4699L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771108L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771108L))
        TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771108L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771108L))
        require((offset % 8L) == (otherOffset % 8L))
        TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771108L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771108L))
        require((offset % 16L) == (otherOffset % 16L))
        TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771108L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771108L))
        require((offset % 32L) == (otherOffset % 32L))
        TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions {
    def sizeRange(ls: Vector[TParameterReportingDefiniton], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 37L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(elemSize == 37L)
            elemSize + TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 37L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TParameterReportingDefiniton], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 37L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 37L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 37L)
            assert(elemSizeOtherOff == 37L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions.sizeRange(ls, offset, from, to) == TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TParameterReportingDefiniton], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 37L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 37L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 37L)
            assert(elemSizeOtherOff == 37L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions.sizeRange(ls, offset, from, to) == TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TParameterReportingDefiniton], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 37L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 37L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 37L)
            assert(elemSizeOtherOff == 37L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions.sizeRange(ls, offset, from, to) == TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TParameterReportingDefiniton], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 37L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 37L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 37L)
            assert(elemSizeOtherOff == 37L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions.sizeRange(ls, offset, from, to) == TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions.sizeRange(ls, otherOffset, from, to)
    }
}

case class TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition (
    parameterFunctionalReportingDefinitions_ID: TParameterFunctionalReportingDefinition_ID, 
    parameterReportingDefinitions: TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854771044L))
        val size_0 = 32L
        val size_1 = 32L
        val size_2 = this.parameterReportingDefinitions.size(offset + size_0 + size_1)
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 4763L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771044L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771044L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.parameterReportingDefinitions.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.parameterReportingDefinitions.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.parameterReportingDefinitions.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771044L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771044L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.parameterReportingDefinitions.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.parameterReportingDefinitions.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.parameterReportingDefinitions.sizeLemmaNextByte(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771044L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771044L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.parameterReportingDefinitions.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.parameterReportingDefinitions.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.parameterReportingDefinitions.sizeLemmaNextWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771044L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771044L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.parameterReportingDefinitions.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.parameterReportingDefinitions.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.parameterReportingDefinitions.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_3_43_REMOVEPARAMETERREPORTDEFINITIONSFROMAPARAMETERFUNCTIONALREPORTINGDEFINITION_PARAMETERREPORTINGDEFINITIONS: Int = 2489 /*(SIZE(1 .. maxTC-3-43-ParameterReportingDefinitionCount)) */
@inline @cCode.inline val ERR_TC_3_43_REMOVEPARAMETERREPORTDEFINITIONSFROMAPARAMETERFUNCTIONALREPORTINGDEFINITION_PARAMETERREPORTINGDEFINITIONS_ELM_2: Int = 2484 /* */

@inline @cCode.inline val ERR_TC_3_43_REMOVEPARAMETERREPORTDEFINITIONSFROMAPARAMETERFUNCTIONALREPORTINGDEFINITION: Int = 2494 /* */
@inline @cCode.inline val ERR_TC_3_43_REMOVEPARAMETERREPORTDEFINITIONSFROMAPARAMETERFUNCTIONALREPORTINGDEFINITION_PARAMETERFUNCTIONALREPORTINGDEFINITIONS_ID_2: Int = 2442 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_43_REMOVEPARAMETERREPORTDEFINITIONSFROMAPARAMETERFUNCTIONALREPORTINGDEFINITION: Int = 2497 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_43_REMOVEPARAMETERREPORTDEFINITIONSFROMAPARAMETERFUNCTIONALREPORTINGDEFINITION_PARAMETERFUNCTIONALREPORTINGDEFINITIONS_ID_2: Int = 2445 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_43_REMOVEPARAMETERREPORTDEFINITIONSFROMAPARAMETERFUNCTIONALREPORTINGDEFINITION_N2_UNINITIALIZED: Int = 2498 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_43_REMOVEPARAMETERREPORTDEFINITIONSFROMAPARAMETERFUNCTIONALREPORTINGDEFINITION_N2: Int = 2447 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_43_REMOVEPARAMETERREPORTDEFINITIONSFROMAPARAMETERFUNCTIONALREPORTINGDEFINITION_PARAMETERREPORTINGDEFINITIONS: Int = 2492 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_43_REMOVEPARAMETERREPORTDEFINITIONSFROMAPARAMETERFUNCTIONALREPORTINGDEFINITION_PARAMETERREPORTINGDEFINITIONS_ELM_2: Int = 2487 /*  */
@inline @cCode.inline val TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_REQUIRED_BYTES_FOR_ACN_ENCODING = 596
@inline @cCode.inline val TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_REQUIRED_BITS_FOR_ACN_ENCODING = 4763

@inline @cCode.inline val ERR_ACN_DECODE_TC_3_43_REMOVEPARAMETERREPORTDEFINITIONSFROMAPARAMETERFUNCTIONALREPORTINGDEFINITION: Int = 2499 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_3_43_REMOVEPARAMETERREPORTDEFINITIONSFROMAPARAMETERFUNCTIONALREPORTINGDEFINITION_PARAMETERFUNCTIONALREPORTINGDEFINITIONS_ID_2: Int = 2446 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_3_43_REMOVEPARAMETERREPORTDEFINITIONSFROMAPARAMETERFUNCTIONALREPORTINGDEFINITION_N2: Int = 2448 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_3_43_REMOVEPARAMETERREPORTDEFINITIONSFROMAPARAMETERFUNCTIONALREPORTINGDEFINITION_PARAMETERREPORTINGDEFINITIONS: Int = 2493 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_3_43_REMOVEPARAMETERREPORTDEFINITIONSFROMAPARAMETERFUNCTIONALREPORTINGDEFINITION_PARAMETERREPORTINGDEFINITIONS_ELM_2: Int = 2488 /*  */

// @inline @cCode.inline val maxTC_3_43_ParameterReportingDefinitionCount: Int = 127 // defined in body
// @inline @cCode.inline val maxTC_3_43_ApidParameterReportingDefinitionCount: Int = 127 // defined in body

