/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

val maxTM_3_10_Parameter_ID_Count: Int = 255 // variables:188
val maxTM_3_10_SuperComutatedParameterSetCount: Int = 127 // variables:188

def TTM_3_10_SuperCommutatedParameterSet_parameter_ID_IsConstraintValid(pVal: TTM_3_10_SuperCommutatedParameterSet_parameter_ID): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = (pVal.nCount <= 255) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TParameter_ID_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TTM_3_10_SuperCommutatedParameterSet_IsConstraintValid(pVal: TTM_3_10_SuperCommutatedParameterSet): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TPUSC_UINT32_IsConstraintValid(pVal.superCommutatedSampleRepetitionNumber)
    if ret.isRight then
        ret = TTM_3_10_SuperCommutatedParameterSet_parameter_ID_IsConstraintValid(pVal.parameter_ID)
    ret
}

def TTM_3_10_SuperCommutatedParameterSet_parameter_ID_Initialize(): TTM_3_10_SuperCommutatedParameterSet_parameter_ID = TTM_3_10_SuperCommutatedParameterSet_parameter_ID(0, Vector.fill(255)(TParameter_ID.Tparam1))
def TTM_3_10_SuperCommutatedParameterSet_Initialize(): TTM_3_10_SuperCommutatedParameterSet = TTM_3_10_SuperCommutatedParameterSet(superCommutatedSampleRepetitionNumber = ULong.fromRaw(0L), parameter_ID = TTM_3_10_SuperCommutatedParameterSet_parameter_ID_Initialize())

@opaque @inlineOnce 
def TTM_3_10_SuperCommutatedParameterSet_ACN_Encode(pVal: TTM_3_10_SuperCommutatedParameterSet, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(8224L))
    var i1: Int = 0
    TTM_3_10_SuperCommutatedParameterSet_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode superCommutatedSampleRepetitionNumber */
    TPUSC_UINT32_ACN_Encode(pVal.superCommutatedSampleRepetitionNumber, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 8224L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    val TM_3_10_SuperCommutatedParameterSet_n2 = ULong.fromRaw(pVal.parameter_ID.nCount)
    if TM_3_10_SuperCommutatedParameterSet_n2 < ULong.fromRaw(0) || TM_3_10_SuperCommutatedParameterSet_n2 > ULong.fromRaw(255) then
        return Left(860)
    /* Encode TM_3_10_SuperCommutatedParameterSet_n2 */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(TM_3_10_SuperCommutatedParameterSet_n2)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(TM_3_10_SuperCommutatedParameterSet_n2)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 8192L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode parameter_ID */
    TM_3_10_SuperCommutatedParameterSet_parameter_ID_ACN_Encode(codec, pVal, TM_3_10_SuperCommutatedParameterSet_n2, pVal.parameter_ID) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 8224L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = pVal.parameter_ID.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 8224L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TM_3_10_SuperCommutatedParameterSet_parameter_ID_Encode_loop(codec: ACN, parameter_ID: TTM_3_10_SuperCommutatedParameterSet_parameter_ID, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= parameter_ID.nCount))
    require((0 <= parameter_ID.nCount) && (parameter_ID.nCount <= parameter_ID.arr.size) && (parameter_ID.arr.size <= 255))
    require(codec.base.bitStream.validate_offset_bits((32L * (parameter_ID.nCount - i1))))
    decreases(parameter_ID.nCount - i1)
    if (i1 == parameter_ID.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 32L * (parameter_ID.nCount - i1), 32L)
        }
        TParameter_ID_ACN_Encode(parameter_ID.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(32L * (i1 + 1) == 32L * i1 + 32L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 32L * (parameter_ID.nCount - i1), 32L)
            check(codec.base.bitStream.validate_offset_bits(32L * (parameter_ID.nCount - (i1 + 1))))
        }
        val res = TM_3_10_SuperCommutatedParameterSet_parameter_ID_Encode_loop(codec, parameter_ID, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TTM_3_10_SuperCommutatedParameterSet_parameter_ID.sizeRange(parameter_ID.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, parameter_ID.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + 32L)
                    assert(TTM_3_10_SuperCommutatedParameterSet_parameter_ID.sizeRange(parameter_ID.arr, codecSnap1.base.bitStream.bitIndex, i1, parameter_ID.nCount) == TTM_3_10_SuperCommutatedParameterSet_parameter_ID.sizeRange(parameter_ID.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, parameter_ID.nCount) + 32L)
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TTM_3_10_SuperCommutatedParameterSet_parameter_ID.sizeRange(parameter_ID.arr, codecSnap1.base.bitStream.bitIndex, i1, parameter_ID.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_3_10_SuperCommutatedParameterSet_parameter_ID.sizeRange(parameter_ID.arr, old(codec).base.bitStream.bitIndex, i1, parameter_ID.nCount)
    }
}



@opaque @inlineOnce
def TM_3_10_SuperCommutatedParameterSet_parameter_ID_ACN_Encode(codec: ACN, pVal: TTM_3_10_SuperCommutatedParameterSet, TM_3_10_SuperCommutatedParameterSet_n2: ULong, parameter_ID: TTM_3_10_SuperCommutatedParameterSet_parameter_ID): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(8160L))
    @ghost val oldCdc = snapshot(codec)
    TTM_3_10_SuperCommutatedParameterSet_parameter_ID_IsConstraintValid(parameter_ID) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    TM_3_10_SuperCommutatedParameterSet_parameter_ID_Encode_loop(codec, parameter_ID, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                parameter_ID.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
            ()
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + parameter_ID.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTM_3_10_SuperCommutatedParameterSet_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTM_3_10_SuperCommutatedParameterSet] =
{
    require(codec.base.bitStream.validate_offset_bits(8224L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode superCommutatedSampleRepetitionNumber */
    val pVal_superCommutatedSampleRepetitionNumber = TPUSC_UINT32_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 8224L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode TM_3_10_SuperCommutatedParameterSet_n2 */
    val TM_3_10_SuperCommutatedParameterSet_n2 = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 8192L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode parameter_ID */
    val pVal_parameter_ID = TM_3_10_SuperCommutatedParameterSet_parameter_ID_ACN_Decode(codec, TM_3_10_SuperCommutatedParameterSet_n2) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 8224L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = pVal_parameter_ID.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 8224L)
    }
    val pVal = TTM_3_10_SuperCommutatedParameterSet(pVal_superCommutatedSampleRepetitionNumber, pVal_parameter_ID)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }

    TTM_3_10_SuperCommutatedParameterSet_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTM_3_10_SuperCommutatedParameterSet](l)
        case Right(_) => RightMut[ErrorCode, TTM_3_10_SuperCommutatedParameterSet](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTM_3_10_SuperCommutatedParameterSet]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_3_10_SuperCommutatedParameterSet_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTM_3_10_SuperCommutatedParameterSet_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTM_3_10_SuperCommutatedParameterSet]) =
{
    require(codec.base.bitStream.validate_offset_bits(8224L))
    val cpy = snapshot(codec)
    val res = TTM_3_10_SuperCommutatedParameterSet_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def TM_3_10_SuperCommutatedParameterSet_parameter_ID_Decode_loop(codec: ACN, nCount: Int, parameter_ID: Vector[TParameter_ID], i1: Int): EitherMut[Int, Vector[TParameter_ID]] = {
    require((0 <= nCount) && (nCount <= 255))
    require((0 <= i1) && (i1 <= nCount))
    require(parameter_ID.size == i1)
    require(codec.base.bitStream.validate_offset_bits((32L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(parameter_ID)
            vecRangesEqSlicedLemma(parameter_ID, parameter_ID, 0, parameter_ID.size, 0, i1)
        }
        RightMut[Int, Vector[TParameter_ID]](parameter_ID)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 32L * (nCount - i1), 32L)
        }
        val parameter_ID_arr_i1_ = TParameter_ID_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(32L * (i1 + 1) == 32L * i1 + 32L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 32L * (nCount - i1), 32L)
            check(codec.base.bitStream.validate_offset_bits(32L * (nCount - (i1 + 1))))
        }
        val res = TM_3_10_SuperCommutatedParameterSet_parameter_ID_Decode_loop(codec, nCount, parameter_ID.append(parameter_ID_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(parameter_ID, newVec, parameter_ID_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(parameter_ID.append(parameter_ID_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(parameter_ID.list, parameter_ID_arr_i1_, i1)
                    Vector.listApplyEqVecApply(parameter_ID.append(parameter_ID_arr_i1_), i1)
                    check(parameter_ID_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TParameter_ID]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(parameter_ID, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_3_10_SuperCommutatedParameterSet_parameter_ID.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def TM_3_10_SuperCommutatedParameterSet_parameter_ID_ACN_Decode(codec: ACN, TM_3_10_SuperCommutatedParameterSet_n2: ULong): EitherMut[Int, TTM_3_10_SuperCommutatedParameterSet_parameter_ID] = {
    require(codec.base.bitStream.validate_offset_bits(8160L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val parameter_ID =
        if ((TM_3_10_SuperCommutatedParameterSet_n2 <= ULong.fromRaw(255))) then
            val parameter_ID_nCount = TM_3_10_SuperCommutatedParameterSet_n2.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val parameter_ID = TM_3_10_SuperCommutatedParameterSet_parameter_ID_Decode_loop(codec, parameter_ID_nCount, Vector.empty[TParameter_ID], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val parameter_ID = TTM_3_10_SuperCommutatedParameterSet_parameter_ID(parameter_ID_nCount, bdg)
                    ghostExpr {
                        parameter_ID.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    parameter_ID
            }
            parameter_ID
        else return LeftMut(ERR_ACN_DECODE_TM_3_10_SUPERCOMMUTATEDPARAMETERSET_PARAMETER_ID)
    TTM_3_10_SuperCommutatedParameterSet_parameter_ID_IsConstraintValid(parameter_ID) match {
        case Left(l) =>
            LeftMut[Int, TTM_3_10_SuperCommutatedParameterSet_parameter_ID](l)
        case Right(_) =>
            RightMut[Int, TTM_3_10_SuperCommutatedParameterSet_parameter_ID](parameter_ID)
    }
}.ensuring { (res: EitherMut[Int, TTM_3_10_SuperCommutatedParameterSet_parameter_ID]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_3_10_SuperCommutatedParameterSet_parameter_ID_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TM_3_10_SuperCommutatedParameterSet_parameter_ID_ACN_Decode_pure(codec: ACN, TM_3_10_SuperCommutatedParameterSet_n2: ULong): (ACN, EitherMut[Int, TTM_3_10_SuperCommutatedParameterSet_parameter_ID]) = {
    require(codec.base.bitStream.validate_offset_bits(8160L))
    val cpy = snapshot(codec)
    val res = TM_3_10_SuperCommutatedParameterSet_parameter_ID_ACN_Decode(cpy, TM_3_10_SuperCommutatedParameterSet_n2)
    (cpy, res)
}

def TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID_IsConstraintValid(pVal: TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = (pVal.nCount <= 255) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TParameter_ID_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet_IsConstraintValid(pVal: TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = (pVal.nCount <= 127) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TTM_3_10_SuperCommutatedParameterSet_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TTM_3_10_HousekeepingParameterReportStructureReport_IsConstraintValid(pVal: TTM_3_10_HousekeepingParameterReportStructureReport): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = THousekeepingParameterReportStructure_ID_IsConstraintValid(pVal.housekeepingParameterReportStructure_ID)
    if ret.isRight then
        pVal.periodicGenerationActionStatus match
            case SomeMut(periodicGenerationActionStatus) =>
                ret = TPeriodicGenerationActionStatus_IsConstraintValid(periodicGenerationActionStatus)
            case NoneMut() =>
        if ret.isRight then
            ret = TPUSC_UINT32_IsConstraintValid(pVal.collectionInterval)
            if ret.isRight then
                ret = TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID_IsConstraintValid(pVal.parameter_ID)
                if ret.isRight then
                    ret = TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet_IsConstraintValid(pVal.superCommutatedParameterSet)
    if ret.isRight then
        ret = (pVal.periodicGenerationActionStatus.isDefined == true) match
            case true =>
                Right(0)
            case false =>
                Left(45)
    ret
}

def TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID_Initialize(): TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID = TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID(0, Vector.fill(255)(TParameter_ID.Tparam1))
def TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet_Initialize(): TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet = TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet(0, Vector.fill(127)(TTM_3_10_SuperCommutatedParameterSet_Initialize()))
def TTM_3_10_HousekeepingParameterReportStructureReport_Initialize(): TTM_3_10_HousekeepingParameterReportStructureReport = TTM_3_10_HousekeepingParameterReportStructureReport(housekeepingParameterReportStructure_ID = ULong.fromRaw(0L), periodicGenerationActionStatus = SomeMut(TPeriodicGenerationActionStatus.Tenabled), collectionInterval = ULong.fromRaw(0L), parameter_ID = TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID_Initialize(), superCommutatedParameterSet = TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet_Initialize())

@opaque @inlineOnce 
def TTM_3_10_HousekeepingParameterReportStructureReport_ACN_Encode(pVal: TTM_3_10_HousekeepingParameterReportStructureReport, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(1052737L))
    var i1: Int = 0
    TTM_3_10_HousekeepingParameterReportStructureReport_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode housekeepingParameterReportStructure_ID */
    THousekeepingParameterReportStructure_ID_ACN_Encode(pVal.housekeepingParameterReportStructure_ID, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 1052737L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    TM_3_10_HousekeepingParameterReportStructureReport_periodicGenerationActionStatus_Optional_ACN_Encode(codec, pVal, pVal.periodicGenerationActionStatus) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 1052705L, 1L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 33L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.periodicGenerationActionStatus match {
        case SomeMut(v) =>
            1L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode collectionInterval */
    TPUSC_UINT32_ACN_Encode(pVal.collectionInterval, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_3.base.bitStream, codec.base.bitStream, 1052704L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 65L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    @ghost val codec_0_4 = snapshot(codec)
    val TM_3_10_HousekeepingParameterReportStructureReport_n1 = ULong.fromRaw(pVal.parameter_ID.nCount)
    if TM_3_10_HousekeepingParameterReportStructureReport_n1 < ULong.fromRaw(0) || TM_3_10_HousekeepingParameterReportStructureReport_n1 > ULong.fromRaw(255) then
        return Left(860)
    /* Encode TM_3_10_HousekeepingParameterReportStructureReport_n1 */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(TM_3_10_HousekeepingParameterReportStructureReport_n1)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(TM_3_10_HousekeepingParameterReportStructureReport_n1)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_4.base.bitStream, codec.base.bitStream, 1052672L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 97L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_3 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3)
    }
    @ghost val codec_0_5 = snapshot(codec)
    /* Encode parameter_ID */
    TM_3_10_HousekeepingParameterReportStructureReport_parameter_ID_ACN_Encode(codec, pVal, TM_3_10_HousekeepingParameterReportStructureReport_n1, pVal.parameter_ID) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_5.base.bitStream, codec.base.bitStream, 1052640L, 8160L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 8257L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_4 = pVal.parameter_ID.size(codec_0_5.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3 + size_4)
    }
    @ghost val codec_0_6 = snapshot(codec)
    val TM_3_10_HousekeepingParameterReportStructureReport_nfa = ULong.fromRaw(pVal.superCommutatedParameterSet.nCount)
    if TM_3_10_HousekeepingParameterReportStructureReport_nfa < ULong.fromRaw(0) || TM_3_10_HousekeepingParameterReportStructureReport_nfa > ULong.fromRaw(127) then
        return Left(860)
    /* Encode TM_3_10_HousekeepingParameterReportStructureReport_nfa */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(TM_3_10_HousekeepingParameterReportStructureReport_nfa)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(TM_3_10_HousekeepingParameterReportStructureReport_nfa)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_6.base.bitStream, codec.base.bitStream, 1044480L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 8289L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_5 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3 + size_4 + size_5)
    }
    @ghost val codec_0_7 = snapshot(codec)
    /* Encode superCommutatedParameterSet */
    TM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet_ACN_Encode(codec, pVal, TM_3_10_HousekeepingParameterReportStructureReport_nfa, pVal.superCommutatedParameterSet) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 1052737L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_6 = pVal.superCommutatedParameterSet.size(codec_0_7.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3 + size_4 + size_5 + size_6)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 1052737L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2 + size_3 + size_4 + size_5 + size_6)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TM_3_10_HousekeepingParameterReportStructureReport_periodicGenerationActionStatus_Optional_ACN_Encode(codec: ACN, pVal: TTM_3_10_HousekeepingParameterReportStructureReport, periodicGenerationActionStatus: OptionMut[TPeriodicGenerationActionStatus]): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(1L))
    @ghost val oldCdc = snapshot(codec)
    /* Encode periodicGenerationActionStatus */
    /* marked as ALWAYS PRESENT, so it must be Some */
    periodicGenerationActionStatus match
        case SomeMut(periodicGenerationActionStatus) =>
            TPeriodicGenerationActionStatus_ACN_Encode(periodicGenerationActionStatus, codec, false) match // uper:6
                case Right(_) =>
                case Left(err) => return Left(err)
        case NoneMut() => return Left(628)
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 1L
    }
}



@opaque @inlineOnce
def TM_3_10_HousekeepingParameterReportStructureReport_parameter_ID_Encode_loop(codec: ACN, parameter_ID: TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= parameter_ID.nCount))
    require((0 <= parameter_ID.nCount) && (parameter_ID.nCount <= parameter_ID.arr.size) && (parameter_ID.arr.size <= 255))
    require(codec.base.bitStream.validate_offset_bits((32L * (parameter_ID.nCount - i1))))
    decreases(parameter_ID.nCount - i1)
    if (i1 == parameter_ID.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 32L * (parameter_ID.nCount - i1), 32L)
        }
        TParameter_ID_ACN_Encode(parameter_ID.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(32L * (i1 + 1) == 32L * i1 + 32L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 32L * (parameter_ID.nCount - i1), 32L)
            check(codec.base.bitStream.validate_offset_bits(32L * (parameter_ID.nCount - (i1 + 1))))
        }
        val res = TM_3_10_HousekeepingParameterReportStructureReport_parameter_ID_Encode_loop(codec, parameter_ID, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID.sizeRange(parameter_ID.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, parameter_ID.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + 32L)
                    assert(TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID.sizeRange(parameter_ID.arr, codecSnap1.base.bitStream.bitIndex, i1, parameter_ID.nCount) == TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID.sizeRange(parameter_ID.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, parameter_ID.nCount) + 32L)
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID.sizeRange(parameter_ID.arr, codecSnap1.base.bitStream.bitIndex, i1, parameter_ID.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID.sizeRange(parameter_ID.arr, old(codec).base.bitStream.bitIndex, i1, parameter_ID.nCount)
    }
}



@opaque @inlineOnce
def TM_3_10_HousekeepingParameterReportStructureReport_parameter_ID_ACN_Encode(codec: ACN, pVal: TTM_3_10_HousekeepingParameterReportStructureReport, TM_3_10_HousekeepingParameterReportStructureReport_n1: ULong, parameter_ID: TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(8160L))
    @ghost val oldCdc = snapshot(codec)
    TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID_IsConstraintValid(parameter_ID) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    TM_3_10_HousekeepingParameterReportStructureReport_parameter_ID_Encode_loop(codec, parameter_ID, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                parameter_ID.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
            ()
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + parameter_ID.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet_Encode_loop(codec: ACN, superCommutatedParameterSet: TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= superCommutatedParameterSet.nCount))
    require((0 <= superCommutatedParameterSet.nCount) && (superCommutatedParameterSet.nCount <= superCommutatedParameterSet.arr.size) && (superCommutatedParameterSet.arr.size <= 127))
    require(codec.base.bitStream.validate_offset_bits((8224L * (superCommutatedParameterSet.nCount - i1))))
    decreases(superCommutatedParameterSet.nCount - i1)
    if (i1 == superCommutatedParameterSet.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 8224L * (superCommutatedParameterSet.nCount - i1), 8224L)
        }
        TTM_3_10_SuperCommutatedParameterSet_ACN_Encode(superCommutatedParameterSet.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(8224L * (i1 + 1) == 8224L * i1 + 8224L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 8224L * (superCommutatedParameterSet.nCount - i1), 8224L)
            check(codec.base.bitStream.validate_offset_bits(8224L * (superCommutatedParameterSet.nCount - (i1 + 1))))
        }
        val res = TM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet_Encode_loop(codec, superCommutatedParameterSet, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet.sizeRange(superCommutatedParameterSet.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, superCommutatedParameterSet.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + superCommutatedParameterSet.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet.sizeRange(superCommutatedParameterSet.arr, codecSnap1.base.bitStream.bitIndex, i1, superCommutatedParameterSet.nCount) == superCommutatedParameterSet.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet.sizeRange(superCommutatedParameterSet.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, superCommutatedParameterSet.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet.sizeRange(superCommutatedParameterSet.arr, codecSnap1.base.bitStream.bitIndex, i1, superCommutatedParameterSet.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet.sizeRange(superCommutatedParameterSet.arr, old(codec).base.bitStream.bitIndex, i1, superCommutatedParameterSet.nCount)
    }
}



@opaque @inlineOnce
def TM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet_ACN_Encode(codec: ACN, pVal: TTM_3_10_HousekeepingParameterReportStructureReport, TM_3_10_HousekeepingParameterReportStructureReport_nfa: ULong, superCommutatedParameterSet: TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(1044448L))
    @ghost val oldCdc = snapshot(codec)
    TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet_IsConstraintValid(superCommutatedParameterSet) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    TM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet_Encode_loop(codec, superCommutatedParameterSet, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                superCommutatedParameterSet.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
            ()
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + superCommutatedParameterSet.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTM_3_10_HousekeepingParameterReportStructureReport_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTM_3_10_HousekeepingParameterReportStructureReport] =
{
    require(codec.base.bitStream.validate_offset_bits(1052737L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode housekeepingParameterReportStructure_ID */
    val pVal_housekeepingParameterReportStructure_ID = THousekeepingParameterReportStructure_ID_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 1052737L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    val pVal_periodicGenerationActionStatus = TM_3_10_HousekeepingParameterReportStructureReport_periodicGenerationActionStatus_Optional_ACN_Decode(codec) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 1052705L, 1L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 33L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_periodicGenerationActionStatus match {
        case SomeMut(v) =>
            1L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode collectionInterval */
    val pVal_collectionInterval = TPUSC_UINT32_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_3.base.bitStream, codec.base.bitStream, 1052704L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 65L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    @ghost val codec_0_4 = snapshot(codec)
    /* Decode TM_3_10_HousekeepingParameterReportStructureReport_n1 */
    val TM_3_10_HousekeepingParameterReportStructureReport_n1 = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_4.base.bitStream, codec.base.bitStream, 1052672L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 97L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_3 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3)
    }
    @ghost val codec_0_5 = snapshot(codec)
    /* Decode parameter_ID */
    val pVal_parameter_ID = TM_3_10_HousekeepingParameterReportStructureReport_parameter_ID_ACN_Decode(codec, TM_3_10_HousekeepingParameterReportStructureReport_n1) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_5.base.bitStream, codec.base.bitStream, 1052640L, 8160L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 8257L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_4 = pVal_parameter_ID.size(codec_0_5.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3 + size_4)
    }
    @ghost val codec_0_6 = snapshot(codec)
    /* Decode TM_3_10_HousekeepingParameterReportStructureReport_nfa */
    val TM_3_10_HousekeepingParameterReportStructureReport_nfa = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_6.base.bitStream, codec.base.bitStream, 1044480L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 8289L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_5 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3 + size_4 + size_5)
    }
    @ghost val codec_0_7 = snapshot(codec)
    /* Decode superCommutatedParameterSet */
    val pVal_superCommutatedParameterSet = TM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet_ACN_Decode(codec, TM_3_10_HousekeepingParameterReportStructureReport_nfa) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 1052737L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_6 = pVal_superCommutatedParameterSet.size(codec_0_7.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3 + size_4 + size_5 + size_6)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 1052737L)
    }
    val pVal = TTM_3_10_HousekeepingParameterReportStructureReport(pVal_housekeepingParameterReportStructure_ID, pVal_periodicGenerationActionStatus, pVal_collectionInterval, pVal_parameter_ID, pVal_superCommutatedParameterSet)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2 + size_3 + size_4 + size_5 + size_6)
    }

    TTM_3_10_HousekeepingParameterReportStructureReport_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTM_3_10_HousekeepingParameterReportStructureReport](l)
        case Right(_) => RightMut[ErrorCode, TTM_3_10_HousekeepingParameterReportStructureReport](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTM_3_10_HousekeepingParameterReportStructureReport]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_3_10_HousekeepingParameterReportStructureReport_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTM_3_10_HousekeepingParameterReportStructureReport_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTM_3_10_HousekeepingParameterReportStructureReport]) =
{
    require(codec.base.bitStream.validate_offset_bits(1052737L))
    val cpy = snapshot(codec)
    val res = TTM_3_10_HousekeepingParameterReportStructureReport_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def TM_3_10_HousekeepingParameterReportStructureReport_periodicGenerationActionStatus_Optional_ACN_Decode(codec: ACN): EitherMut[Int, OptionMut[TPeriodicGenerationActionStatus]] = {
    require(codec.base.bitStream.validate_offset_bits(1L))
    @ghost val oldCdc = snapshot(codec)
    /* Decode periodicGenerationActionStatus */
    /* marked as ALWAYS PRESENT */
    val periodicGenerationActionStatus: OptionMut[TPeriodicGenerationActionStatus] =
        val pVal_periodicGenerationActionStatus = TPeriodicGenerationActionStatus_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        SomeMut(pVal_periodicGenerationActionStatus)
    RightMut[Int, OptionMut[TPeriodicGenerationActionStatus]](periodicGenerationActionStatus)
}.ensuring { (res: EitherMut[Int, OptionMut[TPeriodicGenerationActionStatus]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            resVal.isDefined && old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 1L
    }
}



@ghost @pure
def TM_3_10_HousekeepingParameterReportStructureReport_periodicGenerationActionStatus_Optional_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[Int, OptionMut[TPeriodicGenerationActionStatus]]) = {
    require(codec.base.bitStream.validate_offset_bits(1L))
    val cpy = snapshot(codec)
    val res = TM_3_10_HousekeepingParameterReportStructureReport_periodicGenerationActionStatus_Optional_ACN_Decode(cpy)
    (cpy, res)
}



@opaque @inlineOnce
def TM_3_10_HousekeepingParameterReportStructureReport_parameter_ID_Decode_loop(codec: ACN, nCount: Int, parameter_ID: Vector[TParameter_ID], i1: Int): EitherMut[Int, Vector[TParameter_ID]] = {
    require((0 <= nCount) && (nCount <= 255))
    require((0 <= i1) && (i1 <= nCount))
    require(parameter_ID.size == i1)
    require(codec.base.bitStream.validate_offset_bits((32L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(parameter_ID)
            vecRangesEqSlicedLemma(parameter_ID, parameter_ID, 0, parameter_ID.size, 0, i1)
        }
        RightMut[Int, Vector[TParameter_ID]](parameter_ID)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 32L * (nCount - i1), 32L)
        }
        val parameter_ID_arr_i1_ = TParameter_ID_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(32L * (i1 + 1) == 32L * i1 + 32L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 32L * (nCount - i1), 32L)
            check(codec.base.bitStream.validate_offset_bits(32L * (nCount - (i1 + 1))))
        }
        val res = TM_3_10_HousekeepingParameterReportStructureReport_parameter_ID_Decode_loop(codec, nCount, parameter_ID.append(parameter_ID_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(parameter_ID, newVec, parameter_ID_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(parameter_ID.append(parameter_ID_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(parameter_ID.list, parameter_ID_arr_i1_, i1)
                    Vector.listApplyEqVecApply(parameter_ID.append(parameter_ID_arr_i1_), i1)
                    check(parameter_ID_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TParameter_ID]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(parameter_ID, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def TM_3_10_HousekeepingParameterReportStructureReport_parameter_ID_ACN_Decode(codec: ACN, TM_3_10_HousekeepingParameterReportStructureReport_n1: ULong): EitherMut[Int, TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID] = {
    require(codec.base.bitStream.validate_offset_bits(8160L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val parameter_ID =
        if ((TM_3_10_HousekeepingParameterReportStructureReport_n1 <= ULong.fromRaw(255))) then
            val parameter_ID_nCount = TM_3_10_HousekeepingParameterReportStructureReport_n1.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val parameter_ID = TM_3_10_HousekeepingParameterReportStructureReport_parameter_ID_Decode_loop(codec, parameter_ID_nCount, Vector.empty[TParameter_ID], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val parameter_ID = TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID(parameter_ID_nCount, bdg)
                    ghostExpr {
                        parameter_ID.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    parameter_ID
            }
            parameter_ID
        else return LeftMut(ERR_ACN_DECODE_TM_3_10_HOUSEKEEPINGPARAMETERREPORTSTRUCTUREREPORT_PARAMETER_ID)
    TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID_IsConstraintValid(parameter_ID) match {
        case Left(l) =>
            LeftMut[Int, TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID](l)
        case Right(_) =>
            RightMut[Int, TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID](parameter_ID)
    }
}.ensuring { (res: EitherMut[Int, TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TM_3_10_HousekeepingParameterReportStructureReport_parameter_ID_ACN_Decode_pure(codec: ACN, TM_3_10_HousekeepingParameterReportStructureReport_n1: ULong): (ACN, EitherMut[Int, TTM_3_10_HousekeepingParameterReportStructureReport_parameter_ID]) = {
    require(codec.base.bitStream.validate_offset_bits(8160L))
    val cpy = snapshot(codec)
    val res = TM_3_10_HousekeepingParameterReportStructureReport_parameter_ID_ACN_Decode(cpy, TM_3_10_HousekeepingParameterReportStructureReport_n1)
    (cpy, res)
}

@opaque @inlineOnce
def TM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet_Decode_loop(codec: ACN, nCount: Int, superCommutatedParameterSet: Vector[TTM_3_10_SuperCommutatedParameterSet], i1: Int): EitherMut[Int, Vector[TTM_3_10_SuperCommutatedParameterSet]] = {
    require((0 <= nCount) && (nCount <= 127))
    require((0 <= i1) && (i1 <= nCount))
    require(superCommutatedParameterSet.size == i1)
    require(codec.base.bitStream.validate_offset_bits((8224L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(superCommutatedParameterSet)
            vecRangesEqSlicedLemma(superCommutatedParameterSet, superCommutatedParameterSet, 0, superCommutatedParameterSet.size, 0, i1)
        }
        RightMut[Int, Vector[TTM_3_10_SuperCommutatedParameterSet]](superCommutatedParameterSet)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 8224L * (nCount - i1), 8224L)
        }
        val superCommutatedParameterSet_arr_i1_ = TTM_3_10_SuperCommutatedParameterSet_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(8224L * (i1 + 1) == 8224L * i1 + 8224L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 8224L * (nCount - i1), 8224L)
            check(codec.base.bitStream.validate_offset_bits(8224L * (nCount - (i1 + 1))))
        }
        val res = TM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet_Decode_loop(codec, nCount, superCommutatedParameterSet.append(superCommutatedParameterSet_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(superCommutatedParameterSet, newVec, superCommutatedParameterSet_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(superCommutatedParameterSet.append(superCommutatedParameterSet_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(superCommutatedParameterSet.list, superCommutatedParameterSet_arr_i1_, i1)
                    Vector.listApplyEqVecApply(superCommutatedParameterSet.append(superCommutatedParameterSet_arr_i1_), i1)
                    check(superCommutatedParameterSet_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TTM_3_10_SuperCommutatedParameterSet]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(superCommutatedParameterSet, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def TM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet_ACN_Decode(codec: ACN, TM_3_10_HousekeepingParameterReportStructureReport_nfa: ULong): EitherMut[Int, TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet] = {
    require(codec.base.bitStream.validate_offset_bits(1044448L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val superCommutatedParameterSet =
        if ((TM_3_10_HousekeepingParameterReportStructureReport_nfa <= ULong.fromRaw(127))) then
            val superCommutatedParameterSet_nCount = TM_3_10_HousekeepingParameterReportStructureReport_nfa.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val superCommutatedParameterSet = TM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet_Decode_loop(codec, superCommutatedParameterSet_nCount, Vector.empty[TTM_3_10_SuperCommutatedParameterSet], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val superCommutatedParameterSet = TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet(superCommutatedParameterSet_nCount, bdg)
                    ghostExpr {
                        superCommutatedParameterSet.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    superCommutatedParameterSet
            }
            superCommutatedParameterSet
        else return LeftMut(ERR_ACN_DECODE_TM_3_10_HOUSEKEEPINGPARAMETERREPORTSTRUCTUREREPORT_SUPERCOMMUTATEDPARAMETERSET)
    TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet_IsConstraintValid(superCommutatedParameterSet) match {
        case Left(l) =>
            LeftMut[Int, TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet](l)
        case Right(_) =>
            RightMut[Int, TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet](superCommutatedParameterSet)
    }
}.ensuring { (res: EitherMut[Int, TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet_ACN_Decode_pure(codec: ACN, TM_3_10_HousekeepingParameterReportStructureReport_nfa: ULong): (ACN, EitherMut[Int, TTM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet]) = {
    require(codec.base.bitStream.validate_offset_bits(1044448L))
    val cpy = snapshot(codec)
    val res = TM_3_10_HousekeepingParameterReportStructureReport_superCommutatedParameterSet_ACN_Decode(cpy, TM_3_10_HousekeepingParameterReportStructureReport_nfa)
    (cpy, res)
}