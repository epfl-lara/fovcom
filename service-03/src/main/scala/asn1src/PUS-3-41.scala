/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

val macTC_41_ParameterReportingEntryCount: Int = 127 // variables:188
val maxTC_41_ApidParameterReportingEntryCount: Int = 127 // variables:188

def TTM_3_41_ApidParameterReportingEntries_parameterReportingEntries_IsConstraintValid(pVal: TTM_3_41_ApidParameterReportingEntries_parameterReportingEntries): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = ((1 <= pVal.nCount) && (pVal.nCount <= 127)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TParameterReportingEntries_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TTM_3_41_ApidParameterReportingEntries_IsConstraintValid(pVal: TTM_3_41_ApidParameterReportingEntries): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TApplicationProcess_ID_IsConstraintValid(pVal.applicationProcess_ID)
    if ret.isRight then
        ret = TTM_3_41_ApidParameterReportingEntries_parameterReportingEntries_IsConstraintValid(pVal.parameterReportingEntries)
    ret
}

def TTM_3_41_ApidParameterReportingEntries_parameterReportingEntries_Initialize(): TTM_3_41_ApidParameterReportingEntries_parameterReportingEntries = TTM_3_41_ApidParameterReportingEntries_parameterReportingEntries(1, Vector.fill(127)(TParameterReportingEntries_Initialize()))
def TTM_3_41_ApidParameterReportingEntries_Initialize(): TTM_3_41_ApidParameterReportingEntries = TTM_3_41_ApidParameterReportingEntries(applicationProcess_ID = ULong.fromRaw(0L), parameterReportingEntries = TTM_3_41_ApidParameterReportingEntries_parameterReportingEntries_Initialize())

@opaque @inlineOnce 
def TTM_3_41_ApidParameterReportingEntries_ACN_Encode(pVal: TTM_3_41_ApidParameterReportingEntries, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(8933L))
    var i1: Int = 0
    TTM_3_41_ApidParameterReportingEntries_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode applicationProcess_ID */
    TApplicationProcess_ID_ACN_Encode(pVal.applicationProcess_ID, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 8933L, 11L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 11L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 11L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    val TM_3_41_ApidParameterReportingEntries_n2 = ULong.fromRaw(pVal.parameterReportingEntries.nCount)
    if TM_3_41_ApidParameterReportingEntries_n2 < ULong.fromRaw(1) || TM_3_41_ApidParameterReportingEntries_n2 > ULong.fromRaw(127) then
        return Left(860)
    /* Encode TM_3_41_ApidParameterReportingEntries_n2 */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(TM_3_41_ApidParameterReportingEntries_n2)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(TM_3_41_ApidParameterReportingEntries_n2)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 8922L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 43L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode parameterReportingEntries */
    TM_3_41_ApidParameterReportingEntries_parameterReportingEntries_ACN_Encode(codec, pVal, TM_3_41_ApidParameterReportingEntries_n2, pVal.parameterReportingEntries) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 8933L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = pVal.parameterReportingEntries.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 8933L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TM_3_41_ApidParameterReportingEntries_parameterReportingEntries_Encode_loop(codec: ACN, parameterReportingEntries: TTM_3_41_ApidParameterReportingEntries_parameterReportingEntries, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= parameterReportingEntries.nCount))
    require((1 <= parameterReportingEntries.nCount) && (parameterReportingEntries.nCount <= parameterReportingEntries.arr.size) && (parameterReportingEntries.arr.size <= 127))
    require(codec.base.bitStream.validate_offset_bits((70L * (parameterReportingEntries.nCount - i1))))
    decreases(parameterReportingEntries.nCount - i1)
    if (i1 == parameterReportingEntries.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 70L * (parameterReportingEntries.nCount - i1), 70L)
        }
        TParameterReportingEntries_ACN_Encode(parameterReportingEntries.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(70L * (i1 + 1) == 70L * i1 + 70L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 70L * (parameterReportingEntries.nCount - i1), 70L)
            check(codec.base.bitStream.validate_offset_bits(70L * (parameterReportingEntries.nCount - (i1 + 1))))
        }
        val res = TM_3_41_ApidParameterReportingEntries_parameterReportingEntries_Encode_loop(codec, parameterReportingEntries, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TTM_3_41_ApidParameterReportingEntries_parameterReportingEntries.sizeRange(parameterReportingEntries.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, parameterReportingEntries.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + parameterReportingEntries.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TTM_3_41_ApidParameterReportingEntries_parameterReportingEntries.sizeRange(parameterReportingEntries.arr, codecSnap1.base.bitStream.bitIndex, i1, parameterReportingEntries.nCount) == parameterReportingEntries.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TTM_3_41_ApidParameterReportingEntries_parameterReportingEntries.sizeRange(parameterReportingEntries.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, parameterReportingEntries.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TTM_3_41_ApidParameterReportingEntries_parameterReportingEntries.sizeRange(parameterReportingEntries.arr, codecSnap1.base.bitStream.bitIndex, i1, parameterReportingEntries.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_3_41_ApidParameterReportingEntries_parameterReportingEntries.sizeRange(parameterReportingEntries.arr, old(codec).base.bitStream.bitIndex, i1, parameterReportingEntries.nCount)
    }
}



@opaque @inlineOnce
def TM_3_41_ApidParameterReportingEntries_parameterReportingEntries_ACN_Encode(codec: ACN, pVal: TTM_3_41_ApidParameterReportingEntries, TM_3_41_ApidParameterReportingEntries_n2: ULong, parameterReportingEntries: TTM_3_41_ApidParameterReportingEntries_parameterReportingEntries): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(8890L))
    @ghost val oldCdc = snapshot(codec)
    TTM_3_41_ApidParameterReportingEntries_parameterReportingEntries_IsConstraintValid(parameterReportingEntries) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    TM_3_41_ApidParameterReportingEntries_parameterReportingEntries_Encode_loop(codec, parameterReportingEntries, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                parameterReportingEntries.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
            ()
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + parameterReportingEntries.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTM_3_41_ApidParameterReportingEntries_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTM_3_41_ApidParameterReportingEntries] =
{
    require(codec.base.bitStream.validate_offset_bits(8933L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode applicationProcess_ID */
    val pVal_applicationProcess_ID = TApplicationProcess_ID_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 8933L, 11L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 11L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 11L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode TM_3_41_ApidParameterReportingEntries_n2 */
    val TM_3_41_ApidParameterReportingEntries_n2 = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 8922L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 43L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode parameterReportingEntries */
    val pVal_parameterReportingEntries = TM_3_41_ApidParameterReportingEntries_parameterReportingEntries_ACN_Decode(codec, TM_3_41_ApidParameterReportingEntries_n2) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 8933L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = pVal_parameterReportingEntries.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 8933L)
    }
    val pVal = TTM_3_41_ApidParameterReportingEntries(pVal_applicationProcess_ID, pVal_parameterReportingEntries)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }

    TTM_3_41_ApidParameterReportingEntries_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTM_3_41_ApidParameterReportingEntries](l)
        case Right(_) => RightMut[ErrorCode, TTM_3_41_ApidParameterReportingEntries](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTM_3_41_ApidParameterReportingEntries]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_3_41_ApidParameterReportingEntries_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTM_3_41_ApidParameterReportingEntries_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTM_3_41_ApidParameterReportingEntries]) =
{
    require(codec.base.bitStream.validate_offset_bits(8933L))
    val cpy = snapshot(codec)
    val res = TTM_3_41_ApidParameterReportingEntries_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def TM_3_41_ApidParameterReportingEntries_parameterReportingEntries_Decode_loop(codec: ACN, nCount: Int, parameterReportingEntries: Vector[TParameterReportingEntries], i1: Int): EitherMut[Int, Vector[TParameterReportingEntries]] = {
    require((1 <= nCount) && (nCount <= 127))
    require((0 <= i1) && (i1 <= nCount))
    require(parameterReportingEntries.size == i1)
    require(codec.base.bitStream.validate_offset_bits((70L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(parameterReportingEntries)
            vecRangesEqSlicedLemma(parameterReportingEntries, parameterReportingEntries, 0, parameterReportingEntries.size, 0, i1)
        }
        RightMut[Int, Vector[TParameterReportingEntries]](parameterReportingEntries)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 70L * (nCount - i1), 70L)
        }
        val parameterReportingEntries_arr_i1_ = TParameterReportingEntries_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(70L * (i1 + 1) == 70L * i1 + 70L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 70L * (nCount - i1), 70L)
            check(codec.base.bitStream.validate_offset_bits(70L * (nCount - (i1 + 1))))
        }
        val res = TM_3_41_ApidParameterReportingEntries_parameterReportingEntries_Decode_loop(codec, nCount, parameterReportingEntries.append(parameterReportingEntries_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(parameterReportingEntries, newVec, parameterReportingEntries_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(parameterReportingEntries.append(parameterReportingEntries_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(parameterReportingEntries.list, parameterReportingEntries_arr_i1_, i1)
                    Vector.listApplyEqVecApply(parameterReportingEntries.append(parameterReportingEntries_arr_i1_), i1)
                    check(parameterReportingEntries_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TParameterReportingEntries]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(parameterReportingEntries, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_3_41_ApidParameterReportingEntries_parameterReportingEntries.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def TM_3_41_ApidParameterReportingEntries_parameterReportingEntries_ACN_Decode(codec: ACN, TM_3_41_ApidParameterReportingEntries_n2: ULong): EitherMut[Int, TTM_3_41_ApidParameterReportingEntries_parameterReportingEntries] = {
    require(codec.base.bitStream.validate_offset_bits(8890L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val parameterReportingEntries =
        if ((ULong.fromRaw(1) <= TM_3_41_ApidParameterReportingEntries_n2) && (TM_3_41_ApidParameterReportingEntries_n2 <= ULong.fromRaw(127))) then
            val parameterReportingEntries_nCount = TM_3_41_ApidParameterReportingEntries_n2.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val parameterReportingEntries = TM_3_41_ApidParameterReportingEntries_parameterReportingEntries_Decode_loop(codec, parameterReportingEntries_nCount, Vector.empty[TParameterReportingEntries], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val parameterReportingEntries = TTM_3_41_ApidParameterReportingEntries_parameterReportingEntries(parameterReportingEntries_nCount, bdg)
                    ghostExpr {
                        parameterReportingEntries.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    parameterReportingEntries
            }
            parameterReportingEntries
        else return LeftMut(ERR_ACN_DECODE_TM_3_41_APIDPARAMETERREPORTINGENTRIES_PARAMETERREPORTINGENTRIES)
    TTM_3_41_ApidParameterReportingEntries_parameterReportingEntries_IsConstraintValid(parameterReportingEntries) match {
        case Left(l) =>
            LeftMut[Int, TTM_3_41_ApidParameterReportingEntries_parameterReportingEntries](l)
        case Right(_) =>
            RightMut[Int, TTM_3_41_ApidParameterReportingEntries_parameterReportingEntries](parameterReportingEntries)
    }
}.ensuring { (res: EitherMut[Int, TTM_3_41_ApidParameterReportingEntries_parameterReportingEntries]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_3_41_ApidParameterReportingEntries_parameterReportingEntries_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TM_3_41_ApidParameterReportingEntries_parameterReportingEntries_ACN_Decode_pure(codec: ACN, TM_3_41_ApidParameterReportingEntries_n2: ULong): (ACN, EitherMut[Int, TTM_3_41_ApidParameterReportingEntries_parameterReportingEntries]) = {
    require(codec.base.bitStream.validate_offset_bits(8890L))
    val cpy = snapshot(codec)
    val res = TM_3_41_ApidParameterReportingEntries_parameterReportingEntries_ACN_Decode(cpy, TM_3_41_ApidParameterReportingEntries_n2)
    (cpy, res)
}

def TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_apidParameterReportingEntries_IsConstraintValid(pVal: TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_apidParameterReportingEntries): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = ((1 <= pVal.nCount) && (pVal.nCount <= 127)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TTM_3_41_ApidParameterReportingEntries_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_IsConstraintValid(pVal: TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TParameterFunctionalReportingDefinition_ID_IsConstraintValid(pVal.parameterFunctionalReportingDefinition_ID)
    if ret.isRight then
        ret = TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_apidParameterReportingEntries_IsConstraintValid(pVal.apidParameterReportingEntries)
    ret
}

def TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_apidParameterReportingEntries_Initialize(): TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_apidParameterReportingEntries = TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_apidParameterReportingEntries(1, Vector.fill(127)(TTM_3_41_ApidParameterReportingEntries_Initialize()))
def TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_Initialize(): TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid = TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid(parameterFunctionalReportingDefinition_ID = ULong.fromRaw(0L), apidParameterReportingEntries = TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_apidParameterReportingEntries_Initialize())

@opaque @inlineOnce 
def TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_ACN_Encode(pVal: TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(1134555L))
    var i1: Int = 0
    TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode parameterFunctionalReportingDefinition_ID */
    TParameterFunctionalReportingDefinition_ID_ACN_Encode(pVal.parameterFunctionalReportingDefinition_ID, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 1134555L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    val TM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_n1 = ULong.fromRaw(pVal.apidParameterReportingEntries.nCount)
    if TM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_n1 < ULong.fromRaw(1) || TM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_n1 > ULong.fromRaw(127) then
        return Left(860)
    /* Encode TM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_n1 */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(TM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_n1)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(TM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_n1)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 1134523L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode apidParameterReportingEntries */
    TM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_apidParameterReportingEntries_ACN_Encode(codec, pVal, TM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_n1, pVal.apidParameterReportingEntries) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 1134555L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = pVal.apidParameterReportingEntries.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 1134555L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_apidParameterReportingEntries_Encode_loop(codec: ACN, apidParameterReportingEntries: TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_apidParameterReportingEntries, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= apidParameterReportingEntries.nCount))
    require((1 <= apidParameterReportingEntries.nCount) && (apidParameterReportingEntries.nCount <= apidParameterReportingEntries.arr.size) && (apidParameterReportingEntries.arr.size <= 127))
    require(codec.base.bitStream.validate_offset_bits((8933L * (apidParameterReportingEntries.nCount - i1))))
    decreases(apidParameterReportingEntries.nCount - i1)
    if (i1 == apidParameterReportingEntries.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 8933L * (apidParameterReportingEntries.nCount - i1), 8933L)
        }
        TTM_3_41_ApidParameterReportingEntries_ACN_Encode(apidParameterReportingEntries.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(8933L * (i1 + 1) == 8933L * i1 + 8933L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 8933L * (apidParameterReportingEntries.nCount - i1), 8933L)
            check(codec.base.bitStream.validate_offset_bits(8933L * (apidParameterReportingEntries.nCount - (i1 + 1))))
        }
        val res = TM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_apidParameterReportingEntries_Encode_loop(codec, apidParameterReportingEntries, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_apidParameterReportingEntries.sizeRange(apidParameterReportingEntries.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, apidParameterReportingEntries.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + apidParameterReportingEntries.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_apidParameterReportingEntries.sizeRange(apidParameterReportingEntries.arr, codecSnap1.base.bitStream.bitIndex, i1, apidParameterReportingEntries.nCount) == apidParameterReportingEntries.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_apidParameterReportingEntries.sizeRange(apidParameterReportingEntries.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, apidParameterReportingEntries.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_apidParameterReportingEntries.sizeRange(apidParameterReportingEntries.arr, codecSnap1.base.bitStream.bitIndex, i1, apidParameterReportingEntries.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_apidParameterReportingEntries.sizeRange(apidParameterReportingEntries.arr, old(codec).base.bitStream.bitIndex, i1, apidParameterReportingEntries.nCount)
    }
}



@opaque @inlineOnce
def TM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_apidParameterReportingEntries_ACN_Encode(codec: ACN, pVal: TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid, TM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_n1: ULong, apidParameterReportingEntries: TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_apidParameterReportingEntries): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(1134491L))
    @ghost val oldCdc = snapshot(codec)
    TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_apidParameterReportingEntries_IsConstraintValid(apidParameterReportingEntries) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    TM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_apidParameterReportingEntries_Encode_loop(codec, apidParameterReportingEntries, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                apidParameterReportingEntries.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
            ()
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + apidParameterReportingEntries.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid] =
{
    require(codec.base.bitStream.validate_offset_bits(1134555L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode parameterFunctionalReportingDefinition_ID */
    val pVal_parameterFunctionalReportingDefinition_ID = TParameterFunctionalReportingDefinition_ID_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 1134555L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode TM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_n1 */
    val TM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_n1 = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 1134523L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode apidParameterReportingEntries */
    val pVal_apidParameterReportingEntries = TM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_apidParameterReportingEntries_ACN_Decode(codec, TM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_n1) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 1134555L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = pVal_apidParameterReportingEntries.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 1134555L)
    }
    val pVal = TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid(pVal_parameterFunctionalReportingDefinition_ID, pVal_apidParameterReportingEntries)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }

    TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid](l)
        case Right(_) => RightMut[ErrorCode, TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid]) =
{
    require(codec.base.bitStream.validate_offset_bits(1134555L))
    val cpy = snapshot(codec)
    val res = TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def TM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_apidParameterReportingEntries_Decode_loop(codec: ACN, nCount: Int, apidParameterReportingEntries: Vector[TTM_3_41_ApidParameterReportingEntries], i1: Int): EitherMut[Int, Vector[TTM_3_41_ApidParameterReportingEntries]] = {
    require((1 <= nCount) && (nCount <= 127))
    require((0 <= i1) && (i1 <= nCount))
    require(apidParameterReportingEntries.size == i1)
    require(codec.base.bitStream.validate_offset_bits((8933L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(apidParameterReportingEntries)
            vecRangesEqSlicedLemma(apidParameterReportingEntries, apidParameterReportingEntries, 0, apidParameterReportingEntries.size, 0, i1)
        }
        RightMut[Int, Vector[TTM_3_41_ApidParameterReportingEntries]](apidParameterReportingEntries)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 8933L * (nCount - i1), 8933L)
        }
        val apidParameterReportingEntries_arr_i1_ = TTM_3_41_ApidParameterReportingEntries_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(8933L * (i1 + 1) == 8933L * i1 + 8933L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 8933L * (nCount - i1), 8933L)
            check(codec.base.bitStream.validate_offset_bits(8933L * (nCount - (i1 + 1))))
        }
        val res = TM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_apidParameterReportingEntries_Decode_loop(codec, nCount, apidParameterReportingEntries.append(apidParameterReportingEntries_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(apidParameterReportingEntries, newVec, apidParameterReportingEntries_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(apidParameterReportingEntries.append(apidParameterReportingEntries_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(apidParameterReportingEntries.list, apidParameterReportingEntries_arr_i1_, i1)
                    Vector.listApplyEqVecApply(apidParameterReportingEntries.append(apidParameterReportingEntries_arr_i1_), i1)
                    check(apidParameterReportingEntries_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TTM_3_41_ApidParameterReportingEntries]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(apidParameterReportingEntries, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_apidParameterReportingEntries.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def TM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_apidParameterReportingEntries_ACN_Decode(codec: ACN, TM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_n1: ULong): EitherMut[Int, TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_apidParameterReportingEntries] = {
    require(codec.base.bitStream.validate_offset_bits(1134491L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val apidParameterReportingEntries =
        if ((ULong.fromRaw(1) <= TM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_n1) && (TM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_n1 <= ULong.fromRaw(127))) then
            val apidParameterReportingEntries_nCount = TM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_n1.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val apidParameterReportingEntries = TM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_apidParameterReportingEntries_Decode_loop(codec, apidParameterReportingEntries_nCount, Vector.empty[TTM_3_41_ApidParameterReportingEntries], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val apidParameterReportingEntries = TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_apidParameterReportingEntries(apidParameterReportingEntries_nCount, bdg)
                    ghostExpr {
                        apidParameterReportingEntries.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    apidParameterReportingEntries
            }
            apidParameterReportingEntries
        else return LeftMut(ERR_ACN_DECODE_TM_3_41_PARAMETERFUNCTIONALREPORTINGDEFINITIONREPORTMULTIPLEAPID_APIDPARAMETERREPORTINGENTRIES)
    TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_apidParameterReportingEntries_IsConstraintValid(apidParameterReportingEntries) match {
        case Left(l) =>
            LeftMut[Int, TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_apidParameterReportingEntries](l)
        case Right(_) =>
            RightMut[Int, TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_apidParameterReportingEntries](apidParameterReportingEntries)
    }
}.ensuring { (res: EitherMut[Int, TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_apidParameterReportingEntries]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_apidParameterReportingEntries_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_apidParameterReportingEntries_ACN_Decode_pure(codec: ACN, TM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_n1: ULong): (ACN, EitherMut[Int, TTM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_apidParameterReportingEntries]) = {
    require(codec.base.bitStream.validate_offset_bits(1134491L))
    val cpy = snapshot(codec)
    val res = TM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_apidParameterReportingEntries_ACN_Decode(cpy, TM_3_41_ParameterFunctionalReportingDefinitionReportMultipleApid_n1)
    (cpy, res)
}

def TTM_3_41_ParameterFunctionalReportingDefinitionReport_parameterReportingEntries_IsConstraintValid(pVal: TTM_3_41_ParameterFunctionalReportingDefinitionReport_parameterReportingEntries): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = ((1 <= pVal.nCount) && (pVal.nCount <= 127)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TParameterReportingEntries_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TTM_3_41_ParameterFunctionalReportingDefinitionReport_IsConstraintValid(pVal: TTM_3_41_ParameterFunctionalReportingDefinitionReport): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TParameterFunctionalReportingDefinition_ID_IsConstraintValid(pVal.parameterFunctionalReportingDefinition_ID)
    if ret.isRight then
        ret = TTM_3_41_ParameterFunctionalReportingDefinitionReport_parameterReportingEntries_IsConstraintValid(pVal.parameterReportingEntries)
    ret
}

def TTM_3_41_ParameterFunctionalReportingDefinitionReport_parameterReportingEntries_Initialize(): TTM_3_41_ParameterFunctionalReportingDefinitionReport_parameterReportingEntries = TTM_3_41_ParameterFunctionalReportingDefinitionReport_parameterReportingEntries(1, Vector.fill(127)(TParameterReportingEntries_Initialize()))
def TTM_3_41_ParameterFunctionalReportingDefinitionReport_Initialize(): TTM_3_41_ParameterFunctionalReportingDefinitionReport = TTM_3_41_ParameterFunctionalReportingDefinitionReport(parameterFunctionalReportingDefinition_ID = ULong.fromRaw(0L), parameterReportingEntries = TTM_3_41_ParameterFunctionalReportingDefinitionReport_parameterReportingEntries_Initialize())

@opaque @inlineOnce 
def TTM_3_41_ParameterFunctionalReportingDefinitionReport_ACN_Encode(pVal: TTM_3_41_ParameterFunctionalReportingDefinitionReport, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(8954L))
    var i1: Int = 0
    TTM_3_41_ParameterFunctionalReportingDefinitionReport_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode parameterFunctionalReportingDefinition_ID */
    TParameterFunctionalReportingDefinition_ID_ACN_Encode(pVal.parameterFunctionalReportingDefinition_ID, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 8954L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    val TM_3_41_ParameterFunctionalReportingDefinitionReport_n2 = ULong.fromRaw(pVal.parameterReportingEntries.nCount)
    if TM_3_41_ParameterFunctionalReportingDefinitionReport_n2 < ULong.fromRaw(1) || TM_3_41_ParameterFunctionalReportingDefinitionReport_n2 > ULong.fromRaw(127) then
        return Left(860)
    /* Encode TM_3_41_ParameterFunctionalReportingDefinitionReport_n2 */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(TM_3_41_ParameterFunctionalReportingDefinitionReport_n2)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(TM_3_41_ParameterFunctionalReportingDefinitionReport_n2)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 8922L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode parameterReportingEntries */
    TM_3_41_ParameterFunctionalReportingDefinitionReport_parameterReportingEntries_ACN_Encode(codec, pVal, TM_3_41_ParameterFunctionalReportingDefinitionReport_n2, pVal.parameterReportingEntries) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 8954L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = pVal.parameterReportingEntries.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 8954L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TM_3_41_ParameterFunctionalReportingDefinitionReport_parameterReportingEntries_Encode_loop(codec: ACN, parameterReportingEntries: TTM_3_41_ParameterFunctionalReportingDefinitionReport_parameterReportingEntries, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= parameterReportingEntries.nCount))
    require((1 <= parameterReportingEntries.nCount) && (parameterReportingEntries.nCount <= parameterReportingEntries.arr.size) && (parameterReportingEntries.arr.size <= 127))
    require(codec.base.bitStream.validate_offset_bits((70L * (parameterReportingEntries.nCount - i1))))
    decreases(parameterReportingEntries.nCount - i1)
    if (i1 == parameterReportingEntries.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 70L * (parameterReportingEntries.nCount - i1), 70L)
        }
        TParameterReportingEntries_ACN_Encode(parameterReportingEntries.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(70L * (i1 + 1) == 70L * i1 + 70L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 70L * (parameterReportingEntries.nCount - i1), 70L)
            check(codec.base.bitStream.validate_offset_bits(70L * (parameterReportingEntries.nCount - (i1 + 1))))
        }
        val res = TM_3_41_ParameterFunctionalReportingDefinitionReport_parameterReportingEntries_Encode_loop(codec, parameterReportingEntries, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TTM_3_41_ParameterFunctionalReportingDefinitionReport_parameterReportingEntries.sizeRange(parameterReportingEntries.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, parameterReportingEntries.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + parameterReportingEntries.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TTM_3_41_ParameterFunctionalReportingDefinitionReport_parameterReportingEntries.sizeRange(parameterReportingEntries.arr, codecSnap1.base.bitStream.bitIndex, i1, parameterReportingEntries.nCount) == parameterReportingEntries.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TTM_3_41_ParameterFunctionalReportingDefinitionReport_parameterReportingEntries.sizeRange(parameterReportingEntries.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, parameterReportingEntries.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TTM_3_41_ParameterFunctionalReportingDefinitionReport_parameterReportingEntries.sizeRange(parameterReportingEntries.arr, codecSnap1.base.bitStream.bitIndex, i1, parameterReportingEntries.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_3_41_ParameterFunctionalReportingDefinitionReport_parameterReportingEntries.sizeRange(parameterReportingEntries.arr, old(codec).base.bitStream.bitIndex, i1, parameterReportingEntries.nCount)
    }
}



@opaque @inlineOnce
def TM_3_41_ParameterFunctionalReportingDefinitionReport_parameterReportingEntries_ACN_Encode(codec: ACN, pVal: TTM_3_41_ParameterFunctionalReportingDefinitionReport, TM_3_41_ParameterFunctionalReportingDefinitionReport_n2: ULong, parameterReportingEntries: TTM_3_41_ParameterFunctionalReportingDefinitionReport_parameterReportingEntries): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(8890L))
    @ghost val oldCdc = snapshot(codec)
    TTM_3_41_ParameterFunctionalReportingDefinitionReport_parameterReportingEntries_IsConstraintValid(parameterReportingEntries) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    TM_3_41_ParameterFunctionalReportingDefinitionReport_parameterReportingEntries_Encode_loop(codec, parameterReportingEntries, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                parameterReportingEntries.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
            ()
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + parameterReportingEntries.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTM_3_41_ParameterFunctionalReportingDefinitionReport_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTM_3_41_ParameterFunctionalReportingDefinitionReport] =
{
    require(codec.base.bitStream.validate_offset_bits(8954L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode parameterFunctionalReportingDefinition_ID */
    val pVal_parameterFunctionalReportingDefinition_ID = TParameterFunctionalReportingDefinition_ID_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 8954L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode TM_3_41_ParameterFunctionalReportingDefinitionReport_n2 */
    val TM_3_41_ParameterFunctionalReportingDefinitionReport_n2 = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 8922L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode parameterReportingEntries */
    val pVal_parameterReportingEntries = TM_3_41_ParameterFunctionalReportingDefinitionReport_parameterReportingEntries_ACN_Decode(codec, TM_3_41_ParameterFunctionalReportingDefinitionReport_n2) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 8954L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = pVal_parameterReportingEntries.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 8954L)
    }
    val pVal = TTM_3_41_ParameterFunctionalReportingDefinitionReport(pVal_parameterFunctionalReportingDefinition_ID, pVal_parameterReportingEntries)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }

    TTM_3_41_ParameterFunctionalReportingDefinitionReport_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTM_3_41_ParameterFunctionalReportingDefinitionReport](l)
        case Right(_) => RightMut[ErrorCode, TTM_3_41_ParameterFunctionalReportingDefinitionReport](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTM_3_41_ParameterFunctionalReportingDefinitionReport]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_3_41_ParameterFunctionalReportingDefinitionReport_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTM_3_41_ParameterFunctionalReportingDefinitionReport_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTM_3_41_ParameterFunctionalReportingDefinitionReport]) =
{
    require(codec.base.bitStream.validate_offset_bits(8954L))
    val cpy = snapshot(codec)
    val res = TTM_3_41_ParameterFunctionalReportingDefinitionReport_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def TM_3_41_ParameterFunctionalReportingDefinitionReport_parameterReportingEntries_Decode_loop(codec: ACN, nCount: Int, parameterReportingEntries: Vector[TParameterReportingEntries], i1: Int): EitherMut[Int, Vector[TParameterReportingEntries]] = {
    require((1 <= nCount) && (nCount <= 127))
    require((0 <= i1) && (i1 <= nCount))
    require(parameterReportingEntries.size == i1)
    require(codec.base.bitStream.validate_offset_bits((70L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(parameterReportingEntries)
            vecRangesEqSlicedLemma(parameterReportingEntries, parameterReportingEntries, 0, parameterReportingEntries.size, 0, i1)
        }
        RightMut[Int, Vector[TParameterReportingEntries]](parameterReportingEntries)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 70L * (nCount - i1), 70L)
        }
        val parameterReportingEntries_arr_i1_ = TParameterReportingEntries_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(70L * (i1 + 1) == 70L * i1 + 70L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 70L * (nCount - i1), 70L)
            check(codec.base.bitStream.validate_offset_bits(70L * (nCount - (i1 + 1))))
        }
        val res = TM_3_41_ParameterFunctionalReportingDefinitionReport_parameterReportingEntries_Decode_loop(codec, nCount, parameterReportingEntries.append(parameterReportingEntries_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(parameterReportingEntries, newVec, parameterReportingEntries_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(parameterReportingEntries.append(parameterReportingEntries_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(parameterReportingEntries.list, parameterReportingEntries_arr_i1_, i1)
                    Vector.listApplyEqVecApply(parameterReportingEntries.append(parameterReportingEntries_arr_i1_), i1)
                    check(parameterReportingEntries_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TParameterReportingEntries]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(parameterReportingEntries, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_3_41_ParameterFunctionalReportingDefinitionReport_parameterReportingEntries.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def TM_3_41_ParameterFunctionalReportingDefinitionReport_parameterReportingEntries_ACN_Decode(codec: ACN, TM_3_41_ParameterFunctionalReportingDefinitionReport_n2: ULong): EitherMut[Int, TTM_3_41_ParameterFunctionalReportingDefinitionReport_parameterReportingEntries] = {
    require(codec.base.bitStream.validate_offset_bits(8890L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val parameterReportingEntries =
        if ((ULong.fromRaw(1) <= TM_3_41_ParameterFunctionalReportingDefinitionReport_n2) && (TM_3_41_ParameterFunctionalReportingDefinitionReport_n2 <= ULong.fromRaw(127))) then
            val parameterReportingEntries_nCount = TM_3_41_ParameterFunctionalReportingDefinitionReport_n2.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val parameterReportingEntries = TM_3_41_ParameterFunctionalReportingDefinitionReport_parameterReportingEntries_Decode_loop(codec, parameterReportingEntries_nCount, Vector.empty[TParameterReportingEntries], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val parameterReportingEntries = TTM_3_41_ParameterFunctionalReportingDefinitionReport_parameterReportingEntries(parameterReportingEntries_nCount, bdg)
                    ghostExpr {
                        parameterReportingEntries.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    parameterReportingEntries
            }
            parameterReportingEntries
        else return LeftMut(ERR_ACN_DECODE_TM_3_41_PARAMETERFUNCTIONALREPORTINGDEFINITIONREPORT_PARAMETERREPORTINGENTRIES)
    TTM_3_41_ParameterFunctionalReportingDefinitionReport_parameterReportingEntries_IsConstraintValid(parameterReportingEntries) match {
        case Left(l) =>
            LeftMut[Int, TTM_3_41_ParameterFunctionalReportingDefinitionReport_parameterReportingEntries](l)
        case Right(_) =>
            RightMut[Int, TTM_3_41_ParameterFunctionalReportingDefinitionReport_parameterReportingEntries](parameterReportingEntries)
    }
}.ensuring { (res: EitherMut[Int, TTM_3_41_ParameterFunctionalReportingDefinitionReport_parameterReportingEntries]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_3_41_ParameterFunctionalReportingDefinitionReport_parameterReportingEntries_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TM_3_41_ParameterFunctionalReportingDefinitionReport_parameterReportingEntries_ACN_Decode_pure(codec: ACN, TM_3_41_ParameterFunctionalReportingDefinitionReport_n2: ULong): (ACN, EitherMut[Int, TTM_3_41_ParameterFunctionalReportingDefinitionReport_parameterReportingEntries]) = {
    require(codec.base.bitStream.validate_offset_bits(8890L))
    val cpy = snapshot(codec)
    val res = TM_3_41_ParameterFunctionalReportingDefinitionReport_parameterReportingEntries_ACN_Decode(cpy, TM_3_41_ParameterFunctionalReportingDefinitionReport_n2)
    (cpy, res)
}