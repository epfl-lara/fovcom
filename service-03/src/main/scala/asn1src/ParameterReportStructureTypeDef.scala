/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

sealed trait TParameterReportStructureType:
    def i: Int
object TParameterReportStructureType:
    case object ThousekeepingParameterReportStructure_ID extends TParameterReportStructureType:
        override def i: Int = 25
    case object TdiagnosticParameterReportStructure_ID extends TParameterReportStructureType:
        override def i: Int = 26

// please use the following macros to avoid breaking code.
// type ThousekeepingParameterReportStructure_ID = TParameterReportStructureType.housekeepingParameterReportStructure_ID
// type TdiagnosticParameterReportStructure_ID = TParameterReportStructureType.diagnosticParameterReportStructure_ID

@inline @cCode.inline val ERR_PARAMETERREPORTSTRUCTURETYPE: Int = 77 /*housekeepingParameterReportStructure-ID | diagnosticParameterReportStructure-ID */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PARAMETERREPORTSTRUCTURETYPE: Int = 80 /*  */
@inline @cCode.inline val TParameterReportStructureType_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TParameterReportStructureType_REQUIRED_BITS_FOR_ACN_ENCODING = 5

@inline @cCode.inline val ERR_ACN_DECODE_PARAMETERREPORTSTRUCTURETYPE: Int = 81 /*  */
/*-- TParameterReportStructure_ID --------------------------------------------*/

enum TParameterReportStructure_ID:
    case housekeepingParameterReportStructure_ID_PRESENT(housekeepingParameterReportStructure_ID: THousekeepingParameterReportStructure_ID)
    case diagnosticParameterReportStructure_ID_PRESENT(diagnosticParameterReportStructure_ID: TDiagnosticParameterReportStructure_ID)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        this match {
            case TParameterReportStructure_ID.housekeepingParameterReportStructure_ID_PRESENT(housekeepingParameterReportStructure_ID) =>
                32L
            case TParameterReportStructure_ID.diagnosticParameterReportStructure_ID_PRESENT(diagnosticParameterReportStructure_ID) =>
                32L
        }
    }.ensuring { (res: Long) => 
        res == 32L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        this match {
            case TParameterReportStructure_ID.housekeepingParameterReportStructure_ID_PRESENT(housekeepingParameterReportStructure_ID) =>
                ()
            case TParameterReportStructure_ID.diagnosticParameterReportStructure_ID_PRESENT(diagnosticParameterReportStructure_ID) =>
                ()
        }
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        require((offset % 8L) == (otherOffset % 8L))
        this match {
            case TParameterReportStructure_ID.housekeepingParameterReportStructure_ID_PRESENT(housekeepingParameterReportStructure_ID) =>
                ()
            case TParameterReportStructure_ID.diagnosticParameterReportStructure_ID_PRESENT(diagnosticParameterReportStructure_ID) =>
                ()
        }
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        require((offset % 16L) == (otherOffset % 16L))
        this match {
            case TParameterReportStructure_ID.housekeepingParameterReportStructure_ID_PRESENT(housekeepingParameterReportStructure_ID) =>
                ()
            case TParameterReportStructure_ID.diagnosticParameterReportStructure_ID_PRESENT(diagnosticParameterReportStructure_ID) =>
                ()
        }
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        require((offset % 32L) == (otherOffset % 32L))
        this match {
            case TParameterReportStructure_ID.housekeepingParameterReportStructure_ID_PRESENT(housekeepingParameterReportStructure_ID) =>
                ()
            case TParameterReportStructure_ID.diagnosticParameterReportStructure_ID_PRESENT(diagnosticParameterReportStructure_ID) =>
                ()
        }
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

@inline @cCode.inline val ERR_PARAMETERREPORTSTRUCTURE_ID: Int = 102 /* */
@inline @cCode.inline val ERR_PARAMETERREPORTSTRUCTURE_ID_HOUSEKEEPINGPARAMETERREPORTSTRUCTURE_ID_2: Int = 87 /* */
@inline @cCode.inline val ERR_PARAMETERREPORTSTRUCTURE_ID_DIAGNOSTICPARAMETERREPORTSTRUCTURE_ID_2: Int = 97 /* */

 


