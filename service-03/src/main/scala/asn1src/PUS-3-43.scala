/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

val maxTC_3_43_ParameterReportingDefinitionCount: Int = 127 // variables:188
val maxTC_3_43_ApidParameterReportingDefinitionCount: Int = 127 // variables:188

def TParameterReportingDefiniton_IsConstraintValid(pVal: TParameterReportingDefiniton): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TParameterReportStructure_ID_IsConstraintValid(pVal.parameterReportStructure_ID)
    ret
}

def TParameterReportingDefiniton_Initialize(): TParameterReportingDefiniton = TParameterReportingDefiniton(parameterReportStructure_ID = TParameterReportStructure_ID_Initialize())

@opaque @inlineOnce 
def TParameterReportingDefiniton_ACN_Encode(pVal: TParameterReportingDefiniton, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(37L))
    TParameterReportingDefiniton_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val ParameterReportingDefiniton_parameterReportStructureType = pVal.parameterReportStructure_ID match
        case TParameterReportStructure_ID.housekeepingParameterReportStructure_ID_PRESENT(_) =>TParameterReportStructureType.ThousekeepingParameterReportStructure_ID
        case TParameterReportStructure_ID.diagnosticParameterReportStructure_ID_PRESENT(_) =>TParameterReportStructureType.TdiagnosticParameterReportStructure_ID

    /* Encode ParameterReportingDefiniton_parameterReportStructureType */
    val intVal_ParameterReportingDefiniton_parameterReportStructureType = ParameterReportingDefiniton_parameterReportStructureType match
        case TParameterReportStructureType.ThousekeepingParameterReportStructure_ID => ULong.fromRaw(0L)
        case TParameterReportStructureType.TdiagnosticParameterReportStructure_ID => ULong.fromRaw(1L)

    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(1))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 5)
            bitCountLemma(intVal_ParameterReportingDefiniton_parameterReportStructureType)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize(intVal_ParameterReportingDefiniton_parameterReportStructureType, 5)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 37L, 5L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 5L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 5L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode parameterReportStructure_ID */
    ParameterReportingDefiniton_parameterReportStructure_ID_ACN_Encode(codec, pVal, ParameterReportingDefiniton_parameterReportStructureType, pVal.parameterReportStructure_ID) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 37L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.parameterReportStructure_ID match {
        case TParameterReportStructure_ID.housekeepingParameterReportStructure_ID_PRESENT(housekeepingParameterReportStructure_ID) =>
            32L
        case TParameterReportStructure_ID.diagnosticParameterReportStructure_ID_PRESENT(diagnosticParameterReportStructure_ID) =>
            32L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 37L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def ParameterReportingDefiniton_parameterReportStructure_ID_ACN_Encode(codec: ACN, pVal: TParameterReportingDefiniton, ParameterReportingDefiniton_parameterReportStructureType: TParameterReportStructureType, parameterReportStructure_ID: TParameterReportStructure_ID): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(32L))
    @ghost val oldCdc = snapshot(codec)
    TParameterReportStructure_ID_IsConstraintValid(parameterReportStructure_ID) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    parameterReportStructure_ID match
        case TParameterReportStructure_ID.housekeepingParameterReportStructure_ID_PRESENT(housekeepingParameterReportStructure_ID) =>
            THousekeepingParameterReportStructure_ID_ACN_Encode(housekeepingParameterReportStructure_ID, codec, false) match // uper:6
                case Right(_) =>
                case Left(err) => return Left(err)
        case TParameterReportStructure_ID.diagnosticParameterReportStructure_ID_PRESENT(diagnosticParameterReportStructure_ID) =>
            TDiagnosticParameterReportStructure_ID_ACN_Encode(diagnosticParameterReportStructure_ID, codec, false) match // uper:6
                case Right(_) =>
                case Left(err) => return Left(err)
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + parameterReportStructure_ID.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TParameterReportingDefiniton_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TParameterReportingDefiniton] =
{
    require(codec.base.bitStream.validate_offset_bits(37L))

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode ParameterReportingDefiniton_parameterReportStructureType */
    val intVal_ParameterReportingDefiniton_parameterReportStructureType = codec.dec_Int_PositiveInteger_ConstSize(5)

    val ParameterReportingDefiniton_parameterReportStructureType = intVal_ParameterReportingDefiniton_parameterReportStructureType.toRaw match
        case 0 => TParameterReportStructureType.ThousekeepingParameterReportStructure_ID
        case 1 => TParameterReportStructureType.TdiagnosticParameterReportStructure_ID
        case _ => return LeftMut(ERR_ACN_DECODE_PARAMETERREPORTINGDEFINITON_PARAMETERREPORTSTRUCTURETYPE)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 37L, 5L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 5L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 5L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode parameterReportStructure_ID */
    val pVal_parameterReportStructure_ID = ParameterReportingDefiniton_parameterReportStructure_ID_ACN_Decode(codec, ParameterReportingDefiniton_parameterReportStructureType) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 37L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_parameterReportStructure_ID match {
        case TParameterReportStructure_ID.housekeepingParameterReportStructure_ID_PRESENT(housekeepingParameterReportStructure_ID) =>
            32L
        case TParameterReportStructure_ID.diagnosticParameterReportStructure_ID_PRESENT(diagnosticParameterReportStructure_ID) =>
            32L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 37L)
    }
    val pVal = TParameterReportingDefiniton(pVal_parameterReportStructure_ID)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }

    TParameterReportingDefiniton_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TParameterReportingDefiniton](l)
        case Right(_) => RightMut[ErrorCode, TParameterReportingDefiniton](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TParameterReportingDefiniton]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TParameterReportingDefiniton_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TParameterReportingDefiniton_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TParameterReportingDefiniton]) =
{
    require(codec.base.bitStream.validate_offset_bits(37L))
    val cpy = snapshot(codec)
    val res = TParameterReportingDefiniton_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def ParameterReportingDefiniton_parameterReportStructure_ID_ACN_Decode(codec: ACN, ParameterReportingDefiniton_parameterReportStructureType: TParameterReportStructureType): EitherMut[Int, TParameterReportStructure_ID] = {
    require(codec.base.bitStream.validate_offset_bits(32L))
    @ghost val oldCdc = snapshot(codec)
    val parameterReportStructure_ID = ParameterReportingDefiniton_parameterReportStructureType match
        case TParameterReportStructureType.ThousekeepingParameterReportStructure_ID =>
            val housekeepingParameterReportStructure_ID = THousekeepingParameterReportStructure_ID_ACN_Decode(codec) match // uper:13
                case RightMut(decData) => decData
                case LeftMut(err) => return LeftMut(err)
            TParameterReportStructure_ID.housekeepingParameterReportStructure_ID_PRESENT(housekeepingParameterReportStructure_ID)
        case TParameterReportStructureType.TdiagnosticParameterReportStructure_ID =>
            val diagnosticParameterReportStructure_ID = TDiagnosticParameterReportStructure_ID_ACN_Decode(codec) match // uper:13
                case RightMut(decData) => decData
                case LeftMut(err) => return LeftMut(err)
            TParameterReportStructure_ID.diagnosticParameterReportStructure_ID_PRESENT(diagnosticParameterReportStructure_ID)
    TParameterReportStructure_ID_IsConstraintValid(parameterReportStructure_ID) match {
        case Left(l) =>
            LeftMut[Int, TParameterReportStructure_ID](l)
        case Right(_) =>
            RightMut[Int, TParameterReportStructure_ID](parameterReportStructure_ID)
    }
}.ensuring { (res: EitherMut[Int, TParameterReportStructure_ID]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TParameterReportStructure_ID_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def ParameterReportingDefiniton_parameterReportStructure_ID_ACN_Decode_pure(codec: ACN, ParameterReportingDefiniton_parameterReportStructureType: TParameterReportStructureType): (ACN, EitherMut[Int, TParameterReportStructure_ID]) = {
    require(codec.base.bitStream.validate_offset_bits(32L))
    val cpy = snapshot(codec)
    val res = ParameterReportingDefiniton_parameterReportStructure_ID_ACN_Decode(cpy, ParameterReportingDefiniton_parameterReportStructureType)
    (cpy, res)
}

def TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions_IsConstraintValid(pVal: TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = ((1 <= pVal.nCount) && (pVal.nCount <= 127)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TParameterReportingDefiniton_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TTC_3_43_ApidParameterReporingDefinitions_IsConstraintValid(pVal: TTC_3_43_ApidParameterReporingDefinitions): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TApplicationProcess_ID_IsConstraintValid(pVal.applicationProcess_ID)
    if ret.isRight then
        ret = TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions_IsConstraintValid(pVal.parameterReportingDefinitions)
    ret
}

def TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions_Initialize(): TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions = TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions(1, Vector.fill(127)(TParameterReportingDefiniton_Initialize()))
def TTC_3_43_ApidParameterReporingDefinitions_Initialize(): TTC_3_43_ApidParameterReporingDefinitions = TTC_3_43_ApidParameterReporingDefinitions(applicationProcess_ID = ULong.fromRaw(0L), parameterReportingDefinitions = TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions_Initialize())

@opaque @inlineOnce 
def TTC_3_43_ApidParameterReporingDefinitions_ACN_Encode(pVal: TTC_3_43_ApidParameterReporingDefinitions, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(4742L))
    var i1: Int = 0
    TTC_3_43_ApidParameterReporingDefinitions_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode applicationProcess_ID */
    TApplicationProcess_ID_ACN_Encode(pVal.applicationProcess_ID, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 4742L, 11L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 11L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 11L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    val TC_3_43_ApidParameterReporingDefinitions_n2 = ULong.fromRaw(pVal.parameterReportingDefinitions.nCount)
    if TC_3_43_ApidParameterReporingDefinitions_n2 < ULong.fromRaw(1) || TC_3_43_ApidParameterReporingDefinitions_n2 > ULong.fromRaw(127) then
        return Left(860)
    /* Encode TC_3_43_ApidParameterReporingDefinitions_n2 */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(TC_3_43_ApidParameterReporingDefinitions_n2)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(TC_3_43_ApidParameterReporingDefinitions_n2)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 4731L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 43L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode parameterReportingDefinitions */
    TC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions_ACN_Encode(codec, pVal, TC_3_43_ApidParameterReporingDefinitions_n2, pVal.parameterReportingDefinitions) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 4742L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = pVal.parameterReportingDefinitions.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 4742L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions_Encode_loop(codec: ACN, parameterReportingDefinitions: TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= parameterReportingDefinitions.nCount))
    require((1 <= parameterReportingDefinitions.nCount) && (parameterReportingDefinitions.nCount <= parameterReportingDefinitions.arr.size) && (parameterReportingDefinitions.arr.size <= 127))
    require(codec.base.bitStream.validate_offset_bits((37L * (parameterReportingDefinitions.nCount - i1))))
    decreases(parameterReportingDefinitions.nCount - i1)
    if (i1 == parameterReportingDefinitions.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 37L * (parameterReportingDefinitions.nCount - i1), 37L)
        }
        TParameterReportingDefiniton_ACN_Encode(parameterReportingDefinitions.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(37L * (i1 + 1) == 37L * i1 + 37L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 37L * (parameterReportingDefinitions.nCount - i1), 37L)
            check(codec.base.bitStream.validate_offset_bits(37L * (parameterReportingDefinitions.nCount - (i1 + 1))))
        }
        val res = TC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions_Encode_loop(codec, parameterReportingDefinitions, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions.sizeRange(parameterReportingDefinitions.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, parameterReportingDefinitions.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + parameterReportingDefinitions.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions.sizeRange(parameterReportingDefinitions.arr, codecSnap1.base.bitStream.bitIndex, i1, parameterReportingDefinitions.nCount) == parameterReportingDefinitions.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions.sizeRange(parameterReportingDefinitions.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, parameterReportingDefinitions.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions.sizeRange(parameterReportingDefinitions.arr, codecSnap1.base.bitStream.bitIndex, i1, parameterReportingDefinitions.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions.sizeRange(parameterReportingDefinitions.arr, old(codec).base.bitStream.bitIndex, i1, parameterReportingDefinitions.nCount)
    }
}



@opaque @inlineOnce
def TC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions_ACN_Encode(codec: ACN, pVal: TTC_3_43_ApidParameterReporingDefinitions, TC_3_43_ApidParameterReporingDefinitions_n2: ULong, parameterReportingDefinitions: TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(4699L))
    @ghost val oldCdc = snapshot(codec)
    TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions_IsConstraintValid(parameterReportingDefinitions) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    TC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions_Encode_loop(codec, parameterReportingDefinitions, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                parameterReportingDefinitions.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
            ()
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + parameterReportingDefinitions.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTC_3_43_ApidParameterReporingDefinitions_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTC_3_43_ApidParameterReporingDefinitions] =
{
    require(codec.base.bitStream.validate_offset_bits(4742L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode applicationProcess_ID */
    val pVal_applicationProcess_ID = TApplicationProcess_ID_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 4742L, 11L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 11L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 11L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode TC_3_43_ApidParameterReporingDefinitions_n2 */
    val TC_3_43_ApidParameterReporingDefinitions_n2 = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 4731L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 43L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode parameterReportingDefinitions */
    val pVal_parameterReportingDefinitions = TC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions_ACN_Decode(codec, TC_3_43_ApidParameterReporingDefinitions_n2) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 4742L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = pVal_parameterReportingDefinitions.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 4742L)
    }
    val pVal = TTC_3_43_ApidParameterReporingDefinitions(pVal_applicationProcess_ID, pVal_parameterReportingDefinitions)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }

    TTC_3_43_ApidParameterReporingDefinitions_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTC_3_43_ApidParameterReporingDefinitions](l)
        case Right(_) => RightMut[ErrorCode, TTC_3_43_ApidParameterReporingDefinitions](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTC_3_43_ApidParameterReporingDefinitions]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_3_43_ApidParameterReporingDefinitions_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTC_3_43_ApidParameterReporingDefinitions_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTC_3_43_ApidParameterReporingDefinitions]) =
{
    require(codec.base.bitStream.validate_offset_bits(4742L))
    val cpy = snapshot(codec)
    val res = TTC_3_43_ApidParameterReporingDefinitions_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def TC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions_Decode_loop(codec: ACN, nCount: Int, parameterReportingDefinitions: Vector[TParameterReportingDefiniton], i1: Int): EitherMut[Int, Vector[TParameterReportingDefiniton]] = {
    require((1 <= nCount) && (nCount <= 127))
    require((0 <= i1) && (i1 <= nCount))
    require(parameterReportingDefinitions.size == i1)
    require(codec.base.bitStream.validate_offset_bits((37L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(parameterReportingDefinitions)
            vecRangesEqSlicedLemma(parameterReportingDefinitions, parameterReportingDefinitions, 0, parameterReportingDefinitions.size, 0, i1)
        }
        RightMut[Int, Vector[TParameterReportingDefiniton]](parameterReportingDefinitions)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 37L * (nCount - i1), 37L)
        }
        val parameterReportingDefinitions_arr_i1_ = TParameterReportingDefiniton_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(37L * (i1 + 1) == 37L * i1 + 37L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 37L * (nCount - i1), 37L)
            check(codec.base.bitStream.validate_offset_bits(37L * (nCount - (i1 + 1))))
        }
        val res = TC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions_Decode_loop(codec, nCount, parameterReportingDefinitions.append(parameterReportingDefinitions_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(parameterReportingDefinitions, newVec, parameterReportingDefinitions_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(parameterReportingDefinitions.append(parameterReportingDefinitions_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(parameterReportingDefinitions.list, parameterReportingDefinitions_arr_i1_, i1)
                    Vector.listApplyEqVecApply(parameterReportingDefinitions.append(parameterReportingDefinitions_arr_i1_), i1)
                    check(parameterReportingDefinitions_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TParameterReportingDefiniton]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(parameterReportingDefinitions, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def TC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions_ACN_Decode(codec: ACN, TC_3_43_ApidParameterReporingDefinitions_n2: ULong): EitherMut[Int, TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions] = {
    require(codec.base.bitStream.validate_offset_bits(4699L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val parameterReportingDefinitions =
        if ((ULong.fromRaw(1) <= TC_3_43_ApidParameterReporingDefinitions_n2) && (TC_3_43_ApidParameterReporingDefinitions_n2 <= ULong.fromRaw(127))) then
            val parameterReportingDefinitions_nCount = TC_3_43_ApidParameterReporingDefinitions_n2.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val parameterReportingDefinitions = TC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions_Decode_loop(codec, parameterReportingDefinitions_nCount, Vector.empty[TParameterReportingDefiniton], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val parameterReportingDefinitions = TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions(parameterReportingDefinitions_nCount, bdg)
                    ghostExpr {
                        parameterReportingDefinitions.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    parameterReportingDefinitions
            }
            parameterReportingDefinitions
        else return LeftMut(ERR_ACN_DECODE_TC_3_43_APIDPARAMETERREPORINGDEFINITIONS_PARAMETERREPORTINGDEFINITIONS)
    TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions_IsConstraintValid(parameterReportingDefinitions) match {
        case Left(l) =>
            LeftMut[Int, TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions](l)
        case Right(_) =>
            RightMut[Int, TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions](parameterReportingDefinitions)
    }
}.ensuring { (res: EitherMut[Int, TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions_ACN_Decode_pure(codec: ACN, TC_3_43_ApidParameterReporingDefinitions_n2: ULong): (ACN, EitherMut[Int, TTC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions]) = {
    require(codec.base.bitStream.validate_offset_bits(4699L))
    val cpy = snapshot(codec)
    val res = TC_3_43_ApidParameterReporingDefinitions_parameterReportingDefinitions_ACN_Decode(cpy, TC_3_43_ApidParameterReporingDefinitions_n2)
    (cpy, res)
}

def TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions_IsConstraintValid(pVal: TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = ((1 <= pVal.nCount) && (pVal.nCount <= 127)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TTC_3_43_ApidParameterReporingDefinitions_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_IsConstraintValid(pVal: TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TParameterFunctionalReportingDefinition_ID_IsConstraintValid(pVal.parameterFunctionalReportingDefinition_ID)
    if ret.isRight then
        ret = TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions_IsConstraintValid(pVal.apidParameterReportingDefinitions)
    ret
}

def TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions_Initialize(): TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions = TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions(1, Vector.fill(127)(TTC_3_43_ApidParameterReporingDefinitions_Initialize()))
def TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_Initialize(): TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid = TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid(parameterFunctionalReportingDefinition_ID = ULong.fromRaw(0L), apidParameterReportingDefinitions = TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions_Initialize())

@opaque @inlineOnce 
def TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_ACN_Encode(pVal: TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(602298L))
    var i1: Int = 0
    TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode parameterFunctionalReportingDefinition_ID */
    TParameterFunctionalReportingDefinition_ID_ACN_Encode(pVal.parameterFunctionalReportingDefinition_ID, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 602298L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    val TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_n1 = ULong.fromRaw(pVal.apidParameterReportingDefinitions.nCount)
    if TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_n1 < ULong.fromRaw(1) || TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_n1 > ULong.fromRaw(127) then
        return Left(860)
    /* Encode TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_n1 */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_n1)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_n1)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 602266L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode apidParameterReportingDefinitions */
    TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions_ACN_Encode(codec, pVal, TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_n1, pVal.apidParameterReportingDefinitions) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 602298L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = pVal.apidParameterReportingDefinitions.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 602298L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions_Encode_loop(codec: ACN, apidParameterReportingDefinitions: TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= apidParameterReportingDefinitions.nCount))
    require((1 <= apidParameterReportingDefinitions.nCount) && (apidParameterReportingDefinitions.nCount <= apidParameterReportingDefinitions.arr.size) && (apidParameterReportingDefinitions.arr.size <= 127))
    require(codec.base.bitStream.validate_offset_bits((4742L * (apidParameterReportingDefinitions.nCount - i1))))
    decreases(apidParameterReportingDefinitions.nCount - i1)
    if (i1 == apidParameterReportingDefinitions.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 4742L * (apidParameterReportingDefinitions.nCount - i1), 4742L)
        }
        TTC_3_43_ApidParameterReporingDefinitions_ACN_Encode(apidParameterReportingDefinitions.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(4742L * (i1 + 1) == 4742L * i1 + 4742L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 4742L * (apidParameterReportingDefinitions.nCount - i1), 4742L)
            check(codec.base.bitStream.validate_offset_bits(4742L * (apidParameterReportingDefinitions.nCount - (i1 + 1))))
        }
        val res = TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions_Encode_loop(codec, apidParameterReportingDefinitions, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions.sizeRange(apidParameterReportingDefinitions.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, apidParameterReportingDefinitions.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + apidParameterReportingDefinitions.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions.sizeRange(apidParameterReportingDefinitions.arr, codecSnap1.base.bitStream.bitIndex, i1, apidParameterReportingDefinitions.nCount) == apidParameterReportingDefinitions.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions.sizeRange(apidParameterReportingDefinitions.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, apidParameterReportingDefinitions.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions.sizeRange(apidParameterReportingDefinitions.arr, codecSnap1.base.bitStream.bitIndex, i1, apidParameterReportingDefinitions.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions.sizeRange(apidParameterReportingDefinitions.arr, old(codec).base.bitStream.bitIndex, i1, apidParameterReportingDefinitions.nCount)
    }
}



@opaque @inlineOnce
def TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions_ACN_Encode(codec: ACN, pVal: TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid, TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_n1: ULong, apidParameterReportingDefinitions: TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(602234L))
    @ghost val oldCdc = snapshot(codec)
    TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions_IsConstraintValid(apidParameterReportingDefinitions) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions_Encode_loop(codec, apidParameterReportingDefinitions, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                apidParameterReportingDefinitions.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
            ()
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + apidParameterReportingDefinitions.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid] =
{
    require(codec.base.bitStream.validate_offset_bits(602298L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode parameterFunctionalReportingDefinition_ID */
    val pVal_parameterFunctionalReportingDefinition_ID = TParameterFunctionalReportingDefinition_ID_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 602298L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_n1 */
    val TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_n1 = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 602266L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode apidParameterReportingDefinitions */
    val pVal_apidParameterReportingDefinitions = TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions_ACN_Decode(codec, TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_n1) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 602298L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = pVal_apidParameterReportingDefinitions.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 602298L)
    }
    val pVal = TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid(pVal_parameterFunctionalReportingDefinition_ID, pVal_apidParameterReportingDefinitions)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }

    TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid](l)
        case Right(_) => RightMut[ErrorCode, TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid]) =
{
    require(codec.base.bitStream.validate_offset_bits(602298L))
    val cpy = snapshot(codec)
    val res = TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions_Decode_loop(codec: ACN, nCount: Int, apidParameterReportingDefinitions: Vector[TTC_3_43_ApidParameterReporingDefinitions], i1: Int): EitherMut[Int, Vector[TTC_3_43_ApidParameterReporingDefinitions]] = {
    require((1 <= nCount) && (nCount <= 127))
    require((0 <= i1) && (i1 <= nCount))
    require(apidParameterReportingDefinitions.size == i1)
    require(codec.base.bitStream.validate_offset_bits((4742L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(apidParameterReportingDefinitions)
            vecRangesEqSlicedLemma(apidParameterReportingDefinitions, apidParameterReportingDefinitions, 0, apidParameterReportingDefinitions.size, 0, i1)
        }
        RightMut[Int, Vector[TTC_3_43_ApidParameterReporingDefinitions]](apidParameterReportingDefinitions)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 4742L * (nCount - i1), 4742L)
        }
        val apidParameterReportingDefinitions_arr_i1_ = TTC_3_43_ApidParameterReporingDefinitions_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(4742L * (i1 + 1) == 4742L * i1 + 4742L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 4742L * (nCount - i1), 4742L)
            check(codec.base.bitStream.validate_offset_bits(4742L * (nCount - (i1 + 1))))
        }
        val res = TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions_Decode_loop(codec, nCount, apidParameterReportingDefinitions.append(apidParameterReportingDefinitions_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(apidParameterReportingDefinitions, newVec, apidParameterReportingDefinitions_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(apidParameterReportingDefinitions.append(apidParameterReportingDefinitions_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(apidParameterReportingDefinitions.list, apidParameterReportingDefinitions_arr_i1_, i1)
                    Vector.listApplyEqVecApply(apidParameterReportingDefinitions.append(apidParameterReportingDefinitions_arr_i1_), i1)
                    check(apidParameterReportingDefinitions_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TTC_3_43_ApidParameterReporingDefinitions]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(apidParameterReportingDefinitions, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions_ACN_Decode(codec: ACN, TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_n1: ULong): EitherMut[Int, TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions] = {
    require(codec.base.bitStream.validate_offset_bits(602234L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val apidParameterReportingDefinitions =
        if ((ULong.fromRaw(1) <= TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_n1) && (TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_n1 <= ULong.fromRaw(127))) then
            val apidParameterReportingDefinitions_nCount = TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_n1.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val apidParameterReportingDefinitions = TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions_Decode_loop(codec, apidParameterReportingDefinitions_nCount, Vector.empty[TTC_3_43_ApidParameterReporingDefinitions], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val apidParameterReportingDefinitions = TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions(apidParameterReportingDefinitions_nCount, bdg)
                    ghostExpr {
                        apidParameterReportingDefinitions.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    apidParameterReportingDefinitions
            }
            apidParameterReportingDefinitions
        else return LeftMut(ERR_ACN_DECODE_TC_3_43_REMOVEPARAMETERREPORTDEFINITIONSFROMAPARAMETERFUNCTIONALREPORTINGDEFINITIONMULTIPLEAPID_APIDPARAMETERREPORTINGDEFINITIONS)
    TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions_IsConstraintValid(apidParameterReportingDefinitions) match {
        case Left(l) =>
            LeftMut[Int, TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions](l)
        case Right(_) =>
            RightMut[Int, TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions](apidParameterReportingDefinitions)
    }
}.ensuring { (res: EitherMut[Int, TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions_ACN_Decode_pure(codec: ACN, TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_n1: ULong): (ACN, EitherMut[Int, TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions]) = {
    require(codec.base.bitStream.validate_offset_bits(602234L))
    val cpy = snapshot(codec)
    val res = TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingDefinitions_ACN_Decode(cpy, TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinitionMultipleApid_n1)
    (cpy, res)
}

def TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions_IsConstraintValid(pVal: TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = ((1 <= pVal.nCount) && (pVal.nCount <= 127)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TParameterReportingDefiniton_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_IsConstraintValid(pVal: TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TParameterFunctionalReportingDefinition_ID_IsConstraintValid(pVal.parameterFunctionalReportingDefinitions_ID)
    if ret.isRight then
        ret = TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions_IsConstraintValid(pVal.parameterReportingDefinitions)
    ret
}

def TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions_Initialize(): TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions = TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions(1, Vector.fill(127)(TParameterReportingDefiniton_Initialize()))
def TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_Initialize(): TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition = TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition(parameterFunctionalReportingDefinitions_ID = ULong.fromRaw(0L), parameterReportingDefinitions = TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions_Initialize())

@opaque @inlineOnce 
def TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_ACN_Encode(pVal: TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(4763L))
    var i1: Int = 0
    TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode parameterFunctionalReportingDefinitions_ID */
    TParameterFunctionalReportingDefinition_ID_ACN_Encode(pVal.parameterFunctionalReportingDefinitions_ID, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 4763L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    val TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_n2 = ULong.fromRaw(pVal.parameterReportingDefinitions.nCount)
    if TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_n2 < ULong.fromRaw(1) || TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_n2 > ULong.fromRaw(127) then
        return Left(860)
    /* Encode TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_n2 */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_n2)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_n2)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 4731L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode parameterReportingDefinitions */
    TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions_ACN_Encode(codec, pVal, TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_n2, pVal.parameterReportingDefinitions) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 4763L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = pVal.parameterReportingDefinitions.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 4763L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions_Encode_loop(codec: ACN, parameterReportingDefinitions: TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= parameterReportingDefinitions.nCount))
    require((1 <= parameterReportingDefinitions.nCount) && (parameterReportingDefinitions.nCount <= parameterReportingDefinitions.arr.size) && (parameterReportingDefinitions.arr.size <= 127))
    require(codec.base.bitStream.validate_offset_bits((37L * (parameterReportingDefinitions.nCount - i1))))
    decreases(parameterReportingDefinitions.nCount - i1)
    if (i1 == parameterReportingDefinitions.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 37L * (parameterReportingDefinitions.nCount - i1), 37L)
        }
        TParameterReportingDefiniton_ACN_Encode(parameterReportingDefinitions.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(37L * (i1 + 1) == 37L * i1 + 37L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 37L * (parameterReportingDefinitions.nCount - i1), 37L)
            check(codec.base.bitStream.validate_offset_bits(37L * (parameterReportingDefinitions.nCount - (i1 + 1))))
        }
        val res = TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions_Encode_loop(codec, parameterReportingDefinitions, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions.sizeRange(parameterReportingDefinitions.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, parameterReportingDefinitions.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + parameterReportingDefinitions.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions.sizeRange(parameterReportingDefinitions.arr, codecSnap1.base.bitStream.bitIndex, i1, parameterReportingDefinitions.nCount) == parameterReportingDefinitions.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions.sizeRange(parameterReportingDefinitions.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, parameterReportingDefinitions.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions.sizeRange(parameterReportingDefinitions.arr, codecSnap1.base.bitStream.bitIndex, i1, parameterReportingDefinitions.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions.sizeRange(parameterReportingDefinitions.arr, old(codec).base.bitStream.bitIndex, i1, parameterReportingDefinitions.nCount)
    }
}



@opaque @inlineOnce
def TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions_ACN_Encode(codec: ACN, pVal: TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition, TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_n2: ULong, parameterReportingDefinitions: TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(4699L))
    @ghost val oldCdc = snapshot(codec)
    TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions_IsConstraintValid(parameterReportingDefinitions) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions_Encode_loop(codec, parameterReportingDefinitions, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                parameterReportingDefinitions.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
            ()
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + parameterReportingDefinitions.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition] =
{
    require(codec.base.bitStream.validate_offset_bits(4763L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode parameterFunctionalReportingDefinitions_ID */
    val pVal_parameterFunctionalReportingDefinitions_ID = TParameterFunctionalReportingDefinition_ID_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 4763L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_n2 */
    val TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_n2 = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 4731L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode parameterReportingDefinitions */
    val pVal_parameterReportingDefinitions = TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions_ACN_Decode(codec, TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_n2) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 4763L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = pVal_parameterReportingDefinitions.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 4763L)
    }
    val pVal = TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition(pVal_parameterFunctionalReportingDefinitions_ID, pVal_parameterReportingDefinitions)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }

    TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition](l)
        case Right(_) => RightMut[ErrorCode, TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition]) =
{
    require(codec.base.bitStream.validate_offset_bits(4763L))
    val cpy = snapshot(codec)
    val res = TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions_Decode_loop(codec: ACN, nCount: Int, parameterReportingDefinitions: Vector[TParameterReportingDefiniton], i1: Int): EitherMut[Int, Vector[TParameterReportingDefiniton]] = {
    require((1 <= nCount) && (nCount <= 127))
    require((0 <= i1) && (i1 <= nCount))
    require(parameterReportingDefinitions.size == i1)
    require(codec.base.bitStream.validate_offset_bits((37L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(parameterReportingDefinitions)
            vecRangesEqSlicedLemma(parameterReportingDefinitions, parameterReportingDefinitions, 0, parameterReportingDefinitions.size, 0, i1)
        }
        RightMut[Int, Vector[TParameterReportingDefiniton]](parameterReportingDefinitions)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 37L * (nCount - i1), 37L)
        }
        val parameterReportingDefinitions_arr_i1_ = TParameterReportingDefiniton_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(37L * (i1 + 1) == 37L * i1 + 37L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 37L * (nCount - i1), 37L)
            check(codec.base.bitStream.validate_offset_bits(37L * (nCount - (i1 + 1))))
        }
        val res = TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions_Decode_loop(codec, nCount, parameterReportingDefinitions.append(parameterReportingDefinitions_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(parameterReportingDefinitions, newVec, parameterReportingDefinitions_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(parameterReportingDefinitions.append(parameterReportingDefinitions_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(parameterReportingDefinitions.list, parameterReportingDefinitions_arr_i1_, i1)
                    Vector.listApplyEqVecApply(parameterReportingDefinitions.append(parameterReportingDefinitions_arr_i1_), i1)
                    check(parameterReportingDefinitions_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TParameterReportingDefiniton]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(parameterReportingDefinitions, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions_ACN_Decode(codec: ACN, TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_n2: ULong): EitherMut[Int, TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions] = {
    require(codec.base.bitStream.validate_offset_bits(4699L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val parameterReportingDefinitions =
        if ((ULong.fromRaw(1) <= TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_n2) && (TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_n2 <= ULong.fromRaw(127))) then
            val parameterReportingDefinitions_nCount = TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_n2.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val parameterReportingDefinitions = TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions_Decode_loop(codec, parameterReportingDefinitions_nCount, Vector.empty[TParameterReportingDefiniton], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val parameterReportingDefinitions = TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions(parameterReportingDefinitions_nCount, bdg)
                    ghostExpr {
                        parameterReportingDefinitions.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    parameterReportingDefinitions
            }
            parameterReportingDefinitions
        else return LeftMut(ERR_ACN_DECODE_TC_3_43_REMOVEPARAMETERREPORTDEFINITIONSFROMAPARAMETERFUNCTIONALREPORTINGDEFINITION_PARAMETERREPORTINGDEFINITIONS)
    TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions_IsConstraintValid(parameterReportingDefinitions) match {
        case Left(l) =>
            LeftMut[Int, TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions](l)
        case Right(_) =>
            RightMut[Int, TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions](parameterReportingDefinitions)
    }
}.ensuring { (res: EitherMut[Int, TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions_ACN_Decode_pure(codec: ACN, TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_n2: ULong): (ACN, EitherMut[Int, TTC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions]) = {
    require(codec.base.bitStream.validate_offset_bits(4699L))
    val cpy = snapshot(codec)
    val res = TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_parameterReportingDefinitions_ACN_Decode(cpy, TC_3_43_RemoveParameterReportDefinitionsFromAParameterFunctionalReportingDefinition_n2)
    (cpy, res)
}