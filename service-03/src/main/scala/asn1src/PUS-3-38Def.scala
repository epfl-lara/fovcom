/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TTC_3_38_ApidParameterReportingEntries --------------------------------------------*/


case class TTC_3_38_ApidParameterReportingEntries_parameterReportingEntries (nCount: Int, arr: Vector[TParameterReportingEntries])
{
    require(this.arr.size <= 127 && 1 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854766917L))
        TTC_3_38_ApidParameterReportingEntries_parameterReportingEntries.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 8890L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854766917L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854766917L))
        TTC_3_38_ApidParameterReportingEntries_parameterReportingEntries.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854766917L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854766917L))
        require((offset % 8L) == (otherOffset % 8L))
        TTC_3_38_ApidParameterReportingEntries_parameterReportingEntries.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854766917L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854766917L))
        require((offset % 16L) == (otherOffset % 16L))
        TTC_3_38_ApidParameterReportingEntries_parameterReportingEntries.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854766917L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854766917L))
        require((offset % 32L) == (otherOffset % 32L))
        TTC_3_38_ApidParameterReportingEntries_parameterReportingEntries.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TTC_3_38_ApidParameterReportingEntries_parameterReportingEntries {
    def sizeRange(ls: Vector[TParameterReportingEntries], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 70L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(elemSize == 70L)
            elemSize + TTC_3_38_ApidParameterReportingEntries_parameterReportingEntries.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 70L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TParameterReportingEntries], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 70L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 70L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 70L)
            assert(elemSizeOtherOff == 70L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TTC_3_38_ApidParameterReportingEntries_parameterReportingEntries.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_3_38_ApidParameterReportingEntries_parameterReportingEntries.sizeRange(ls, offset, from, to) == TTC_3_38_ApidParameterReportingEntries_parameterReportingEntries.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TParameterReportingEntries], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 70L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 70L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 70L)
            assert(elemSizeOtherOff == 70L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TTC_3_38_ApidParameterReportingEntries_parameterReportingEntries.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_3_38_ApidParameterReportingEntries_parameterReportingEntries.sizeRange(ls, offset, from, to) == TTC_3_38_ApidParameterReportingEntries_parameterReportingEntries.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TParameterReportingEntries], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 70L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 70L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 70L)
            assert(elemSizeOtherOff == 70L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TTC_3_38_ApidParameterReportingEntries_parameterReportingEntries.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_3_38_ApidParameterReportingEntries_parameterReportingEntries.sizeRange(ls, offset, from, to) == TTC_3_38_ApidParameterReportingEntries_parameterReportingEntries.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TParameterReportingEntries], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 70L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 70L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 70L)
            assert(elemSizeOtherOff == 70L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TTC_3_38_ApidParameterReportingEntries_parameterReportingEntries.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_3_38_ApidParameterReportingEntries_parameterReportingEntries.sizeRange(ls, offset, from, to) == TTC_3_38_ApidParameterReportingEntries_parameterReportingEntries.sizeRange(ls, otherOffset, from, to)
    }
}

case class TTC_3_38_ApidParameterReportingEntries (
    applicationProcess_ID: TApplicationProcess_ID, 
    parameterReportingEntries: TTC_3_38_ApidParameterReportingEntries_parameterReportingEntries
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854766874L))
        val size_0 = 11L
        val size_1 = 32L
        val size_2 = this.parameterReportingEntries.size(offset + size_0 + size_1)
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 8933L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854766874L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854766874L))
        val size_0_offset = 11L
        val size_0_otherOffset = 11L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.parameterReportingEntries.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.parameterReportingEntries.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.parameterReportingEntries.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854766874L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854766874L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 11L
        val size_0_otherOffset = 11L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.parameterReportingEntries.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.parameterReportingEntries.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.parameterReportingEntries.sizeLemmaNextByte(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854766874L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854766874L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 11L
        val size_0_otherOffset = 11L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.parameterReportingEntries.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.parameterReportingEntries.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.parameterReportingEntries.sizeLemmaNextWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854766874L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854766874L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 11L
        val size_0_otherOffset = 11L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.parameterReportingEntries.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.parameterReportingEntries.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.parameterReportingEntries.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_3_38_APIDPARAMETERREPORTINGENTRIES_PARAMETERREPORTINGENTRIES: Int = 1685 /*(SIZE(1 .. macTC-38-ParameterReportingEntryCount)) */
@inline @cCode.inline val ERR_TC_3_38_APIDPARAMETERREPORTINGENTRIES_PARAMETERREPORTINGENTRIES_ELM_2: Int = 1680 /* */

@inline @cCode.inline val ERR_TC_3_38_APIDPARAMETERREPORTINGENTRIES: Int = 1690 /* */
@inline @cCode.inline val ERR_TC_3_38_APIDPARAMETERREPORTINGENTRIES_APPLICATIONPROCESS_ID_2: Int = 1613 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_38_APIDPARAMETERREPORTINGENTRIES: Int = 1693 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_38_APIDPARAMETERREPORTINGENTRIES_APPLICATIONPROCESS_ID_2: Int = 1616 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_38_APIDPARAMETERREPORTINGENTRIES_N2_UNINITIALIZED: Int = 1694 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_38_APIDPARAMETERREPORTINGENTRIES_N2: Int = 1618 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_38_APIDPARAMETERREPORTINGENTRIES_PARAMETERREPORTINGENTRIES: Int = 1688 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_38_APIDPARAMETERREPORTINGENTRIES_PARAMETERREPORTINGENTRIES_ELM_2: Int = 1683 /*  */
@inline @cCode.inline val TTC_3_38_ApidParameterReportingEntries_REQUIRED_BYTES_FOR_ACN_ENCODING = 1117
@inline @cCode.inline val TTC_3_38_ApidParameterReportingEntries_REQUIRED_BITS_FOR_ACN_ENCODING = 8933

@inline @cCode.inline val ERR_ACN_DECODE_TC_3_38_APIDPARAMETERREPORTINGENTRIES: Int = 1695 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_3_38_APIDPARAMETERREPORTINGENTRIES_APPLICATIONPROCESS_ID_2: Int = 1617 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_3_38_APIDPARAMETERREPORTINGENTRIES_N2: Int = 1619 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_3_38_APIDPARAMETERREPORTINGENTRIES_PARAMETERREPORTINGENTRIES: Int = 1689 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_3_38_APIDPARAMETERREPORTINGENTRIES_PARAMETERREPORTINGENTRIES_ELM_2: Int = 1684 /*  */
/*-- TTC_3_38_CreateAParameterFunctionalReportingDefinitionMultipleApid --------------------------------------------*/


case class TTC_3_38_CreateAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingEntries (nCount: Int, arr: Vector[TTC_3_38_ApidParameterReportingEntries])
{
    require(this.arr.size <= 127 && 1 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036853641316L))
        TTC_3_38_CreateAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingEntries.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 1134491L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036853641316L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036853641316L))
        TTC_3_38_CreateAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingEntries.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036853641316L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036853641316L))
        require((offset % 8L) == (otherOffset % 8L))
        TTC_3_38_CreateAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingEntries.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036853641316L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036853641316L))
        require((offset % 16L) == (otherOffset % 16L))
        TTC_3_38_CreateAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingEntries.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036853641316L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036853641316L))
        require((offset % 32L) == (otherOffset % 32L))
        TTC_3_38_CreateAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingEntries.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TTC_3_38_CreateAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingEntries {
    def sizeRange(ls: Vector[TTC_3_38_ApidParameterReportingEntries], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 8933L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(0L <= elemSize && elemSize <= 8933L)
            elemSize + TTC_3_38_CreateAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingEntries.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 8933L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TTC_3_38_ApidParameterReportingEntries], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 8933L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 8933L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 8933L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 8933L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TTC_3_38_CreateAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingEntries.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_3_38_CreateAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingEntries.sizeRange(ls, offset, from, to) == TTC_3_38_CreateAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingEntries.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TTC_3_38_ApidParameterReportingEntries], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 8933L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 8933L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 8933L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 8933L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TTC_3_38_CreateAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingEntries.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_3_38_CreateAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingEntries.sizeRange(ls, offset, from, to) == TTC_3_38_CreateAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingEntries.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TTC_3_38_ApidParameterReportingEntries], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 8933L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 8933L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 8933L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 8933L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TTC_3_38_CreateAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingEntries.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_3_38_CreateAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingEntries.sizeRange(ls, offset, from, to) == TTC_3_38_CreateAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingEntries.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TTC_3_38_ApidParameterReportingEntries], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 8933L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 8933L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 8933L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 8933L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TTC_3_38_CreateAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingEntries.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_3_38_CreateAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingEntries.sizeRange(ls, offset, from, to) == TTC_3_38_CreateAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingEntries.sizeRange(ls, otherOffset, from, to)
    }
}

case class TTC_3_38_CreateAParameterFunctionalReportingDefinitionMultipleApid (
    parameterFunctionalReportingDefinition_ID: TParameterFunctionalReportingDefinition_ID, 
    apidParameterReportingEntries: TTC_3_38_CreateAParameterFunctionalReportingDefinitionMultipleApid_apidParameterReportingEntries
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036853641252L))
        val size_0 = 32L
        val size_1 = 32L
        val size_2 = this.apidParameterReportingEntries.size(offset + size_0 + size_1)
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 1134555L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036853641252L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036853641252L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.apidParameterReportingEntries.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.apidParameterReportingEntries.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.apidParameterReportingEntries.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036853641252L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036853641252L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.apidParameterReportingEntries.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.apidParameterReportingEntries.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.apidParameterReportingEntries.sizeLemmaNextByte(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036853641252L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036853641252L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.apidParameterReportingEntries.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.apidParameterReportingEntries.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.apidParameterReportingEntries.sizeLemmaNextWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036853641252L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036853641252L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.apidParameterReportingEntries.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.apidParameterReportingEntries.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.apidParameterReportingEntries.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_3_38_CREATEAPARAMETERFUNCTIONALREPORTINGDEFINITIONMULTIPLEAPID_APIDPARAMETERREPORTINGENTRIES: Int = 1509 /*(SIZE(1 .. maxTC-38-ApidParameterReportingEntryCount)) */
@inline @cCode.inline val ERR_TC_3_38_CREATEAPARAMETERFUNCTIONALREPORTINGDEFINITIONMULTIPLEAPID_APIDPARAMETERREPORTINGENTRIES_ELM_2: Int = 1504 /* */

@inline @cCode.inline val ERR_TC_3_38_CREATEAPARAMETERFUNCTIONALREPORTINGDEFINITIONMULTIPLEAPID: Int = 1514 /* */
@inline @cCode.inline val ERR_TC_3_38_CREATEAPARAMETERFUNCTIONALREPORTINGDEFINITIONMULTIPLEAPID_PARAMETERFUNCTIONALREPORTINGDEFINITION_ID_2: Int = 1410 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_38_CREATEAPARAMETERFUNCTIONALREPORTINGDEFINITIONMULTIPLEAPID: Int = 1517 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_38_CREATEAPARAMETERFUNCTIONALREPORTINGDEFINITIONMULTIPLEAPID_PARAMETERFUNCTIONALREPORTINGDEFINITION_ID_2: Int = 1413 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_38_CREATEAPARAMETERFUNCTIONALREPORTINGDEFINITIONMULTIPLEAPID_N1_UNINITIALIZED: Int = 1518 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_38_CREATEAPARAMETERFUNCTIONALREPORTINGDEFINITIONMULTIPLEAPID_N1: Int = 1415 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_38_CREATEAPARAMETERFUNCTIONALREPORTINGDEFINITIONMULTIPLEAPID_APIDPARAMETERREPORTINGENTRIES: Int = 1512 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_38_CREATEAPARAMETERFUNCTIONALREPORTINGDEFINITIONMULTIPLEAPID_APIDPARAMETERREPORTINGENTRIES_ELM_2: Int = 1507 /*  */
@inline @cCode.inline val TTC_3_38_CreateAParameterFunctionalReportingDefinitionMultipleApid_REQUIRED_BYTES_FOR_ACN_ENCODING = 141820
@inline @cCode.inline val TTC_3_38_CreateAParameterFunctionalReportingDefinitionMultipleApid_REQUIRED_BITS_FOR_ACN_ENCODING = 1134555

@inline @cCode.inline val ERR_ACN_DECODE_TC_3_38_CREATEAPARAMETERFUNCTIONALREPORTINGDEFINITIONMULTIPLEAPID: Int = 1519 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_3_38_CREATEAPARAMETERFUNCTIONALREPORTINGDEFINITIONMULTIPLEAPID_PARAMETERFUNCTIONALREPORTINGDEFINITION_ID_2: Int = 1414 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_3_38_CREATEAPARAMETERFUNCTIONALREPORTINGDEFINITIONMULTIPLEAPID_N1: Int = 1416 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_3_38_CREATEAPARAMETERFUNCTIONALREPORTINGDEFINITIONMULTIPLEAPID_APIDPARAMETERREPORTINGENTRIES: Int = 1513 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_3_38_CREATEAPARAMETERFUNCTIONALREPORTINGDEFINITIONMULTIPLEAPID_APIDPARAMETERREPORTINGENTRIES_ELM_2: Int = 1508 /*  */
/*-- TTC_3_38_CreateAParameterFunctionalReportingDefinition --------------------------------------------*/


case class TTC_3_38_CreateAParameterFunctionalReportingDefinition_parameterReportingEntries (nCount: Int, arr: Vector[TParameterReportingEntries])
{
    require(this.arr.size <= 127 && 1 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854766917L))
        TTC_3_38_CreateAParameterFunctionalReportingDefinition_parameterReportingEntries.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 8890L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854766917L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854766917L))
        TTC_3_38_CreateAParameterFunctionalReportingDefinition_parameterReportingEntries.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854766917L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854766917L))
        require((offset % 8L) == (otherOffset % 8L))
        TTC_3_38_CreateAParameterFunctionalReportingDefinition_parameterReportingEntries.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854766917L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854766917L))
        require((offset % 16L) == (otherOffset % 16L))
        TTC_3_38_CreateAParameterFunctionalReportingDefinition_parameterReportingEntries.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854766917L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854766917L))
        require((offset % 32L) == (otherOffset % 32L))
        TTC_3_38_CreateAParameterFunctionalReportingDefinition_parameterReportingEntries.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TTC_3_38_CreateAParameterFunctionalReportingDefinition_parameterReportingEntries {
    def sizeRange(ls: Vector[TParameterReportingEntries], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 70L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(elemSize == 70L)
            elemSize + TTC_3_38_CreateAParameterFunctionalReportingDefinition_parameterReportingEntries.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 70L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TParameterReportingEntries], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 70L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 70L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 70L)
            assert(elemSizeOtherOff == 70L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TTC_3_38_CreateAParameterFunctionalReportingDefinition_parameterReportingEntries.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_3_38_CreateAParameterFunctionalReportingDefinition_parameterReportingEntries.sizeRange(ls, offset, from, to) == TTC_3_38_CreateAParameterFunctionalReportingDefinition_parameterReportingEntries.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TParameterReportingEntries], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 70L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 70L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 70L)
            assert(elemSizeOtherOff == 70L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TTC_3_38_CreateAParameterFunctionalReportingDefinition_parameterReportingEntries.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_3_38_CreateAParameterFunctionalReportingDefinition_parameterReportingEntries.sizeRange(ls, offset, from, to) == TTC_3_38_CreateAParameterFunctionalReportingDefinition_parameterReportingEntries.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TParameterReportingEntries], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 70L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 70L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 70L)
            assert(elemSizeOtherOff == 70L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TTC_3_38_CreateAParameterFunctionalReportingDefinition_parameterReportingEntries.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_3_38_CreateAParameterFunctionalReportingDefinition_parameterReportingEntries.sizeRange(ls, offset, from, to) == TTC_3_38_CreateAParameterFunctionalReportingDefinition_parameterReportingEntries.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TParameterReportingEntries], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 70L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 70L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 70L)
            assert(elemSizeOtherOff == 70L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TTC_3_38_CreateAParameterFunctionalReportingDefinition_parameterReportingEntries.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_3_38_CreateAParameterFunctionalReportingDefinition_parameterReportingEntries.sizeRange(ls, offset, from, to) == TTC_3_38_CreateAParameterFunctionalReportingDefinition_parameterReportingEntries.sizeRange(ls, otherOffset, from, to)
    }
}

case class TTC_3_38_CreateAParameterFunctionalReportingDefinition (
    parameterFunctionalReportingDefinition_ID: TParameterFunctionalReportingDefinition_ID, 
    parameterReportingEntries: TTC_3_38_CreateAParameterFunctionalReportingDefinition_parameterReportingEntries
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854766853L))
        val size_0 = 32L
        val size_1 = 32L
        val size_2 = this.parameterReportingEntries.size(offset + size_0 + size_1)
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 8954L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854766853L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854766853L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.parameterReportingEntries.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.parameterReportingEntries.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.parameterReportingEntries.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854766853L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854766853L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.parameterReportingEntries.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.parameterReportingEntries.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.parameterReportingEntries.sizeLemmaNextByte(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854766853L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854766853L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.parameterReportingEntries.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.parameterReportingEntries.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.parameterReportingEntries.sizeLemmaNextWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854766853L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854766853L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.parameterReportingEntries.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.parameterReportingEntries.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.parameterReportingEntries.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_3_38_CREATEAPARAMETERFUNCTIONALREPORTINGDEFINITION_PARAMETERREPORTINGENTRIES: Int = 1597 /*(SIZE(1 .. macTC-38-ParameterReportingEntryCount)) */
@inline @cCode.inline val ERR_TC_3_38_CREATEAPARAMETERFUNCTIONALREPORTINGDEFINITION_PARAMETERREPORTINGENTRIES_ELM_2: Int = 1592 /* */

@inline @cCode.inline val ERR_TC_3_38_CREATEAPARAMETERFUNCTIONALREPORTINGDEFINITION: Int = 1602 /* */
@inline @cCode.inline val ERR_TC_3_38_CREATEAPARAMETERFUNCTIONALREPORTINGDEFINITION_PARAMETERFUNCTIONALREPORTINGDEFINITION_ID_2: Int = 1525 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_38_CREATEAPARAMETERFUNCTIONALREPORTINGDEFINITION: Int = 1605 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_38_CREATEAPARAMETERFUNCTIONALREPORTINGDEFINITION_PARAMETERFUNCTIONALREPORTINGDEFINITION_ID_2: Int = 1528 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_38_CREATEAPARAMETERFUNCTIONALREPORTINGDEFINITION_N2_UNINITIALIZED: Int = 1606 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_38_CREATEAPARAMETERFUNCTIONALREPORTINGDEFINITION_N2: Int = 1530 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_38_CREATEAPARAMETERFUNCTIONALREPORTINGDEFINITION_PARAMETERREPORTINGENTRIES: Int = 1600 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_38_CREATEAPARAMETERFUNCTIONALREPORTINGDEFINITION_PARAMETERREPORTINGENTRIES_ELM_2: Int = 1595 /*  */
@inline @cCode.inline val TTC_3_38_CreateAParameterFunctionalReportingDefinition_REQUIRED_BYTES_FOR_ACN_ENCODING = 1120
@inline @cCode.inline val TTC_3_38_CreateAParameterFunctionalReportingDefinition_REQUIRED_BITS_FOR_ACN_ENCODING = 8954

@inline @cCode.inline val ERR_ACN_DECODE_TC_3_38_CREATEAPARAMETERFUNCTIONALREPORTINGDEFINITION: Int = 1607 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_3_38_CREATEAPARAMETERFUNCTIONALREPORTINGDEFINITION_PARAMETERFUNCTIONALREPORTINGDEFINITION_ID_2: Int = 1529 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_3_38_CREATEAPARAMETERFUNCTIONALREPORTINGDEFINITION_N2: Int = 1531 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_3_38_CREATEAPARAMETERFUNCTIONALREPORTINGDEFINITION_PARAMETERREPORTINGENTRIES: Int = 1601 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_3_38_CREATEAPARAMETERFUNCTIONALREPORTINGDEFINITION_PARAMETERREPORTINGENTRIES_ELM_2: Int = 1596 /*  */

// @inline @cCode.inline val macTC_38_ParameterReportingEntryCount: Int = 127 // defined in body
// @inline @cCode.inline val maxTC_38_ApidParameterReportingEntryCount: Int = 127 // defined in body

