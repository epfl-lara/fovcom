/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TTC_3_2_SuperCommutatedParameterSet --------------------------------------------*/


case class TTC_3_2_SuperCommutatedParameterSet_parameter_ID (nCount: Int, arr: Vector[TParameter_ID])
{
    require(this.arr.size <= 255 && 0 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854767647L))
        TTC_3_2_SuperCommutatedParameterSet_parameter_ID.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 8160L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767647L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767647L))
        TTC_3_2_SuperCommutatedParameterSet_parameter_ID.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767647L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767647L))
        require((offset % 8L) == (otherOffset % 8L))
        TTC_3_2_SuperCommutatedParameterSet_parameter_ID.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767647L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767647L))
        require((offset % 16L) == (otherOffset % 16L))
        TTC_3_2_SuperCommutatedParameterSet_parameter_ID.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767647L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767647L))
        require((offset % 32L) == (otherOffset % 32L))
        TTC_3_2_SuperCommutatedParameterSet_parameter_ID.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TTC_3_2_SuperCommutatedParameterSet_parameter_ID {
    def sizeRange(ls: Vector[TParameter_ID], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 255))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = 32L
            assert(elemSize == 32L)
            elemSize + TTC_3_2_SuperCommutatedParameterSet_parameter_ID.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 32L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TParameter_ID], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 255))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 32L
            val elemSizeOtherOff = 32L
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            TTC_3_2_SuperCommutatedParameterSet_parameter_ID.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_3_2_SuperCommutatedParameterSet_parameter_ID.sizeRange(ls, offset, from, to) == TTC_3_2_SuperCommutatedParameterSet_parameter_ID.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TParameter_ID], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 255))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 32L
            val elemSizeOtherOff = 32L
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            TTC_3_2_SuperCommutatedParameterSet_parameter_ID.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_3_2_SuperCommutatedParameterSet_parameter_ID.sizeRange(ls, offset, from, to) == TTC_3_2_SuperCommutatedParameterSet_parameter_ID.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TParameter_ID], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 255))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 32L
            val elemSizeOtherOff = 32L
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            TTC_3_2_SuperCommutatedParameterSet_parameter_ID.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_3_2_SuperCommutatedParameterSet_parameter_ID.sizeRange(ls, offset, from, to) == TTC_3_2_SuperCommutatedParameterSet_parameter_ID.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TParameter_ID], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 255))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 32L
            val elemSizeOtherOff = 32L
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            TTC_3_2_SuperCommutatedParameterSet_parameter_ID.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_3_2_SuperCommutatedParameterSet_parameter_ID.sizeRange(ls, offset, from, to) == TTC_3_2_SuperCommutatedParameterSet_parameter_ID.sizeRange(ls, otherOffset, from, to)
    }
}

case class TTC_3_2_SuperCommutatedParameterSet (
    superCommutatedSampleRepetitionNumber: TPUSC_UINT32, 
    parameter_ID: TTC_3_2_SuperCommutatedParameterSet_parameter_ID
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854767583L))
        val size_0 = 32L
        val size_1 = 32L
        val size_2 = this.parameter_ID.size(offset + size_0 + size_1)
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 8224L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767583L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767583L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.parameter_ID.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.parameter_ID.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.parameter_ID.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767583L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767583L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.parameter_ID.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.parameter_ID.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.parameter_ID.sizeLemmaNextByte(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767583L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767583L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.parameter_ID.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.parameter_ID.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.parameter_ID.sizeLemmaNextWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767583L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767583L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.parameter_ID.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.parameter_ID.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.parameter_ID.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_3_2_SUPERCOMMUTATEDPARAMETERSET_PARAMETER_ID: Int = 847 /*(SIZE(0 .. maxTC-3-2-Parameter-ID-Count)) */
@inline @cCode.inline val ERR_TC_3_2_SUPERCOMMUTATEDPARAMETERSET_PARAMETER_ID_ELM_2: Int = 842 /* */

@inline @cCode.inline val ERR_TC_3_2_SUPERCOMMUTATEDPARAMETERSET: Int = 852 /* */
@inline @cCode.inline val ERR_TC_3_2_SUPERCOMMUTATEDPARAMETERSET_SUPERCOMMUTATEDSAMPLEREPETITIONNUMBER_2: Int = 830 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_2_SUPERCOMMUTATEDPARAMETERSET: Int = 855 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_2_SUPERCOMMUTATEDPARAMETERSET_SUPERCOMMUTATEDSAMPLEREPETITIONNUMBER_2: Int = 833 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_2_SUPERCOMMUTATEDPARAMETERSET_N2_UNINITIALIZED: Int = 856 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_2_SUPERCOMMUTATEDPARAMETERSET_N2: Int = 835 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_2_SUPERCOMMUTATEDPARAMETERSET_PARAMETER_ID: Int = 850 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_2_SUPERCOMMUTATEDPARAMETERSET_PARAMETER_ID_ELM_2: Int = 845 /*  */
@inline @cCode.inline val TTC_3_2_SuperCommutatedParameterSet_REQUIRED_BYTES_FOR_ACN_ENCODING = 1028
@inline @cCode.inline val TTC_3_2_SuperCommutatedParameterSet_REQUIRED_BITS_FOR_ACN_ENCODING = 8224

@inline @cCode.inline val ERR_ACN_DECODE_TC_3_2_SUPERCOMMUTATEDPARAMETERSET: Int = 857 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_3_2_SUPERCOMMUTATEDPARAMETERSET_SUPERCOMMUTATEDSAMPLEREPETITIONNUMBER_2: Int = 834 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_3_2_SUPERCOMMUTATEDPARAMETERSET_N2: Int = 836 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_3_2_SUPERCOMMUTATEDPARAMETERSET_PARAMETER_ID: Int = 851 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_3_2_SUPERCOMMUTATEDPARAMETERSET_PARAMETER_ID_ELM_2: Int = 846 /*  */
/*-- TTC_3_2_CreateADiagnosticParameterReportStructure --------------------------------------------*/


case class TTC_3_2_CreateADiagnosticParameterReportStructure_parameter_ID (nCount: Int, arr: Vector[TParameter_ID])
{
    require(this.arr.size <= 255 && 0 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854767647L))
        TTC_3_2_CreateADiagnosticParameterReportStructure_parameter_ID.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 8160L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767647L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767647L))
        TTC_3_2_CreateADiagnosticParameterReportStructure_parameter_ID.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767647L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767647L))
        require((offset % 8L) == (otherOffset % 8L))
        TTC_3_2_CreateADiagnosticParameterReportStructure_parameter_ID.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767647L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767647L))
        require((offset % 16L) == (otherOffset % 16L))
        TTC_3_2_CreateADiagnosticParameterReportStructure_parameter_ID.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767647L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767647L))
        require((offset % 32L) == (otherOffset % 32L))
        TTC_3_2_CreateADiagnosticParameterReportStructure_parameter_ID.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TTC_3_2_CreateADiagnosticParameterReportStructure_parameter_ID {
    def sizeRange(ls: Vector[TParameter_ID], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 255))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = 32L
            assert(elemSize == 32L)
            elemSize + TTC_3_2_CreateADiagnosticParameterReportStructure_parameter_ID.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 32L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TParameter_ID], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 255))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 32L
            val elemSizeOtherOff = 32L
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            TTC_3_2_CreateADiagnosticParameterReportStructure_parameter_ID.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_3_2_CreateADiagnosticParameterReportStructure_parameter_ID.sizeRange(ls, offset, from, to) == TTC_3_2_CreateADiagnosticParameterReportStructure_parameter_ID.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TParameter_ID], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 255))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 32L
            val elemSizeOtherOff = 32L
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            TTC_3_2_CreateADiagnosticParameterReportStructure_parameter_ID.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_3_2_CreateADiagnosticParameterReportStructure_parameter_ID.sizeRange(ls, offset, from, to) == TTC_3_2_CreateADiagnosticParameterReportStructure_parameter_ID.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TParameter_ID], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 255))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 32L
            val elemSizeOtherOff = 32L
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            TTC_3_2_CreateADiagnosticParameterReportStructure_parameter_ID.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_3_2_CreateADiagnosticParameterReportStructure_parameter_ID.sizeRange(ls, offset, from, to) == TTC_3_2_CreateADiagnosticParameterReportStructure_parameter_ID.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TParameter_ID], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 255))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 32L
            val elemSizeOtherOff = 32L
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            TTC_3_2_CreateADiagnosticParameterReportStructure_parameter_ID.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_3_2_CreateADiagnosticParameterReportStructure_parameter_ID.sizeRange(ls, offset, from, to) == TTC_3_2_CreateADiagnosticParameterReportStructure_parameter_ID.sizeRange(ls, otherOffset, from, to)
    }
}


case class TTC_3_2_CreateADiagnosticParameterReportStructure_superCommutatedParameterSet (nCount: Int, arr: Vector[TTC_3_2_SuperCommutatedParameterSet])
{
    require(this.arr.size <= 127 && 0 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036853731359L))
        TTC_3_2_CreateADiagnosticParameterReportStructure_superCommutatedParameterSet.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 1044448L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036853731359L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036853731359L))
        TTC_3_2_CreateADiagnosticParameterReportStructure_superCommutatedParameterSet.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036853731359L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036853731359L))
        require((offset % 8L) == (otherOffset % 8L))
        TTC_3_2_CreateADiagnosticParameterReportStructure_superCommutatedParameterSet.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036853731359L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036853731359L))
        require((offset % 16L) == (otherOffset % 16L))
        TTC_3_2_CreateADiagnosticParameterReportStructure_superCommutatedParameterSet.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036853731359L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036853731359L))
        require((offset % 32L) == (otherOffset % 32L))
        TTC_3_2_CreateADiagnosticParameterReportStructure_superCommutatedParameterSet.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TTC_3_2_CreateADiagnosticParameterReportStructure_superCommutatedParameterSet {
    def sizeRange(ls: Vector[TTC_3_2_SuperCommutatedParameterSet], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 8224L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(0L <= elemSize && elemSize <= 8224L)
            elemSize + TTC_3_2_CreateADiagnosticParameterReportStructure_superCommutatedParameterSet.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 8224L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TTC_3_2_SuperCommutatedParameterSet], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 8224L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 8224L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 8224L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 8224L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TTC_3_2_CreateADiagnosticParameterReportStructure_superCommutatedParameterSet.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_3_2_CreateADiagnosticParameterReportStructure_superCommutatedParameterSet.sizeRange(ls, offset, from, to) == TTC_3_2_CreateADiagnosticParameterReportStructure_superCommutatedParameterSet.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TTC_3_2_SuperCommutatedParameterSet], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 8224L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 8224L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 8224L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 8224L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TTC_3_2_CreateADiagnosticParameterReportStructure_superCommutatedParameterSet.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_3_2_CreateADiagnosticParameterReportStructure_superCommutatedParameterSet.sizeRange(ls, offset, from, to) == TTC_3_2_CreateADiagnosticParameterReportStructure_superCommutatedParameterSet.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TTC_3_2_SuperCommutatedParameterSet], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 8224L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 8224L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 8224L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 8224L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TTC_3_2_CreateADiagnosticParameterReportStructure_superCommutatedParameterSet.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_3_2_CreateADiagnosticParameterReportStructure_superCommutatedParameterSet.sizeRange(ls, offset, from, to) == TTC_3_2_CreateADiagnosticParameterReportStructure_superCommutatedParameterSet.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TTC_3_2_SuperCommutatedParameterSet], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 127))
        require((0L <= offset) && (offset <= 9223372036854775807L - 8224L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 8224L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 8224L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 8224L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TTC_3_2_CreateADiagnosticParameterReportStructure_superCommutatedParameterSet.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_3_2_CreateADiagnosticParameterReportStructure_superCommutatedParameterSet.sizeRange(ls, offset, from, to) == TTC_3_2_CreateADiagnosticParameterReportStructure_superCommutatedParameterSet.sizeRange(ls, otherOffset, from, to)
    }
}

case class TTC_3_2_CreateADiagnosticParameterReportStructure (
    diagnosticParameterReportStructure_ID: TDiagnosticParameterReportStructure_ID, 
    collectionInterval: TPUSC_UINT32, 
    parameter_ID: TTC_3_2_CreateADiagnosticParameterReportStructure_parameter_ID, 
    superCommutatedParameterSet: TTC_3_2_CreateADiagnosticParameterReportStructure_superCommutatedParameterSet
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036853723071L))
        val size_0 = 32L
        val size_1 = 32L
        val size_2 = 32L
        val size_3 = this.parameter_ID.size(offset + size_0 + size_1 + size_2)
        val size_4 = 32L
        val size_5 = this.superCommutatedParameterSet.size(offset + size_0 + size_1 + size_2 + size_3 + size_4)
        size_0 + size_1 + size_2 + size_3 + size_4 + size_5
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 1052736L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036853723071L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036853723071L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = this.parameter_ID.size(offset + size_0_offset + size_1_offset + size_2_offset)
        val size_3_otherOffset = this.parameter_ID.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        this.parameter_ID.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset + size_2_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        val size_4_offset = 32L
        val size_4_otherOffset = 32L
        val size_5_offset = this.superCommutatedParameterSet.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset)
        val size_5_otherOffset = this.superCommutatedParameterSet.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset)
        this.superCommutatedParameterSet.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036853723071L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036853723071L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = this.parameter_ID.size(offset + size_0_offset + size_1_offset + size_2_offset)
        val size_3_otherOffset = this.parameter_ID.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        this.parameter_ID.sizeLemmaNextByte(offset + size_0_offset + size_1_offset + size_2_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        val size_4_offset = 32L
        val size_4_otherOffset = 32L
        val size_5_offset = this.superCommutatedParameterSet.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset)
        val size_5_otherOffset = this.superCommutatedParameterSet.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset)
        this.superCommutatedParameterSet.sizeLemmaNextByte(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036853723071L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036853723071L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = this.parameter_ID.size(offset + size_0_offset + size_1_offset + size_2_offset)
        val size_3_otherOffset = this.parameter_ID.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        this.parameter_ID.sizeLemmaNextWord(offset + size_0_offset + size_1_offset + size_2_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        val size_4_offset = 32L
        val size_4_otherOffset = 32L
        val size_5_offset = this.superCommutatedParameterSet.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset)
        val size_5_otherOffset = this.superCommutatedParameterSet.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset)
        this.superCommutatedParameterSet.sizeLemmaNextWord(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036853723071L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036853723071L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = this.parameter_ID.size(offset + size_0_offset + size_1_offset + size_2_offset)
        val size_3_otherOffset = this.parameter_ID.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        this.parameter_ID.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset + size_2_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        val size_4_offset = 32L
        val size_4_otherOffset = 32L
        val size_5_offset = this.superCommutatedParameterSet.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset)
        val size_5_otherOffset = this.superCommutatedParameterSet.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset)
        this.superCommutatedParameterSet.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_3_2_CREATEADIAGNOSTICPARAMETERREPORTSTRUCTURE_PARAMETER_ID: Int = 769 /*(SIZE(0 .. maxTC-3-2-Parameter-ID-Count)) */
@inline @cCode.inline val ERR_TC_3_2_CREATEADIAGNOSTICPARAMETERREPORTSTRUCTURE_PARAMETER_ID_ELM_2: Int = 764 /* */

@inline @cCode.inline val ERR_TC_3_2_CREATEADIAGNOSTICPARAMETERREPORTSTRUCTURE_SUPERCOMMUTATEDPARAMETERSET: Int = 813 /*(SIZE(0 .. maxTC-3-2-SuperComutatedParameterSetCount)) */
@inline @cCode.inline val ERR_TC_3_2_CREATEADIAGNOSTICPARAMETERREPORTSTRUCTURE_SUPERCOMMUTATEDPARAMETERSET_ELM_2: Int = 808 /* */

@inline @cCode.inline val ERR_TC_3_2_CREATEADIAGNOSTICPARAMETERREPORTSTRUCTURE: Int = 818 /* */
@inline @cCode.inline val ERR_TC_3_2_CREATEADIAGNOSTICPARAMETERREPORTSTRUCTURE_DIAGNOSTICPARAMETERREPORTSTRUCTURE_ID_2: Int = 737 /* */
@inline @cCode.inline val ERR_TC_3_2_CREATEADIAGNOSTICPARAMETERREPORTSTRUCTURE_COLLECTIONINTERVAL_2_2: Int = 752 /* */

 
 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_2_CREATEADIAGNOSTICPARAMETERREPORTSTRUCTURE: Int = 821 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_2_CREATEADIAGNOSTICPARAMETERREPORTSTRUCTURE_DIAGNOSTICPARAMETERREPORTSTRUCTURE_ID_2: Int = 740 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_2_CREATEADIAGNOSTICPARAMETERREPORTSTRUCTURE_COLLECTIONINTERVAL_2_2: Int = 755 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_2_CREATEADIAGNOSTICPARAMETERREPORTSTRUCTURE_N1_UNINITIALIZED: Int = 822 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_2_CREATEADIAGNOSTICPARAMETERREPORTSTRUCTURE_N1: Int = 757 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_2_CREATEADIAGNOSTICPARAMETERREPORTSTRUCTURE_PARAMETER_ID: Int = 772 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_2_CREATEADIAGNOSTICPARAMETERREPORTSTRUCTURE_PARAMETER_ID_ELM_2: Int = 767 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_2_CREATEADIAGNOSTICPARAMETERREPORTSTRUCTURE_NFA_UNINITIALIZED: Int = 823 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_2_CREATEADIAGNOSTICPARAMETERREPORTSTRUCTURE_NFA: Int = 774 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_2_CREATEADIAGNOSTICPARAMETERREPORTSTRUCTURE_SUPERCOMMUTATEDPARAMETERSET: Int = 816 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_3_2_CREATEADIAGNOSTICPARAMETERREPORTSTRUCTURE_SUPERCOMMUTATEDPARAMETERSET_ELM_2: Int = 811 /*  */
@inline @cCode.inline val TTC_3_2_CreateADiagnosticParameterReportStructure_REQUIRED_BYTES_FOR_ACN_ENCODING = 131592
@inline @cCode.inline val TTC_3_2_CreateADiagnosticParameterReportStructure_REQUIRED_BITS_FOR_ACN_ENCODING = 1052736

@inline @cCode.inline val ERR_ACN_DECODE_TC_3_2_CREATEADIAGNOSTICPARAMETERREPORTSTRUCTURE: Int = 824 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_3_2_CREATEADIAGNOSTICPARAMETERREPORTSTRUCTURE_DIAGNOSTICPARAMETERREPORTSTRUCTURE_ID_2: Int = 741 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_3_2_CREATEADIAGNOSTICPARAMETERREPORTSTRUCTURE_COLLECTIONINTERVAL_2_2: Int = 756 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_3_2_CREATEADIAGNOSTICPARAMETERREPORTSTRUCTURE_N1: Int = 758 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_3_2_CREATEADIAGNOSTICPARAMETERREPORTSTRUCTURE_PARAMETER_ID: Int = 773 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_3_2_CREATEADIAGNOSTICPARAMETERREPORTSTRUCTURE_PARAMETER_ID_ELM_2: Int = 768 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_3_2_CREATEADIAGNOSTICPARAMETERREPORTSTRUCTURE_NFA: Int = 775 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_3_2_CREATEADIAGNOSTICPARAMETERREPORTSTRUCTURE_SUPERCOMMUTATEDPARAMETERSET: Int = 817 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_3_2_CREATEADIAGNOSTICPARAMETERREPORTSTRUCTURE_SUPERCOMMUTATEDPARAMETERSET_ELM_2: Int = 812 /*  */

// @inline @cCode.inline val maxTC_3_2_Parameter_ID_Count: Int = 255 // defined in body
// @inline @cCode.inline val maxTC_3_2_SuperComutatedParameterSetCount: Int = 127 // defined in body

