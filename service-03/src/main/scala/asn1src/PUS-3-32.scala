/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

val maxTC_3_32_DiagnosticParameterReportStructureIntervalCount: Int = 63 // variables:188

def TDiagnosticParameterReportStructureIntervals_IsConstraintValid(pVal: TDiagnosticParameterReportStructureIntervals): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TDiagnosticParameterReportStructure_ID_IsConstraintValid(pVal.diagnosticParameterReportStructure_ID)
    if ret.isRight then
        ret = TPUSC_UINT32_IsConstraintValid(pVal.collectionInterval)
    ret
}

def TDiagnosticParameterReportStructureIntervals_Initialize(): TDiagnosticParameterReportStructureIntervals = TDiagnosticParameterReportStructureIntervals(diagnosticParameterReportStructure_ID = ULong.fromRaw(0L), collectionInterval = ULong.fromRaw(0L))

@opaque @inlineOnce 
def TDiagnosticParameterReportStructureIntervals_ACN_Encode(pVal: TDiagnosticParameterReportStructureIntervals, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(64L))
    TDiagnosticParameterReportStructureIntervals_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode diagnosticParameterReportStructure_ID */
    TDiagnosticParameterReportStructure_ID_ACN_Encode(pVal.diagnosticParameterReportStructure_ID, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 64L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode collectionInterval */
    TPUSC_UINT32_ACN_Encode(pVal.collectionInterval, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 64L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TDiagnosticParameterReportStructureIntervals_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TDiagnosticParameterReportStructureIntervals] =
{
    require(codec.base.bitStream.validate_offset_bits(64L))

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode diagnosticParameterReportStructure_ID */
    val pVal_diagnosticParameterReportStructure_ID = TDiagnosticParameterReportStructure_ID_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 64L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode collectionInterval */
    val pVal_collectionInterval = TPUSC_UINT32_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 64L)
    }
    val pVal = TDiagnosticParameterReportStructureIntervals(pVal_diagnosticParameterReportStructure_ID, pVal_collectionInterval)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }

    TDiagnosticParameterReportStructureIntervals_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TDiagnosticParameterReportStructureIntervals](l)
        case Right(_) => RightMut[ErrorCode, TDiagnosticParameterReportStructureIntervals](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TDiagnosticParameterReportStructureIntervals]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TDiagnosticParameterReportStructureIntervals_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TDiagnosticParameterReportStructureIntervals_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TDiagnosticParameterReportStructureIntervals]) =
{
    require(codec.base.bitStream.validate_offset_bits(64L))
    val cpy = snapshot(codec)
    val res = TDiagnosticParameterReportStructureIntervals_ACN_Decode(cpy)
    (cpy, res)
}

def TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_diagnosticParamererReportStructureIntervals_IsConstraintValid(pVal: TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_diagnosticParamererReportStructureIntervals): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = ((1 <= pVal.nCount) && (pVal.nCount <= 63)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TDiagnosticParameterReportStructureIntervals_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_IsConstraintValid(pVal: TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_diagnosticParamererReportStructureIntervals_IsConstraintValid(pVal.diagnosticParamererReportStructureIntervals)
    ret
}

def TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_diagnosticParamererReportStructureIntervals_Initialize(): TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_diagnosticParamererReportStructureIntervals = TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_diagnosticParamererReportStructureIntervals(1, Vector.fill(63)(TDiagnosticParameterReportStructureIntervals_Initialize()))
def TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_Initialize(): TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures = TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures(diagnosticParamererReportStructureIntervals = TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_diagnosticParamererReportStructureIntervals_Initialize())

@opaque @inlineOnce 
def TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_ACN_Encode(pVal: TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(4064L))
    var i1: Int = 0
    TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val TC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_n = ULong.fromRaw(pVal.diagnosticParamererReportStructureIntervals.nCount)
    if TC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_n < ULong.fromRaw(1) || TC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_n > ULong.fromRaw(63) then
        return Left(860)
    /* Encode TC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_n */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(TC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_n)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(TC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_n)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 4064L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode diagnosticParamererReportStructureIntervals */
    TC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_diagnosticParamererReportStructureIntervals_ACN_Encode(codec, pVal, TC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_n, pVal.diagnosticParamererReportStructureIntervals) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 4064L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.diagnosticParamererReportStructureIntervals.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 4064L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_diagnosticParamererReportStructureIntervals_Encode_loop(codec: ACN, diagnosticParamererReportStructureIntervals: TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_diagnosticParamererReportStructureIntervals, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= diagnosticParamererReportStructureIntervals.nCount))
    require((1 <= diagnosticParamererReportStructureIntervals.nCount) && (diagnosticParamererReportStructureIntervals.nCount <= diagnosticParamererReportStructureIntervals.arr.size) && (diagnosticParamererReportStructureIntervals.arr.size <= 63))
    require(codec.base.bitStream.validate_offset_bits((64L * (diagnosticParamererReportStructureIntervals.nCount - i1))))
    decreases(diagnosticParamererReportStructureIntervals.nCount - i1)
    if (i1 == diagnosticParamererReportStructureIntervals.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 64L * (diagnosticParamererReportStructureIntervals.nCount - i1), 64L)
        }
        TDiagnosticParameterReportStructureIntervals_ACN_Encode(diagnosticParamererReportStructureIntervals.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(64L * (i1 + 1) == 64L * i1 + 64L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 64L * (diagnosticParamererReportStructureIntervals.nCount - i1), 64L)
            check(codec.base.bitStream.validate_offset_bits(64L * (diagnosticParamererReportStructureIntervals.nCount - (i1 + 1))))
        }
        val res = TC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_diagnosticParamererReportStructureIntervals_Encode_loop(codec, diagnosticParamererReportStructureIntervals, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_diagnosticParamererReportStructureIntervals.sizeRange(diagnosticParamererReportStructureIntervals.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, diagnosticParamererReportStructureIntervals.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + diagnosticParamererReportStructureIntervals.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_diagnosticParamererReportStructureIntervals.sizeRange(diagnosticParamererReportStructureIntervals.arr, codecSnap1.base.bitStream.bitIndex, i1, diagnosticParamererReportStructureIntervals.nCount) == diagnosticParamererReportStructureIntervals.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_diagnosticParamererReportStructureIntervals.sizeRange(diagnosticParamererReportStructureIntervals.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, diagnosticParamererReportStructureIntervals.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_diagnosticParamererReportStructureIntervals.sizeRange(diagnosticParamererReportStructureIntervals.arr, codecSnap1.base.bitStream.bitIndex, i1, diagnosticParamererReportStructureIntervals.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_diagnosticParamererReportStructureIntervals.sizeRange(diagnosticParamererReportStructureIntervals.arr, old(codec).base.bitStream.bitIndex, i1, diagnosticParamererReportStructureIntervals.nCount)
    }
}



@opaque @inlineOnce
def TC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_diagnosticParamererReportStructureIntervals_ACN_Encode(codec: ACN, pVal: TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures, TC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_n: ULong, diagnosticParamererReportStructureIntervals: TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_diagnosticParamererReportStructureIntervals): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(4032L))
    @ghost val oldCdc = snapshot(codec)
    TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_diagnosticParamererReportStructureIntervals_IsConstraintValid(diagnosticParamererReportStructureIntervals) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    TC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_diagnosticParamererReportStructureIntervals_Encode_loop(codec, diagnosticParamererReportStructureIntervals, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                diagnosticParamererReportStructureIntervals.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
            ()
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + diagnosticParamererReportStructureIntervals.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures] =
{
    require(codec.base.bitStream.validate_offset_bits(4064L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode TC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_n */
    val TC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_n = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 4064L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode diagnosticParamererReportStructureIntervals */
    val pVal_diagnosticParamererReportStructureIntervals = TC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_diagnosticParamererReportStructureIntervals_ACN_Decode(codec, TC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_n) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 4064L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_diagnosticParamererReportStructureIntervals.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 4064L)
    }
    val pVal = TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures(pVal_diagnosticParamererReportStructureIntervals)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }

    TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures](l)
        case Right(_) => RightMut[ErrorCode, TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures]) =
{
    require(codec.base.bitStream.validate_offset_bits(4064L))
    val cpy = snapshot(codec)
    val res = TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def TC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_diagnosticParamererReportStructureIntervals_Decode_loop(codec: ACN, nCount: Int, diagnosticParamererReportStructureIntervals: Vector[TDiagnosticParameterReportStructureIntervals], i1: Int): EitherMut[Int, Vector[TDiagnosticParameterReportStructureIntervals]] = {
    require((1 <= nCount) && (nCount <= 63))
    require((0 <= i1) && (i1 <= nCount))
    require(diagnosticParamererReportStructureIntervals.size == i1)
    require(codec.base.bitStream.validate_offset_bits((64L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(diagnosticParamererReportStructureIntervals)
            vecRangesEqSlicedLemma(diagnosticParamererReportStructureIntervals, diagnosticParamererReportStructureIntervals, 0, diagnosticParamererReportStructureIntervals.size, 0, i1)
        }
        RightMut[Int, Vector[TDiagnosticParameterReportStructureIntervals]](diagnosticParamererReportStructureIntervals)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 64L * (nCount - i1), 64L)
        }
        val diagnosticParamererReportStructureIntervals_arr_i1_ = TDiagnosticParameterReportStructureIntervals_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(64L * (i1 + 1) == 64L * i1 + 64L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 64L * (nCount - i1), 64L)
            check(codec.base.bitStream.validate_offset_bits(64L * (nCount - (i1 + 1))))
        }
        val res = TC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_diagnosticParamererReportStructureIntervals_Decode_loop(codec, nCount, diagnosticParamererReportStructureIntervals.append(diagnosticParamererReportStructureIntervals_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(diagnosticParamererReportStructureIntervals, newVec, diagnosticParamererReportStructureIntervals_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(diagnosticParamererReportStructureIntervals.append(diagnosticParamererReportStructureIntervals_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(diagnosticParamererReportStructureIntervals.list, diagnosticParamererReportStructureIntervals_arr_i1_, i1)
                    Vector.listApplyEqVecApply(diagnosticParamererReportStructureIntervals.append(diagnosticParamererReportStructureIntervals_arr_i1_), i1)
                    check(diagnosticParamererReportStructureIntervals_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TDiagnosticParameterReportStructureIntervals]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(diagnosticParamererReportStructureIntervals, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_diagnosticParamererReportStructureIntervals.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def TC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_diagnosticParamererReportStructureIntervals_ACN_Decode(codec: ACN, TC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_n: ULong): EitherMut[Int, TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_diagnosticParamererReportStructureIntervals] = {
    require(codec.base.bitStream.validate_offset_bits(4032L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val diagnosticParamererReportStructureIntervals =
        if ((ULong.fromRaw(1) <= TC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_n) && (TC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_n <= ULong.fromRaw(63))) then
            val diagnosticParamererReportStructureIntervals_nCount = TC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_n.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val diagnosticParamererReportStructureIntervals = TC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_diagnosticParamererReportStructureIntervals_Decode_loop(codec, diagnosticParamererReportStructureIntervals_nCount, Vector.empty[TDiagnosticParameterReportStructureIntervals], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val diagnosticParamererReportStructureIntervals = TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_diagnosticParamererReportStructureIntervals(diagnosticParamererReportStructureIntervals_nCount, bdg)
                    ghostExpr {
                        diagnosticParamererReportStructureIntervals.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    diagnosticParamererReportStructureIntervals
            }
            diagnosticParamererReportStructureIntervals
        else return LeftMut(ERR_ACN_DECODE_TC_3_32_MODIFYTHECOLLECTIONINTERVALOFDIAGNOSTICPARAMETERREPORTSTRUCTURES_DIAGNOSTICPARAMERERREPORTSTRUCTUREINTERVALS)
    TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_diagnosticParamererReportStructureIntervals_IsConstraintValid(diagnosticParamererReportStructureIntervals) match {
        case Left(l) =>
            LeftMut[Int, TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_diagnosticParamererReportStructureIntervals](l)
        case Right(_) =>
            RightMut[Int, TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_diagnosticParamererReportStructureIntervals](diagnosticParamererReportStructureIntervals)
    }
}.ensuring { (res: EitherMut[Int, TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_diagnosticParamererReportStructureIntervals]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_diagnosticParamererReportStructureIntervals_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_diagnosticParamererReportStructureIntervals_ACN_Decode_pure(codec: ACN, TC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_n: ULong): (ACN, EitherMut[Int, TTC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_diagnosticParamererReportStructureIntervals]) = {
    require(codec.base.bitStream.validate_offset_bits(4032L))
    val cpy = snapshot(codec)
    val res = TC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_diagnosticParamererReportStructureIntervals_ACN_Decode(cpy, TC_3_32_ModifyTheCollectionIntervalOfDiagnosticParameterReportStructures_n)
    (cpy, res)
}