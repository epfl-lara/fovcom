/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

val maxTC_2_4_CpduCommandsCount: Int = 255 // variables:188
val maxTC_2_4_CpduCount: Int = 127 // variables:188

def TCPDU_ID_IsConstraintValid(pVal: TCPDU_ID): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = (pVal == TCPDU_ID.Tcpdu0) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    ret
}

def TCPDU_ID_Initialize(): TCPDU_ID = TCPDU_ID.Tcpdu0

@opaque @inlineOnce 
def TCPDU_ID_ACN_Encode(pVal: TCPDU_ID, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(32L))
    TCPDU_ID_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    val intVal_pVal = pVal match
        case TCPDU_ID.Tcpdu0 => ULong.fromRaw(0L)

    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(0))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(intVal_pVal)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(intVal_pVal)
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 32L
    }
}

@opaque @inlineOnce 
def TCPDU_ID_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TCPDU_ID] =
{
    require(codec.base.bitStream.validate_offset_bits(32L))

    @ghost val oldCdc = snapshot(codec)
    val intVal_pVal = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    val pVal = intVal_pVal.toRaw match
        case 0 => TCPDU_ID.Tcpdu0
        case _ => return LeftMut(ERR_ACN_DECODE_CPDU_ID)

    TCPDU_ID_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TCPDU_ID](l)
        case Right(_) => RightMut[ErrorCode, TCPDU_ID](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TCPDU_ID]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 32L && TCPDU_ID_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TCPDU_ID_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TCPDU_ID]) =
{
    require(codec.base.bitStream.validate_offset_bits(32L))
    val cpy = snapshot(codec)
    val res = TCPDU_ID_ACN_Decode(cpy)
    (cpy, res)
}

def TOutputLine_ID_IsConstraintValid(pVal: TOutputLine_ID): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = (pVal == TOutputLine_ID.Tout1) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    ret
}

def TOutputLine_ID_Initialize(): TOutputLine_ID = TOutputLine_ID.Tout1

@opaque @inlineOnce 
def TOutputLine_ID_ACN_Encode(pVal: TOutputLine_ID, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(12L))
    TOutputLine_ID_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    val intVal_pVal = pVal match
        case TOutputLine_ID.Tout1 => ULong.fromRaw(1L)

    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(1))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 12)
            bitCountLemma(intVal_pVal)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize(intVal_pVal, 12)
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 12L
    }
}

@opaque @inlineOnce 
def TOutputLine_ID_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TOutputLine_ID] =
{
    require(codec.base.bitStream.validate_offset_bits(12L))

    @ghost val oldCdc = snapshot(codec)
    val intVal_pVal = codec.dec_Int_PositiveInteger_ConstSize(12)

    val pVal = intVal_pVal.toRaw match
        case 1 => TOutputLine_ID.Tout1
        case _ => return LeftMut(ERR_ACN_DECODE_OUTPUTLINE_ID)

    TOutputLine_ID_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TOutputLine_ID](l)
        case Right(_) => RightMut[ErrorCode, TOutputLine_ID](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TOutputLine_ID]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 12L && TOutputLine_ID_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TOutputLine_ID_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TOutputLine_ID]) =
{
    require(codec.base.bitStream.validate_offset_bits(12L))
    val cpy = snapshot(codec)
    val res = TOutputLine_ID_ACN_Decode(cpy)
    (cpy, res)
}

def TCpduCommand_reserved_IsConstraintValid(@annotation.unused pVal: TCpduCommand_reserved): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = Right(0)
    ret
}

def TCpduCommand_durationExponentialValue_IsConstraintValid(pVal: TCpduCommand_durationExponentialValue): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = (pVal <= ULong.fromRaw(7L)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    ret
}

def TCpduCommand_IsConstraintValid(pVal: TCpduCommand): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TOutputLine_ID_IsConstraintValid(pVal.outputLine_ID)
    if ret.isRight then
        ret = TCpduCommand_reserved_IsConstraintValid(pVal.reserved)
        if ret.isRight then
            ret = TCpduCommand_durationExponentialValue_IsConstraintValid(pVal.durationExponentialValue)
    ret
}

def TCpduCommand_reserved_Initialize(): TCpduCommand_reserved = TCpduCommand_reserved(Vector.fill(1)(0.toRawUByte))
def TCpduCommand_durationExponentialValue_Initialize(): TCpduCommand_durationExponentialValue = ULong.fromRaw(0L)
def TCpduCommand_Initialize(): TCpduCommand = TCpduCommand(outputLine_ID = TOutputLine_ID.Tout1, reserved = TCpduCommand_reserved(Vector.fill(1)(0.toRawUByte)), durationExponentialValue = ULong.fromRaw(0L))

@opaque @inlineOnce 
def TCpduCommand_ACN_Encode(pVal: TCpduCommand, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(16L))
    TCpduCommand_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode outputLine_ID */
    TOutputLine_ID_ACN_Encode(pVal.outputLine_ID, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 16L, 12L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 12L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 12L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode reserved */
    assert(1.toInt >= 0) // overflow may happen during cast
    codec.base.bitStream.appendBitsMSBFirstVec(pVal.reserved.arr, 1.toInt)

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 4L, 1L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 13L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 1L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode durationExponentialValue */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(7))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 3)
            bitCountLemma(pVal.durationExponentialValue)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize(pVal.durationExponentialValue, 3)
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 16L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = 3L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 16L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TCpduCommand_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TCpduCommand] =
{
    require(codec.base.bitStream.validate_offset_bits(16L))

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode outputLine_ID */
    val pVal_outputLine_ID = TOutputLine_ID_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 16L, 12L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 12L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 12L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode reserved */
    val pVal_reserved = TCpduCommand_reserved(codec.base.bitStream.readBitsVec(1.toInt))
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 4L, 1L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 13L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 1L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode durationExponentialValue */
    val pVal_durationExponentialValue = codec.dec_Int_PositiveInteger_ConstSize(3)

    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 16L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = 3L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 16L)
    }
    val pVal = TCpduCommand(pVal_outputLine_ID, pVal_reserved, pVal_durationExponentialValue)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }

    TCpduCommand_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TCpduCommand](l)
        case Right(_) => RightMut[ErrorCode, TCpduCommand](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TCpduCommand]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TCpduCommand_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TCpduCommand_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TCpduCommand]) =
{
    require(codec.base.bitStream.validate_offset_bits(16L))
    val cpy = snapshot(codec)
    val res = TCpduCommand_ACN_Decode(cpy)
    (cpy, res)
}

def TTC_2_4_DistributeCpduCommands_cpduCommands_IsConstraintValid(pVal: TTC_2_4_DistributeCpduCommands_cpduCommands): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = ((1 <= pVal.nCount) && (pVal.nCount <= 255)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TCpduCommand_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TTC_2_4_DistributeCpduCommands_IsConstraintValid(pVal: TTC_2_4_DistributeCpduCommands): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TTC_2_4_DistributeCpduCommands_cpduCommands_IsConstraintValid(pVal.cpduCommands)
    ret
}

def TTC_2_4_DistributeCpduCommands_cpduCommands_Initialize(): TTC_2_4_DistributeCpduCommands_cpduCommands = TTC_2_4_DistributeCpduCommands_cpduCommands(1, Vector.fill(255)(TCpduCommand_Initialize()))
def TTC_2_4_DistributeCpduCommands_Initialize(): TTC_2_4_DistributeCpduCommands = TTC_2_4_DistributeCpduCommands(cpduCommands = TTC_2_4_DistributeCpduCommands_cpduCommands_Initialize())

@opaque @inlineOnce 
def TTC_2_4_DistributeCpduCommands_ACN_Encode(pVal: TTC_2_4_DistributeCpduCommands, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(4112L))
    var i1: Int = 0
    TTC_2_4_DistributeCpduCommands_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val TC_2_4_DistributeCpduCommands_n2 = ULong.fromRaw(pVal.cpduCommands.nCount)
    if TC_2_4_DistributeCpduCommands_n2 < ULong.fromRaw(1) || TC_2_4_DistributeCpduCommands_n2 > ULong.fromRaw(255) then
        return Left(860)
    /* Encode TC_2_4_DistributeCpduCommands_n2 */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(TC_2_4_DistributeCpduCommands_n2)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(TC_2_4_DistributeCpduCommands_n2)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 4112L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode cpduCommands */
    TC_2_4_DistributeCpduCommands_cpduCommands_ACN_Encode(codec, pVal, TC_2_4_DistributeCpduCommands_n2, pVal.cpduCommands) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 4112L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.cpduCommands.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 4112L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def PUS_2_4_TTC_2_4_DistributeCpduCommands_cpduCommands_pVal_cpduCommands_cpduCommands_Encode_loop(codec: ACN, cpduCommands: TTC_2_4_DistributeCpduCommands_cpduCommands, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= cpduCommands.nCount))
    require((1 <= cpduCommands.nCount) && (cpduCommands.nCount <= cpduCommands.arr.size) && (cpduCommands.arr.size <= 255))
    require(codec.base.bitStream.validate_offset_bits((16L * (cpduCommands.nCount - i1))))
    decreases(cpduCommands.nCount - i1)
    if (i1 == cpduCommands.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 16L * (cpduCommands.nCount - i1), 16L)
        }
        TCpduCommand_ACN_Encode(cpduCommands.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(16L * (i1 + 1) == 16L * i1 + 16L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 16L * (cpduCommands.nCount - i1), 16L)
            check(codec.base.bitStream.validate_offset_bits(16L * (cpduCommands.nCount - (i1 + 1))))
        }
        val res = PUS_2_4_TTC_2_4_DistributeCpduCommands_cpduCommands_pVal_cpduCommands_cpduCommands_Encode_loop(codec, cpduCommands, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TTC_2_4_DistributeCpduCommands_cpduCommands.sizeRange(cpduCommands.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, cpduCommands.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + cpduCommands.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TTC_2_4_DistributeCpduCommands_cpduCommands.sizeRange(cpduCommands.arr, codecSnap1.base.bitStream.bitIndex, i1, cpduCommands.nCount) == cpduCommands.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TTC_2_4_DistributeCpduCommands_cpduCommands.sizeRange(cpduCommands.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, cpduCommands.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TTC_2_4_DistributeCpduCommands_cpduCommands.sizeRange(cpduCommands.arr, codecSnap1.base.bitStream.bitIndex, i1, cpduCommands.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTC_2_4_DistributeCpduCommands_cpduCommands.sizeRange(cpduCommands.arr, old(codec).base.bitStream.bitIndex, i1, cpduCommands.nCount)
    }
}



@opaque @inlineOnce
def TC_2_4_DistributeCpduCommands_cpduCommands_ACN_Encode(codec: ACN, pVal: TTC_2_4_DistributeCpduCommands, TC_2_4_DistributeCpduCommands_n2: ULong, cpduCommands: TTC_2_4_DistributeCpduCommands_cpduCommands): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(4080L))
    @ghost val oldCdc = snapshot(codec)
    TTC_2_4_DistributeCpduCommands_cpduCommands_IsConstraintValid(cpduCommands) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    PUS_2_4_TTC_2_4_DistributeCpduCommands_cpduCommands_pVal_cpduCommands_cpduCommands_Encode_loop(codec, cpduCommands, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                cpduCommands.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + cpduCommands.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTC_2_4_DistributeCpduCommands_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTC_2_4_DistributeCpduCommands] =
{
    require(codec.base.bitStream.validate_offset_bits(4112L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode TC_2_4_DistributeCpduCommands_n2 */
    val TC_2_4_DistributeCpduCommands_n2 = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 4112L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode cpduCommands */
    val pVal_cpduCommands = TC_2_4_DistributeCpduCommands_cpduCommands_ACN_Decode(codec, TC_2_4_DistributeCpduCommands_n2) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 4112L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_cpduCommands.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 4112L)
    }
    val pVal = TTC_2_4_DistributeCpduCommands(pVal_cpduCommands)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }

    TTC_2_4_DistributeCpduCommands_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTC_2_4_DistributeCpduCommands](l)
        case Right(_) => RightMut[ErrorCode, TTC_2_4_DistributeCpduCommands](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTC_2_4_DistributeCpduCommands]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_2_4_DistributeCpduCommands_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTC_2_4_DistributeCpduCommands_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTC_2_4_DistributeCpduCommands]) =
{
    require(codec.base.bitStream.validate_offset_bits(4112L))
    val cpy = snapshot(codec)
    val res = TTC_2_4_DistributeCpduCommands_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def PUS_2_4_TTC_2_4_DistributeCpduCommands_cpduCommands_pVal_cpduCommands_cpduCommands_Decode_loop(codec: ACN, nCount: Int, cpduCommands: Vector[TCpduCommand], i1: Int): EitherMut[Int, Vector[TCpduCommand]] = {
    require((1 <= nCount) && (nCount <= 255))
    require((0 <= i1) && (i1 <= nCount))
    require(cpduCommands.size == i1)
    require(codec.base.bitStream.validate_offset_bits((16L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(cpduCommands)
            vecRangesEqSlicedLemma(cpduCommands, cpduCommands, 0, cpduCommands.size, 0, i1)
        }
        RightMut[Int, Vector[TCpduCommand]](cpduCommands)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 16L * (nCount - i1), 16L)
        }
        val cpduCommands_arr_i1_ = TCpduCommand_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(16L * (i1 + 1) == 16L * i1 + 16L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 16L * (nCount - i1), 16L)
            check(codec.base.bitStream.validate_offset_bits(16L * (nCount - (i1 + 1))))
        }
        val res = PUS_2_4_TTC_2_4_DistributeCpduCommands_cpduCommands_pVal_cpduCommands_cpduCommands_Decode_loop(codec, nCount, cpduCommands.append(cpduCommands_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(cpduCommands, newVec, cpduCommands_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(cpduCommands.append(cpduCommands_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(cpduCommands.list, cpduCommands_arr_i1_, i1)
                    Vector.listApplyEqVecApply(cpduCommands.append(cpduCommands_arr_i1_), i1)
                    check(cpduCommands_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TCpduCommand]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(cpduCommands, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTC_2_4_DistributeCpduCommands_cpduCommands.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def TC_2_4_DistributeCpduCommands_cpduCommands_ACN_Decode(codec: ACN, TC_2_4_DistributeCpduCommands_n2: ULong): EitherMut[Int, TTC_2_4_DistributeCpduCommands_cpduCommands] = {
    require(codec.base.bitStream.validate_offset_bits(4080L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val cpduCommands =
        if ((ULong.fromRaw(1) <= TC_2_4_DistributeCpduCommands_n2) && (TC_2_4_DistributeCpduCommands_n2 <= ULong.fromRaw(255))) then
            val cpduCommands_nCount = TC_2_4_DistributeCpduCommands_n2.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val cpduCommands = PUS_2_4_TTC_2_4_DistributeCpduCommands_cpduCommands_pVal_cpduCommands_cpduCommands_Decode_loop(codec, cpduCommands_nCount, Vector.empty[TCpduCommand], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val cpduCommands = TTC_2_4_DistributeCpduCommands_cpduCommands(cpduCommands_nCount, bdg)
                    ghostExpr {
                        cpduCommands.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    cpduCommands
            }
            cpduCommands
        else return LeftMut(ERR_ACN_DECODE_TC_2_4_DISTRIBUTECPDUCOMMANDS_CPDUCOMMANDS)
    TTC_2_4_DistributeCpduCommands_cpduCommands_IsConstraintValid(cpduCommands) match {
        case Left(l) =>
            LeftMut[Int, TTC_2_4_DistributeCpduCommands_cpduCommands](l)
        case Right(_) =>
            RightMut[Int, TTC_2_4_DistributeCpduCommands_cpduCommands](cpduCommands)
    }
}.ensuring { (res: EitherMut[Int, TTC_2_4_DistributeCpduCommands_cpduCommands]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_2_4_DistributeCpduCommands_cpduCommands_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TC_2_4_DistributeCpduCommands_cpduCommands_ACN_Decode_pure(codec: ACN, TC_2_4_DistributeCpduCommands_n2: ULong): (ACN, EitherMut[Int, TTC_2_4_DistributeCpduCommands_cpduCommands]) = {
    require(codec.base.bitStream.validate_offset_bits(4080L))
    val cpy = snapshot(codec)
    val res = TC_2_4_DistributeCpduCommands_cpduCommands_ACN_Decode(cpy, TC_2_4_DistributeCpduCommands_n2)
    (cpy, res)
}

def TCPDU_cpduCommands_IsConstraintValid(pVal: TCPDU_cpduCommands): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = ((1 <= pVal.nCount) && (pVal.nCount <= 255)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TCpduCommand_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TCPDU_IsConstraintValid(pVal: TCPDU): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TCPDU_ID_IsConstraintValid(pVal.cpdu_ID)
    if ret.isRight then
        ret = TCPDU_cpduCommands_IsConstraintValid(pVal.cpduCommands)
    ret
}

def TCPDU_cpduCommands_Initialize(): TCPDU_cpduCommands = TCPDU_cpduCommands(1, Vector.fill(255)(TCpduCommand_Initialize()))
def TCPDU_Initialize(): TCPDU = TCPDU(cpdu_ID = TCPDU_ID.Tcpdu0, cpduCommands = TCPDU_cpduCommands_Initialize())

@opaque @inlineOnce 
def TCPDU_ACN_Encode(pVal: TCPDU, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(4144L))
    var i1: Int = 0
    TCPDU_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode cpdu_ID */
    TCPDU_ID_ACN_Encode(pVal.cpdu_ID, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 4144L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    val CPDU_n2 = ULong.fromRaw(pVal.cpduCommands.nCount)
    if CPDU_n2 < ULong.fromRaw(1) || CPDU_n2 > ULong.fromRaw(255) then
        return Left(860)
    /* Encode CPDU_n2 */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(CPDU_n2)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(CPDU_n2)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 4112L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode cpduCommands */
    CPDU_cpduCommands_ACN_Encode(codec, pVal, CPDU_n2, pVal.cpduCommands) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 4144L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = pVal.cpduCommands.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 4144L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def PUS_2_4_TCPDU_cpduCommands_pVal_cpduCommands_cpduCommands_Encode_loop(codec: ACN, cpduCommands: TCPDU_cpduCommands, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= cpduCommands.nCount))
    require((1 <= cpduCommands.nCount) && (cpduCommands.nCount <= cpduCommands.arr.size) && (cpduCommands.arr.size <= 255))
    require(codec.base.bitStream.validate_offset_bits((16L * (cpduCommands.nCount - i1))))
    decreases(cpduCommands.nCount - i1)
    if (i1 == cpduCommands.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 16L * (cpduCommands.nCount - i1), 16L)
        }
        TCpduCommand_ACN_Encode(cpduCommands.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(16L * (i1 + 1) == 16L * i1 + 16L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 16L * (cpduCommands.nCount - i1), 16L)
            check(codec.base.bitStream.validate_offset_bits(16L * (cpduCommands.nCount - (i1 + 1))))
        }
        val res = PUS_2_4_TCPDU_cpduCommands_pVal_cpduCommands_cpduCommands_Encode_loop(codec, cpduCommands, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TCPDU_cpduCommands.sizeRange(cpduCommands.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, cpduCommands.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + cpduCommands.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TCPDU_cpduCommands.sizeRange(cpduCommands.arr, codecSnap1.base.bitStream.bitIndex, i1, cpduCommands.nCount) == cpduCommands.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TCPDU_cpduCommands.sizeRange(cpduCommands.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, cpduCommands.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TCPDU_cpduCommands.sizeRange(cpduCommands.arr, codecSnap1.base.bitStream.bitIndex, i1, cpduCommands.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TCPDU_cpduCommands.sizeRange(cpduCommands.arr, old(codec).base.bitStream.bitIndex, i1, cpduCommands.nCount)
    }
}



@opaque @inlineOnce
def CPDU_cpduCommands_ACN_Encode(codec: ACN, pVal: TCPDU, CPDU_n2: ULong, cpduCommands: TCPDU_cpduCommands): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(4080L))
    @ghost val oldCdc = snapshot(codec)
    TCPDU_cpduCommands_IsConstraintValid(cpduCommands) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    PUS_2_4_TCPDU_cpduCommands_pVal_cpduCommands_cpduCommands_Encode_loop(codec, cpduCommands, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                cpduCommands.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + cpduCommands.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TCPDU_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TCPDU] =
{
    require(codec.base.bitStream.validate_offset_bits(4144L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode cpdu_ID */
    val pVal_cpdu_ID = TCPDU_ID_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 4144L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode CPDU_n2 */
    val CPDU_n2 = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 4112L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode cpduCommands */
    val pVal_cpduCommands = CPDU_cpduCommands_ACN_Decode(codec, CPDU_n2) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 4144L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = pVal_cpduCommands.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 4144L)
    }
    val pVal = TCPDU(pVal_cpdu_ID, pVal_cpduCommands)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }

    TCPDU_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TCPDU](l)
        case Right(_) => RightMut[ErrorCode, TCPDU](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TCPDU]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TCPDU_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TCPDU_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TCPDU]) =
{
    require(codec.base.bitStream.validate_offset_bits(4144L))
    val cpy = snapshot(codec)
    val res = TCPDU_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def PUS_2_4_TCPDU_cpduCommands_pVal_cpduCommands_cpduCommands_Decode_loop(codec: ACN, nCount: Int, cpduCommands: Vector[TCpduCommand], i1: Int): EitherMut[Int, Vector[TCpduCommand]] = {
    require((1 <= nCount) && (nCount <= 255))
    require((0 <= i1) && (i1 <= nCount))
    require(cpduCommands.size == i1)
    require(codec.base.bitStream.validate_offset_bits((16L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(cpduCommands)
            vecRangesEqSlicedLemma(cpduCommands, cpduCommands, 0, cpduCommands.size, 0, i1)
        }
        RightMut[Int, Vector[TCpduCommand]](cpduCommands)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 16L * (nCount - i1), 16L)
        }
        val cpduCommands_arr_i1_ = TCpduCommand_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(16L * (i1 + 1) == 16L * i1 + 16L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 16L * (nCount - i1), 16L)
            check(codec.base.bitStream.validate_offset_bits(16L * (nCount - (i1 + 1))))
        }
        val res = PUS_2_4_TCPDU_cpduCommands_pVal_cpduCommands_cpduCommands_Decode_loop(codec, nCount, cpduCommands.append(cpduCommands_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(cpduCommands, newVec, cpduCommands_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(cpduCommands.append(cpduCommands_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(cpduCommands.list, cpduCommands_arr_i1_, i1)
                    Vector.listApplyEqVecApply(cpduCommands.append(cpduCommands_arr_i1_), i1)
                    check(cpduCommands_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TCpduCommand]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(cpduCommands, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TCPDU_cpduCommands.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def CPDU_cpduCommands_ACN_Decode(codec: ACN, CPDU_n2: ULong): EitherMut[Int, TCPDU_cpduCommands] = {
    require(codec.base.bitStream.validate_offset_bits(4080L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val cpduCommands =
        if ((ULong.fromRaw(1) <= CPDU_n2) && (CPDU_n2 <= ULong.fromRaw(255))) then
            val cpduCommands_nCount = CPDU_n2.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val cpduCommands = PUS_2_4_TCPDU_cpduCommands_pVal_cpduCommands_cpduCommands_Decode_loop(codec, cpduCommands_nCount, Vector.empty[TCpduCommand], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val cpduCommands = TCPDU_cpduCommands(cpduCommands_nCount, bdg)
                    ghostExpr {
                        cpduCommands.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    cpduCommands
            }
            cpduCommands
        else return LeftMut(ERR_ACN_DECODE_CPDU_CPDUCOMMANDS)
    TCPDU_cpduCommands_IsConstraintValid(cpduCommands) match {
        case Left(l) =>
            LeftMut[Int, TCPDU_cpduCommands](l)
        case Right(_) =>
            RightMut[Int, TCPDU_cpduCommands](cpduCommands)
    }
}.ensuring { (res: EitherMut[Int, TCPDU_cpduCommands]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TCPDU_cpduCommands_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def CPDU_cpduCommands_ACN_Decode_pure(codec: ACN, CPDU_n2: ULong): (ACN, EitherMut[Int, TCPDU_cpduCommands]) = {
    require(codec.base.bitStream.validate_offset_bits(4080L))
    val cpy = snapshot(codec)
    val res = CPDU_cpduCommands_ACN_Decode(cpy, CPDU_n2)
    (cpy, res)
}

def TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu_IsConstraintValid(pVal: TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = ((1 <= pVal.nCount) && (pVal.nCount <= 127)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TCPDU_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_IsConstraintValid(pVal: TTC_2_4_DistrubiteCpduCommands_MultipleCpdu): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu_IsConstraintValid(pVal.cpdu)
    ret
}

def TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu_Initialize(): TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu = TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu(1, Vector.fill(127)(TCPDU_Initialize()))
def TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_Initialize(): TTC_2_4_DistrubiteCpduCommands_MultipleCpdu = TTC_2_4_DistrubiteCpduCommands_MultipleCpdu(cpdu = TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu_Initialize())

@opaque @inlineOnce 
def TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_ACN_Encode(pVal: TTC_2_4_DistrubiteCpduCommands_MultipleCpdu, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(526320L))
    var i1: Int = 0
    TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val TC_2_4_DistrubiteCpduCommands_MultipleCpdu_n1 = ULong.fromRaw(pVal.cpdu.nCount)
    if TC_2_4_DistrubiteCpduCommands_MultipleCpdu_n1 < ULong.fromRaw(1) || TC_2_4_DistrubiteCpduCommands_MultipleCpdu_n1 > ULong.fromRaw(127) then
        return Left(860)
    /* Encode TC_2_4_DistrubiteCpduCommands_MultipleCpdu_n1 */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(TC_2_4_DistrubiteCpduCommands_MultipleCpdu_n1)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(TC_2_4_DistrubiteCpduCommands_MultipleCpdu_n1)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 526320L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode cpdu */
    TC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu_ACN_Encode(codec, pVal, TC_2_4_DistrubiteCpduCommands_MultipleCpdu_n1, pVal.cpdu) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 526320L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.cpdu.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 526320L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def PUS_2_4_TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu_pVal_cpdu_cpdu_Encode_loop(codec: ACN, cpdu: TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= cpdu.nCount))
    require((1 <= cpdu.nCount) && (cpdu.nCount <= cpdu.arr.size) && (cpdu.arr.size <= 127))
    require(codec.base.bitStream.validate_offset_bits((4144L * (cpdu.nCount - i1))))
    decreases(cpdu.nCount - i1)
    if (i1 == cpdu.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 4144L * (cpdu.nCount - i1), 4144L)
        }
        TCPDU_ACN_Encode(cpdu.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(4144L * (i1 + 1) == 4144L * i1 + 4144L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 4144L * (cpdu.nCount - i1), 4144L)
            check(codec.base.bitStream.validate_offset_bits(4144L * (cpdu.nCount - (i1 + 1))))
        }
        val res = PUS_2_4_TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu_pVal_cpdu_cpdu_Encode_loop(codec, cpdu, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu.sizeRange(cpdu.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, cpdu.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + cpdu.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu.sizeRange(cpdu.arr, codecSnap1.base.bitStream.bitIndex, i1, cpdu.nCount) == cpdu.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu.sizeRange(cpdu.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, cpdu.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu.sizeRange(cpdu.arr, codecSnap1.base.bitStream.bitIndex, i1, cpdu.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu.sizeRange(cpdu.arr, old(codec).base.bitStream.bitIndex, i1, cpdu.nCount)
    }
}



@opaque @inlineOnce
def TC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu_ACN_Encode(codec: ACN, pVal: TTC_2_4_DistrubiteCpduCommands_MultipleCpdu, TC_2_4_DistrubiteCpduCommands_MultipleCpdu_n1: ULong, cpdu: TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(526288L))
    @ghost val oldCdc = snapshot(codec)
    TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu_IsConstraintValid(cpdu) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    PUS_2_4_TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu_pVal_cpdu_cpdu_Encode_loop(codec, cpdu, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                cpdu.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + cpdu.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTC_2_4_DistrubiteCpduCommands_MultipleCpdu] =
{
    require(codec.base.bitStream.validate_offset_bits(526320L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode TC_2_4_DistrubiteCpduCommands_MultipleCpdu_n1 */
    val TC_2_4_DistrubiteCpduCommands_MultipleCpdu_n1 = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 526320L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode cpdu */
    val pVal_cpdu = TC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu_ACN_Decode(codec, TC_2_4_DistrubiteCpduCommands_MultipleCpdu_n1) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 526320L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_cpdu.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 526320L)
    }
    val pVal = TTC_2_4_DistrubiteCpduCommands_MultipleCpdu(pVal_cpdu)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }

    TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTC_2_4_DistrubiteCpduCommands_MultipleCpdu](l)
        case Right(_) => RightMut[ErrorCode, TTC_2_4_DistrubiteCpduCommands_MultipleCpdu](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTC_2_4_DistrubiteCpduCommands_MultipleCpdu]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTC_2_4_DistrubiteCpduCommands_MultipleCpdu]) =
{
    require(codec.base.bitStream.validate_offset_bits(526320L))
    val cpy = snapshot(codec)
    val res = TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def PUS_2_4_TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu_pVal_cpdu_cpdu_Decode_loop(codec: ACN, nCount: Int, cpdu: Vector[TCPDU], i1: Int): EitherMut[Int, Vector[TCPDU]] = {
    require((1 <= nCount) && (nCount <= 127))
    require((0 <= i1) && (i1 <= nCount))
    require(cpdu.size == i1)
    require(codec.base.bitStream.validate_offset_bits((4144L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(cpdu)
            vecRangesEqSlicedLemma(cpdu, cpdu, 0, cpdu.size, 0, i1)
        }
        RightMut[Int, Vector[TCPDU]](cpdu)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 4144L * (nCount - i1), 4144L)
        }
        val cpdu_arr_i1_ = TCPDU_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(4144L * (i1 + 1) == 4144L * i1 + 4144L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 4144L * (nCount - i1), 4144L)
            check(codec.base.bitStream.validate_offset_bits(4144L * (nCount - (i1 + 1))))
        }
        val res = PUS_2_4_TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu_pVal_cpdu_cpdu_Decode_loop(codec, nCount, cpdu.append(cpdu_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(cpdu, newVec, cpdu_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(cpdu.append(cpdu_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(cpdu.list, cpdu_arr_i1_, i1)
                    Vector.listApplyEqVecApply(cpdu.append(cpdu_arr_i1_), i1)
                    check(cpdu_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TCPDU]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(cpdu, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def TC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu_ACN_Decode(codec: ACN, TC_2_4_DistrubiteCpduCommands_MultipleCpdu_n1: ULong): EitherMut[Int, TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu] = {
    require(codec.base.bitStream.validate_offset_bits(526288L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val cpdu =
        if ((ULong.fromRaw(1) <= TC_2_4_DistrubiteCpduCommands_MultipleCpdu_n1) && (TC_2_4_DistrubiteCpduCommands_MultipleCpdu_n1 <= ULong.fromRaw(127))) then
            val cpdu_nCount = TC_2_4_DistrubiteCpduCommands_MultipleCpdu_n1.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val cpdu = PUS_2_4_TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu_pVal_cpdu_cpdu_Decode_loop(codec, cpdu_nCount, Vector.empty[TCPDU], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val cpdu = TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu(cpdu_nCount, bdg)
                    ghostExpr {
                        cpdu.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    cpdu
            }
            cpdu
        else return LeftMut(ERR_ACN_DECODE_TC_2_4_DISTRUBITECPDUCOMMANDS_MULTIPLECPDU_CPDU)
    TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu_IsConstraintValid(cpdu) match {
        case Left(l) =>
            LeftMut[Int, TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu](l)
        case Right(_) =>
            RightMut[Int, TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu](cpdu)
    }
}.ensuring { (res: EitherMut[Int, TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu_ACN_Decode_pure(codec: ACN, TC_2_4_DistrubiteCpduCommands_MultipleCpdu_n1: ULong): (ACN, EitherMut[Int, TTC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu]) = {
    require(codec.base.bitStream.validate_offset_bits(526288L))
    val cpy = snapshot(codec)
    val res = TC_2_4_DistrubiteCpduCommands_MultipleCpdu_cpdu_ACN_Decode(cpy, TC_2_4_DistrubiteCpduCommands_MultipleCpdu_n1)
    (cpy, res)
}