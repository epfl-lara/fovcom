/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

type TTransaction_ID = TPUSC_UINT32


@inline @cCode.inline val ERR_TRANSACTION_ID_2: Int = 967 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_TRANSACTION_ID_2: Int = 970 /*  */
@inline @cCode.inline val TTransaction_ID_REQUIRED_BYTES_FOR_ACN_ENCODING = 4
@inline @cCode.inline val TTransaction_ID_REQUIRED_BITS_FOR_ACN_ENCODING = 32

@inline @cCode.inline val ERR_ACN_DECODE_TRANSACTION_ID_2: Int = 971 /*  */
sealed trait TDataAcquisitionReturnCode:
    def i: Int
object TDataAcquisitionReturnCode:
    case object Tret1 extends TDataAcquisitionReturnCode:
        override def i: Int = 0

// please use the following macros to avoid breaking code.
// type Tret1 = TDataAcquisitionReturnCode.ret1

@inline @cCode.inline val ERR_DATAACQUISITIONRETURNCODE: Int = 992 /*ret1 */

 

@inline @cCode.inline val ERR_ACN_ENCODE_DATAACQUISITIONRETURNCODE: Int = 995 /*  */
@inline @cCode.inline val TDataAcquisitionReturnCode_REQUIRED_BYTES_FOR_ACN_ENCODING = 4
@inline @cCode.inline val TDataAcquisitionReturnCode_REQUIRED_BITS_FOR_ACN_ENCODING = 32

@inline @cCode.inline val ERR_ACN_DECODE_DATAACQUISITIONRETURNCODE: Int = 996 /*  */
/*-- TAuxiliaryData --------------------------------------------*/

enum TAuxiliaryData:
    case ret1_PRESENT(ret1: NullType)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775807L))
        this match {
            case TAuxiliaryData.ret1_PRESENT(ret1) =>
                0L
        }
    }.ensuring { (res: Long) => 
        res == 0L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775807L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L))
        this match {
            case TAuxiliaryData.ret1_PRESENT(ret1) =>
                ()
        }
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775807L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L))
        require((offset % 8L) == (otherOffset % 8L))
        this match {
            case TAuxiliaryData.ret1_PRESENT(ret1) =>
                ()
        }
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775807L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L))
        require((offset % 16L) == (otherOffset % 16L))
        this match {
            case TAuxiliaryData.ret1_PRESENT(ret1) =>
                ()
        }
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775807L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L))
        require((offset % 32L) == (otherOffset % 32L))
        this match {
            case TAuxiliaryData.ret1_PRESENT(ret1) =>
                ()
        }
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

@inline @cCode.inline val ERR_AUXILIARYDATA: Int = 1001 /* */

 
/*-- TTransactionExecutionStatus --------------------------------------------*/

case class TTransactionExecutionStatus (
    auxiliaryData: TAuxiliaryData
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        val size_0 = 32L
        val size_1 = this.auxiliaryData match {
            case TAuxiliaryData.ret1_PRESENT(ret1) =>
                0L
        }
        size_0 + size_1
    }.ensuring { (res: Long) => 
        res == 32L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.auxiliaryData match {
            case TAuxiliaryData.ret1_PRESENT(ret1) =>
                0L
        }
        val size_1_otherOffset = this.auxiliaryData match {
            case TAuxiliaryData.ret1_PRESENT(ret1) =>
                0L
        }
        this.auxiliaryData.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.auxiliaryData match {
            case TAuxiliaryData.ret1_PRESENT(ret1) =>
                0L
        }
        val size_1_otherOffset = this.auxiliaryData match {
            case TAuxiliaryData.ret1_PRESENT(ret1) =>
                0L
        }
        this.auxiliaryData.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.auxiliaryData match {
            case TAuxiliaryData.ret1_PRESENT(ret1) =>
                0L
        }
        val size_1_otherOffset = this.auxiliaryData match {
            case TAuxiliaryData.ret1_PRESENT(ret1) =>
                0L
        }
        this.auxiliaryData.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.auxiliaryData match {
            case TAuxiliaryData.ret1_PRESENT(ret1) =>
                0L
        }
        val size_1_otherOffset = this.auxiliaryData match {
            case TAuxiliaryData.ret1_PRESENT(ret1) =>
                0L
        }
        this.auxiliaryData.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TRANSACTIONEXECUTIONSTATUS: Int = 986 /* */
@inline @cCode.inline val ERR_TRANSACTIONEXECUTIONSTATUS_AUXILIARYDATA_2: Int = 983 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_TRANSACTIONEXECUTIONSTATUS: Int = 989 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TRANSACTIONEXECUTIONSTATUS_DATAACQUISITIONRETURNCODE_UNINITIALIZED: Int = 990 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TRANSACTIONEXECUTIONSTATUS_DATAACQUISITIONRETURNCODE: Int = 972 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TRANSACTIONEXECUTIONSTATUS_AUXILIARYDATA: Int = 981 /*  */
@inline @cCode.inline val TTransactionExecutionStatus_REQUIRED_BYTES_FOR_ACN_ENCODING = 4
@inline @cCode.inline val TTransactionExecutionStatus_REQUIRED_BITS_FOR_ACN_ENCODING = 32

@inline @cCode.inline val ERR_ACN_DECODE_TRANSACTIONEXECUTIONSTATUS: Int = 991 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TRANSACTIONEXECUTIONSTATUS_DATAACQUISITIONRETURNCODE: Int = 973 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TRANSACTIONEXECUTIONSTATUS_AUXILIARYDATA: Int = 982 /*  */


