/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TCommandData --------------------------------------------*/
type TCommandData_dev1 = ULong


enum TCommandData:
    case CommandData_dev1_PRESENT(dev1: TCommandData_dev1)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775799L))
        this match {
            case TCommandData.CommandData_dev1_PRESENT(dev1) =>
                8L
        }
    }.ensuring { (res: Long) => 
        res == 8L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775799L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775799L))
        this match {
            case TCommandData.CommandData_dev1_PRESENT(dev1) =>
                ()
        }
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775799L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775799L))
        require((offset % 8L) == (otherOffset % 8L))
        this match {
            case TCommandData.CommandData_dev1_PRESENT(dev1) =>
                ()
        }
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775799L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775799L))
        require((offset % 16L) == (otherOffset % 16L))
        this match {
            case TCommandData.CommandData_dev1_PRESENT(dev1) =>
                ()
        }
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775799L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775799L))
        require((offset % 32L) == (otherOffset % 32L))
        this match {
            case TCommandData.CommandData_dev1_PRESENT(dev1) =>
                ()
        }
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

@inline @cCode.inline val ERR_COMMANDDATA_DEV1: Int = 763 /*(0 .. 255) */

@inline @cCode.inline val ERR_COMMANDDATA: Int = 768 /* */

 
 
/*-- TPhysicalDeviceCommand --------------------------------------------*/

case class TPhysicalDeviceCommand (
    protocolSpecificData: TProtocolSpecificData, 
    commandData: TCommandData
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775759L))
        val size_0 = 32L
        val size_1 = this.protocolSpecificData match {
            case TProtocolSpecificData.ProtocolSpecificData_dev1_PRESENT(dev1) =>
                8L
        }
        val size_2 = this.commandData match {
            case TCommandData.CommandData_dev1_PRESENT(dev1) =>
                8L
        }
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        res == 48L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775759L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775759L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.protocolSpecificData match {
            case TProtocolSpecificData.ProtocolSpecificData_dev1_PRESENT(dev1) =>
                8L
        }
        val size_1_otherOffset = this.protocolSpecificData match {
            case TProtocolSpecificData.ProtocolSpecificData_dev1_PRESENT(dev1) =>
                8L
        }
        this.protocolSpecificData.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = this.commandData match {
            case TCommandData.CommandData_dev1_PRESENT(dev1) =>
                8L
        }
        val size_2_otherOffset = this.commandData match {
            case TCommandData.CommandData_dev1_PRESENT(dev1) =>
                8L
        }
        this.commandData.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775759L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775759L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.protocolSpecificData match {
            case TProtocolSpecificData.ProtocolSpecificData_dev1_PRESENT(dev1) =>
                8L
        }
        val size_1_otherOffset = this.protocolSpecificData match {
            case TProtocolSpecificData.ProtocolSpecificData_dev1_PRESENT(dev1) =>
                8L
        }
        this.protocolSpecificData.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = this.commandData match {
            case TCommandData.CommandData_dev1_PRESENT(dev1) =>
                8L
        }
        val size_2_otherOffset = this.commandData match {
            case TCommandData.CommandData_dev1_PRESENT(dev1) =>
                8L
        }
        this.commandData.sizeLemmaNextByte(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775759L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775759L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.protocolSpecificData match {
            case TProtocolSpecificData.ProtocolSpecificData_dev1_PRESENT(dev1) =>
                8L
        }
        val size_1_otherOffset = this.protocolSpecificData match {
            case TProtocolSpecificData.ProtocolSpecificData_dev1_PRESENT(dev1) =>
                8L
        }
        this.protocolSpecificData.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = this.commandData match {
            case TCommandData.CommandData_dev1_PRESENT(dev1) =>
                8L
        }
        val size_2_otherOffset = this.commandData match {
            case TCommandData.CommandData_dev1_PRESENT(dev1) =>
                8L
        }
        this.commandData.sizeLemmaNextWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775759L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775759L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.protocolSpecificData match {
            case TProtocolSpecificData.ProtocolSpecificData_dev1_PRESENT(dev1) =>
                8L
        }
        val size_1_otherOffset = this.protocolSpecificData match {
            case TProtocolSpecificData.ProtocolSpecificData_dev1_PRESENT(dev1) =>
                8L
        }
        this.protocolSpecificData.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = this.commandData match {
            case TCommandData.CommandData_dev1_PRESENT(dev1) =>
                8L
        }
        val size_2_otherOffset = this.commandData match {
            case TCommandData.CommandData_dev1_PRESENT(dev1) =>
                8L
        }
        this.commandData.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_PHYSICALDEVICECOMMAND: Int = 757 /* */
@inline @cCode.inline val ERR_PHYSICALDEVICECOMMAND_PROTOCOLSPECIFICDATA_2: Int = 741 /* */
@inline @cCode.inline val ERR_PHYSICALDEVICECOMMAND_COMMANDDATA_2: Int = 754 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PHYSICALDEVICECOMMAND: Int = 760 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_UPDATE_PHYSICALDEVICECOMMAND_PHYSICALDEVICE_ID: Int = 730 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PHYSICALDEVICECOMMAND_PHYSICALDEVICE_ID_UNINITIALIZED: Int = 761 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PHYSICALDEVICECOMMAND_PHYSICALDEVICE_ID: Int = 728 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PHYSICALDEVICECOMMAND_PROTOCOLSPECIFICDATA: Int = 739 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PHYSICALDEVICECOMMAND_PROTOCOLSPECIFICDATA_DEV1: Int = 734 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PHYSICALDEVICECOMMAND_COMMANDDATA: Int = 752 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PHYSICALDEVICECOMMAND_COMMANDDATA_DEV1: Int = 747 /*  */
@inline @cCode.inline val TPhysicalDeviceCommand_REQUIRED_BYTES_FOR_ACN_ENCODING = 6
@inline @cCode.inline val TPhysicalDeviceCommand_REQUIRED_BITS_FOR_ACN_ENCODING = 48

@inline @cCode.inline val ERR_ACN_DECODE_PHYSICALDEVICECOMMAND: Int = 762 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PHYSICALDEVICECOMMAND_PHYSICALDEVICE_ID: Int = 729 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PHYSICALDEVICECOMMAND_PROTOCOLSPECIFICDATA: Int = 740 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PHYSICALDEVICECOMMAND_PROTOCOLSPECIFICDATA_DEV1: Int = 735 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PHYSICALDEVICECOMMAND_COMMANDDATA: Int = 753 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PHYSICALDEVICECOMMAND_COMMANDDATA_DEV1: Int = 748 /*  */
/*-- TTC_2_7_DistributePhysicalDeviceCommands --------------------------------------------*/


case class TTC_2_7_DistributePhysicalDeviceCommands_physicalDeviceCommands (nCount: Int, arr: Vector[TPhysicalDeviceCommand])
{
    require(this.arr.size <= 63 && 1 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854772783L))
        TTC_2_7_DistributePhysicalDeviceCommands_physicalDeviceCommands.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 3024L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854772783L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854772783L))
        TTC_2_7_DistributePhysicalDeviceCommands_physicalDeviceCommands.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854772783L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854772783L))
        require((offset % 8L) == (otherOffset % 8L))
        TTC_2_7_DistributePhysicalDeviceCommands_physicalDeviceCommands.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854772783L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854772783L))
        require((offset % 16L) == (otherOffset % 16L))
        TTC_2_7_DistributePhysicalDeviceCommands_physicalDeviceCommands.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854772783L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854772783L))
        require((offset % 32L) == (otherOffset % 32L))
        TTC_2_7_DistributePhysicalDeviceCommands_physicalDeviceCommands.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TTC_2_7_DistributePhysicalDeviceCommands_physicalDeviceCommands {
    def sizeRange(ls: Vector[TPhysicalDeviceCommand], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 48L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(elemSize == 48L)
            elemSize + TTC_2_7_DistributePhysicalDeviceCommands_physicalDeviceCommands.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 48L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TPhysicalDeviceCommand], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 48L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 48L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 48L)
            assert(elemSizeOtherOff == 48L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TTC_2_7_DistributePhysicalDeviceCommands_physicalDeviceCommands.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_2_7_DistributePhysicalDeviceCommands_physicalDeviceCommands.sizeRange(ls, offset, from, to) == TTC_2_7_DistributePhysicalDeviceCommands_physicalDeviceCommands.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TPhysicalDeviceCommand], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 48L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 48L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 48L)
            assert(elemSizeOtherOff == 48L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TTC_2_7_DistributePhysicalDeviceCommands_physicalDeviceCommands.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_2_7_DistributePhysicalDeviceCommands_physicalDeviceCommands.sizeRange(ls, offset, from, to) == TTC_2_7_DistributePhysicalDeviceCommands_physicalDeviceCommands.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TPhysicalDeviceCommand], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 48L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 48L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 48L)
            assert(elemSizeOtherOff == 48L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TTC_2_7_DistributePhysicalDeviceCommands_physicalDeviceCommands.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_2_7_DistributePhysicalDeviceCommands_physicalDeviceCommands.sizeRange(ls, offset, from, to) == TTC_2_7_DistributePhysicalDeviceCommands_physicalDeviceCommands.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TPhysicalDeviceCommand], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 48L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 48L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 48L)
            assert(elemSizeOtherOff == 48L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TTC_2_7_DistributePhysicalDeviceCommands_physicalDeviceCommands.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_2_7_DistributePhysicalDeviceCommands_physicalDeviceCommands.sizeRange(ls, offset, from, to) == TTC_2_7_DistributePhysicalDeviceCommands_physicalDeviceCommands.sizeRange(ls, otherOffset, from, to)
    }
}

case class TTC_2_7_DistributePhysicalDeviceCommands (
    physicalDeviceCommands: TTC_2_7_DistributePhysicalDeviceCommands_physicalDeviceCommands
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854772751L))
        val size_0 = 32L
        val size_1 = this.physicalDeviceCommands.size(offset + size_0)
        size_0 + size_1
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 3056L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854772751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854772751L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.physicalDeviceCommands.size(offset + size_0_offset)
        val size_1_otherOffset = this.physicalDeviceCommands.size(otherOffset + size_0_otherOffset)
        this.physicalDeviceCommands.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854772751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854772751L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.physicalDeviceCommands.size(offset + size_0_offset)
        val size_1_otherOffset = this.physicalDeviceCommands.size(otherOffset + size_0_otherOffset)
        this.physicalDeviceCommands.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854772751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854772751L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.physicalDeviceCommands.size(offset + size_0_offset)
        val size_1_otherOffset = this.physicalDeviceCommands.size(otherOffset + size_0_otherOffset)
        this.physicalDeviceCommands.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854772751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854772751L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.physicalDeviceCommands.size(offset + size_0_offset)
        val size_1_otherOffset = this.physicalDeviceCommands.size(otherOffset + size_0_otherOffset)
        this.physicalDeviceCommands.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_2_7_DISTRIBUTEPHYSICALDEVICECOMMANDS_PHYSICALDEVICECOMMANDS: Int = 717 /*(SIZE(1 .. maxTC-2-7-PhysicalDeviceCommandCount)) */
@inline @cCode.inline val ERR_TC_2_7_DISTRIBUTEPHYSICALDEVICECOMMANDS_PHYSICALDEVICECOMMANDS_ELM_2: Int = 712 /* */

@inline @cCode.inline val ERR_TC_2_7_DISTRIBUTEPHYSICALDEVICECOMMANDS: Int = 722 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_2_7_DISTRIBUTEPHYSICALDEVICECOMMANDS: Int = 725 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_2_7_DISTRIBUTEPHYSICALDEVICECOMMANDS_N_UNINITIALIZED: Int = 726 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_2_7_DISTRIBUTEPHYSICALDEVICECOMMANDS_N: Int = 676 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_2_7_DISTRIBUTEPHYSICALDEVICECOMMANDS_PHYSICALDEVICECOMMANDS: Int = 720 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_2_7_DISTRIBUTEPHYSICALDEVICECOMMANDS_PHYSICALDEVICECOMMANDS_ELM_2: Int = 715 /*  */
@inline @cCode.inline val TTC_2_7_DistributePhysicalDeviceCommands_REQUIRED_BYTES_FOR_ACN_ENCODING = 382
@inline @cCode.inline val TTC_2_7_DistributePhysicalDeviceCommands_REQUIRED_BITS_FOR_ACN_ENCODING = 3056

@inline @cCode.inline val ERR_ACN_DECODE_TC_2_7_DISTRIBUTEPHYSICALDEVICECOMMANDS: Int = 727 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_2_7_DISTRIBUTEPHYSICALDEVICECOMMANDS_N: Int = 677 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_2_7_DISTRIBUTEPHYSICALDEVICECOMMANDS_PHYSICALDEVICECOMMANDS: Int = 721 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_2_7_DISTRIBUTEPHYSICALDEVICECOMMANDS_PHYSICALDEVICECOMMANDS_ELM_2: Int = 716 /*  */

// @inline @cCode.inline val maxTC_2_7_PhysicalDeviceCommandCount: Int = 63 // defined in body

