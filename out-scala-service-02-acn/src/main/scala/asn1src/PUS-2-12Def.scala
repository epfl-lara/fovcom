/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TTM_2_12_LogicalDeviceDataReport --------------------------------------------*/

case class TTM_2_12_LogicalDeviceDataReport (
    transaction_ID: TPUSC_UINT32, 
    transactionExecutionStatus: TTransactionExecutionStatus, 
    parameterValue: TDummyType
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775739L))
        val size_0 = 32L
        val size_1 = this.transactionExecutionStatus.size(offset + size_0)
        val size_2 = 4L
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        res == 68L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775739L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775739L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.transactionExecutionStatus.size(offset + size_0_offset)
        val size_1_otherOffset = this.transactionExecutionStatus.size(otherOffset + size_0_otherOffset)
        this.transactionExecutionStatus.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = 4L
        val size_2_otherOffset = 4L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775739L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775739L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.transactionExecutionStatus.size(offset + size_0_offset)
        val size_1_otherOffset = this.transactionExecutionStatus.size(otherOffset + size_0_otherOffset)
        this.transactionExecutionStatus.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = 4L
        val size_2_otherOffset = 4L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775739L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775739L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.transactionExecutionStatus.size(offset + size_0_offset)
        val size_1_otherOffset = this.transactionExecutionStatus.size(otherOffset + size_0_otherOffset)
        this.transactionExecutionStatus.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = 4L
        val size_2_otherOffset = 4L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775739L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775739L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.transactionExecutionStatus.size(offset + size_0_offset)
        val size_1_otherOffset = this.transactionExecutionStatus.size(otherOffset + size_0_otherOffset)
        this.transactionExecutionStatus.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = 4L
        val size_2_otherOffset = 4L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TM_2_12_LOGICALDEVICEDATAREPORT: Int = 333 /* */
@inline @cCode.inline val ERR_TM_2_12_LOGICALDEVICEDATAREPORT_TRANSACTION_ID_2_2: Int = 294 /* */
@inline @cCode.inline val ERR_TM_2_12_LOGICALDEVICEDATAREPORT_TRANSACTIONEXECUTIONSTATUS_2: Int = 318 /* */
@inline @cCode.inline val ERR_TM_2_12_LOGICALDEVICEDATAREPORT_PARAMETERVALUE_2: Int = 328 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_TM_2_12_LOGICALDEVICEDATAREPORT: Int = 336 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_2_12_LOGICALDEVICEDATAREPORT_TRANSACTION_ID_2_2: Int = 297 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_2_12_LOGICALDEVICEDATAREPORT_TRANSACTIONEXECUTIONSTATUS_2: Int = 321 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_2_12_LOGICALDEVICEDATAREPORT_PARAMETERVALUE_2: Int = 331 /*  */
@inline @cCode.inline val TTM_2_12_LogicalDeviceDataReport_REQUIRED_BYTES_FOR_ACN_ENCODING = 9
@inline @cCode.inline val TTM_2_12_LogicalDeviceDataReport_REQUIRED_BITS_FOR_ACN_ENCODING = 68

@inline @cCode.inline val ERR_ACN_DECODE_TM_2_12_LOGICALDEVICEDATAREPORT: Int = 337 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_2_12_LOGICALDEVICEDATAREPORT_TRANSACTION_ID_2_2: Int = 298 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_2_12_LOGICALDEVICEDATAREPORT_TRANSACTIONEXECUTIONSTATUS_2: Int = 322 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_2_12_LOGICALDEVICEDATAREPORT_PARAMETERVALUE_2: Int = 332 /*  */


