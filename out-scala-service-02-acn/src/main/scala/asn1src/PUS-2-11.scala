/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

val maxTC_2_11_DataAcquireRequestCount: Int = 63 // variables:188

def TDataAcquireRequest_IsConstraintValid(pVal: TDataAcquireRequest): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TPUSC_UINT32_IsConstraintValid(pVal.transaction_ID)
    if ret.isRight then
        ret = TLogicalDevice_ID_IsConstraintValid(pVal.logicalDevice_ID)
        if ret.isRight then
            ret = TParameter_ID_IsConstraintValid(pVal.parameter_ID)
    ret
}

def TDataAcquireRequest_Initialize(): TDataAcquireRequest = TDataAcquireRequest(transaction_ID = ULong.fromRaw(0L), logicalDevice_ID = TLogicalDevice_ID.Tldev1, parameter_ID = TParameter_ID.Tparam1)

@opaque @inlineOnce 
def TDataAcquireRequest_ACN_Encode(pVal: TDataAcquireRequest, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(96L))
    TDataAcquireRequest_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode transaction_ID */
    TPUSC_UINT32_ACN_Encode(pVal.transaction_ID, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 96L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode logicalDevice_ID */
    TLogicalDevice_ID_ACN_Encode(pVal.logicalDevice_ID, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 64L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode parameter_ID */
    TParameter_ID_ACN_Encode(pVal.parameter_ID, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 96L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 96L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TDataAcquireRequest_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TDataAcquireRequest] =
{
    require(codec.base.bitStream.validate_offset_bits(96L))

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode transaction_ID */
    val pVal_transaction_ID = TPUSC_UINT32_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 96L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode logicalDevice_ID */
    val pVal_logicalDevice_ID = TLogicalDevice_ID_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 64L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode parameter_ID */
    val pVal_parameter_ID = TParameter_ID_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 96L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 96L)
    }
    val pVal = TDataAcquireRequest(pVal_transaction_ID, pVal_logicalDevice_ID, pVal_parameter_ID)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }

    TDataAcquireRequest_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TDataAcquireRequest](l)
        case Right(_) => RightMut[ErrorCode, TDataAcquireRequest](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TDataAcquireRequest]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TDataAcquireRequest_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TDataAcquireRequest_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TDataAcquireRequest]) =
{
    require(codec.base.bitStream.validate_offset_bits(96L))
    val cpy = snapshot(codec)
    val res = TDataAcquireRequest_ACN_Decode(cpy)
    (cpy, res)
}

def TTC_2_11_AcquireDataFromLogicalDevices_dataAcquireRequests_IsConstraintValid(pVal: TTC_2_11_AcquireDataFromLogicalDevices_dataAcquireRequests): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = ((1 <= pVal.nCount) && (pVal.nCount <= 63)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TDataAcquireRequest_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TTC_2_11_AcquireDataFromLogicalDevices_IsConstraintValid(pVal: TTC_2_11_AcquireDataFromLogicalDevices): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TTC_2_11_AcquireDataFromLogicalDevices_dataAcquireRequests_IsConstraintValid(pVal.dataAcquireRequests)
    ret
}

def TTC_2_11_AcquireDataFromLogicalDevices_dataAcquireRequests_Initialize(): TTC_2_11_AcquireDataFromLogicalDevices_dataAcquireRequests = TTC_2_11_AcquireDataFromLogicalDevices_dataAcquireRequests(1, Vector.fill(63)(TDataAcquireRequest_Initialize()))
def TTC_2_11_AcquireDataFromLogicalDevices_Initialize(): TTC_2_11_AcquireDataFromLogicalDevices = TTC_2_11_AcquireDataFromLogicalDevices(dataAcquireRequests = TTC_2_11_AcquireDataFromLogicalDevices_dataAcquireRequests_Initialize())

@opaque @inlineOnce 
def TTC_2_11_AcquireDataFromLogicalDevices_ACN_Encode(pVal: TTC_2_11_AcquireDataFromLogicalDevices, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(6080L))
    var i1: Int = 0
    TTC_2_11_AcquireDataFromLogicalDevices_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val TC_2_11_AcquireDataFromLogicalDevices_n = ULong.fromRaw(pVal.dataAcquireRequests.nCount)
    if TC_2_11_AcquireDataFromLogicalDevices_n < ULong.fromRaw(1) || TC_2_11_AcquireDataFromLogicalDevices_n > ULong.fromRaw(63) then
        return Left(860)
    /* Encode TC_2_11_AcquireDataFromLogicalDevices_n */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(TC_2_11_AcquireDataFromLogicalDevices_n)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(TC_2_11_AcquireDataFromLogicalDevices_n)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 6080L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode dataAcquireRequests */
    TC_2_11_AcquireDataFromLogicalDevices_dataAcquireRequests_ACN_Encode(codec, pVal, TC_2_11_AcquireDataFromLogicalDevices_n, pVal.dataAcquireRequests) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 6080L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.dataAcquireRequests.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 6080L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def PUS_2_11_TTC_2_11_AcquireDataFromLogicalDevices_dataAcquireRequests_pVal_dataAcquireRequests_dataAcquireRequests_Encode_loop(codec: ACN, dataAcquireRequests: TTC_2_11_AcquireDataFromLogicalDevices_dataAcquireRequests, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= dataAcquireRequests.nCount))
    require((1 <= dataAcquireRequests.nCount) && (dataAcquireRequests.nCount <= dataAcquireRequests.arr.size) && (dataAcquireRequests.arr.size <= 63))
    require(codec.base.bitStream.validate_offset_bits((96L * (dataAcquireRequests.nCount - i1))))
    decreases(dataAcquireRequests.nCount - i1)
    if (i1 == dataAcquireRequests.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 96L * (dataAcquireRequests.nCount - i1), 96L)
        }
        TDataAcquireRequest_ACN_Encode(dataAcquireRequests.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(96L * (i1 + 1) == 96L * i1 + 96L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 96L * (dataAcquireRequests.nCount - i1), 96L)
            check(codec.base.bitStream.validate_offset_bits(96L * (dataAcquireRequests.nCount - (i1 + 1))))
        }
        val res = PUS_2_11_TTC_2_11_AcquireDataFromLogicalDevices_dataAcquireRequests_pVal_dataAcquireRequests_dataAcquireRequests_Encode_loop(codec, dataAcquireRequests, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TTC_2_11_AcquireDataFromLogicalDevices_dataAcquireRequests.sizeRange(dataAcquireRequests.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, dataAcquireRequests.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + dataAcquireRequests.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TTC_2_11_AcquireDataFromLogicalDevices_dataAcquireRequests.sizeRange(dataAcquireRequests.arr, codecSnap1.base.bitStream.bitIndex, i1, dataAcquireRequests.nCount) == dataAcquireRequests.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TTC_2_11_AcquireDataFromLogicalDevices_dataAcquireRequests.sizeRange(dataAcquireRequests.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, dataAcquireRequests.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TTC_2_11_AcquireDataFromLogicalDevices_dataAcquireRequests.sizeRange(dataAcquireRequests.arr, codecSnap1.base.bitStream.bitIndex, i1, dataAcquireRequests.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTC_2_11_AcquireDataFromLogicalDevices_dataAcquireRequests.sizeRange(dataAcquireRequests.arr, old(codec).base.bitStream.bitIndex, i1, dataAcquireRequests.nCount)
    }
}



@opaque @inlineOnce
def TC_2_11_AcquireDataFromLogicalDevices_dataAcquireRequests_ACN_Encode(codec: ACN, pVal: TTC_2_11_AcquireDataFromLogicalDevices, TC_2_11_AcquireDataFromLogicalDevices_n: ULong, dataAcquireRequests: TTC_2_11_AcquireDataFromLogicalDevices_dataAcquireRequests): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(6048L))
    @ghost val oldCdc = snapshot(codec)
    TTC_2_11_AcquireDataFromLogicalDevices_dataAcquireRequests_IsConstraintValid(dataAcquireRequests) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    PUS_2_11_TTC_2_11_AcquireDataFromLogicalDevices_dataAcquireRequests_pVal_dataAcquireRequests_dataAcquireRequests_Encode_loop(codec, dataAcquireRequests, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                dataAcquireRequests.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + dataAcquireRequests.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTC_2_11_AcquireDataFromLogicalDevices_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTC_2_11_AcquireDataFromLogicalDevices] =
{
    require(codec.base.bitStream.validate_offset_bits(6080L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode TC_2_11_AcquireDataFromLogicalDevices_n */
    val TC_2_11_AcquireDataFromLogicalDevices_n = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 6080L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode dataAcquireRequests */
    val pVal_dataAcquireRequests = TC_2_11_AcquireDataFromLogicalDevices_dataAcquireRequests_ACN_Decode(codec, TC_2_11_AcquireDataFromLogicalDevices_n) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 6080L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_dataAcquireRequests.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 6080L)
    }
    val pVal = TTC_2_11_AcquireDataFromLogicalDevices(pVal_dataAcquireRequests)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }

    TTC_2_11_AcquireDataFromLogicalDevices_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTC_2_11_AcquireDataFromLogicalDevices](l)
        case Right(_) => RightMut[ErrorCode, TTC_2_11_AcquireDataFromLogicalDevices](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTC_2_11_AcquireDataFromLogicalDevices]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_2_11_AcquireDataFromLogicalDevices_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTC_2_11_AcquireDataFromLogicalDevices_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTC_2_11_AcquireDataFromLogicalDevices]) =
{
    require(codec.base.bitStream.validate_offset_bits(6080L))
    val cpy = snapshot(codec)
    val res = TTC_2_11_AcquireDataFromLogicalDevices_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def PUS_2_11_TTC_2_11_AcquireDataFromLogicalDevices_dataAcquireRequests_pVal_dataAcquireRequests_dataAcquireRequests_Decode_loop(codec: ACN, nCount: Int, dataAcquireRequests: Vector[TDataAcquireRequest], i1: Int): EitherMut[Int, Vector[TDataAcquireRequest]] = {
    require((1 <= nCount) && (nCount <= 63))
    require((0 <= i1) && (i1 <= nCount))
    require(dataAcquireRequests.size == i1)
    require(codec.base.bitStream.validate_offset_bits((96L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(dataAcquireRequests)
            vecRangesEqSlicedLemma(dataAcquireRequests, dataAcquireRequests, 0, dataAcquireRequests.size, 0, i1)
        }
        RightMut[Int, Vector[TDataAcquireRequest]](dataAcquireRequests)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 96L * (nCount - i1), 96L)
        }
        val dataAcquireRequests_arr_i1_ = TDataAcquireRequest_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(96L * (i1 + 1) == 96L * i1 + 96L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 96L * (nCount - i1), 96L)
            check(codec.base.bitStream.validate_offset_bits(96L * (nCount - (i1 + 1))))
        }
        val res = PUS_2_11_TTC_2_11_AcquireDataFromLogicalDevices_dataAcquireRequests_pVal_dataAcquireRequests_dataAcquireRequests_Decode_loop(codec, nCount, dataAcquireRequests.append(dataAcquireRequests_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(dataAcquireRequests, newVec, dataAcquireRequests_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(dataAcquireRequests.append(dataAcquireRequests_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(dataAcquireRequests.list, dataAcquireRequests_arr_i1_, i1)
                    Vector.listApplyEqVecApply(dataAcquireRequests.append(dataAcquireRequests_arr_i1_), i1)
                    check(dataAcquireRequests_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TDataAcquireRequest]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(dataAcquireRequests, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTC_2_11_AcquireDataFromLogicalDevices_dataAcquireRequests.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def TC_2_11_AcquireDataFromLogicalDevices_dataAcquireRequests_ACN_Decode(codec: ACN, TC_2_11_AcquireDataFromLogicalDevices_n: ULong): EitherMut[Int, TTC_2_11_AcquireDataFromLogicalDevices_dataAcquireRequests] = {
    require(codec.base.bitStream.validate_offset_bits(6048L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val dataAcquireRequests =
        if ((ULong.fromRaw(1) <= TC_2_11_AcquireDataFromLogicalDevices_n) && (TC_2_11_AcquireDataFromLogicalDevices_n <= ULong.fromRaw(63))) then
            val dataAcquireRequests_nCount = TC_2_11_AcquireDataFromLogicalDevices_n.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val dataAcquireRequests = PUS_2_11_TTC_2_11_AcquireDataFromLogicalDevices_dataAcquireRequests_pVal_dataAcquireRequests_dataAcquireRequests_Decode_loop(codec, dataAcquireRequests_nCount, Vector.empty[TDataAcquireRequest], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val dataAcquireRequests = TTC_2_11_AcquireDataFromLogicalDevices_dataAcquireRequests(dataAcquireRequests_nCount, bdg)
                    ghostExpr {
                        dataAcquireRequests.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    dataAcquireRequests
            }
            dataAcquireRequests
        else return LeftMut(ERR_ACN_DECODE_TC_2_11_ACQUIREDATAFROMLOGICALDEVICES_DATAACQUIREREQUESTS)
    TTC_2_11_AcquireDataFromLogicalDevices_dataAcquireRequests_IsConstraintValid(dataAcquireRequests) match {
        case Left(l) =>
            LeftMut[Int, TTC_2_11_AcquireDataFromLogicalDevices_dataAcquireRequests](l)
        case Right(_) =>
            RightMut[Int, TTC_2_11_AcquireDataFromLogicalDevices_dataAcquireRequests](dataAcquireRequests)
    }
}.ensuring { (res: EitherMut[Int, TTC_2_11_AcquireDataFromLogicalDevices_dataAcquireRequests]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_2_11_AcquireDataFromLogicalDevices_dataAcquireRequests_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TC_2_11_AcquireDataFromLogicalDevices_dataAcquireRequests_ACN_Decode_pure(codec: ACN, TC_2_11_AcquireDataFromLogicalDevices_n: ULong): (ACN, EitherMut[Int, TTC_2_11_AcquireDataFromLogicalDevices_dataAcquireRequests]) = {
    require(codec.base.bitStream.validate_offset_bits(6048L))
    val cpy = snapshot(codec)
    val res = TC_2_11_AcquireDataFromLogicalDevices_dataAcquireRequests_ACN_Decode(cpy, TC_2_11_AcquireDataFromLogicalDevices_n)
    (cpy, res)
}