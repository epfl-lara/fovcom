/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

val maxTC_6_21_ObjectDataAreaCount: Int = 63 // variables:188

def TObjectDataArea_checksum_IsConstraintValid(@annotation.unused pVal: TObjectDataArea_checksum): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = Right(0)
    ret
}

def TObjectDataArea_IsConstraintValid(pVal: TObjectDataArea): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TPUSC_UINT32_IsConstraintValid(pVal.destinationOffset)
    if ret.isRight then
        ret = TPUSC_UINT32_IsConstraintValid(pVal.offsetInFile)
        if ret.isRight then
            ret = TPUSC_UINT32_IsConstraintValid(pVal.length)
            if ret.isRight then
                pVal.checksum match
                    case SomeMut(checksum) =>
                        ret = TObjectDataArea_checksum_IsConstraintValid(checksum)
                    case NoneMut() =>
    if ret.isRight then
        ret = (pVal.checksum.isDefined == true) match
            case true =>
                Right(0)
            case false =>
                Left(45)
    ret
}

def TObjectDataArea_checksum_Initialize(): TObjectDataArea_checksum = TObjectDataArea_checksum(Vector.fill(2)(0.toRawUByte))
def TObjectDataArea_Initialize(): TObjectDataArea = TObjectDataArea(destinationOffset = ULong.fromRaw(0L), offsetInFile = ULong.fromRaw(0L), length = ULong.fromRaw(0L), checksum = SomeMut(TObjectDataArea_checksum(Vector.fill(2)(0.toRawUByte))))

@opaque @inlineOnce 
def TObjectDataArea_ACN_Encode(pVal: TObjectDataArea, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(112L))
    TObjectDataArea_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode destinationOffset */
    TPUSC_UINT32_ACN_Encode(pVal.destinationOffset, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 112L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode offsetInFile */
    TPUSC_UINT32_ACN_Encode(pVal.offsetInFile, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 80L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode length */
    TPUSC_UINT32_ACN_Encode(pVal.length, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_3.base.bitStream, codec.base.bitStream, 48L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 96L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    @ghost val codec_0_4 = snapshot(codec)
    ObjectDataArea_checksum_Optional_ACN_Encode(codec, pVal, pVal.checksum) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 112L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_3 = pVal.checksum match {
        case SomeMut(v) =>
            16L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 112L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2 + size_3)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def ObjectDataArea_checksum_Optional_ACN_Encode(codec: ACN, pVal: TObjectDataArea, checksum: OptionMut[TObjectDataArea_checksum]): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(16L))
    @ghost val oldCdc = snapshot(codec)
    checksum match {
        case SomeMut(v) =>
            TObjectDataArea_checksum_IsConstraintValid(v) match {
                case Left(l) =>
                    return Left[Int, Int](l)
                case Right(_) =>
            }
        case NoneMut() =>
            ()
    }
    /* Encode checksum */
    /* marked as ALWAYS PRESENT, so it must be Some */
    checksum match
        case SomeMut(checksum) =>
            assert(16.toInt >= 0) // overflow may happen during cast
            codec.base.bitStream.appendBitsMSBFirstVec(checksum.arr, 16.toInt)
    
        case NoneMut() => return Left(628)
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 16L
    }
}



@opaque @inlineOnce 
def TObjectDataArea_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TObjectDataArea] =
{
    require(codec.base.bitStream.validate_offset_bits(112L))

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode destinationOffset */
    val pVal_destinationOffset = TPUSC_UINT32_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 112L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode offsetInFile */
    val pVal_offsetInFile = TPUSC_UINT32_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 80L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode length */
    val pVal_length = TPUSC_UINT32_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_3.base.bitStream, codec.base.bitStream, 48L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 96L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    @ghost val codec_0_4 = snapshot(codec)
    val pVal_checksum = ObjectDataArea_checksum_Optional_ACN_Decode(codec) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 112L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_3 = pVal_checksum match {
        case SomeMut(v) =>
            16L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 112L)
    }
    val pVal = TObjectDataArea(pVal_destinationOffset, pVal_offsetInFile, pVal_length, pVal_checksum)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2 + size_3)
    }

    TObjectDataArea_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TObjectDataArea](l)
        case Right(_) => RightMut[ErrorCode, TObjectDataArea](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TObjectDataArea]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TObjectDataArea_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TObjectDataArea_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TObjectDataArea]) =
{
    require(codec.base.bitStream.validate_offset_bits(112L))
    val cpy = snapshot(codec)
    val res = TObjectDataArea_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def ObjectDataArea_checksum_Optional_ACN_Decode(codec: ACN): EitherMut[Int, OptionMut[TObjectDataArea_checksum]] = {
    require(codec.base.bitStream.validate_offset_bits(16L))
    @ghost val oldCdc = snapshot(codec)
    /* Decode checksum */
    /* marked as ALWAYS PRESENT */
    val checksum: OptionMut[TObjectDataArea_checksum] =
        val pVal_checksum = TObjectDataArea_checksum(codec.base.bitStream.readBitsVec(16.toInt))
        SomeMut(pVal_checksum)
    checksum match {
        case SomeMut(v) =>
            TObjectDataArea_checksum_IsConstraintValid(v) match {
                case Left(l) =>
                    LeftMut[Int, OptionMut[TObjectDataArea_checksum]](l)
                case Right(_) =>
                    RightMut[Int, OptionMut[TObjectDataArea_checksum]](checksum)
            }
        case NoneMut() =>
            RightMut[Int, OptionMut[TObjectDataArea_checksum]](checksum)
    }
}.ensuring { (res: EitherMut[Int, OptionMut[TObjectDataArea_checksum]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            resVal.isDefined && old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 16L && (resVal match {
                case SomeMut(v) =>
                    TObjectDataArea_checksum_IsConstraintValid(v).isRight
                case NoneMut() =>
                    true
            })
    }
}



@ghost @pure
def ObjectDataArea_checksum_Optional_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[Int, OptionMut[TObjectDataArea_checksum]]) = {
    require(codec.base.bitStream.validate_offset_bits(16L))
    val cpy = snapshot(codec)
    val res = ObjectDataArea_checksum_Optional_ACN_Decode(cpy)
    (cpy, res)
}



def TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas_IsConstraintValid(pVal: TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = ((1 <= pVal.nCount) && (pVal.nCount <= 63)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TObjectDataArea_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TTC_6_21_LoadObjectMemoryDataAreasByReference_IsConstraintValid(pVal: TTC_6_21_LoadObjectMemoryDataAreasByReference): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TBase_IsConstraintValid(pVal.base_ID)
    if ret.isRight then
        ret = TFilePath_IsConstraintValid(pVal.filePath)
        if ret.isRight then
            ret = TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas_IsConstraintValid(pVal.objectDataAreas)
    ret
}

def TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas_Initialize(): TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas = TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas(1, Vector.fill(63)(TObjectDataArea_Initialize()))
def TTC_6_21_LoadObjectMemoryDataAreasByReference_Initialize(): TTC_6_21_LoadObjectMemoryDataAreasByReference = TTC_6_21_LoadObjectMemoryDataAreasByReference(base_ID = ULong.fromRaw(0L), filePath = TFilePath_Initialize(), objectDataAreas = TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas_Initialize())

@opaque @inlineOnce 
def TTC_6_21_LoadObjectMemoryDataAreasByReference_ACN_Encode(pVal: TTC_6_21_LoadObjectMemoryDataAreasByReference, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(64450L))
    var i1: Int = 0
    TTC_6_21_LoadObjectMemoryDataAreasByReference_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode base_ID */
    TBase_ACN_Encode(pVal.base_ID, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 64450L, 8L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 8L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 8L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode filePath */
    TFilePath_ACN_Encode(pVal.filePath, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 64442L, 57354L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 57362L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.filePath.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    val TC_6_21_LoadObjectMemoryDataAreasByReference_n = ULong.fromRaw(pVal.objectDataAreas.nCount)
    if TC_6_21_LoadObjectMemoryDataAreasByReference_n < ULong.fromRaw(1) || TC_6_21_LoadObjectMemoryDataAreasByReference_n > ULong.fromRaw(63) then
        return Left(860)
    /* Encode TC_6_21_LoadObjectMemoryDataAreasByReference_n */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(TC_6_21_LoadObjectMemoryDataAreasByReference_n)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(TC_6_21_LoadObjectMemoryDataAreasByReference_n)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_3.base.bitStream, codec.base.bitStream, 7088L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 57394L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    @ghost val codec_0_4 = snapshot(codec)
    /* Encode objectDataAreas */
    TC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas_ACN_Encode(codec, pVal, TC_6_21_LoadObjectMemoryDataAreasByReference_n, pVal.objectDataAreas) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64450L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_3 = pVal.objectDataAreas.size(codec_0_4.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 64450L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2 + size_3)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas_Encode_loop(codec: ACN, objectDataAreas: TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= objectDataAreas.nCount))
    require((1 <= objectDataAreas.nCount) && (objectDataAreas.nCount <= objectDataAreas.arr.size) && (objectDataAreas.arr.size <= 63))
    require(codec.base.bitStream.validate_offset_bits((112L * (objectDataAreas.nCount - i1))))
    decreases(objectDataAreas.nCount - i1)
    if (i1 == objectDataAreas.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 112L * (objectDataAreas.nCount - i1), 112L)
        }
        TObjectDataArea_ACN_Encode(objectDataAreas.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(112L * (i1 + 1) == 112L * i1 + 112L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 112L * (objectDataAreas.nCount - i1), 112L)
            check(codec.base.bitStream.validate_offset_bits(112L * (objectDataAreas.nCount - (i1 + 1))))
        }
        val res = TC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas_Encode_loop(codec, objectDataAreas, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas.sizeRange(objectDataAreas.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, objectDataAreas.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + objectDataAreas.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas.sizeRange(objectDataAreas.arr, codecSnap1.base.bitStream.bitIndex, i1, objectDataAreas.nCount) == objectDataAreas.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas.sizeRange(objectDataAreas.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, objectDataAreas.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas.sizeRange(objectDataAreas.arr, codecSnap1.base.bitStream.bitIndex, i1, objectDataAreas.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas.sizeRange(objectDataAreas.arr, old(codec).base.bitStream.bitIndex, i1, objectDataAreas.nCount)
    }
}



@opaque @inlineOnce
def TC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas_ACN_Encode(codec: ACN, pVal: TTC_6_21_LoadObjectMemoryDataAreasByReference, TC_6_21_LoadObjectMemoryDataAreasByReference_n: ULong, objectDataAreas: TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(7056L))
    @ghost val oldCdc = snapshot(codec)
    TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas_IsConstraintValid(objectDataAreas) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    TC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas_Encode_loop(codec, objectDataAreas, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                objectDataAreas.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
            ()
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + objectDataAreas.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTC_6_21_LoadObjectMemoryDataAreasByReference_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTC_6_21_LoadObjectMemoryDataAreasByReference] =
{
    require(codec.base.bitStream.validate_offset_bits(64450L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode base_ID */
    val pVal_base_ID = TBase_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 64450L, 8L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 8L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 8L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode filePath */
    val pVal_filePath = TFilePath_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 64442L, 57354L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 57362L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_filePath.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode TC_6_21_LoadObjectMemoryDataAreasByReference_n */
    val TC_6_21_LoadObjectMemoryDataAreasByReference_n = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_3.base.bitStream, codec.base.bitStream, 7088L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 57394L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    @ghost val codec_0_4 = snapshot(codec)
    /* Decode objectDataAreas */
    val pVal_objectDataAreas = TC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas_ACN_Decode(codec, TC_6_21_LoadObjectMemoryDataAreasByReference_n) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64450L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_3 = pVal_objectDataAreas.size(codec_0_4.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 64450L)
    }
    val pVal = TTC_6_21_LoadObjectMemoryDataAreasByReference(pVal_base_ID, pVal_filePath, pVal_objectDataAreas)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2 + size_3)
    }

    TTC_6_21_LoadObjectMemoryDataAreasByReference_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTC_6_21_LoadObjectMemoryDataAreasByReference](l)
        case Right(_) => RightMut[ErrorCode, TTC_6_21_LoadObjectMemoryDataAreasByReference](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTC_6_21_LoadObjectMemoryDataAreasByReference]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_6_21_LoadObjectMemoryDataAreasByReference_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTC_6_21_LoadObjectMemoryDataAreasByReference_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTC_6_21_LoadObjectMemoryDataAreasByReference]) =
{
    require(codec.base.bitStream.validate_offset_bits(64450L))
    val cpy = snapshot(codec)
    val res = TTC_6_21_LoadObjectMemoryDataAreasByReference_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def TC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas_Decode_loop(codec: ACN, nCount: Int, objectDataAreas: Vector[TObjectDataArea], i1: Int): EitherMut[Int, Vector[TObjectDataArea]] = {
    require((1 <= nCount) && (nCount <= 63))
    require((0 <= i1) && (i1 <= nCount))
    require(objectDataAreas.size == i1)
    require(codec.base.bitStream.validate_offset_bits((112L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(objectDataAreas)
            vecRangesEqSlicedLemma(objectDataAreas, objectDataAreas, 0, objectDataAreas.size, 0, i1)
        }
        RightMut[Int, Vector[TObjectDataArea]](objectDataAreas)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 112L * (nCount - i1), 112L)
        }
        val objectDataAreas_arr_i1_ = TObjectDataArea_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(112L * (i1 + 1) == 112L * i1 + 112L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 112L * (nCount - i1), 112L)
            check(codec.base.bitStream.validate_offset_bits(112L * (nCount - (i1 + 1))))
        }
        val res = TC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas_Decode_loop(codec, nCount, objectDataAreas.append(objectDataAreas_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(objectDataAreas, newVec, objectDataAreas_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(objectDataAreas.append(objectDataAreas_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(objectDataAreas.list, objectDataAreas_arr_i1_, i1)
                    Vector.listApplyEqVecApply(objectDataAreas.append(objectDataAreas_arr_i1_), i1)
                    check(objectDataAreas_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TObjectDataArea]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(objectDataAreas, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def TC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas_ACN_Decode(codec: ACN, TC_6_21_LoadObjectMemoryDataAreasByReference_n: ULong): EitherMut[Int, TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas] = {
    require(codec.base.bitStream.validate_offset_bits(7056L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val objectDataAreas =
        if ((ULong.fromRaw(1) <= TC_6_21_LoadObjectMemoryDataAreasByReference_n) && (TC_6_21_LoadObjectMemoryDataAreasByReference_n <= ULong.fromRaw(63))) then
            val objectDataAreas_nCount = TC_6_21_LoadObjectMemoryDataAreasByReference_n.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val objectDataAreas = TC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas_Decode_loop(codec, objectDataAreas_nCount, Vector.empty[TObjectDataArea], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val objectDataAreas = TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas(objectDataAreas_nCount, bdg)
                    ghostExpr {
                        objectDataAreas.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    objectDataAreas
            }
            objectDataAreas
        else return LeftMut(ERR_ACN_DECODE_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCE_OBJECTDATAAREAS)
    TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas_IsConstraintValid(objectDataAreas) match {
        case Left(l) =>
            LeftMut[Int, TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas](l)
        case Right(_) =>
            RightMut[Int, TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas](objectDataAreas)
    }
}.ensuring { (res: EitherMut[Int, TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas_ACN_Decode_pure(codec: ACN, TC_6_21_LoadObjectMemoryDataAreasByReference_n: ULong): (ACN, EitherMut[Int, TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas]) = {
    require(codec.base.bitStream.validate_offset_bits(7056L))
    val cpy = snapshot(codec)
    val res = TC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas_ACN_Decode(cpy, TC_6_21_LoadObjectMemoryDataAreasByReference_n)
    (cpy, res)
}

def TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas_IsConstraintValid(pVal: TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = ((1 <= pVal.nCount) && (pVal.nCount <= 63)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TObjectDataArea_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_IsConstraintValid(pVal: TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TBaseMultipleMemid_IsConstraintValid(pVal.base_ID)
    if ret.isRight then
        ret = TFilePath_IsConstraintValid(pVal.filePath)
        if ret.isRight then
            ret = TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas_IsConstraintValid(pVal.objectDataAreas)
    ret
}

def TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas_Initialize(): TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas = TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas(1, Vector.fill(63)(TObjectDataArea_Initialize()))
def TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_Initialize(): TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid = TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid(base_ID = TBaseMultipleMemid_Initialize(), filePath = TFilePath_Initialize(), objectDataAreas = TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas_Initialize())

@opaque @inlineOnce 
def TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_ACN_Encode(pVal: TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(64482L))
    var i1: Int = 0
    TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_memory_ID = pVal.base_ID match
        case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(_) =>TMemory_ID.TmemId1

    /* Encode TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_memory_ID */
    val intVal_TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_memory_ID = TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_memory_ID match
        case TMemory_ID.TmemId1 => ULong.fromRaw(0L)

    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(0))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(intVal_TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_memory_ID)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(intVal_TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_memory_ID)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 64482L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode base_ID */
    TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_base_ID_ACN_Encode(codec, pVal, TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_memory_ID, pVal.base_ID) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 64450L, 8L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 40L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.base_ID match {
        case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
            8L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode filePath */
    TFilePath_ACN_Encode(pVal.filePath, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_3.base.bitStream, codec.base.bitStream, 64442L, 57354L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 57394L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = pVal.filePath.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    @ghost val codec_0_4 = snapshot(codec)
    val TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_n = ULong.fromRaw(pVal.objectDataAreas.nCount)
    if TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_n < ULong.fromRaw(1) || TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_n > ULong.fromRaw(63) then
        return Left(860)
    /* Encode TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_n */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_n)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_n)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_4.base.bitStream, codec.base.bitStream, 7088L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 57426L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_3 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3)
    }
    @ghost val codec_0_5 = snapshot(codec)
    /* Encode objectDataAreas */
    TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas_ACN_Encode(codec, pVal, TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_n, pVal.objectDataAreas) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64482L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_4 = pVal.objectDataAreas.size(codec_0_5.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3 + size_4)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 64482L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2 + size_3 + size_4)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_base_ID_ACN_Encode(codec: ACN, pVal: TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid, TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_memory_ID: TMemory_ID, base_ID: TBaseMultipleMemid): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(8L))
    @ghost val oldCdc = snapshot(codec)
    TBaseMultipleMemid_IsConstraintValid(base_ID) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    base_ID match
        case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
            locally {
                ghostExpr {
                    @opaque @inlineOnce
                    def bitCountLemma(): Unit = ().ensuring(_ => GetBitCountUnsigned(ULong.fromRaw(255) - ULong.fromRaw(0)) == 8)
                    bitCountLemma()
                }
            }
            codec.base.encodeConstrainedPosWholeNumber(memId1, 0.toRawULong, 255.toRawULong)
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + base_ID.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas_Encode_loop(codec: ACN, objectDataAreas: TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= objectDataAreas.nCount))
    require((1 <= objectDataAreas.nCount) && (objectDataAreas.nCount <= objectDataAreas.arr.size) && (objectDataAreas.arr.size <= 63))
    require(codec.base.bitStream.validate_offset_bits((112L * (objectDataAreas.nCount - i1))))
    decreases(objectDataAreas.nCount - i1)
    if (i1 == objectDataAreas.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 112L * (objectDataAreas.nCount - i1), 112L)
        }
        TObjectDataArea_ACN_Encode(objectDataAreas.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(112L * (i1 + 1) == 112L * i1 + 112L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 112L * (objectDataAreas.nCount - i1), 112L)
            check(codec.base.bitStream.validate_offset_bits(112L * (objectDataAreas.nCount - (i1 + 1))))
        }
        val res = TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas_Encode_loop(codec, objectDataAreas, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas.sizeRange(objectDataAreas.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, objectDataAreas.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + objectDataAreas.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas.sizeRange(objectDataAreas.arr, codecSnap1.base.bitStream.bitIndex, i1, objectDataAreas.nCount) == objectDataAreas.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas.sizeRange(objectDataAreas.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, objectDataAreas.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas.sizeRange(objectDataAreas.arr, codecSnap1.base.bitStream.bitIndex, i1, objectDataAreas.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas.sizeRange(objectDataAreas.arr, old(codec).base.bitStream.bitIndex, i1, objectDataAreas.nCount)
    }
}



@opaque @inlineOnce
def TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas_ACN_Encode(codec: ACN, pVal: TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid, TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_n: ULong, objectDataAreas: TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(7056L))
    @ghost val oldCdc = snapshot(codec)
    TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas_IsConstraintValid(objectDataAreas) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas_Encode_loop(codec, objectDataAreas, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                objectDataAreas.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
            ()
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + objectDataAreas.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid] =
{
    require(codec.base.bitStream.validate_offset_bits(64482L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_memory_ID */
    val intVal_TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_memory_ID = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    val TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_memory_ID = intVal_TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_memory_ID.toRaw match
        case 0 => TMemory_ID.TmemId1
        case _ => return LeftMut(ERR_ACN_DECODE_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCEMULTIPLEMEMID_MEMORY_ID)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 64482L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode base_ID */
    val pVal_base_ID = TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_base_ID_ACN_Decode(codec, TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_memory_ID) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 64450L, 8L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 40L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_base_ID match {
        case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
            8L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode filePath */
    val pVal_filePath = TFilePath_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_3.base.bitStream, codec.base.bitStream, 64442L, 57354L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 57394L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = pVal_filePath.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    @ghost val codec_0_4 = snapshot(codec)
    /* Decode TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_n */
    val TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_n = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_4.base.bitStream, codec.base.bitStream, 7088L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 57426L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_3 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3)
    }
    @ghost val codec_0_5 = snapshot(codec)
    /* Decode objectDataAreas */
    val pVal_objectDataAreas = TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas_ACN_Decode(codec, TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_n) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64482L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_4 = pVal_objectDataAreas.size(codec_0_5.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3 + size_4)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 64482L)
    }
    val pVal = TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid(pVal_base_ID, pVal_filePath, pVal_objectDataAreas)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2 + size_3 + size_4)
    }

    TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid](l)
        case Right(_) => RightMut[ErrorCode, TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid]) =
{
    require(codec.base.bitStream.validate_offset_bits(64482L))
    val cpy = snapshot(codec)
    val res = TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_base_ID_ACN_Decode(codec: ACN, TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_memory_ID: TMemory_ID): EitherMut[Int, TBaseMultipleMemid] = {
    require(codec.base.bitStream.validate_offset_bits(8L))
    @ghost val oldCdc = snapshot(codec)
    val base_ID = TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_memory_ID match
        case TMemory_ID.TmemId1 =>
            locally {
                ghostExpr {
                    @opaque @inlineOnce
                    def bitCountLemma(): Unit = ().ensuring(_ => GetBitCountUnsigned(ULong.fromRaw(255) - ULong.fromRaw(0)) == 8)
                    bitCountLemma()
                }
            }
            val memId1 = codec.base.decodeConstrainedPosWholeNumber(ULong.fromRaw(0), ULong.fromRaw(255)) // uper:135
            TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1)
    TBaseMultipleMemid_IsConstraintValid(base_ID) match {
        case Left(l) =>
            LeftMut[Int, TBaseMultipleMemid](l)
        case Right(_) =>
            RightMut[Int, TBaseMultipleMemid](base_ID)
    }
}.ensuring { (res: EitherMut[Int, TBaseMultipleMemid]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TBaseMultipleMemid_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_base_ID_ACN_Decode_pure(codec: ACN, TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_memory_ID: TMemory_ID): (ACN, EitherMut[Int, TBaseMultipleMemid]) = {
    require(codec.base.bitStream.validate_offset_bits(8L))
    val cpy = snapshot(codec)
    val res = TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_base_ID_ACN_Decode(cpy, TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_memory_ID)
    (cpy, res)
}

@opaque @inlineOnce
def TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas_Decode_loop(codec: ACN, nCount: Int, objectDataAreas: Vector[TObjectDataArea], i1: Int): EitherMut[Int, Vector[TObjectDataArea]] = {
    require((1 <= nCount) && (nCount <= 63))
    require((0 <= i1) && (i1 <= nCount))
    require(objectDataAreas.size == i1)
    require(codec.base.bitStream.validate_offset_bits((112L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(objectDataAreas)
            vecRangesEqSlicedLemma(objectDataAreas, objectDataAreas, 0, objectDataAreas.size, 0, i1)
        }
        RightMut[Int, Vector[TObjectDataArea]](objectDataAreas)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 112L * (nCount - i1), 112L)
        }
        val objectDataAreas_arr_i1_ = TObjectDataArea_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(112L * (i1 + 1) == 112L * i1 + 112L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 112L * (nCount - i1), 112L)
            check(codec.base.bitStream.validate_offset_bits(112L * (nCount - (i1 + 1))))
        }
        val res = TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas_Decode_loop(codec, nCount, objectDataAreas.append(objectDataAreas_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(objectDataAreas, newVec, objectDataAreas_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(objectDataAreas.append(objectDataAreas_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(objectDataAreas.list, objectDataAreas_arr_i1_, i1)
                    Vector.listApplyEqVecApply(objectDataAreas.append(objectDataAreas_arr_i1_), i1)
                    check(objectDataAreas_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TObjectDataArea]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(objectDataAreas, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas_ACN_Decode(codec: ACN, TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_n: ULong): EitherMut[Int, TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas] = {
    require(codec.base.bitStream.validate_offset_bits(7056L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val objectDataAreas =
        if ((ULong.fromRaw(1) <= TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_n) && (TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_n <= ULong.fromRaw(63))) then
            val objectDataAreas_nCount = TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_n.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val objectDataAreas = TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas_Decode_loop(codec, objectDataAreas_nCount, Vector.empty[TObjectDataArea], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val objectDataAreas = TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas(objectDataAreas_nCount, bdg)
                    ghostExpr {
                        objectDataAreas.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    objectDataAreas
            }
            objectDataAreas
        else return LeftMut(ERR_ACN_DECODE_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCEMULTIPLEMEMID_OBJECTDATAAREAS)
    TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas_IsConstraintValid(objectDataAreas) match {
        case Left(l) =>
            LeftMut[Int, TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas](l)
        case Right(_) =>
            RightMut[Int, TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas](objectDataAreas)
    }
}.ensuring { (res: EitherMut[Int, TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas_ACN_Decode_pure(codec: ACN, TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_n: ULong): (ACN, EitherMut[Int, TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas]) = {
    require(codec.base.bitStream.validate_offset_bits(7056L))
    val cpy = snapshot(codec)
    val res = TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas_ACN_Decode(cpy, TC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_n)
    (cpy, res)
}