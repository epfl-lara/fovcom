/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TObjectMemoryDump --------------------------------------------*/

case class TObjectMemoryDump (
    offset: TPUSC_UINT32, 
    length: TPUSC_UINT32
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        val size_0 = 32L
        val size_1 = 32L
        size_0 + size_1
    }.ensuring { (res: Long) => 
        res == 64L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775743L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775743L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775743L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775743L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_OBJECTMEMORYDUMP: Int = 1288 /* */
@inline @cCode.inline val ERR_OBJECTMEMORYDUMP_OFFSET_2: Int = 1273 /* */
@inline @cCode.inline val ERR_OBJECTMEMORYDUMP_LENGTH_2: Int = 1283 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_OBJECTMEMORYDUMP: Int = 1291 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_OBJECTMEMORYDUMP_OFFSET_2: Int = 1276 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_OBJECTMEMORYDUMP_LENGTH_2: Int = 1286 /*  */
@inline @cCode.inline val TObjectMemoryDump_REQUIRED_BYTES_FOR_ACN_ENCODING = 8
@inline @cCode.inline val TObjectMemoryDump_REQUIRED_BITS_FOR_ACN_ENCODING = 64

@inline @cCode.inline val ERR_ACN_DECODE_OBJECTMEMORYDUMP: Int = 1292 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_OBJECTMEMORYDUMP_OFFSET_2: Int = 1277 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_OBJECTMEMORYDUMP_LENGTH_2: Int = 1287 /*  */
/*-- TTC_6_22_DumpObjectMemoryDataAreasToFile --------------------------------------------*/


case class TTC_6_22_DumpObjectMemoryDataAreasToFile_objectMemoryDump (nCount: Int, arr: Vector[TObjectMemoryDump])
{
    require(this.arr.size <= 63 && 1 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854771775L))
        TTC_6_22_DumpObjectMemoryDataAreasToFile_objectMemoryDump.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 4032L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771775L))
        TTC_6_22_DumpObjectMemoryDataAreasToFile_objectMemoryDump.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771775L))
        require((offset % 8L) == (otherOffset % 8L))
        TTC_6_22_DumpObjectMemoryDataAreasToFile_objectMemoryDump.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771775L))
        require((offset % 16L) == (otherOffset % 16L))
        TTC_6_22_DumpObjectMemoryDataAreasToFile_objectMemoryDump.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771775L))
        require((offset % 32L) == (otherOffset % 32L))
        TTC_6_22_DumpObjectMemoryDataAreasToFile_objectMemoryDump.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TTC_6_22_DumpObjectMemoryDataAreasToFile_objectMemoryDump {
    def sizeRange(ls: Vector[TObjectMemoryDump], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 64L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(elemSize == 64L)
            elemSize + TTC_6_22_DumpObjectMemoryDataAreasToFile_objectMemoryDump.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 64L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TObjectMemoryDump], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 64L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 64L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 64L)
            assert(elemSizeOtherOff == 64L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TTC_6_22_DumpObjectMemoryDataAreasToFile_objectMemoryDump.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_6_22_DumpObjectMemoryDataAreasToFile_objectMemoryDump.sizeRange(ls, offset, from, to) == TTC_6_22_DumpObjectMemoryDataAreasToFile_objectMemoryDump.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TObjectMemoryDump], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 64L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 64L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 64L)
            assert(elemSizeOtherOff == 64L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TTC_6_22_DumpObjectMemoryDataAreasToFile_objectMemoryDump.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_6_22_DumpObjectMemoryDataAreasToFile_objectMemoryDump.sizeRange(ls, offset, from, to) == TTC_6_22_DumpObjectMemoryDataAreasToFile_objectMemoryDump.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TObjectMemoryDump], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 64L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 64L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 64L)
            assert(elemSizeOtherOff == 64L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TTC_6_22_DumpObjectMemoryDataAreasToFile_objectMemoryDump.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_6_22_DumpObjectMemoryDataAreasToFile_objectMemoryDump.sizeRange(ls, offset, from, to) == TTC_6_22_DumpObjectMemoryDataAreasToFile_objectMemoryDump.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TObjectMemoryDump], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 64L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 64L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 64L)
            assert(elemSizeOtherOff == 64L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TTC_6_22_DumpObjectMemoryDataAreasToFile_objectMemoryDump.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_6_22_DumpObjectMemoryDataAreasToFile_objectMemoryDump.sizeRange(ls, offset, from, to) == TTC_6_22_DumpObjectMemoryDataAreasToFile_objectMemoryDump.sizeRange(ls, otherOffset, from, to)
    }
}

case class TTC_6_22_DumpObjectMemoryDataAreasToFile (
    base_ID: TBase, 
    filePath: TFilePath, 
    objectMemoryDump: TTC_6_22_DumpObjectMemoryDataAreasToFile_objectMemoryDump
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854714381L))
        val size_0 = 8L
        val size_1 = this.filePath.size(offset + size_0)
        val size_2 = 32L
        val size_3 = this.objectMemoryDump.size(offset + size_0 + size_1 + size_2)
        size_0 + size_1 + size_2 + size_3
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 61426L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854714381L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854714381L))
        val size_0_offset = 8L
        val size_0_otherOffset = 8L
        val size_1_offset = this.filePath.size(offset + size_0_offset)
        val size_1_otherOffset = this.filePath.size(otherOffset + size_0_otherOffset)
        this.filePath.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = this.objectMemoryDump.size(offset + size_0_offset + size_1_offset + size_2_offset)
        val size_3_otherOffset = this.objectMemoryDump.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        this.objectMemoryDump.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset + size_2_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854714381L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854714381L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 8L
        val size_0_otherOffset = 8L
        val size_1_offset = this.filePath.size(offset + size_0_offset)
        val size_1_otherOffset = this.filePath.size(otherOffset + size_0_otherOffset)
        this.filePath.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = this.objectMemoryDump.size(offset + size_0_offset + size_1_offset + size_2_offset)
        val size_3_otherOffset = this.objectMemoryDump.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        this.objectMemoryDump.sizeLemmaNextByte(offset + size_0_offset + size_1_offset + size_2_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854714381L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854714381L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 8L
        val size_0_otherOffset = 8L
        val size_1_offset = this.filePath.size(offset + size_0_offset)
        val size_1_otherOffset = this.filePath.size(otherOffset + size_0_otherOffset)
        this.filePath.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = this.objectMemoryDump.size(offset + size_0_offset + size_1_offset + size_2_offset)
        val size_3_otherOffset = this.objectMemoryDump.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        this.objectMemoryDump.sizeLemmaNextWord(offset + size_0_offset + size_1_offset + size_2_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854714381L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854714381L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 8L
        val size_0_otherOffset = 8L
        val size_1_offset = this.filePath.size(offset + size_0_offset)
        val size_1_otherOffset = this.filePath.size(otherOffset + size_0_otherOffset)
        this.filePath.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = this.objectMemoryDump.size(offset + size_0_offset + size_1_offset + size_2_offset)
        val size_3_otherOffset = this.objectMemoryDump.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        this.objectMemoryDump.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset + size_2_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_6_22_DUMPOBJECTMEMORYDATAAREASTOFILE_OBJECTMEMORYDUMP: Int = 1168 /*(SIZE(1 .. maxTC-6-22-ObjectMemoryDumpCount)) */
@inline @cCode.inline val ERR_TC_6_22_DUMPOBJECTMEMORYDATAAREASTOFILE_OBJECTMEMORYDUMP_ELM_2: Int = 1163 /* */

@inline @cCode.inline val ERR_TC_6_22_DUMPOBJECTMEMORYDATAAREASTOFILE: Int = 1173 /* */
@inline @cCode.inline val ERR_TC_6_22_DUMPOBJECTMEMORYDATAAREASTOFILE_BASE_ID_2: Int = 1101 /* */
@inline @cCode.inline val ERR_TC_6_22_DUMPOBJECTMEMORYDATAAREASTOFILE_FILEPATH_2: Int = 1131 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_22_DUMPOBJECTMEMORYDATAAREASTOFILE: Int = 1176 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_22_DUMPOBJECTMEMORYDATAAREASTOFILE_BASE_ID_2: Int = 1104 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_22_DUMPOBJECTMEMORYDATAAREASTOFILE_FILEPATH_2: Int = 1134 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_22_DUMPOBJECTMEMORYDATAAREASTOFILE_N_UNINITIALIZED: Int = 1177 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_22_DUMPOBJECTMEMORYDATAAREASTOFILE_N: Int = 1136 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_22_DUMPOBJECTMEMORYDATAAREASTOFILE_OBJECTMEMORYDUMP: Int = 1171 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_22_DUMPOBJECTMEMORYDATAAREASTOFILE_OBJECTMEMORYDUMP_ELM_2: Int = 1166 /*  */
@inline @cCode.inline val TTC_6_22_DumpObjectMemoryDataAreasToFile_REQUIRED_BYTES_FOR_ACN_ENCODING = 7679
@inline @cCode.inline val TTC_6_22_DumpObjectMemoryDataAreasToFile_REQUIRED_BITS_FOR_ACN_ENCODING = 61426

@inline @cCode.inline val ERR_ACN_DECODE_TC_6_22_DUMPOBJECTMEMORYDATAAREASTOFILE: Int = 1178 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_22_DUMPOBJECTMEMORYDATAAREASTOFILE_BASE_ID_2: Int = 1105 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_22_DUMPOBJECTMEMORYDATAAREASTOFILE_FILEPATH_2: Int = 1135 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_22_DUMPOBJECTMEMORYDATAAREASTOFILE_N: Int = 1137 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_22_DUMPOBJECTMEMORYDATAAREASTOFILE_OBJECTMEMORYDUMP: Int = 1172 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_22_DUMPOBJECTMEMORYDATAAREASTOFILE_OBJECTMEMORYDUMP_ELM_2: Int = 1167 /*  */
/*-- TTC_6_22_DumpObjectMemoryDataAreasToFileMultipleMemid --------------------------------------------*/


case class TTC_6_22_DumpObjectMemoryDataAreasToFileMultipleMemid_objectMemoryDump (nCount: Int, arr: Vector[TObjectMemoryDump])
{
    require(this.arr.size <= 63 && 1 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854771775L))
        TTC_6_22_DumpObjectMemoryDataAreasToFileMultipleMemid_objectMemoryDump.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 4032L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771775L))
        TTC_6_22_DumpObjectMemoryDataAreasToFileMultipleMemid_objectMemoryDump.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771775L))
        require((offset % 8L) == (otherOffset % 8L))
        TTC_6_22_DumpObjectMemoryDataAreasToFileMultipleMemid_objectMemoryDump.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771775L))
        require((offset % 16L) == (otherOffset % 16L))
        TTC_6_22_DumpObjectMemoryDataAreasToFileMultipleMemid_objectMemoryDump.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854771775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854771775L))
        require((offset % 32L) == (otherOffset % 32L))
        TTC_6_22_DumpObjectMemoryDataAreasToFileMultipleMemid_objectMemoryDump.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TTC_6_22_DumpObjectMemoryDataAreasToFileMultipleMemid_objectMemoryDump {
    def sizeRange(ls: Vector[TObjectMemoryDump], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 64L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(elemSize == 64L)
            elemSize + TTC_6_22_DumpObjectMemoryDataAreasToFileMultipleMemid_objectMemoryDump.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 64L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TObjectMemoryDump], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 64L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 64L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 64L)
            assert(elemSizeOtherOff == 64L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TTC_6_22_DumpObjectMemoryDataAreasToFileMultipleMemid_objectMemoryDump.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_6_22_DumpObjectMemoryDataAreasToFileMultipleMemid_objectMemoryDump.sizeRange(ls, offset, from, to) == TTC_6_22_DumpObjectMemoryDataAreasToFileMultipleMemid_objectMemoryDump.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TObjectMemoryDump], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 64L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 64L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 64L)
            assert(elemSizeOtherOff == 64L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TTC_6_22_DumpObjectMemoryDataAreasToFileMultipleMemid_objectMemoryDump.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_6_22_DumpObjectMemoryDataAreasToFileMultipleMemid_objectMemoryDump.sizeRange(ls, offset, from, to) == TTC_6_22_DumpObjectMemoryDataAreasToFileMultipleMemid_objectMemoryDump.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TObjectMemoryDump], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 64L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 64L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 64L)
            assert(elemSizeOtherOff == 64L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TTC_6_22_DumpObjectMemoryDataAreasToFileMultipleMemid_objectMemoryDump.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_6_22_DumpObjectMemoryDataAreasToFileMultipleMemid_objectMemoryDump.sizeRange(ls, offset, from, to) == TTC_6_22_DumpObjectMemoryDataAreasToFileMultipleMemid_objectMemoryDump.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TObjectMemoryDump], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 64L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 64L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 64L)
            assert(elemSizeOtherOff == 64L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TTC_6_22_DumpObjectMemoryDataAreasToFileMultipleMemid_objectMemoryDump.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_6_22_DumpObjectMemoryDataAreasToFileMultipleMemid_objectMemoryDump.sizeRange(ls, offset, from, to) == TTC_6_22_DumpObjectMemoryDataAreasToFileMultipleMemid_objectMemoryDump.sizeRange(ls, otherOffset, from, to)
    }
}

case class TTC_6_22_DumpObjectMemoryDataAreasToFileMultipleMemid (
    base_ID: TBaseMultipleMemid, 
    filePath: TFilePath, 
    objectMemoryDump: TTC_6_22_DumpObjectMemoryDataAreasToFileMultipleMemid_objectMemoryDump
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854714349L))
        val size_0 = 32L
        val size_1 = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        val size_2 = this.filePath.size(offset + size_0 + size_1)
        val size_3 = 32L
        val size_4 = this.objectMemoryDump.size(offset + size_0 + size_1 + size_2 + size_3)
        size_0 + size_1 + size_2 + size_3 + size_4
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 61458L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854714349L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854714349L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        val size_1_otherOffset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        this.base_ID.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = this.filePath.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.filePath.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.filePath.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        val size_3_offset = 32L
        val size_3_otherOffset = 32L
        val size_4_offset = this.objectMemoryDump.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset)
        val size_4_otherOffset = this.objectMemoryDump.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset)
        this.objectMemoryDump.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854714349L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854714349L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        val size_1_otherOffset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        this.base_ID.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = this.filePath.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.filePath.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.filePath.sizeLemmaNextByte(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        val size_3_offset = 32L
        val size_3_otherOffset = 32L
        val size_4_offset = this.objectMemoryDump.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset)
        val size_4_otherOffset = this.objectMemoryDump.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset)
        this.objectMemoryDump.sizeLemmaNextByte(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854714349L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854714349L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        val size_1_otherOffset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        this.base_ID.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = this.filePath.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.filePath.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.filePath.sizeLemmaNextWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        val size_3_offset = 32L
        val size_3_otherOffset = 32L
        val size_4_offset = this.objectMemoryDump.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset)
        val size_4_otherOffset = this.objectMemoryDump.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset)
        this.objectMemoryDump.sizeLemmaNextWord(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854714349L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854714349L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        val size_1_otherOffset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        this.base_ID.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = this.filePath.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.filePath.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.filePath.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        val size_3_offset = 32L
        val size_3_otherOffset = 32L
        val size_4_offset = this.objectMemoryDump.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset)
        val size_4_otherOffset = this.objectMemoryDump.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset)
        this.objectMemoryDump.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_6_22_DUMPOBJECTMEMORYDATAAREASTOFILEMULTIPLEMEMID_OBJECTMEMORYDUMP: Int = 1256 /*(SIZE(1 .. maxTC-6-22-ObjectMemoryDumpCount)) */
@inline @cCode.inline val ERR_TC_6_22_DUMPOBJECTMEMORYDATAAREASTOFILEMULTIPLEMEMID_OBJECTMEMORYDUMP_ELM_2: Int = 1251 /* */

@inline @cCode.inline val ERR_TC_6_22_DUMPOBJECTMEMORYDATAAREASTOFILEMULTIPLEMEMID: Int = 1261 /* */
@inline @cCode.inline val ERR_TC_6_22_DUMPOBJECTMEMORYDATAAREASTOFILEMULTIPLEMEMID_BASE_ID_2: Int = 1191 /* */
@inline @cCode.inline val ERR_TC_6_22_DUMPOBJECTMEMORYDATAAREASTOFILEMULTIPLEMEMID_FILEPATH_2: Int = 1219 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_22_DUMPOBJECTMEMORYDATAAREASTOFILEMULTIPLEMEMID: Int = 1264 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_22_DUMPOBJECTMEMORYDATAAREASTOFILEMULTIPLEMEMID_MEMORY_ID_UNINITIALIZED: Int = 1265 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_22_DUMPOBJECTMEMORYDATAAREASTOFILEMULTIPLEMEMID_MEMORY_ID: Int = 1179 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_22_DUMPOBJECTMEMORYDATAAREASTOFILEMULTIPLEMEMID_BASE_ID: Int = 1189 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_22_DUMPOBJECTMEMORYDATAAREASTOFILEMULTIPLEMEMID_BASE_ID_MEMID1: Int = 1184 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_22_DUMPOBJECTMEMORYDATAAREASTOFILEMULTIPLEMEMID_FILEPATH_2: Int = 1222 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_22_DUMPOBJECTMEMORYDATAAREASTOFILEMULTIPLEMEMID_N_UNINITIALIZED: Int = 1266 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_22_DUMPOBJECTMEMORYDATAAREASTOFILEMULTIPLEMEMID_N: Int = 1224 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_22_DUMPOBJECTMEMORYDATAAREASTOFILEMULTIPLEMEMID_OBJECTMEMORYDUMP: Int = 1259 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_22_DUMPOBJECTMEMORYDATAAREASTOFILEMULTIPLEMEMID_OBJECTMEMORYDUMP_ELM_2: Int = 1254 /*  */
@inline @cCode.inline val TTC_6_22_DumpObjectMemoryDataAreasToFileMultipleMemid_REQUIRED_BYTES_FOR_ACN_ENCODING = 7683
@inline @cCode.inline val TTC_6_22_DumpObjectMemoryDataAreasToFileMultipleMemid_REQUIRED_BITS_FOR_ACN_ENCODING = 61458

@inline @cCode.inline val ERR_ACN_DECODE_TC_6_22_DUMPOBJECTMEMORYDATAAREASTOFILEMULTIPLEMEMID: Int = 1267 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_22_DUMPOBJECTMEMORYDATAAREASTOFILEMULTIPLEMEMID_MEMORY_ID: Int = 1180 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_22_DUMPOBJECTMEMORYDATAAREASTOFILEMULTIPLEMEMID_BASE_ID: Int = 1190 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_22_DUMPOBJECTMEMORYDATAAREASTOFILEMULTIPLEMEMID_BASE_ID_MEMID1: Int = 1185 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_22_DUMPOBJECTMEMORYDATAAREASTOFILEMULTIPLEMEMID_FILEPATH_2: Int = 1223 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_22_DUMPOBJECTMEMORYDATAAREASTOFILEMULTIPLEMEMID_N: Int = 1225 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_22_DUMPOBJECTMEMORYDATAAREASTOFILEMULTIPLEMEMID_OBJECTMEMORYDUMP: Int = 1260 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_22_DUMPOBJECTMEMORYDATAAREASTOFILEMULTIPLEMEMID_OBJECTMEMORYDUMP_ELM_2: Int = 1255 /*  */

// @inline @cCode.inline val maxTC_6_22_ObjectMemoryDumpCount: Int = 63 // defined in body

