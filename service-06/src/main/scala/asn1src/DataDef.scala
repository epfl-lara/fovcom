/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TMemoryData --------------------------------------------*/

case class TMemoryData (
    data: TPUSC_OCTSTR_VARIABLE_LEN
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854743015L))
        val size_0 = 32L
        val size_1 = 8L * this.data.nCount
        size_0 + size_1
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 32792L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743015L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743015L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 8L * this.data.nCount
        val size_1_otherOffset = 8L * this.data.nCount
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743015L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743015L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 8L * this.data.nCount
        val size_1_otherOffset = 8L * this.data.nCount
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743015L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743015L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 8L * this.data.nCount
        val size_1_otherOffset = 8L * this.data.nCount
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743015L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743015L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 8L * this.data.nCount
        val size_1_otherOffset = 8L * this.data.nCount
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_MEMORYDATA: Int = 11 /* */
@inline @cCode.inline val ERR_MEMORYDATA_DATA_2: Int = 8 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_MEMORYDATA: Int = 14 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_MEMORYDATA_LENGTH_UNINITIALIZED: Int = 15 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_MEMORYDATA_LENGTH: Int = 1 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_MEMORYDATA_DATA: Int = 6 /*  */
@inline @cCode.inline val TMemoryData_REQUIRED_BYTES_FOR_ACN_ENCODING = 4099
@inline @cCode.inline val TMemoryData_REQUIRED_BITS_FOR_ACN_ENCODING = 32792

@inline @cCode.inline val ERR_ACN_DECODE_MEMORYDATA: Int = 16 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_MEMORYDATA_LENGTH: Int = 2 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_MEMORYDATA_DATA: Int = 7 /*  */


