/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TTM_6_18_CheckedObjectMemoryObjectReport --------------------------------------------*/

case class TTM_6_18_CheckedObjectMemoryObjectReport_checksum(arr: Vector[UByte])
{
    require(this.arr.length == 2)
}

case class TTM_6_18_CheckedObjectMemoryObjectReport (
    base_ID: TBase, 
    length: TPUSC_UINT32, 
    checksum: TTM_6_18_CheckedObjectMemoryObjectReport_checksum
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775751L))
        val size_0 = 8L
        val size_1 = 32L
        val size_2 = 16L
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        res == 56L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775751L))
        val size_0_offset = 8L
        val size_0_otherOffset = 8L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775751L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 8L
        val size_0_otherOffset = 8L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775751L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 8L
        val size_0_otherOffset = 8L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775751L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 8L
        val size_0_otherOffset = 8L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TM_6_18_CHECKEDOBJECTMEMORYOBJECTREPORT_CHECKSUM: Int = 360 /*(SIZE(16)) */

@inline @cCode.inline val ERR_TM_6_18_CHECKEDOBJECTMEMORYOBJECTREPORT: Int = 365 /* */
@inline @cCode.inline val ERR_TM_6_18_CHECKEDOBJECTMEMORYOBJECTREPORT_BASE_ID_2: Int = 345 /* */
@inline @cCode.inline val ERR_TM_6_18_CHECKEDOBJECTMEMORYOBJECTREPORT_LENGTH_2: Int = 355 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TM_6_18_CHECKEDOBJECTMEMORYOBJECTREPORT: Int = 368 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_6_18_CHECKEDOBJECTMEMORYOBJECTREPORT_BASE_ID_2: Int = 348 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_6_18_CHECKEDOBJECTMEMORYOBJECTREPORT_LENGTH_2: Int = 358 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_6_18_CHECKEDOBJECTMEMORYOBJECTREPORT_CHECKSUM: Int = 363 /*  */
@inline @cCode.inline val TTM_6_18_CheckedObjectMemoryObjectReport_REQUIRED_BYTES_FOR_ACN_ENCODING = 7
@inline @cCode.inline val TTM_6_18_CheckedObjectMemoryObjectReport_REQUIRED_BITS_FOR_ACN_ENCODING = 56

@inline @cCode.inline val ERR_ACN_DECODE_TM_6_18_CHECKEDOBJECTMEMORYOBJECTREPORT: Int = 369 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_6_18_CHECKEDOBJECTMEMORYOBJECTREPORT_BASE_ID_2: Int = 349 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_6_18_CHECKEDOBJECTMEMORYOBJECTREPORT_LENGTH_2: Int = 359 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_6_18_CHECKEDOBJECTMEMORYOBJECTREPORT_CHECKSUM: Int = 364 /*  */
/*-- TTM_6_18_CheckedObjectMemoryObjectReportMultipleMemid --------------------------------------------*/

case class TTM_6_18_CheckedObjectMemoryObjectReportMultipleMemid_checksum(arr: Vector[UByte])
{
    require(this.arr.length == 2)
}

case class TTM_6_18_CheckedObjectMemoryObjectReportMultipleMemid (
    base_ID: TBaseMultipleMemid, 
    length: TPUSC_UINT32, 
    checksum: TTM_6_18_CheckedObjectMemoryObjectReportMultipleMemid_checksum
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775719L))
        val size_0 = 32L
        val size_1 = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        val size_2 = 32L
        val size_3 = 16L
        size_0 + size_1 + size_2 + size_3
    }.ensuring { (res: Long) => 
        res == 88L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775719L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775719L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        val size_1_otherOffset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        this.base_ID.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = 16L
        val size_3_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775719L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775719L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        val size_1_otherOffset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        this.base_ID.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = 16L
        val size_3_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775719L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775719L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        val size_1_otherOffset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        this.base_ID.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = 16L
        val size_3_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775719L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775719L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        val size_1_otherOffset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        this.base_ID.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = 16L
        val size_3_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TM_6_18_CHECKEDOBJECTMEMORYOBJECTREPORTMULTIPLEMEMID_CHECKSUM: Int = 395 /*(SIZE(16)) */

@inline @cCode.inline val ERR_TM_6_18_CHECKEDOBJECTMEMORYOBJECTREPORTMULTIPLEMEMID: Int = 400 /* */
@inline @cCode.inline val ERR_TM_6_18_CHECKEDOBJECTMEMORYOBJECTREPORTMULTIPLEMEMID_BASE_ID_2: Int = 382 /* */
@inline @cCode.inline val ERR_TM_6_18_CHECKEDOBJECTMEMORYOBJECTREPORTMULTIPLEMEMID_LENGTH_2: Int = 390 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TM_6_18_CHECKEDOBJECTMEMORYOBJECTREPORTMULTIPLEMEMID: Int = 403 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_6_18_CHECKEDOBJECTMEMORYOBJECTREPORTMULTIPLEMEMID_MEMORY_ID_UNINITIALIZED: Int = 404 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_6_18_CHECKEDOBJECTMEMORYOBJECTREPORTMULTIPLEMEMID_MEMORY_ID: Int = 370 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_6_18_CHECKEDOBJECTMEMORYOBJECTREPORTMULTIPLEMEMID_BASE_ID: Int = 380 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_6_18_CHECKEDOBJECTMEMORYOBJECTREPORTMULTIPLEMEMID_BASE_ID_MEMID1: Int = 375 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_6_18_CHECKEDOBJECTMEMORYOBJECTREPORTMULTIPLEMEMID_LENGTH_2: Int = 393 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_6_18_CHECKEDOBJECTMEMORYOBJECTREPORTMULTIPLEMEMID_CHECKSUM: Int = 398 /*  */
@inline @cCode.inline val TTM_6_18_CheckedObjectMemoryObjectReportMultipleMemid_REQUIRED_BYTES_FOR_ACN_ENCODING = 11
@inline @cCode.inline val TTM_6_18_CheckedObjectMemoryObjectReportMultipleMemid_REQUIRED_BITS_FOR_ACN_ENCODING = 88

@inline @cCode.inline val ERR_ACN_DECODE_TM_6_18_CHECKEDOBJECTMEMORYOBJECTREPORTMULTIPLEMEMID: Int = 405 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_6_18_CHECKEDOBJECTMEMORYOBJECTREPORTMULTIPLEMEMID_MEMORY_ID: Int = 371 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_6_18_CHECKEDOBJECTMEMORYOBJECTREPORTMULTIPLEMEMID_BASE_ID: Int = 381 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_6_18_CHECKEDOBJECTMEMORYOBJECTREPORTMULTIPLEMEMID_BASE_ID_MEMID1: Int = 376 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_6_18_CHECKEDOBJECTMEMORYOBJECTREPORTMULTIPLEMEMID_LENGTH_2: Int = 394 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_6_18_CHECKEDOBJECTMEMORYOBJECTREPORTMULTIPLEMEMID_CHECKSUM: Int = 399 /*  */


