/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TDataDump --------------------------------------------*/

case class TDataDump_checksum(arr: Vector[UByte])
{
    require(this.arr.length == 2)
}

case class TDataDump (
    startAddress: TPUSC_UINT32, 
    dumpedData: TMemoryData, 
    checksum: OptionMut[TDataDump_checksum]
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854742966L))
        val size_0 = 1L
        val size_1 = 32L
        val size_2 = this.dumpedData.size(offset + size_0 + size_1)
        val size_3 = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        size_0 + size_1 + size_2 + size_3
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 32841L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854742966L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854742966L))
        val size_0_offset = 1L
        val size_0_otherOffset = 1L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.dumpedData.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.dumpedData.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.dumpedData.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        val size_3_offset = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        val size_3_otherOffset = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854742966L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854742966L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 1L
        val size_0_otherOffset = 1L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.dumpedData.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.dumpedData.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.dumpedData.sizeLemmaNextByte(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        val size_3_offset = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        val size_3_otherOffset = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854742966L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854742966L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 1L
        val size_0_otherOffset = 1L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.dumpedData.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.dumpedData.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.dumpedData.sizeLemmaNextWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        val size_3_offset = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        val size_3_otherOffset = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854742966L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854742966L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 1L
        val size_0_otherOffset = 1L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.dumpedData.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.dumpedData.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.dumpedData.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        val size_3_offset = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        val size_3_otherOffset = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_DATADUMP_CHECKSUM: Int = 1926 /*(SIZE(16)) */

@inline @cCode.inline val ERR_DATADUMP: Int = 1931 /* */
@inline @cCode.inline val ERR_DATADUMP_STARTADDRESS_2_2: Int = 1901 /* */
@inline @cCode.inline val ERR_DATADUMP_DUMPEDDATA_2: Int = 1921 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_DATADUMP: Int = 1934 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_DATADUMP_STARTADDRESS_2_2: Int = 1904 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_DATADUMP_DUMPEDDATA_2: Int = 1924 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_DATADUMP_CHECKSUM: Int = 1929 /*  */
@inline @cCode.inline val TDataDump_REQUIRED_BYTES_FOR_ACN_ENCODING = 4106
@inline @cCode.inline val TDataDump_REQUIRED_BITS_FOR_ACN_ENCODING = 32841

@inline @cCode.inline val ERR_ACN_DECODE_DATADUMP: Int = 1935 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_DATADUMP_STARTADDRESS_2_2: Int = 1905 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_DATADUMP_DUMPEDDATA_2: Int = 1925 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_DATADUMP_CHECKSUM: Int = 1930 /*  */
/*-- TTM_6_6_DumpedRawMemoryDataReport --------------------------------------------*/


case class TTM_6_6_DumpedRawMemoryDataReport_dataDumps (nCount: Int, arr: Vector[TDataDump])
{
    require(this.arr.size <= 63 && 1 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036852706824L))
        TTM_6_6_DumpedRawMemoryDataReport_dataDumps.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 2068983L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036852706824L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036852706824L))
        TTM_6_6_DumpedRawMemoryDataReport_dataDumps.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036852706824L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036852706824L))
        require((offset % 8L) == (otherOffset % 8L))
        TTM_6_6_DumpedRawMemoryDataReport_dataDumps.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036852706824L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036852706824L))
        require((offset % 16L) == (otherOffset % 16L))
        TTM_6_6_DumpedRawMemoryDataReport_dataDumps.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036852706824L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036852706824L))
        require((offset % 32L) == (otherOffset % 32L))
        TTM_6_6_DumpedRawMemoryDataReport_dataDumps.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TTM_6_6_DumpedRawMemoryDataReport_dataDumps {
    def sizeRange(ls: Vector[TDataDump], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32841L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(0L <= elemSize && elemSize <= 32841L)
            elemSize + TTM_6_6_DumpedRawMemoryDataReport_dataDumps.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 32841L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TDataDump], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32841L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32841L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 32841L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 32841L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TTM_6_6_DumpedRawMemoryDataReport_dataDumps.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTM_6_6_DumpedRawMemoryDataReport_dataDumps.sizeRange(ls, offset, from, to) == TTM_6_6_DumpedRawMemoryDataReport_dataDumps.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TDataDump], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32841L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32841L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 32841L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 32841L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TTM_6_6_DumpedRawMemoryDataReport_dataDumps.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTM_6_6_DumpedRawMemoryDataReport_dataDumps.sizeRange(ls, offset, from, to) == TTM_6_6_DumpedRawMemoryDataReport_dataDumps.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TDataDump], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32841L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32841L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 32841L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 32841L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TTM_6_6_DumpedRawMemoryDataReport_dataDumps.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTM_6_6_DumpedRawMemoryDataReport_dataDumps.sizeRange(ls, offset, from, to) == TTM_6_6_DumpedRawMemoryDataReport_dataDumps.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TDataDump], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32841L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32841L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 32841L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 32841L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TTM_6_6_DumpedRawMemoryDataReport_dataDumps.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTM_6_6_DumpedRawMemoryDataReport_dataDumps.sizeRange(ls, offset, from, to) == TTM_6_6_DumpedRawMemoryDataReport_dataDumps.sizeRange(ls, otherOffset, from, to)
    }
}

case class TTM_6_6_DumpedRawMemoryDataReport (
    memory_ID: OptionMut[TMemory_ID], 
    dataDumps: TTM_6_6_DumpedRawMemoryDataReport_dataDumps
) {
    require(this.memory_ID.isDefined)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036852706760L))
        val size_0 = (this.memory_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        })
        val size_1 = 32L
        val size_2 = this.dataDumps.size(offset + size_0 + size_1)
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 2069047L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036852706760L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036852706760L))
        val size_0_offset = (this.memory_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        })
        val size_0_otherOffset = this.memory_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.dataDumps.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.dataDumps.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.dataDumps.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036852706760L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036852706760L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = (this.memory_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        })
        val size_0_otherOffset = this.memory_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.dataDumps.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.dataDumps.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.dataDumps.sizeLemmaNextByte(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036852706760L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036852706760L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = (this.memory_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        })
        val size_0_otherOffset = this.memory_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.dataDumps.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.dataDumps.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.dataDumps.sizeLemmaNextWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036852706760L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036852706760L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = (this.memory_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        })
        val size_0_otherOffset = this.memory_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.dataDumps.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.dataDumps.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.dataDumps.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TM_6_6_DUMPEDRAWMEMORYDATAREPORT_DATADUMPS: Int = 1880 /*(SIZE(1 .. maxTM-6-6-DataDumpCount)) */
@inline @cCode.inline val ERR_TM_6_6_DUMPEDRAWMEMORYDATAREPORT_DATADUMPS_ELM_2: Int = 1875 /* */

@inline @cCode.inline val ERR_TM_6_6_DUMPEDRAWMEMORYDATAREPORT: Int = 1885 /*(WITH COMPONENTS {memory-ID PRESENT}) */
@inline @cCode.inline val ERR_TM_6_6_DUMPEDRAWMEMORYDATAREPORT_MEMORY_ID_2: Int = 1823 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TM_6_6_DUMPEDRAWMEMORYDATAREPORT: Int = 1888 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_6_6_DUMPEDRAWMEMORYDATAREPORT_MEMORY_ID_2: Int = 1826 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_6_6_DUMPEDRAWMEMORYDATAREPORT_N_UNINITIALIZED: Int = 1889 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_6_6_DUMPEDRAWMEMORYDATAREPORT_N: Int = 1828 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_6_6_DUMPEDRAWMEMORYDATAREPORT_DATADUMPS: Int = 1883 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_6_6_DUMPEDRAWMEMORYDATAREPORT_DATADUMPS_ELM_2: Int = 1878 /*  */
@inline @cCode.inline val TTM_6_6_DumpedRawMemoryDataReport_REQUIRED_BYTES_FOR_ACN_ENCODING = 258631
@inline @cCode.inline val TTM_6_6_DumpedRawMemoryDataReport_REQUIRED_BITS_FOR_ACN_ENCODING = 2069047

@inline @cCode.inline val ERR_ACN_DECODE_TM_6_6_DUMPEDRAWMEMORYDATAREPORT: Int = 1890 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_6_6_DUMPEDRAWMEMORYDATAREPORT_MEMORY_ID_2: Int = 1827 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_6_6_DUMPEDRAWMEMORYDATAREPORT_N: Int = 1829 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_6_6_DUMPEDRAWMEMORYDATAREPORT_DATADUMPS: Int = 1884 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_6_6_DUMPEDRAWMEMORYDATAREPORT_DATADUMPS_ELM_2: Int = 1879 /*  */

// @inline @cCode.inline val maxTM_6_6_DataDumpCount: Int = 63 // defined in body

