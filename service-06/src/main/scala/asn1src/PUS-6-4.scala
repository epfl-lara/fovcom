/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

val maxTM_6_4_ObjectDataCount: Int = 63 // variables:188

def TObjectData_checksum_IsConstraintValid(@annotation.unused pVal: TObjectData_checksum): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = Right(0)
    ret
}

def TObjectData_IsConstraintValid(pVal: TObjectData): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TPUSC_UINT32_IsConstraintValid(pVal.offset)
    if ret.isRight then
        ret = TMemoryData_IsConstraintValid(pVal.dumpedData)
        if ret.isRight then
            pVal.checksum match
                case SomeMut(checksum) =>
                    ret = TObjectData_checksum_IsConstraintValid(checksum)
                case NoneMut() =>
    if ret.isRight then
        ret = (pVal.checksum.isDefined == true) match
            case true =>
                Right(0)
            case false =>
                Left(45)
    ret
}

def TObjectData_checksum_Initialize(): TObjectData_checksum = TObjectData_checksum(Vector.fill(2)(0.toRawUByte))
def TObjectData_Initialize(): TObjectData = TObjectData(offset = ULong.fromRaw(0L), dumpedData = TMemoryData_Initialize(), checksum = SomeMut(TObjectData_checksum(Vector.fill(2)(0.toRawUByte))))

@opaque @inlineOnce 
def TObjectData_ACN_Encode(pVal: TObjectData, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(32840L))
    TObjectData_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode offset */
    TPUSC_UINT32_ACN_Encode(pVal.offset, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 32840L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode dumpedData */
    TMemoryData_ACN_Encode(pVal.dumpedData, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 32808L, 32792L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32824L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.dumpedData.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    ObjectData_checksum_Optional_ACN_Encode(codec, pVal, pVal.checksum) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32840L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = pVal.checksum match {
        case SomeMut(v) =>
            16L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 32840L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def ObjectData_checksum_Optional_ACN_Encode(codec: ACN, pVal: TObjectData, checksum: OptionMut[TObjectData_checksum]): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(16L))
    @ghost val oldCdc = snapshot(codec)
    checksum match {
        case SomeMut(v) =>
            TObjectData_checksum_IsConstraintValid(v) match {
                case Left(l) =>
                    return Left[Int, Int](l)
                case Right(_) =>
            }
        case NoneMut() =>
            ()
    }
    /* Encode checksum */
    /* marked as ALWAYS PRESENT, so it must be Some */
    checksum match
        case SomeMut(checksum) =>
            assert(16.toInt >= 0) // overflow may happen during cast
            codec.base.bitStream.appendBitsMSBFirstVec(checksum.arr, 16.toInt)
    
        case NoneMut() => return Left(628)
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 16L
    }
}



@opaque @inlineOnce 
def TObjectData_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TObjectData] =
{
    require(codec.base.bitStream.validate_offset_bits(32840L))

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode offset */
    val pVal_offset = TPUSC_UINT32_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 32840L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode dumpedData */
    val pVal_dumpedData = TMemoryData_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 32808L, 32792L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32824L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_dumpedData.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    val pVal_checksum = ObjectData_checksum_Optional_ACN_Decode(codec) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32840L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = pVal_checksum match {
        case SomeMut(v) =>
            16L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 32840L)
    }
    val pVal = TObjectData(pVal_offset, pVal_dumpedData, pVal_checksum)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }

    TObjectData_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TObjectData](l)
        case Right(_) => RightMut[ErrorCode, TObjectData](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TObjectData]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TObjectData_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TObjectData_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TObjectData]) =
{
    require(codec.base.bitStream.validate_offset_bits(32840L))
    val cpy = snapshot(codec)
    val res = TObjectData_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def ObjectData_checksum_Optional_ACN_Decode(codec: ACN): EitherMut[Int, OptionMut[TObjectData_checksum]] = {
    require(codec.base.bitStream.validate_offset_bits(16L))
    @ghost val oldCdc = snapshot(codec)
    /* Decode checksum */
    /* marked as ALWAYS PRESENT */
    val checksum: OptionMut[TObjectData_checksum] =
        val pVal_checksum = TObjectData_checksum(codec.base.bitStream.readBitsVec(16.toInt))
        SomeMut(pVal_checksum)
    checksum match {
        case SomeMut(v) =>
            TObjectData_checksum_IsConstraintValid(v) match {
                case Left(l) =>
                    LeftMut[Int, OptionMut[TObjectData_checksum]](l)
                case Right(_) =>
                    RightMut[Int, OptionMut[TObjectData_checksum]](checksum)
            }
        case NoneMut() =>
            RightMut[Int, OptionMut[TObjectData_checksum]](checksum)
    }
}.ensuring { (res: EitherMut[Int, OptionMut[TObjectData_checksum]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            resVal.isDefined && old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 16L && (resVal match {
                case SomeMut(v) =>
                    TObjectData_checksum_IsConstraintValid(v).isRight
                case NoneMut() =>
                    true
            })
    }
}



@ghost @pure
def ObjectData_checksum_Optional_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[Int, OptionMut[TObjectData_checksum]]) = {
    require(codec.base.bitStream.validate_offset_bits(16L))
    val cpy = snapshot(codec)
    val res = ObjectData_checksum_Optional_ACN_Decode(cpy)
    (cpy, res)
}



def TTM_6_4_DumpedObjectMemoryDataReport_objectData_IsConstraintValid(pVal: TTM_6_4_DumpedObjectMemoryDataReport_objectData): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = ((1 <= pVal.nCount) && (pVal.nCount <= 63)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TObjectData_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TTM_6_4_DumpedObjectMemoryDataReport_IsConstraintValid(pVal: TTM_6_4_DumpedObjectMemoryDataReport): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TBase_IsConstraintValid(pVal.base_ID)
    if ret.isRight then
        ret = TTM_6_4_DumpedObjectMemoryDataReport_objectData_IsConstraintValid(pVal.objectData)
    ret
}

def TTM_6_4_DumpedObjectMemoryDataReport_objectData_Initialize(): TTM_6_4_DumpedObjectMemoryDataReport_objectData = TTM_6_4_DumpedObjectMemoryDataReport_objectData(1, Vector.fill(63)(TObjectData_Initialize()))
def TTM_6_4_DumpedObjectMemoryDataReport_Initialize(): TTM_6_4_DumpedObjectMemoryDataReport = TTM_6_4_DumpedObjectMemoryDataReport(base_ID = ULong.fromRaw(0L), objectData = TTM_6_4_DumpedObjectMemoryDataReport_objectData_Initialize())

@opaque @inlineOnce 
def TTM_6_4_DumpedObjectMemoryDataReport_ACN_Encode(pVal: TTM_6_4_DumpedObjectMemoryDataReport, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(2068960L))
    var i1: Int = 0
    TTM_6_4_DumpedObjectMemoryDataReport_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode base_ID */
    TBase_ACN_Encode(pVal.base_ID, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 2068960L, 8L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 8L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 8L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    val TM_6_4_DumpedObjectMemoryDataReport_n = ULong.fromRaw(pVal.objectData.nCount)
    if TM_6_4_DumpedObjectMemoryDataReport_n < ULong.fromRaw(1) || TM_6_4_DumpedObjectMemoryDataReport_n > ULong.fromRaw(63) then
        return Left(860)
    /* Encode TM_6_4_DumpedObjectMemoryDataReport_n */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(TM_6_4_DumpedObjectMemoryDataReport_n)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(TM_6_4_DumpedObjectMemoryDataReport_n)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 2068952L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 40L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode objectData */
    TM_6_4_DumpedObjectMemoryDataReport_objectData_ACN_Encode(codec, pVal, TM_6_4_DumpedObjectMemoryDataReport_n, pVal.objectData) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 2068960L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = pVal.objectData.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 2068960L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TM_6_4_DumpedObjectMemoryDataReport_objectData_Encode_loop(codec: ACN, objectData: TTM_6_4_DumpedObjectMemoryDataReport_objectData, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= objectData.nCount))
    require((1 <= objectData.nCount) && (objectData.nCount <= objectData.arr.size) && (objectData.arr.size <= 63))
    require(codec.base.bitStream.validate_offset_bits((32840L * (objectData.nCount - i1))))
    decreases(objectData.nCount - i1)
    if (i1 == objectData.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 32840L * (objectData.nCount - i1), 32840L)
        }
        TObjectData_ACN_Encode(objectData.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(32840L * (i1 + 1) == 32840L * i1 + 32840L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 32840L * (objectData.nCount - i1), 32840L)
            check(codec.base.bitStream.validate_offset_bits(32840L * (objectData.nCount - (i1 + 1))))
        }
        val res = TM_6_4_DumpedObjectMemoryDataReport_objectData_Encode_loop(codec, objectData, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TTM_6_4_DumpedObjectMemoryDataReport_objectData.sizeRange(objectData.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, objectData.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + objectData.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TTM_6_4_DumpedObjectMemoryDataReport_objectData.sizeRange(objectData.arr, codecSnap1.base.bitStream.bitIndex, i1, objectData.nCount) == objectData.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TTM_6_4_DumpedObjectMemoryDataReport_objectData.sizeRange(objectData.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, objectData.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TTM_6_4_DumpedObjectMemoryDataReport_objectData.sizeRange(objectData.arr, codecSnap1.base.bitStream.bitIndex, i1, objectData.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_6_4_DumpedObjectMemoryDataReport_objectData.sizeRange(objectData.arr, old(codec).base.bitStream.bitIndex, i1, objectData.nCount)
    }
}



@opaque @inlineOnce
def TM_6_4_DumpedObjectMemoryDataReport_objectData_ACN_Encode(codec: ACN, pVal: TTM_6_4_DumpedObjectMemoryDataReport, TM_6_4_DumpedObjectMemoryDataReport_n: ULong, objectData: TTM_6_4_DumpedObjectMemoryDataReport_objectData): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(2068920L))
    @ghost val oldCdc = snapshot(codec)
    TTM_6_4_DumpedObjectMemoryDataReport_objectData_IsConstraintValid(objectData) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    TM_6_4_DumpedObjectMemoryDataReport_objectData_Encode_loop(codec, objectData, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                objectData.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
            ()
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + objectData.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTM_6_4_DumpedObjectMemoryDataReport_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTM_6_4_DumpedObjectMemoryDataReport] =
{
    require(codec.base.bitStream.validate_offset_bits(2068960L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode base_ID */
    val pVal_base_ID = TBase_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 2068960L, 8L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 8L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 8L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode TM_6_4_DumpedObjectMemoryDataReport_n */
    val TM_6_4_DumpedObjectMemoryDataReport_n = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 2068952L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 40L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode objectData */
    val pVal_objectData = TM_6_4_DumpedObjectMemoryDataReport_objectData_ACN_Decode(codec, TM_6_4_DumpedObjectMemoryDataReport_n) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 2068960L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = pVal_objectData.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 2068960L)
    }
    val pVal = TTM_6_4_DumpedObjectMemoryDataReport(pVal_base_ID, pVal_objectData)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }

    TTM_6_4_DumpedObjectMemoryDataReport_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTM_6_4_DumpedObjectMemoryDataReport](l)
        case Right(_) => RightMut[ErrorCode, TTM_6_4_DumpedObjectMemoryDataReport](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTM_6_4_DumpedObjectMemoryDataReport]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_6_4_DumpedObjectMemoryDataReport_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTM_6_4_DumpedObjectMemoryDataReport_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTM_6_4_DumpedObjectMemoryDataReport]) =
{
    require(codec.base.bitStream.validate_offset_bits(2068960L))
    val cpy = snapshot(codec)
    val res = TTM_6_4_DumpedObjectMemoryDataReport_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def TM_6_4_DumpedObjectMemoryDataReport_objectData_Decode_loop(codec: ACN, nCount: Int, objectData: Vector[TObjectData], i1: Int): EitherMut[Int, Vector[TObjectData]] = {
    require((1 <= nCount) && (nCount <= 63))
    require((0 <= i1) && (i1 <= nCount))
    require(objectData.size == i1)
    require(codec.base.bitStream.validate_offset_bits((32840L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(objectData)
            vecRangesEqSlicedLemma(objectData, objectData, 0, objectData.size, 0, i1)
        }
        RightMut[Int, Vector[TObjectData]](objectData)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 32840L * (nCount - i1), 32840L)
        }
        val objectData_arr_i1_ = TObjectData_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(32840L * (i1 + 1) == 32840L * i1 + 32840L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 32840L * (nCount - i1), 32840L)
            check(codec.base.bitStream.validate_offset_bits(32840L * (nCount - (i1 + 1))))
        }
        val res = TM_6_4_DumpedObjectMemoryDataReport_objectData_Decode_loop(codec, nCount, objectData.append(objectData_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(objectData, newVec, objectData_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(objectData.append(objectData_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(objectData.list, objectData_arr_i1_, i1)
                    Vector.listApplyEqVecApply(objectData.append(objectData_arr_i1_), i1)
                    check(objectData_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TObjectData]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(objectData, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_6_4_DumpedObjectMemoryDataReport_objectData.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def TM_6_4_DumpedObjectMemoryDataReport_objectData_ACN_Decode(codec: ACN, TM_6_4_DumpedObjectMemoryDataReport_n: ULong): EitherMut[Int, TTM_6_4_DumpedObjectMemoryDataReport_objectData] = {
    require(codec.base.bitStream.validate_offset_bits(2068920L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val objectData =
        if ((ULong.fromRaw(1) <= TM_6_4_DumpedObjectMemoryDataReport_n) && (TM_6_4_DumpedObjectMemoryDataReport_n <= ULong.fromRaw(63))) then
            val objectData_nCount = TM_6_4_DumpedObjectMemoryDataReport_n.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val objectData = TM_6_4_DumpedObjectMemoryDataReport_objectData_Decode_loop(codec, objectData_nCount, Vector.empty[TObjectData], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val objectData = TTM_6_4_DumpedObjectMemoryDataReport_objectData(objectData_nCount, bdg)
                    ghostExpr {
                        objectData.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    objectData
            }
            objectData
        else return LeftMut(ERR_ACN_DECODE_TM_6_4_DUMPEDOBJECTMEMORYDATAREPORT_OBJECTDATA)
    TTM_6_4_DumpedObjectMemoryDataReport_objectData_IsConstraintValid(objectData) match {
        case Left(l) =>
            LeftMut[Int, TTM_6_4_DumpedObjectMemoryDataReport_objectData](l)
        case Right(_) =>
            RightMut[Int, TTM_6_4_DumpedObjectMemoryDataReport_objectData](objectData)
    }
}.ensuring { (res: EitherMut[Int, TTM_6_4_DumpedObjectMemoryDataReport_objectData]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_6_4_DumpedObjectMemoryDataReport_objectData_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TM_6_4_DumpedObjectMemoryDataReport_objectData_ACN_Decode_pure(codec: ACN, TM_6_4_DumpedObjectMemoryDataReport_n: ULong): (ACN, EitherMut[Int, TTM_6_4_DumpedObjectMemoryDataReport_objectData]) = {
    require(codec.base.bitStream.validate_offset_bits(2068920L))
    val cpy = snapshot(codec)
    val res = TM_6_4_DumpedObjectMemoryDataReport_objectData_ACN_Decode(cpy, TM_6_4_DumpedObjectMemoryDataReport_n)
    (cpy, res)
}

def TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid_objectData_IsConstraintValid(pVal: TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid_objectData): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = ((1 <= pVal.nCount) && (pVal.nCount <= 63)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TObjectData_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid_IsConstraintValid(pVal: TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TBaseMultipleMemid_IsConstraintValid(pVal.base_ID)
    if ret.isRight then
        ret = TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid_objectData_IsConstraintValid(pVal.objectData)
    ret
}

def TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid_objectData_Initialize(): TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid_objectData = TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid_objectData(1, Vector.fill(63)(TObjectData_Initialize()))
def TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid_Initialize(): TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid = TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid(base_ID = TBaseMultipleMemid_Initialize(), objectData = TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid_objectData_Initialize())

@opaque @inlineOnce 
def TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid_ACN_Encode(pVal: TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(2068992L))
    var i1: Int = 0
    TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_memory_ID = pVal.base_ID match
        case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(_) =>TMemory_ID.TmemId1

    /* Encode TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_memory_ID */
    val intVal_TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_memory_ID = TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_memory_ID match
        case TMemory_ID.TmemId1 => ULong.fromRaw(0L)

    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(0))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(intVal_TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_memory_ID)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(intVal_TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_memory_ID)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 2068992L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode base_ID */
    TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_base_ID_ACN_Encode(codec, pVal, TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_memory_ID, pVal.base_ID) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 2068960L, 8L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 40L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.base_ID match {
        case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
            8L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    val TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_n = ULong.fromRaw(pVal.objectData.nCount)
    if TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_n < ULong.fromRaw(1) || TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_n > ULong.fromRaw(63) then
        return Left(860)
    /* Encode TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_n */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_n)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_n)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_3.base.bitStream, codec.base.bitStream, 2068952L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 72L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    @ghost val codec_0_4 = snapshot(codec)
    /* Encode objectData */
    TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_objectData_ACN_Encode(codec, pVal, TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_n, pVal.objectData) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 2068992L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_3 = pVal.objectData.size(codec_0_4.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 2068992L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2 + size_3)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_base_ID_ACN_Encode(codec: ACN, pVal: TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid, TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_memory_ID: TMemory_ID, base_ID: TBaseMultipleMemid): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(8L))
    @ghost val oldCdc = snapshot(codec)
    TBaseMultipleMemid_IsConstraintValid(base_ID) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    base_ID match
        case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
            locally {
                ghostExpr {
                    @opaque @inlineOnce
                    def bitCountLemma(): Unit = ().ensuring(_ => GetBitCountUnsigned(ULong.fromRaw(255) - ULong.fromRaw(0)) == 8)
                    bitCountLemma()
                }
            }
            codec.base.encodeConstrainedPosWholeNumber(memId1, 0.toRawULong, 255.toRawULong)
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + base_ID.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_objectData_Encode_loop(codec: ACN, objectData: TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid_objectData, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= objectData.nCount))
    require((1 <= objectData.nCount) && (objectData.nCount <= objectData.arr.size) && (objectData.arr.size <= 63))
    require(codec.base.bitStream.validate_offset_bits((32840L * (objectData.nCount - i1))))
    decreases(objectData.nCount - i1)
    if (i1 == objectData.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 32840L * (objectData.nCount - i1), 32840L)
        }
        TObjectData_ACN_Encode(objectData.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(32840L * (i1 + 1) == 32840L * i1 + 32840L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 32840L * (objectData.nCount - i1), 32840L)
            check(codec.base.bitStream.validate_offset_bits(32840L * (objectData.nCount - (i1 + 1))))
        }
        val res = TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_objectData_Encode_loop(codec, objectData, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid_objectData.sizeRange(objectData.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, objectData.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + objectData.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid_objectData.sizeRange(objectData.arr, codecSnap1.base.bitStream.bitIndex, i1, objectData.nCount) == objectData.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid_objectData.sizeRange(objectData.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, objectData.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid_objectData.sizeRange(objectData.arr, codecSnap1.base.bitStream.bitIndex, i1, objectData.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid_objectData.sizeRange(objectData.arr, old(codec).base.bitStream.bitIndex, i1, objectData.nCount)
    }
}



@opaque @inlineOnce
def TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_objectData_ACN_Encode(codec: ACN, pVal: TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid, TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_n: ULong, objectData: TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid_objectData): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(2068920L))
    @ghost val oldCdc = snapshot(codec)
    TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid_objectData_IsConstraintValid(objectData) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_objectData_Encode_loop(codec, objectData, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                objectData.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
            ()
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + objectData.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid] =
{
    require(codec.base.bitStream.validate_offset_bits(2068992L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_memory_ID */
    val intVal_TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_memory_ID = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    val TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_memory_ID = intVal_TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_memory_ID.toRaw match
        case 0 => TMemory_ID.TmemId1
        case _ => return LeftMut(ERR_ACN_DECODE_TM_6_4_DUMPEDOBJECTMEMORYDATAREPORTMULTIPLEMEMID_MEMORY_ID)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 2068992L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode base_ID */
    val pVal_base_ID = TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_base_ID_ACN_Decode(codec, TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_memory_ID) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 2068960L, 8L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 40L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_base_ID match {
        case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
            8L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_n */
    val TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_n = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_3.base.bitStream, codec.base.bitStream, 2068952L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 72L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    @ghost val codec_0_4 = snapshot(codec)
    /* Decode objectData */
    val pVal_objectData = TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_objectData_ACN_Decode(codec, TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_n) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 2068992L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_3 = pVal_objectData.size(codec_0_4.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 2068992L)
    }
    val pVal = TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid(pVal_base_ID, pVal_objectData)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2 + size_3)
    }

    TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid](l)
        case Right(_) => RightMut[ErrorCode, TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid]) =
{
    require(codec.base.bitStream.validate_offset_bits(2068992L))
    val cpy = snapshot(codec)
    val res = TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_base_ID_ACN_Decode(codec: ACN, TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_memory_ID: TMemory_ID): EitherMut[Int, TBaseMultipleMemid] = {
    require(codec.base.bitStream.validate_offset_bits(8L))
    @ghost val oldCdc = snapshot(codec)
    val base_ID = TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_memory_ID match
        case TMemory_ID.TmemId1 =>
            locally {
                ghostExpr {
                    @opaque @inlineOnce
                    def bitCountLemma(): Unit = ().ensuring(_ => GetBitCountUnsigned(ULong.fromRaw(255) - ULong.fromRaw(0)) == 8)
                    bitCountLemma()
                }
            }
            val memId1 = codec.base.decodeConstrainedPosWholeNumber(ULong.fromRaw(0), ULong.fromRaw(255)) // uper:135
            TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1)
    TBaseMultipleMemid_IsConstraintValid(base_ID) match {
        case Left(l) =>
            LeftMut[Int, TBaseMultipleMemid](l)
        case Right(_) =>
            RightMut[Int, TBaseMultipleMemid](base_ID)
    }
}.ensuring { (res: EitherMut[Int, TBaseMultipleMemid]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TBaseMultipleMemid_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_base_ID_ACN_Decode_pure(codec: ACN, TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_memory_ID: TMemory_ID): (ACN, EitherMut[Int, TBaseMultipleMemid]) = {
    require(codec.base.bitStream.validate_offset_bits(8L))
    val cpy = snapshot(codec)
    val res = TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_base_ID_ACN_Decode(cpy, TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_memory_ID)
    (cpy, res)
}

@opaque @inlineOnce
def TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_objectData_Decode_loop(codec: ACN, nCount: Int, objectData: Vector[TObjectData], i1: Int): EitherMut[Int, Vector[TObjectData]] = {
    require((1 <= nCount) && (nCount <= 63))
    require((0 <= i1) && (i1 <= nCount))
    require(objectData.size == i1)
    require(codec.base.bitStream.validate_offset_bits((32840L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(objectData)
            vecRangesEqSlicedLemma(objectData, objectData, 0, objectData.size, 0, i1)
        }
        RightMut[Int, Vector[TObjectData]](objectData)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 32840L * (nCount - i1), 32840L)
        }
        val objectData_arr_i1_ = TObjectData_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(32840L * (i1 + 1) == 32840L * i1 + 32840L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 32840L * (nCount - i1), 32840L)
            check(codec.base.bitStream.validate_offset_bits(32840L * (nCount - (i1 + 1))))
        }
        val res = TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_objectData_Decode_loop(codec, nCount, objectData.append(objectData_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(objectData, newVec, objectData_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(objectData.append(objectData_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(objectData.list, objectData_arr_i1_, i1)
                    Vector.listApplyEqVecApply(objectData.append(objectData_arr_i1_), i1)
                    check(objectData_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TObjectData]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(objectData, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid_objectData.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_objectData_ACN_Decode(codec: ACN, TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_n: ULong): EitherMut[Int, TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid_objectData] = {
    require(codec.base.bitStream.validate_offset_bits(2068920L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val objectData =
        if ((ULong.fromRaw(1) <= TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_n) && (TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_n <= ULong.fromRaw(63))) then
            val objectData_nCount = TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_n.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val objectData = TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_objectData_Decode_loop(codec, objectData_nCount, Vector.empty[TObjectData], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val objectData = TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid_objectData(objectData_nCount, bdg)
                    ghostExpr {
                        objectData.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    objectData
            }
            objectData
        else return LeftMut(ERR_ACN_DECODE_TM_6_4_DUMPEDOBJECTMEMORYDATAREPORTMULTIPLEMEMID_OBJECTDATA)
    TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid_objectData_IsConstraintValid(objectData) match {
        case Left(l) =>
            LeftMut[Int, TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid_objectData](l)
        case Right(_) =>
            RightMut[Int, TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid_objectData](objectData)
    }
}.ensuring { (res: EitherMut[Int, TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid_objectData]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid_objectData_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_objectData_ACN_Decode_pure(codec: ACN, TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_n: ULong): (ACN, EitherMut[Int, TTM_6_4_DumpedObjectMemoryDataReportMultipleMemid_objectData]) = {
    require(codec.base.bitStream.validate_offset_bits(2068920L))
    val cpy = snapshot(codec)
    val res = TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_objectData_ACN_Decode(cpy, TM_6_4_DumpedObjectMemoryDataReportMultipleMemid_n)
    (cpy, res)
}