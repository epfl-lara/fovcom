/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._


def TApplicationProcessUser_ID_IsConstraintValid(pVal: TApplicationProcessUser_ID): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = (pVal <= ULong.fromRaw(65535L)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    ret
}

def TApplicationProcessUser_ID_Initialize(): TApplicationProcessUser_ID = ULong.fromRaw(0L)

@opaque @inlineOnce 
def TApplicationProcessUser_ID_ACN_Encode(pVal: TApplicationProcessUser_ID, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(16L))
    TApplicationProcessUser_ID_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_16(pVal)
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 16L
    }
}

@opaque @inlineOnce 
def TApplicationProcessUser_ID_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TApplicationProcessUser_ID] =
{
    require(codec.base.bitStream.validate_offset_bits(16L))

    @ghost val oldCdc = snapshot(codec)
    val pVal = codec.dec_Int_PositiveInteger_ConstSize_big_endian_16()


    TApplicationProcessUser_ID_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TApplicationProcessUser_ID](l)
        case Right(_) => RightMut[ErrorCode, TApplicationProcessUser_ID](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TApplicationProcessUser_ID]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 16L && TApplicationProcessUser_ID_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TApplicationProcessUser_ID_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TApplicationProcessUser_ID]) =
{
    require(codec.base.bitStream.validate_offset_bits(16L))
    val cpy = snapshot(codec)
    val res = TApplicationProcessUser_ID_ACN_Decode(cpy)
    (cpy, res)
}