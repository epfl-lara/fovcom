/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TObjectDataArea --------------------------------------------*/

case class TObjectDataArea_checksum(arr: Vector[UByte])
{
    require(this.arr.length == 2)
}

case class TObjectDataArea (
    destinationOffset: TPUSC_UINT32, 
    offsetInFile: TPUSC_UINT32, 
    length: TPUSC_UINT32, 
    checksum: OptionMut[TObjectDataArea_checksum]
) {
    require(this.checksum.isDefined)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775695L))
        val size_0 = 32L
        val size_1 = 32L
        val size_2 = 32L
        val size_3 = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        size_0 + size_1 + size_2 + size_3
    }.ensuring { (res: Long) => 
        res == 112L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775695L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775695L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        val size_3_otherOffset = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775695L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775695L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        val size_3_otherOffset = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775695L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775695L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        val size_3_otherOffset = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775695L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775695L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        val size_3_otherOffset = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_OBJECTDATAAREA_CHECKSUM: Int = 1086 /*(SIZE(16)) */

@inline @cCode.inline val ERR_OBJECTDATAAREA: Int = 1091 /*(WITH COMPONENTS {checksum PRESENT}) */
@inline @cCode.inline val ERR_OBJECTDATAAREA_DESTINATIONOFFSET_2: Int = 1061 /* */
@inline @cCode.inline val ERR_OBJECTDATAAREA_OFFSETINFILE_2: Int = 1071 /* */
@inline @cCode.inline val ERR_OBJECTDATAAREA_LENGTH_2: Int = 1081 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_OBJECTDATAAREA: Int = 1094 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_OBJECTDATAAREA_DESTINATIONOFFSET_2: Int = 1064 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_OBJECTDATAAREA_OFFSETINFILE_2: Int = 1074 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_OBJECTDATAAREA_LENGTH_2: Int = 1084 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_OBJECTDATAAREA_CHECKSUM: Int = 1089 /*  */
@inline @cCode.inline val TObjectDataArea_REQUIRED_BYTES_FOR_ACN_ENCODING = 14
@inline @cCode.inline val TObjectDataArea_REQUIRED_BITS_FOR_ACN_ENCODING = 112

@inline @cCode.inline val ERR_ACN_DECODE_OBJECTDATAAREA: Int = 1095 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_OBJECTDATAAREA_DESTINATIONOFFSET_2: Int = 1065 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_OBJECTDATAAREA_OFFSETINFILE_2: Int = 1075 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_OBJECTDATAAREA_LENGTH_2: Int = 1085 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_OBJECTDATAAREA_CHECKSUM: Int = 1090 /*  */
/*-- TTC_6_21_LoadObjectMemoryDataAreasByReference --------------------------------------------*/


case class TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas (nCount: Int, arr: Vector[TObjectDataArea])
{
    require(this.arr.size <= 63 && 1 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854768751L))
        TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 7056L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854768751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854768751L))
        TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854768751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854768751L))
        require((offset % 8L) == (otherOffset % 8L))
        TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854768751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854768751L))
        require((offset % 16L) == (otherOffset % 16L))
        TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854768751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854768751L))
        require((offset % 32L) == (otherOffset % 32L))
        TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas {
    def sizeRange(ls: Vector[TObjectDataArea], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 112L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(elemSize == 112L)
            elemSize + TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 112L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TObjectDataArea], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 112L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 112L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 112L)
            assert(elemSizeOtherOff == 112L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas.sizeRange(ls, offset, from, to) == TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TObjectDataArea], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 112L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 112L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 112L)
            assert(elemSizeOtherOff == 112L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas.sizeRange(ls, offset, from, to) == TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TObjectDataArea], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 112L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 112L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 112L)
            assert(elemSizeOtherOff == 112L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas.sizeRange(ls, offset, from, to) == TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TObjectDataArea], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 112L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 112L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 112L)
            assert(elemSizeOtherOff == 112L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas.sizeRange(ls, offset, from, to) == TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas.sizeRange(ls, otherOffset, from, to)
    }
}

case class TTC_6_21_LoadObjectMemoryDataAreasByReference (
    base_ID: TBase, 
    filePath: TFilePath, 
    objectDataAreas: TTC_6_21_LoadObjectMemoryDataAreasByReference_objectDataAreas
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854711357L))
        val size_0 = 8L
        val size_1 = this.filePath.size(offset + size_0)
        val size_2 = 32L
        val size_3 = this.objectDataAreas.size(offset + size_0 + size_1 + size_2)
        size_0 + size_1 + size_2 + size_3
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 64450L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854711357L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854711357L))
        val size_0_offset = 8L
        val size_0_otherOffset = 8L
        val size_1_offset = this.filePath.size(offset + size_0_offset)
        val size_1_otherOffset = this.filePath.size(otherOffset + size_0_otherOffset)
        this.filePath.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = this.objectDataAreas.size(offset + size_0_offset + size_1_offset + size_2_offset)
        val size_3_otherOffset = this.objectDataAreas.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        this.objectDataAreas.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset + size_2_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854711357L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854711357L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 8L
        val size_0_otherOffset = 8L
        val size_1_offset = this.filePath.size(offset + size_0_offset)
        val size_1_otherOffset = this.filePath.size(otherOffset + size_0_otherOffset)
        this.filePath.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = this.objectDataAreas.size(offset + size_0_offset + size_1_offset + size_2_offset)
        val size_3_otherOffset = this.objectDataAreas.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        this.objectDataAreas.sizeLemmaNextByte(offset + size_0_offset + size_1_offset + size_2_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854711357L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854711357L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 8L
        val size_0_otherOffset = 8L
        val size_1_offset = this.filePath.size(offset + size_0_offset)
        val size_1_otherOffset = this.filePath.size(otherOffset + size_0_otherOffset)
        this.filePath.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = this.objectDataAreas.size(offset + size_0_offset + size_1_offset + size_2_offset)
        val size_3_otherOffset = this.objectDataAreas.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        this.objectDataAreas.sizeLemmaNextWord(offset + size_0_offset + size_1_offset + size_2_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854711357L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854711357L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 8L
        val size_0_otherOffset = 8L
        val size_1_offset = this.filePath.size(offset + size_0_offset)
        val size_1_otherOffset = this.filePath.size(otherOffset + size_0_otherOffset)
        this.filePath.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = this.objectDataAreas.size(offset + size_0_offset + size_1_offset + size_2_offset)
        val size_3_otherOffset = this.objectDataAreas.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        this.objectDataAreas.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset + size_2_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCE_OBJECTDATAAREAS: Int = 941 /*(SIZE(1 .. maxTC-6-21-ObjectDataAreaCount)) */
@inline @cCode.inline val ERR_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCE_OBJECTDATAAREAS_ELM_2: Int = 936 /* */

@inline @cCode.inline val ERR_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCE: Int = 946 /* */
@inline @cCode.inline val ERR_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCE_BASE_ID_2: Int = 859 /* */
@inline @cCode.inline val ERR_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCE_FILEPATH_2: Int = 889 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCE: Int = 949 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCE_BASE_ID_2: Int = 862 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCE_FILEPATH_2: Int = 892 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCE_N_UNINITIALIZED: Int = 950 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCE_N: Int = 894 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCE_OBJECTDATAAREAS: Int = 944 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCE_OBJECTDATAAREAS_ELM_2: Int = 939 /*  */
@inline @cCode.inline val TTC_6_21_LoadObjectMemoryDataAreasByReference_REQUIRED_BYTES_FOR_ACN_ENCODING = 8057
@inline @cCode.inline val TTC_6_21_LoadObjectMemoryDataAreasByReference_REQUIRED_BITS_FOR_ACN_ENCODING = 64450

@inline @cCode.inline val ERR_ACN_DECODE_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCE: Int = 951 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCE_BASE_ID_2: Int = 863 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCE_FILEPATH_2: Int = 893 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCE_N: Int = 895 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCE_OBJECTDATAAREAS: Int = 945 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCE_OBJECTDATAAREAS_ELM_2: Int = 940 /*  */
/*-- TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid --------------------------------------------*/


case class TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas (nCount: Int, arr: Vector[TObjectDataArea])
{
    require(this.arr.size <= 63 && 1 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854768751L))
        TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 7056L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854768751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854768751L))
        TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854768751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854768751L))
        require((offset % 8L) == (otherOffset % 8L))
        TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854768751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854768751L))
        require((offset % 16L) == (otherOffset % 16L))
        TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854768751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854768751L))
        require((offset % 32L) == (otherOffset % 32L))
        TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas {
    def sizeRange(ls: Vector[TObjectDataArea], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 112L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(elemSize == 112L)
            elemSize + TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 112L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TObjectDataArea], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 112L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 112L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 112L)
            assert(elemSizeOtherOff == 112L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas.sizeRange(ls, offset, from, to) == TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TObjectDataArea], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 112L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 112L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 112L)
            assert(elemSizeOtherOff == 112L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas.sizeRange(ls, offset, from, to) == TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TObjectDataArea], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 112L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 112L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 112L)
            assert(elemSizeOtherOff == 112L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas.sizeRange(ls, offset, from, to) == TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TObjectDataArea], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 63))
        require((0L <= offset) && (offset <= 9223372036854775807L - 112L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 112L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 112L)
            assert(elemSizeOtherOff == 112L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas.sizeRange(ls, offset, from, to) == TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas.sizeRange(ls, otherOffset, from, to)
    }
}

case class TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid (
    base_ID: TBaseMultipleMemid, 
    filePath: TFilePath, 
    objectDataAreas: TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_objectDataAreas
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854711325L))
        val size_0 = 32L
        val size_1 = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        val size_2 = this.filePath.size(offset + size_0 + size_1)
        val size_3 = 32L
        val size_4 = this.objectDataAreas.size(offset + size_0 + size_1 + size_2 + size_3)
        size_0 + size_1 + size_2 + size_3 + size_4
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 64482L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854711325L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854711325L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        val size_1_otherOffset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        this.base_ID.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = this.filePath.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.filePath.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.filePath.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        val size_3_offset = 32L
        val size_3_otherOffset = 32L
        val size_4_offset = this.objectDataAreas.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset)
        val size_4_otherOffset = this.objectDataAreas.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset)
        this.objectDataAreas.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854711325L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854711325L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        val size_1_otherOffset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        this.base_ID.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = this.filePath.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.filePath.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.filePath.sizeLemmaNextByte(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        val size_3_offset = 32L
        val size_3_otherOffset = 32L
        val size_4_offset = this.objectDataAreas.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset)
        val size_4_otherOffset = this.objectDataAreas.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset)
        this.objectDataAreas.sizeLemmaNextByte(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854711325L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854711325L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        val size_1_otherOffset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        this.base_ID.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = this.filePath.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.filePath.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.filePath.sizeLemmaNextWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        val size_3_offset = 32L
        val size_3_otherOffset = 32L
        val size_4_offset = this.objectDataAreas.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset)
        val size_4_otherOffset = this.objectDataAreas.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset)
        this.objectDataAreas.sizeLemmaNextWord(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854711325L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854711325L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        val size_1_otherOffset = this.base_ID match {
            case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
                8L
        }
        this.base_ID.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = this.filePath.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.filePath.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.filePath.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        val size_3_offset = 32L
        val size_3_otherOffset = 32L
        val size_4_offset = this.objectDataAreas.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset)
        val size_4_otherOffset = this.objectDataAreas.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset)
        this.objectDataAreas.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCEMULTIPLEMEMID_OBJECTDATAAREAS: Int = 1044 /*(SIZE(1 .. maxTC-6-21-ObjectDataAreaCount)) */
@inline @cCode.inline val ERR_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCEMULTIPLEMEMID_OBJECTDATAAREAS_ELM_2: Int = 1039 /* */

@inline @cCode.inline val ERR_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCEMULTIPLEMEMID: Int = 1049 /* */
@inline @cCode.inline val ERR_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCEMULTIPLEMEMID_BASE_ID_2: Int = 964 /* */
@inline @cCode.inline val ERR_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCEMULTIPLEMEMID_FILEPATH_2: Int = 992 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCEMULTIPLEMEMID: Int = 1052 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCEMULTIPLEMEMID_MEMORY_ID_UNINITIALIZED: Int = 1053 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCEMULTIPLEMEMID_MEMORY_ID: Int = 952 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCEMULTIPLEMEMID_BASE_ID: Int = 962 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCEMULTIPLEMEMID_BASE_ID_MEMID1: Int = 957 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCEMULTIPLEMEMID_FILEPATH_2: Int = 995 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCEMULTIPLEMEMID_N_UNINITIALIZED: Int = 1054 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCEMULTIPLEMEMID_N: Int = 997 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCEMULTIPLEMEMID_OBJECTDATAAREAS: Int = 1047 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCEMULTIPLEMEMID_OBJECTDATAAREAS_ELM_2: Int = 1042 /*  */
@inline @cCode.inline val TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_REQUIRED_BYTES_FOR_ACN_ENCODING = 8061
@inline @cCode.inline val TTC_6_21_LoadObjectMemoryDataAreasByReferenceMultipleMemid_REQUIRED_BITS_FOR_ACN_ENCODING = 64482

@inline @cCode.inline val ERR_ACN_DECODE_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCEMULTIPLEMEMID: Int = 1055 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCEMULTIPLEMEMID_MEMORY_ID: Int = 953 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCEMULTIPLEMEMID_BASE_ID: Int = 963 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCEMULTIPLEMEMID_BASE_ID_MEMID1: Int = 958 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCEMULTIPLEMEMID_FILEPATH_2: Int = 996 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCEMULTIPLEMEMID_N: Int = 998 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCEMULTIPLEMEMID_OBJECTDATAAREAS: Int = 1048 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_6_21_LOADOBJECTMEMORYDATAAREASBYREFERENCEMULTIPLEMEMID_OBJECTDATAAREAS_ELM_2: Int = 1043 /*  */

// @inline @cCode.inline val maxTC_6_21_ObjectDataAreaCount: Int = 63 // defined in body

