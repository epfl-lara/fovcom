/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

val maxTM_6_8_CheckObjectCount: Int = 63 // variables:188

def TCheckedObject_checksum_IsConstraintValid(@annotation.unused pVal: TCheckedObject_checksum): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = Right(0)
    ret
}

def TCheckedObject_IsConstraintValid(pVal: TCheckedObject): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TPUSC_UINT32_IsConstraintValid(pVal.offset)
    if ret.isRight then
        ret = TPUSC_UINT32_IsConstraintValid(pVal.length)
        if ret.isRight then
            ret = TCheckedObject_checksum_IsConstraintValid(pVal.checksum)
    ret
}

def TCheckedObject_checksum_Initialize(): TCheckedObject_checksum = TCheckedObject_checksum(Vector.fill(2)(0.toRawUByte))
def TCheckedObject_Initialize(): TCheckedObject = TCheckedObject(offset = ULong.fromRaw(0L), length = ULong.fromRaw(0L), checksum = TCheckedObject_checksum(Vector.fill(2)(0.toRawUByte)))

@opaque @inlineOnce 
def TCheckedObject_ACN_Encode(pVal: TCheckedObject, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(80L))
    TCheckedObject_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode offset */
    TPUSC_UINT32_ACN_Encode(pVal.offset, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 80L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode length */
    TPUSC_UINT32_ACN_Encode(pVal.length, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 48L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode checksum */
    assert(16.toInt >= 0) // overflow may happen during cast
    codec.base.bitStream.appendBitsMSBFirstVec(pVal.checksum.arr, 16.toInt)

    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 80L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = 16L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 80L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TCheckedObject_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TCheckedObject] =
{
    require(codec.base.bitStream.validate_offset_bits(80L))

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode offset */
    val pVal_offset = TPUSC_UINT32_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 80L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode length */
    val pVal_length = TPUSC_UINT32_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 48L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode checksum */
    val pVal_checksum = TCheckedObject_checksum(codec.base.bitStream.readBitsVec(16.toInt))
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 80L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = 16L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 80L)
    }
    val pVal = TCheckedObject(pVal_offset, pVal_length, pVal_checksum)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }

    TCheckedObject_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TCheckedObject](l)
        case Right(_) => RightMut[ErrorCode, TCheckedObject](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TCheckedObject]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TCheckedObject_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TCheckedObject_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TCheckedObject]) =
{
    require(codec.base.bitStream.validate_offset_bits(80L))
    val cpy = snapshot(codec)
    val res = TCheckedObject_ACN_Decode(cpy)
    (cpy, res)
}

def TTM_6_8_CheckedObjectMemoryDataReport_checkedObjects_IsConstraintValid(pVal: TTM_6_8_CheckedObjectMemoryDataReport_checkedObjects): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = ((1 <= pVal.nCount) && (pVal.nCount <= 63)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TCheckedObject_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TTM_6_8_CheckedObjectMemoryDataReport_IsConstraintValid(pVal: TTM_6_8_CheckedObjectMemoryDataReport): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TBase_IsConstraintValid(pVal.base_ID)
    if ret.isRight then
        ret = TTM_6_8_CheckedObjectMemoryDataReport_checkedObjects_IsConstraintValid(pVal.checkedObjects)
    ret
}

def TTM_6_8_CheckedObjectMemoryDataReport_checkedObjects_Initialize(): TTM_6_8_CheckedObjectMemoryDataReport_checkedObjects = TTM_6_8_CheckedObjectMemoryDataReport_checkedObjects(1, Vector.fill(63)(TCheckedObject_Initialize()))
def TTM_6_8_CheckedObjectMemoryDataReport_Initialize(): TTM_6_8_CheckedObjectMemoryDataReport = TTM_6_8_CheckedObjectMemoryDataReport(base_ID = ULong.fromRaw(0L), checkedObjects = TTM_6_8_CheckedObjectMemoryDataReport_checkedObjects_Initialize())

@opaque @inlineOnce 
def TTM_6_8_CheckedObjectMemoryDataReport_ACN_Encode(pVal: TTM_6_8_CheckedObjectMemoryDataReport, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(5080L))
    var i1: Int = 0
    TTM_6_8_CheckedObjectMemoryDataReport_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode base_ID */
    TBase_ACN_Encode(pVal.base_ID, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 5080L, 8L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 8L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 8L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    val TM_6_8_CheckedObjectMemoryDataReport_n = ULong.fromRaw(pVal.checkedObjects.nCount)
    if TM_6_8_CheckedObjectMemoryDataReport_n < ULong.fromRaw(1) || TM_6_8_CheckedObjectMemoryDataReport_n > ULong.fromRaw(63) then
        return Left(860)
    /* Encode TM_6_8_CheckedObjectMemoryDataReport_n */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(TM_6_8_CheckedObjectMemoryDataReport_n)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(TM_6_8_CheckedObjectMemoryDataReport_n)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 5072L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 40L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode checkedObjects */
    TM_6_8_CheckedObjectMemoryDataReport_checkedObjects_ACN_Encode(codec, pVal, TM_6_8_CheckedObjectMemoryDataReport_n, pVal.checkedObjects) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 5080L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = pVal.checkedObjects.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 5080L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TM_6_8_CheckedObjectMemoryDataReport_checkedObjects_Encode_loop(codec: ACN, checkedObjects: TTM_6_8_CheckedObjectMemoryDataReport_checkedObjects, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= checkedObjects.nCount))
    require((1 <= checkedObjects.nCount) && (checkedObjects.nCount <= checkedObjects.arr.size) && (checkedObjects.arr.size <= 63))
    require(codec.base.bitStream.validate_offset_bits((80L * (checkedObjects.nCount - i1))))
    decreases(checkedObjects.nCount - i1)
    if (i1 == checkedObjects.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 80L * (checkedObjects.nCount - i1), 80L)
        }
        TCheckedObject_ACN_Encode(checkedObjects.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(80L * (i1 + 1) == 80L * i1 + 80L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 80L * (checkedObjects.nCount - i1), 80L)
            check(codec.base.bitStream.validate_offset_bits(80L * (checkedObjects.nCount - (i1 + 1))))
        }
        val res = TM_6_8_CheckedObjectMemoryDataReport_checkedObjects_Encode_loop(codec, checkedObjects, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TTM_6_8_CheckedObjectMemoryDataReport_checkedObjects.sizeRange(checkedObjects.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, checkedObjects.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + checkedObjects.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TTM_6_8_CheckedObjectMemoryDataReport_checkedObjects.sizeRange(checkedObjects.arr, codecSnap1.base.bitStream.bitIndex, i1, checkedObjects.nCount) == checkedObjects.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TTM_6_8_CheckedObjectMemoryDataReport_checkedObjects.sizeRange(checkedObjects.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, checkedObjects.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TTM_6_8_CheckedObjectMemoryDataReport_checkedObjects.sizeRange(checkedObjects.arr, codecSnap1.base.bitStream.bitIndex, i1, checkedObjects.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_6_8_CheckedObjectMemoryDataReport_checkedObjects.sizeRange(checkedObjects.arr, old(codec).base.bitStream.bitIndex, i1, checkedObjects.nCount)
    }
}



@opaque @inlineOnce
def TM_6_8_CheckedObjectMemoryDataReport_checkedObjects_ACN_Encode(codec: ACN, pVal: TTM_6_8_CheckedObjectMemoryDataReport, TM_6_8_CheckedObjectMemoryDataReport_n: ULong, checkedObjects: TTM_6_8_CheckedObjectMemoryDataReport_checkedObjects): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(5040L))
    @ghost val oldCdc = snapshot(codec)
    TTM_6_8_CheckedObjectMemoryDataReport_checkedObjects_IsConstraintValid(checkedObjects) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    TM_6_8_CheckedObjectMemoryDataReport_checkedObjects_Encode_loop(codec, checkedObjects, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                checkedObjects.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
            ()
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + checkedObjects.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTM_6_8_CheckedObjectMemoryDataReport_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTM_6_8_CheckedObjectMemoryDataReport] =
{
    require(codec.base.bitStream.validate_offset_bits(5080L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode base_ID */
    val pVal_base_ID = TBase_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 5080L, 8L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 8L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 8L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode TM_6_8_CheckedObjectMemoryDataReport_n */
    val TM_6_8_CheckedObjectMemoryDataReport_n = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 5072L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 40L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode checkedObjects */
    val pVal_checkedObjects = TM_6_8_CheckedObjectMemoryDataReport_checkedObjects_ACN_Decode(codec, TM_6_8_CheckedObjectMemoryDataReport_n) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 5080L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = pVal_checkedObjects.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 5080L)
    }
    val pVal = TTM_6_8_CheckedObjectMemoryDataReport(pVal_base_ID, pVal_checkedObjects)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }

    TTM_6_8_CheckedObjectMemoryDataReport_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTM_6_8_CheckedObjectMemoryDataReport](l)
        case Right(_) => RightMut[ErrorCode, TTM_6_8_CheckedObjectMemoryDataReport](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTM_6_8_CheckedObjectMemoryDataReport]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_6_8_CheckedObjectMemoryDataReport_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTM_6_8_CheckedObjectMemoryDataReport_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTM_6_8_CheckedObjectMemoryDataReport]) =
{
    require(codec.base.bitStream.validate_offset_bits(5080L))
    val cpy = snapshot(codec)
    val res = TTM_6_8_CheckedObjectMemoryDataReport_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def TM_6_8_CheckedObjectMemoryDataReport_checkedObjects_Decode_loop(codec: ACN, nCount: Int, checkedObjects: Vector[TCheckedObject], i1: Int): EitherMut[Int, Vector[TCheckedObject]] = {
    require((1 <= nCount) && (nCount <= 63))
    require((0 <= i1) && (i1 <= nCount))
    require(checkedObjects.size == i1)
    require(codec.base.bitStream.validate_offset_bits((80L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(checkedObjects)
            vecRangesEqSlicedLemma(checkedObjects, checkedObjects, 0, checkedObjects.size, 0, i1)
        }
        RightMut[Int, Vector[TCheckedObject]](checkedObjects)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 80L * (nCount - i1), 80L)
        }
        val checkedObjects_arr_i1_ = TCheckedObject_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(80L * (i1 + 1) == 80L * i1 + 80L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 80L * (nCount - i1), 80L)
            check(codec.base.bitStream.validate_offset_bits(80L * (nCount - (i1 + 1))))
        }
        val res = TM_6_8_CheckedObjectMemoryDataReport_checkedObjects_Decode_loop(codec, nCount, checkedObjects.append(checkedObjects_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(checkedObjects, newVec, checkedObjects_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(checkedObjects.append(checkedObjects_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(checkedObjects.list, checkedObjects_arr_i1_, i1)
                    Vector.listApplyEqVecApply(checkedObjects.append(checkedObjects_arr_i1_), i1)
                    check(checkedObjects_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TCheckedObject]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(checkedObjects, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_6_8_CheckedObjectMemoryDataReport_checkedObjects.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def TM_6_8_CheckedObjectMemoryDataReport_checkedObjects_ACN_Decode(codec: ACN, TM_6_8_CheckedObjectMemoryDataReport_n: ULong): EitherMut[Int, TTM_6_8_CheckedObjectMemoryDataReport_checkedObjects] = {
    require(codec.base.bitStream.validate_offset_bits(5040L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val checkedObjects =
        if ((ULong.fromRaw(1) <= TM_6_8_CheckedObjectMemoryDataReport_n) && (TM_6_8_CheckedObjectMemoryDataReport_n <= ULong.fromRaw(63))) then
            val checkedObjects_nCount = TM_6_8_CheckedObjectMemoryDataReport_n.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val checkedObjects = TM_6_8_CheckedObjectMemoryDataReport_checkedObjects_Decode_loop(codec, checkedObjects_nCount, Vector.empty[TCheckedObject], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val checkedObjects = TTM_6_8_CheckedObjectMemoryDataReport_checkedObjects(checkedObjects_nCount, bdg)
                    ghostExpr {
                        checkedObjects.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    checkedObjects
            }
            checkedObjects
        else return LeftMut(ERR_ACN_DECODE_TM_6_8_CHECKEDOBJECTMEMORYDATAREPORT_CHECKEDOBJECTS)
    TTM_6_8_CheckedObjectMemoryDataReport_checkedObjects_IsConstraintValid(checkedObjects) match {
        case Left(l) =>
            LeftMut[Int, TTM_6_8_CheckedObjectMemoryDataReport_checkedObjects](l)
        case Right(_) =>
            RightMut[Int, TTM_6_8_CheckedObjectMemoryDataReport_checkedObjects](checkedObjects)
    }
}.ensuring { (res: EitherMut[Int, TTM_6_8_CheckedObjectMemoryDataReport_checkedObjects]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_6_8_CheckedObjectMemoryDataReport_checkedObjects_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TM_6_8_CheckedObjectMemoryDataReport_checkedObjects_ACN_Decode_pure(codec: ACN, TM_6_8_CheckedObjectMemoryDataReport_n: ULong): (ACN, EitherMut[Int, TTM_6_8_CheckedObjectMemoryDataReport_checkedObjects]) = {
    require(codec.base.bitStream.validate_offset_bits(5040L))
    val cpy = snapshot(codec)
    val res = TM_6_8_CheckedObjectMemoryDataReport_checkedObjects_ACN_Decode(cpy, TM_6_8_CheckedObjectMemoryDataReport_n)
    (cpy, res)
}

def TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid_checkedObjects_IsConstraintValid(pVal: TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid_checkedObjects): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = ((1 <= pVal.nCount) && (pVal.nCount <= 63)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TCheckedObject_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid_IsConstraintValid(pVal: TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TBaseMultipleMemid_IsConstraintValid(pVal.base_ID)
    if ret.isRight then
        ret = TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid_checkedObjects_IsConstraintValid(pVal.checkedObjects)
    ret
}

def TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid_checkedObjects_Initialize(): TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid_checkedObjects = TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid_checkedObjects(1, Vector.fill(63)(TCheckedObject_Initialize()))
def TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid_Initialize(): TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid = TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid(base_ID = TBaseMultipleMemid_Initialize(), checkedObjects = TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid_checkedObjects_Initialize())

@opaque @inlineOnce 
def TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid_ACN_Encode(pVal: TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(5112L))
    var i1: Int = 0
    TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_memory_ID = pVal.base_ID match
        case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(_) =>TMemory_ID.TmemId1

    /* Encode TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_memory_ID */
    val intVal_TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_memory_ID = TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_memory_ID match
        case TMemory_ID.TmemId1 => ULong.fromRaw(0L)

    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(0))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(intVal_TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_memory_ID)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(intVal_TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_memory_ID)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 5112L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode base_ID */
    TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_base_ID_ACN_Encode(codec, pVal, TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_memory_ID, pVal.base_ID) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 5080L, 8L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 40L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.base_ID match {
        case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
            8L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    val TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_n = ULong.fromRaw(pVal.checkedObjects.nCount)
    if TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_n < ULong.fromRaw(1) || TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_n > ULong.fromRaw(63) then
        return Left(860)
    /* Encode TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_n */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_n)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_n)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_3.base.bitStream, codec.base.bitStream, 5072L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 72L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    @ghost val codec_0_4 = snapshot(codec)
    /* Encode checkedObjects */
    TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_checkedObjects_ACN_Encode(codec, pVal, TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_n, pVal.checkedObjects) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 5112L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_3 = pVal.checkedObjects.size(codec_0_4.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 5112L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2 + size_3)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_base_ID_ACN_Encode(codec: ACN, pVal: TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid, TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_memory_ID: TMemory_ID, base_ID: TBaseMultipleMemid): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(8L))
    @ghost val oldCdc = snapshot(codec)
    TBaseMultipleMemid_IsConstraintValid(base_ID) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    base_ID match
        case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
            locally {
                ghostExpr {
                    @opaque @inlineOnce
                    def bitCountLemma(): Unit = ().ensuring(_ => GetBitCountUnsigned(ULong.fromRaw(255) - ULong.fromRaw(0)) == 8)
                    bitCountLemma()
                }
            }
            codec.base.encodeConstrainedPosWholeNumber(memId1, 0.toRawULong, 255.toRawULong)
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + base_ID.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_checkedObjects_Encode_loop(codec: ACN, checkedObjects: TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid_checkedObjects, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= checkedObjects.nCount))
    require((1 <= checkedObjects.nCount) && (checkedObjects.nCount <= checkedObjects.arr.size) && (checkedObjects.arr.size <= 63))
    require(codec.base.bitStream.validate_offset_bits((80L * (checkedObjects.nCount - i1))))
    decreases(checkedObjects.nCount - i1)
    if (i1 == checkedObjects.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 80L * (checkedObjects.nCount - i1), 80L)
        }
        TCheckedObject_ACN_Encode(checkedObjects.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(80L * (i1 + 1) == 80L * i1 + 80L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 80L * (checkedObjects.nCount - i1), 80L)
            check(codec.base.bitStream.validate_offset_bits(80L * (checkedObjects.nCount - (i1 + 1))))
        }
        val res = TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_checkedObjects_Encode_loop(codec, checkedObjects, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid_checkedObjects.sizeRange(checkedObjects.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, checkedObjects.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + checkedObjects.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid_checkedObjects.sizeRange(checkedObjects.arr, codecSnap1.base.bitStream.bitIndex, i1, checkedObjects.nCount) == checkedObjects.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid_checkedObjects.sizeRange(checkedObjects.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, checkedObjects.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid_checkedObjects.sizeRange(checkedObjects.arr, codecSnap1.base.bitStream.bitIndex, i1, checkedObjects.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid_checkedObjects.sizeRange(checkedObjects.arr, old(codec).base.bitStream.bitIndex, i1, checkedObjects.nCount)
    }
}



@opaque @inlineOnce
def TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_checkedObjects_ACN_Encode(codec: ACN, pVal: TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid, TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_n: ULong, checkedObjects: TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid_checkedObjects): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(5040L))
    @ghost val oldCdc = snapshot(codec)
    TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid_checkedObjects_IsConstraintValid(checkedObjects) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_checkedObjects_Encode_loop(codec, checkedObjects, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                checkedObjects.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
            ()
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + checkedObjects.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid] =
{
    require(codec.base.bitStream.validate_offset_bits(5112L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_memory_ID */
    val intVal_TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_memory_ID = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    val TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_memory_ID = intVal_TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_memory_ID.toRaw match
        case 0 => TMemory_ID.TmemId1
        case _ => return LeftMut(ERR_ACN_DECODE_TM_6_8_CHECKEDOBJECTMEMORYDATAREPORTMULTIPLEMEMID_MEMORY_ID)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 5112L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode base_ID */
    val pVal_base_ID = TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_base_ID_ACN_Decode(codec, TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_memory_ID) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 5080L, 8L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 40L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_base_ID match {
        case TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1) =>
            8L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_n */
    val TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_n = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_3.base.bitStream, codec.base.bitStream, 5072L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 72L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    @ghost val codec_0_4 = snapshot(codec)
    /* Decode checkedObjects */
    val pVal_checkedObjects = TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_checkedObjects_ACN_Decode(codec, TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_n) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 5112L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_3 = pVal_checkedObjects.size(codec_0_4.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 5112L)
    }
    val pVal = TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid(pVal_base_ID, pVal_checkedObjects)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2 + size_3)
    }

    TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid](l)
        case Right(_) => RightMut[ErrorCode, TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid]) =
{
    require(codec.base.bitStream.validate_offset_bits(5112L))
    val cpy = snapshot(codec)
    val res = TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_base_ID_ACN_Decode(codec: ACN, TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_memory_ID: TMemory_ID): EitherMut[Int, TBaseMultipleMemid] = {
    require(codec.base.bitStream.validate_offset_bits(8L))
    @ghost val oldCdc = snapshot(codec)
    val base_ID = TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_memory_ID match
        case TMemory_ID.TmemId1 =>
            locally {
                ghostExpr {
                    @opaque @inlineOnce
                    def bitCountLemma(): Unit = ().ensuring(_ => GetBitCountUnsigned(ULong.fromRaw(255) - ULong.fromRaw(0)) == 8)
                    bitCountLemma()
                }
            }
            val memId1 = codec.base.decodeConstrainedPosWholeNumber(ULong.fromRaw(0), ULong.fromRaw(255)) // uper:135
            TBaseMultipleMemid.BaseMultipleMemid_memId1_PRESENT(memId1)
    TBaseMultipleMemid_IsConstraintValid(base_ID) match {
        case Left(l) =>
            LeftMut[Int, TBaseMultipleMemid](l)
        case Right(_) =>
            RightMut[Int, TBaseMultipleMemid](base_ID)
    }
}.ensuring { (res: EitherMut[Int, TBaseMultipleMemid]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TBaseMultipleMemid_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_base_ID_ACN_Decode_pure(codec: ACN, TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_memory_ID: TMemory_ID): (ACN, EitherMut[Int, TBaseMultipleMemid]) = {
    require(codec.base.bitStream.validate_offset_bits(8L))
    val cpy = snapshot(codec)
    val res = TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_base_ID_ACN_Decode(cpy, TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_memory_ID)
    (cpy, res)
}

@opaque @inlineOnce
def TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_checkedObjects_Decode_loop(codec: ACN, nCount: Int, checkedObjects: Vector[TCheckedObject], i1: Int): EitherMut[Int, Vector[TCheckedObject]] = {
    require((1 <= nCount) && (nCount <= 63))
    require((0 <= i1) && (i1 <= nCount))
    require(checkedObjects.size == i1)
    require(codec.base.bitStream.validate_offset_bits((80L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(checkedObjects)
            vecRangesEqSlicedLemma(checkedObjects, checkedObjects, 0, checkedObjects.size, 0, i1)
        }
        RightMut[Int, Vector[TCheckedObject]](checkedObjects)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 80L * (nCount - i1), 80L)
        }
        val checkedObjects_arr_i1_ = TCheckedObject_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(80L * (i1 + 1) == 80L * i1 + 80L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 80L * (nCount - i1), 80L)
            check(codec.base.bitStream.validate_offset_bits(80L * (nCount - (i1 + 1))))
        }
        val res = TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_checkedObjects_Decode_loop(codec, nCount, checkedObjects.append(checkedObjects_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(checkedObjects, newVec, checkedObjects_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(checkedObjects.append(checkedObjects_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(checkedObjects.list, checkedObjects_arr_i1_, i1)
                    Vector.listApplyEqVecApply(checkedObjects.append(checkedObjects_arr_i1_), i1)
                    check(checkedObjects_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TCheckedObject]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(checkedObjects, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid_checkedObjects.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_checkedObjects_ACN_Decode(codec: ACN, TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_n: ULong): EitherMut[Int, TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid_checkedObjects] = {
    require(codec.base.bitStream.validate_offset_bits(5040L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val checkedObjects =
        if ((ULong.fromRaw(1) <= TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_n) && (TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_n <= ULong.fromRaw(63))) then
            val checkedObjects_nCount = TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_n.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val checkedObjects = TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_checkedObjects_Decode_loop(codec, checkedObjects_nCount, Vector.empty[TCheckedObject], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val checkedObjects = TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid_checkedObjects(checkedObjects_nCount, bdg)
                    ghostExpr {
                        checkedObjects.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    checkedObjects
            }
            checkedObjects
        else return LeftMut(ERR_ACN_DECODE_TM_6_8_CHECKEDOBJECTMEMORYDATAREPORTMULTIPLEMEMID_CHECKEDOBJECTS)
    TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid_checkedObjects_IsConstraintValid(checkedObjects) match {
        case Left(l) =>
            LeftMut[Int, TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid_checkedObjects](l)
        case Right(_) =>
            RightMut[Int, TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid_checkedObjects](checkedObjects)
    }
}.ensuring { (res: EitherMut[Int, TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid_checkedObjects]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid_checkedObjects_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_checkedObjects_ACN_Decode_pure(codec: ACN, TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_n: ULong): (ACN, EitherMut[Int, TTM_6_8_CheckedObjectMemoryDataReportMultipleMemid_checkedObjects]) = {
    require(codec.base.bitStream.validate_offset_bits(5040L))
    val cpy = snapshot(codec)
    val res = TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_checkedObjects_ACN_Decode(cpy, TM_6_8_CheckedObjectMemoryDataReportMultipleMemid_n)
    (cpy, res)
}