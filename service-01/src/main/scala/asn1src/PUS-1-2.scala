/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._


def TTM_1_2_FailedAcceptanceVerificationReport_request_ID_IsConstraintValid(@annotation.unused pVal: TTM_1_2_FailedAcceptanceVerificationReport_request_ID): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = Right(0)
    ret
}

def TTM_1_2_FailedAcceptanceVerificationReport_IsConstraintValid(pVal: TTM_1_2_FailedAcceptanceVerificationReport): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TTM_1_2_FailedAcceptanceVerificationReport_request_ID_IsConstraintValid(pVal.request_ID)
    if ret.isRight then
        ret = TAcceptanceFailureNotice_IsConstraintValid(pVal.failureNotice)
    ret
}

def TTM_1_2_FailedAcceptanceVerificationReport_request_ID_Initialize(): TTM_1_2_FailedAcceptanceVerificationReport_request_ID = TTM_1_2_FailedAcceptanceVerificationReport_request_ID(Vector.fill(4)(0.toRawUByte))
def TTM_1_2_FailedAcceptanceVerificationReport_Initialize(): TTM_1_2_FailedAcceptanceVerificationReport = TTM_1_2_FailedAcceptanceVerificationReport(request_ID = TTM_1_2_FailedAcceptanceVerificationReport_request_ID(Vector.fill(4)(0.toRawUByte)), failureNotice = TAcceptanceFailureNotice_Initialize())

@opaque @inlineOnce 
def TTM_1_2_FailedAcceptanceVerificationReport_ACN_Encode(pVal: TTM_1_2_FailedAcceptanceVerificationReport, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(33L))
    TTM_1_2_FailedAcceptanceVerificationReport_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode request_ID */
    codec.base.encodeOctetString_no_length_vec(pVal.request_ID.arr, 4.toInt)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 33L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode failureNotice */
    TAcceptanceFailureNotice_ACN_Encode(pVal.failureNotice, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 33L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.failureNotice.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 33L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTM_1_2_FailedAcceptanceVerificationReport_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTM_1_2_FailedAcceptanceVerificationReport] =
{
    require(codec.base.bitStream.validate_offset_bits(33L))

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode request_ID */
    val pVal_request_ID = TTM_1_2_FailedAcceptanceVerificationReport_request_ID(codec.base.decodeOctetString_no_length_vec(4))
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 33L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode failureNotice */
    val pVal_failureNotice = TAcceptanceFailureNotice_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 33L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_failureNotice.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 33L)
    }
    val pVal = TTM_1_2_FailedAcceptanceVerificationReport(pVal_request_ID, pVal_failureNotice)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }

    TTM_1_2_FailedAcceptanceVerificationReport_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTM_1_2_FailedAcceptanceVerificationReport](l)
        case Right(_) => RightMut[ErrorCode, TTM_1_2_FailedAcceptanceVerificationReport](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTM_1_2_FailedAcceptanceVerificationReport]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_1_2_FailedAcceptanceVerificationReport_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTM_1_2_FailedAcceptanceVerificationReport_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTM_1_2_FailedAcceptanceVerificationReport]) =
{
    require(codec.base.bitStream.validate_offset_bits(33L))
    val cpy = snapshot(codec)
    val res = TTM_1_2_FailedAcceptanceVerificationReport_ACN_Decode(cpy)
    (cpy, res)
}