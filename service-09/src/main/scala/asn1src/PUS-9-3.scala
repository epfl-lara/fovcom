/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._


def TTM_9_3_CdsTimeReport_IsConstraintValid(pVal: TTM_9_3_CdsTimeReport): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    pVal.rateExponentialValue match
        case SomeMut(rateExponentialValue) =>
            ret = TPUSC_UINT32_IsConstraintValid(rateExponentialValue)
        case NoneMut() =>
    if ret.isRight then
        ret = TCDS_AbsoluteTime_PFC_2_IsConstraintValid(pVal.spacecraftTime)
        if ret.isRight then
            pVal.spacecraftTimeReferenceStatus match
                case SomeMut(spacecraftTimeReferenceStatus) =>
                    ret = TSpacecraftTimeReferenceStatus_IsConstraintValid(spacecraftTimeReferenceStatus)
                case NoneMut() =>
    if ret.isRight then
        ret = (pVal.rateExponentialValue.isDefined == true) match
            case true =>
                Right(0)
            case false =>
                Left(45)
        if ret.isRight then
            ret = (pVal.spacecraftTimeReferenceStatus.isDefined == true) match
                case true =>
                    Right(0)
                case false =>
                    Left(45)
    ret
}

def TTM_9_3_CdsTimeReport_Initialize(): TTM_9_3_CdsTimeReport = TTM_9_3_CdsTimeReport(rateExponentialValue = SomeMut(ULong.fromRaw(0L)), spacecraftTime = TCDS_AbsoluteTime_PFC_2_Initialize(), spacecraftTimeReferenceStatus = SomeMut(ULong.fromRaw(0L)))

@opaque @inlineOnce 
def TTM_9_3_CdsTimeReport_ACN_Encode(pVal: TTM_9_3_CdsTimeReport, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(100L))
    TTM_9_3_CdsTimeReport_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    TM_9_3_CdsTimeReport_rateExponentialValue_Optional_ACN_Encode(codec, pVal, pVal.rateExponentialValue) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 100L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = pVal.rateExponentialValue match {
        case SomeMut(v) =>
            32L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode spacecraftTime */
    TCDS_AbsoluteTime_PFC_2_ACN_Encode(pVal.spacecraftTime, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 68L, 64L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 96L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.spacecraftTime.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    TM_9_3_CdsTimeReport_spacecraftTimeReferenceStatus_Optional_ACN_Encode(codec, pVal, pVal.spacecraftTimeReferenceStatus) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 100L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = pVal.spacecraftTimeReferenceStatus match {
        case SomeMut(v) =>
            4L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 100L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TM_9_3_CdsTimeReport_rateExponentialValue_Optional_ACN_Encode(codec: ACN, pVal: TTM_9_3_CdsTimeReport, rateExponentialValue: OptionMut[ULong]): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(32L))
    @ghost val oldCdc = snapshot(codec)
    /* Encode rateExponentialValue */
    /* marked as ALWAYS PRESENT, so it must be Some */
    rateExponentialValue match
        case SomeMut(rateExponentialValue) =>
            TPUSC_UINT32_ACN_Encode(rateExponentialValue, codec, false) match // uper:6
                case Right(_) =>
                case Left(err) => return Left(err)
        case NoneMut() => return Left(628)
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 32L
    }
}



@opaque @inlineOnce
def TM_9_3_CdsTimeReport_spacecraftTimeReferenceStatus_Optional_ACN_Encode(codec: ACN, pVal: TTM_9_3_CdsTimeReport, spacecraftTimeReferenceStatus: OptionMut[ULong]): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(4L))
    @ghost val oldCdc = snapshot(codec)
    /* Encode spacecraftTimeReferenceStatus */
    /* marked as ALWAYS PRESENT, so it must be Some */
    spacecraftTimeReferenceStatus match
        case SomeMut(spacecraftTimeReferenceStatus) =>
            TSpacecraftTimeReferenceStatus_ACN_Encode(spacecraftTimeReferenceStatus, codec, false) match // uper:6
                case Right(_) =>
                case Left(err) => return Left(err)
        case NoneMut() => return Left(628)
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 4L
    }
}



@opaque @inlineOnce 
def TTM_9_3_CdsTimeReport_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTM_9_3_CdsTimeReport] =
{
    require(codec.base.bitStream.validate_offset_bits(100L))

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val pVal_rateExponentialValue = TM_9_3_CdsTimeReport_rateExponentialValue_Optional_ACN_Decode(codec) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 100L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = pVal_rateExponentialValue match {
        case SomeMut(v) =>
            32L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode spacecraftTime */
    val pVal_spacecraftTime = TCDS_AbsoluteTime_PFC_2_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 68L, 64L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 96L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_spacecraftTime.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    val pVal_spacecraftTimeReferenceStatus = TM_9_3_CdsTimeReport_spacecraftTimeReferenceStatus_Optional_ACN_Decode(codec) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 100L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = pVal_spacecraftTimeReferenceStatus match {
        case SomeMut(v) =>
            4L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 100L)
    }
    val pVal = TTM_9_3_CdsTimeReport(pVal_rateExponentialValue, pVal_spacecraftTime, pVal_spacecraftTimeReferenceStatus)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }

    TTM_9_3_CdsTimeReport_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTM_9_3_CdsTimeReport](l)
        case Right(_) => RightMut[ErrorCode, TTM_9_3_CdsTimeReport](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTM_9_3_CdsTimeReport]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_9_3_CdsTimeReport_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTM_9_3_CdsTimeReport_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTM_9_3_CdsTimeReport]) =
{
    require(codec.base.bitStream.validate_offset_bits(100L))
    val cpy = snapshot(codec)
    val res = TTM_9_3_CdsTimeReport_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def TM_9_3_CdsTimeReport_rateExponentialValue_Optional_ACN_Decode(codec: ACN): EitherMut[Int, OptionMut[ULong]] = {
    require(codec.base.bitStream.validate_offset_bits(32L))
    @ghost val oldCdc = snapshot(codec)
    /* Decode rateExponentialValue */
    /* marked as ALWAYS PRESENT */
    val rateExponentialValue: OptionMut[TPUSC_UINT32] =
        val pVal_rateExponentialValue = TPUSC_UINT32_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        SomeMut(pVal_rateExponentialValue)
    RightMut[Int, OptionMut[ULong]](rateExponentialValue)
}.ensuring { (res: EitherMut[Int, OptionMut[ULong]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            resVal.isDefined && old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 32L
    }
}



@ghost @pure
def TM_9_3_CdsTimeReport_rateExponentialValue_Optional_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[Int, OptionMut[ULong]]) = {
    require(codec.base.bitStream.validate_offset_bits(32L))
    val cpy = snapshot(codec)
    val res = TM_9_3_CdsTimeReport_rateExponentialValue_Optional_ACN_Decode(cpy)
    (cpy, res)
}



@opaque @inlineOnce
def TM_9_3_CdsTimeReport_spacecraftTimeReferenceStatus_Optional_ACN_Decode(codec: ACN): EitherMut[Int, OptionMut[ULong]] = {
    require(codec.base.bitStream.validate_offset_bits(4L))
    @ghost val oldCdc = snapshot(codec)
    /* Decode spacecraftTimeReferenceStatus */
    /* marked as ALWAYS PRESENT */
    val spacecraftTimeReferenceStatus: OptionMut[TSpacecraftTimeReferenceStatus] =
        val pVal_spacecraftTimeReferenceStatus = TSpacecraftTimeReferenceStatus_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        SomeMut(pVal_spacecraftTimeReferenceStatus)
    RightMut[Int, OptionMut[ULong]](spacecraftTimeReferenceStatus)
}.ensuring { (res: EitherMut[Int, OptionMut[ULong]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            resVal.isDefined && old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 4L
    }
}



@ghost @pure
def TM_9_3_CdsTimeReport_spacecraftTimeReferenceStatus_Optional_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[Int, OptionMut[ULong]]) = {
    require(codec.base.bitStream.validate_offset_bits(4L))
    val cpy = snapshot(codec)
    val res = TM_9_3_CdsTimeReport_spacecraftTimeReferenceStatus_Optional_ACN_Decode(cpy)
    (cpy, res)
}

