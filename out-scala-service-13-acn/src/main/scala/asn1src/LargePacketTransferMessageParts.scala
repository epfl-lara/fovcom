/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

val uplinkMaximumPartSize: TPUSC_UINT32 = ULong.fromRaw(1024L) // variables:188
val downlinkMaximumPartSize: TPUSC_UINT32 = ULong.fromRaw(1024L) // variables:188

def TUplinkMessagePart_part_IsConstraintValid(@annotation.unused pVal: TUplinkMessagePart_part): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = Right(0)
    ret
}

def TUplinkMessagePart_IsConstraintValid(pVal: TUplinkMessagePart): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TPUSC_UINT32_IsConstraintValid(pVal.largeMessageTransactionIdentifier)
    if ret.isRight then
        ret = TPUSC_UINT32_IsConstraintValid(pVal.partSequenceNumber)
        if ret.isRight then
            ret = TUplinkMessagePart_part_IsConstraintValid(pVal.part)
    ret
}

def TUplinkMessagePart_part_Initialize(): TUplinkMessagePart_part = TUplinkMessagePart_part(Vector.fill(1024)(0.toRawUByte))
def TUplinkMessagePart_Initialize(): TUplinkMessagePart = TUplinkMessagePart(largeMessageTransactionIdentifier = ULong.fromRaw(0L), partSequenceNumber = ULong.fromRaw(0L), part = TUplinkMessagePart_part(Vector.fill(1024)(0.toRawUByte)))

@opaque @inlineOnce 
def TUplinkMessagePart_ACN_Encode(pVal: TUplinkMessagePart, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(8256L))
    TUplinkMessagePart_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode largeMessageTransactionIdentifier */
    TPUSC_UINT32_ACN_Encode(pVal.largeMessageTransactionIdentifier, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 8256L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode partSequenceNumber */
    TPUSC_UINT32_ACN_Encode(pVal.partSequenceNumber, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 8224L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode part */
    codec.base.encodeOctetString_no_length_vec(pVal.part.arr, 1024.toInt)
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 8256L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = 8192L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 8256L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TUplinkMessagePart_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TUplinkMessagePart] =
{
    require(codec.base.bitStream.validate_offset_bits(8256L))

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode largeMessageTransactionIdentifier */
    val pVal_largeMessageTransactionIdentifier = TPUSC_UINT32_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 8256L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode partSequenceNumber */
    val pVal_partSequenceNumber = TPUSC_UINT32_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 8224L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode part */
    val pVal_part = TUplinkMessagePart_part(codec.base.decodeOctetString_no_length_vec(1024))
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 8256L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = 8192L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 8256L)
    }
    val pVal = TUplinkMessagePart(pVal_largeMessageTransactionIdentifier, pVal_partSequenceNumber, pVal_part)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }

    TUplinkMessagePart_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TUplinkMessagePart](l)
        case Right(_) => RightMut[ErrorCode, TUplinkMessagePart](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TUplinkMessagePart]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TUplinkMessagePart_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TUplinkMessagePart_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TUplinkMessagePart]) =
{
    require(codec.base.bitStream.validate_offset_bits(8256L))
    val cpy = snapshot(codec)
    val res = TUplinkMessagePart_ACN_Decode(cpy)
    (cpy, res)
}

def TDownlinkMessagePart_part_IsConstraintValid(@annotation.unused pVal: TDownlinkMessagePart_part): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = Right(0)
    ret
}

def TDownlinkMessagePart_IsConstraintValid(pVal: TDownlinkMessagePart): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TPUSC_UINT32_IsConstraintValid(pVal.largeMessageTransactionIdentifier)
    if ret.isRight then
        ret = TPUSC_UINT32_IsConstraintValid(pVal.partSequenceNumber)
        if ret.isRight then
            ret = TDownlinkMessagePart_part_IsConstraintValid(pVal.part)
    ret
}

def TDownlinkMessagePart_part_Initialize(): TDownlinkMessagePart_part = TDownlinkMessagePart_part(Vector.fill(1024)(0.toRawUByte))
def TDownlinkMessagePart_Initialize(): TDownlinkMessagePart = TDownlinkMessagePart(largeMessageTransactionIdentifier = ULong.fromRaw(0L), partSequenceNumber = ULong.fromRaw(0L), part = TDownlinkMessagePart_part(Vector.fill(1024)(0.toRawUByte)))

@opaque @inlineOnce 
def TDownlinkMessagePart_ACN_Encode(pVal: TDownlinkMessagePart, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(8256L))
    TDownlinkMessagePart_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode largeMessageTransactionIdentifier */
    TPUSC_UINT32_ACN_Encode(pVal.largeMessageTransactionIdentifier, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 8256L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode partSequenceNumber */
    TPUSC_UINT32_ACN_Encode(pVal.partSequenceNumber, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 8224L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode part */
    codec.base.encodeOctetString_no_length_vec(pVal.part.arr, 1024.toInt)
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 8256L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = 8192L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 8256L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TDownlinkMessagePart_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TDownlinkMessagePart] =
{
    require(codec.base.bitStream.validate_offset_bits(8256L))

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode largeMessageTransactionIdentifier */
    val pVal_largeMessageTransactionIdentifier = TPUSC_UINT32_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 8256L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode partSequenceNumber */
    val pVal_partSequenceNumber = TPUSC_UINT32_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 8224L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 64L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode part */
    val pVal_part = TDownlinkMessagePart_part(codec.base.decodeOctetString_no_length_vec(1024))
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 8256L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = 8192L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 8256L)
    }
    val pVal = TDownlinkMessagePart(pVal_largeMessageTransactionIdentifier, pVal_partSequenceNumber, pVal_part)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }

    TDownlinkMessagePart_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TDownlinkMessagePart](l)
        case Right(_) => RightMut[ErrorCode, TDownlinkMessagePart](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TDownlinkMessagePart]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TDownlinkMessagePart_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TDownlinkMessagePart_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TDownlinkMessagePart]) =
{
    require(codec.base.bitStream.validate_offset_bits(8256L))
    val cpy = snapshot(codec)
    val res = TDownlinkMessagePart_ACN_Decode(cpy)
    (cpy, res)
}