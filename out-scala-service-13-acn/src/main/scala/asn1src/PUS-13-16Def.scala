/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

sealed trait TLargePacketFailureReason:
    def i: Int
object TLargePacketFailureReason:
    case object TfailureReason extends TLargePacketFailureReason:
        override def i: Int = 0

// please use the following macros to avoid breaking code.
// type TfailureReason = TLargePacketFailureReason.failureReason

@inline @cCode.inline val ERR_LARGEPACKETFAILUREREASON: Int = 166 /*failureReason */

 

@inline @cCode.inline val ERR_ACN_ENCODE_LARGEPACKETFAILUREREASON: Int = 169 /*  */
@inline @cCode.inline val TLargePacketFailureReason_REQUIRED_BYTES_FOR_ACN_ENCODING = 4
@inline @cCode.inline val TLargePacketFailureReason_REQUIRED_BITS_FOR_ACN_ENCODING = 32

@inline @cCode.inline val ERR_ACN_DECODE_LARGEPACKETFAILUREREASON: Int = 170 /*  */
/*-- TTM_13_16_LargePacketUplinkAbortionReport --------------------------------------------*/

case class TTM_13_16_LargePacketUplinkAbortionReport (
    largeMessageTransactionIdentifier: TPUSC_UINT32, 
    largePacketFailureReason: TLargePacketFailureReason
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        val size_0 = 32L
        val size_1 = 32L
        size_0 + size_1
    }.ensuring { (res: Long) => 
        res == 64L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775743L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775743L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775743L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775743L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TM_13_16_LARGEPACKETUPLINKABORTIONREPORT: Int = 161 /* */
@inline @cCode.inline val ERR_TM_13_16_LARGEPACKETUPLINKABORTIONREPORT_LARGEMESSAGETRANSACTIONIDENTIFIER_2: Int = 146 /* */
@inline @cCode.inline val ERR_TM_13_16_LARGEPACKETUPLINKABORTIONREPORT_LARGEPACKETFAILUREREASON_2: Int = 156 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_TM_13_16_LARGEPACKETUPLINKABORTIONREPORT: Int = 164 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_13_16_LARGEPACKETUPLINKABORTIONREPORT_LARGEMESSAGETRANSACTIONIDENTIFIER_2: Int = 149 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_13_16_LARGEPACKETUPLINKABORTIONREPORT_LARGEPACKETFAILUREREASON_2: Int = 159 /*  */
@inline @cCode.inline val TTM_13_16_LargePacketUplinkAbortionReport_REQUIRED_BYTES_FOR_ACN_ENCODING = 8
@inline @cCode.inline val TTM_13_16_LargePacketUplinkAbortionReport_REQUIRED_BITS_FOR_ACN_ENCODING = 64

@inline @cCode.inline val ERR_ACN_DECODE_TM_13_16_LARGEPACKETUPLINKABORTIONREPORT: Int = 165 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_13_16_LARGEPACKETUPLINKABORTIONREPORT_LARGEMESSAGETRANSACTIONIDENTIFIER_2: Int = 150 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_13_16_LARGEPACKETUPLINKABORTIONREPORT_LARGEPACKETFAILUREREASON_2: Int = 160 /*  */


