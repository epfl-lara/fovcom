/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TUplinkMessagePart --------------------------------------------*/
case class TUplinkMessagePart_part(arr: Vector[UByte])
{
    require(this.arr.length == 1024)
}

case class TUplinkMessagePart (
    largeMessageTransactionIdentifier: TPUSC_UINT32, 
    partSequenceNumber: TPUSC_UINT32, 
    part: TUplinkMessagePart_part
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854767551L))
        val size_0 = 32L
        val size_1 = 32L
        val size_2 = 8192L
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        res == 8256L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767551L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767551L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 8192L
        val size_2_otherOffset = 8192L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767551L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767551L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 8192L
        val size_2_otherOffset = 8192L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767551L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767551L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 8192L
        val size_2_otherOffset = 8192L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767551L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767551L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 8192L
        val size_2_otherOffset = 8192L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_UPLINKMESSAGEPART_PART: Int = 21 /*(SIZE(maximumPartSize)) */

@inline @cCode.inline val ERR_UPLINKMESSAGEPART: Int = 26 /* */
@inline @cCode.inline val ERR_UPLINKMESSAGEPART_LARGEMESSAGETRANSACTIONIDENTIFIER_2: Int = 6 /* */
@inline @cCode.inline val ERR_UPLINKMESSAGEPART_PARTSEQUENCENUMBER_2: Int = 16 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_UPLINKMESSAGEPART: Int = 29 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_UPLINKMESSAGEPART_LARGEMESSAGETRANSACTIONIDENTIFIER_2: Int = 9 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_UPLINKMESSAGEPART_PARTSEQUENCENUMBER_2: Int = 19 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_UPLINKMESSAGEPART_PART: Int = 24 /*  */
@inline @cCode.inline val TUplinkMessagePart_REQUIRED_BYTES_FOR_ACN_ENCODING = 1032
@inline @cCode.inline val TUplinkMessagePart_REQUIRED_BITS_FOR_ACN_ENCODING = 8256

@inline @cCode.inline val ERR_ACN_DECODE_UPLINKMESSAGEPART: Int = 30 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_UPLINKMESSAGEPART_LARGEMESSAGETRANSACTIONIDENTIFIER_2: Int = 10 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_UPLINKMESSAGEPART_PARTSEQUENCENUMBER_2: Int = 20 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_UPLINKMESSAGEPART_PART: Int = 25 /*  */
/*-- TDownlinkMessagePart --------------------------------------------*/
case class TDownlinkMessagePart_part(arr: Vector[UByte])
{
    require(this.arr.length == 1024)
}

case class TDownlinkMessagePart (
    largeMessageTransactionIdentifier: TPUSC_UINT32, 
    partSequenceNumber: TPUSC_UINT32, 
    part: TDownlinkMessagePart_part
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854767551L))
        val size_0 = 32L
        val size_1 = 32L
        val size_2 = 8192L
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        res == 8256L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767551L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767551L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 8192L
        val size_2_otherOffset = 8192L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767551L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767551L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 8192L
        val size_2_otherOffset = 8192L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767551L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767551L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 8192L
        val size_2_otherOffset = 8192L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767551L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767551L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 8192L
        val size_2_otherOffset = 8192L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_DOWNLINKMESSAGEPART_PART: Int = 51 /*(SIZE(maximumPartSize)) */

@inline @cCode.inline val ERR_DOWNLINKMESSAGEPART: Int = 56 /* */
@inline @cCode.inline val ERR_DOWNLINKMESSAGEPART_LARGEMESSAGETRANSACTIONIDENTIFIER_2: Int = 36 /* */
@inline @cCode.inline val ERR_DOWNLINKMESSAGEPART_PARTSEQUENCENUMBER_2: Int = 46 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_DOWNLINKMESSAGEPART: Int = 59 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_DOWNLINKMESSAGEPART_LARGEMESSAGETRANSACTIONIDENTIFIER_2: Int = 39 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_DOWNLINKMESSAGEPART_PARTSEQUENCENUMBER_2: Int = 49 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_DOWNLINKMESSAGEPART_PART: Int = 54 /*  */
@inline @cCode.inline val TDownlinkMessagePart_REQUIRED_BYTES_FOR_ACN_ENCODING = 1032
@inline @cCode.inline val TDownlinkMessagePart_REQUIRED_BITS_FOR_ACN_ENCODING = 8256

@inline @cCode.inline val ERR_ACN_DECODE_DOWNLINKMESSAGEPART: Int = 60 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_DOWNLINKMESSAGEPART_LARGEMESSAGETRANSACTIONIDENTIFIER_2: Int = 40 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_DOWNLINKMESSAGEPART_PARTSEQUENCENUMBER_2: Int = 50 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_DOWNLINKMESSAGEPART_PART: Int = 55 /*  */

// @inline @cCode.inline val uplinkMaximumPartSize: TPUSC_UINT32 = ULong.fromRaw(1024L) // defined in body
// @inline @cCode.inline val downlinkMaximumPartSize: TPUSC_UINT32 = ULong.fromRaw(1024L) // defined in body

