/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

val maxTC_12_5_ParameterMonitoringDefinitionCount: Int = 4095 // variables:188

def TTC_12_5_AddParameterMonitoringDefinitions_definitions_IsConstraintValid(pVal: TTC_12_5_AddParameterMonitoringDefinitions_definitions): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = ((1 <= pVal.nCount) && (pVal.nCount <= 4095)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TParameterMonitoringDefinition_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TTC_12_5_AddParameterMonitoringDefinitions_IsConstraintValid(pVal: TTC_12_5_AddParameterMonitoringDefinitions): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TTC_12_5_AddParameterMonitoringDefinitions_definitions_IsConstraintValid(pVal.definitions)
    ret
}

def TTC_12_5_AddParameterMonitoringDefinitions_definitions_Initialize(): TTC_12_5_AddParameterMonitoringDefinitions_definitions = TTC_12_5_AddParameterMonitoringDefinitions_definitions(1, Vector.fill(4095)(TParameterMonitoringDefinition_Initialize()))
def TTC_12_5_AddParameterMonitoringDefinitions_Initialize(): TTC_12_5_AddParameterMonitoringDefinitions = TTC_12_5_AddParameterMonitoringDefinitions(definitions = TTC_12_5_AddParameterMonitoringDefinitions_definitions_Initialize())

@opaque @inlineOnce 
def TTC_12_5_AddParameterMonitoringDefinitions_ACN_Encode(pVal: TTC_12_5_AddParameterMonitoringDefinitions, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(1187582L))
    var i1: Int = 0
    TTC_12_5_AddParameterMonitoringDefinitions_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val TC_12_5_AddParameterMonitoringDefinitions_n = ULong.fromRaw(pVal.definitions.nCount)
    if TC_12_5_AddParameterMonitoringDefinitions_n < ULong.fromRaw(1) || TC_12_5_AddParameterMonitoringDefinitions_n > ULong.fromRaw(4095) then
        return Left(860)
    /* Encode TC_12_5_AddParameterMonitoringDefinitions_n */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(TC_12_5_AddParameterMonitoringDefinitions_n)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(TC_12_5_AddParameterMonitoringDefinitions_n)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 1187582L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode definitions */
    TC_12_5_AddParameterMonitoringDefinitions_definitions_ACN_Encode(codec, pVal, TC_12_5_AddParameterMonitoringDefinitions_n, pVal.definitions) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 1187582L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.definitions.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 1187582L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TC_12_5_AddParameterMonitoringDefinitions_definitions_Encode_loop(codec: ACN, definitions: TTC_12_5_AddParameterMonitoringDefinitions_definitions, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= definitions.nCount))
    require((1 <= definitions.nCount) && (definitions.nCount <= definitions.arr.size) && (definitions.arr.size <= 4095))
    require(codec.base.bitStream.validate_offset_bits((290L * (definitions.nCount - i1))))
    decreases(definitions.nCount - i1)
    if (i1 == definitions.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 290L * (definitions.nCount - i1), 290L)
        }
        TParameterMonitoringDefinition_ACN_Encode(definitions.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(290L * (i1 + 1) == 290L * i1 + 290L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 290L * (definitions.nCount - i1), 290L)
            check(codec.base.bitStream.validate_offset_bits(290L * (definitions.nCount - (i1 + 1))))
        }
        val res = TC_12_5_AddParameterMonitoringDefinitions_definitions_Encode_loop(codec, definitions, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TTC_12_5_AddParameterMonitoringDefinitions_definitions.sizeRange(definitions.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, definitions.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + definitions.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TTC_12_5_AddParameterMonitoringDefinitions_definitions.sizeRange(definitions.arr, codecSnap1.base.bitStream.bitIndex, i1, definitions.nCount) == definitions.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TTC_12_5_AddParameterMonitoringDefinitions_definitions.sizeRange(definitions.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, definitions.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TTC_12_5_AddParameterMonitoringDefinitions_definitions.sizeRange(definitions.arr, codecSnap1.base.bitStream.bitIndex, i1, definitions.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTC_12_5_AddParameterMonitoringDefinitions_definitions.sizeRange(definitions.arr, old(codec).base.bitStream.bitIndex, i1, definitions.nCount)
    }
}



@opaque @inlineOnce
def TC_12_5_AddParameterMonitoringDefinitions_definitions_ACN_Encode(codec: ACN, pVal: TTC_12_5_AddParameterMonitoringDefinitions, TC_12_5_AddParameterMonitoringDefinitions_n: ULong, definitions: TTC_12_5_AddParameterMonitoringDefinitions_definitions): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(1187550L))
    @ghost val oldCdc = snapshot(codec)
    TTC_12_5_AddParameterMonitoringDefinitions_definitions_IsConstraintValid(definitions) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    TC_12_5_AddParameterMonitoringDefinitions_definitions_Encode_loop(codec, definitions, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                definitions.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
            ()
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + definitions.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTC_12_5_AddParameterMonitoringDefinitions_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTC_12_5_AddParameterMonitoringDefinitions] =
{
    require(codec.base.bitStream.validate_offset_bits(1187582L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode TC_12_5_AddParameterMonitoringDefinitions_n */
    val TC_12_5_AddParameterMonitoringDefinitions_n = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 1187582L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode definitions */
    val pVal_definitions = TC_12_5_AddParameterMonitoringDefinitions_definitions_ACN_Decode(codec, TC_12_5_AddParameterMonitoringDefinitions_n) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 1187582L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_definitions.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 1187582L)
    }
    val pVal = TTC_12_5_AddParameterMonitoringDefinitions(pVal_definitions)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }

    TTC_12_5_AddParameterMonitoringDefinitions_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTC_12_5_AddParameterMonitoringDefinitions](l)
        case Right(_) => RightMut[ErrorCode, TTC_12_5_AddParameterMonitoringDefinitions](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTC_12_5_AddParameterMonitoringDefinitions]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_12_5_AddParameterMonitoringDefinitions_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTC_12_5_AddParameterMonitoringDefinitions_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTC_12_5_AddParameterMonitoringDefinitions]) =
{
    require(codec.base.bitStream.validate_offset_bits(1187582L))
    val cpy = snapshot(codec)
    val res = TTC_12_5_AddParameterMonitoringDefinitions_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def TC_12_5_AddParameterMonitoringDefinitions_definitions_Decode_loop(codec: ACN, nCount: Int, definitions: Vector[TParameterMonitoringDefinition], i1: Int): EitherMut[Int, Vector[TParameterMonitoringDefinition]] = {
    require((1 <= nCount) && (nCount <= 4095))
    require((0 <= i1) && (i1 <= nCount))
    require(definitions.size == i1)
    require(codec.base.bitStream.validate_offset_bits((290L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(definitions)
            vecRangesEqSlicedLemma(definitions, definitions, 0, definitions.size, 0, i1)
        }
        RightMut[Int, Vector[TParameterMonitoringDefinition]](definitions)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 290L * (nCount - i1), 290L)
        }
        val definitions_arr_i1_ = TParameterMonitoringDefinition_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(290L * (i1 + 1) == 290L * i1 + 290L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 290L * (nCount - i1), 290L)
            check(codec.base.bitStream.validate_offset_bits(290L * (nCount - (i1 + 1))))
        }
        val res = TC_12_5_AddParameterMonitoringDefinitions_definitions_Decode_loop(codec, nCount, definitions.append(definitions_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(definitions, newVec, definitions_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(definitions.append(definitions_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(definitions.list, definitions_arr_i1_, i1)
                    Vector.listApplyEqVecApply(definitions.append(definitions_arr_i1_), i1)
                    check(definitions_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TParameterMonitoringDefinition]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(definitions, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTC_12_5_AddParameterMonitoringDefinitions_definitions.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def TC_12_5_AddParameterMonitoringDefinitions_definitions_ACN_Decode(codec: ACN, TC_12_5_AddParameterMonitoringDefinitions_n: ULong): EitherMut[Int, TTC_12_5_AddParameterMonitoringDefinitions_definitions] = {
    require(codec.base.bitStream.validate_offset_bits(1187550L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val definitions =
        if ((ULong.fromRaw(1) <= TC_12_5_AddParameterMonitoringDefinitions_n) && (TC_12_5_AddParameterMonitoringDefinitions_n <= ULong.fromRaw(4095))) then
            val definitions_nCount = TC_12_5_AddParameterMonitoringDefinitions_n.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val definitions = TC_12_5_AddParameterMonitoringDefinitions_definitions_Decode_loop(codec, definitions_nCount, Vector.empty[TParameterMonitoringDefinition], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val definitions = TTC_12_5_AddParameterMonitoringDefinitions_definitions(definitions_nCount, bdg)
                    ghostExpr {
                        definitions.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    definitions
            }
            definitions
        else return LeftMut(ERR_ACN_DECODE_TC_12_5_ADDPARAMETERMONITORINGDEFINITIONS_DEFINITIONS)
    TTC_12_5_AddParameterMonitoringDefinitions_definitions_IsConstraintValid(definitions) match {
        case Left(l) =>
            LeftMut[Int, TTC_12_5_AddParameterMonitoringDefinitions_definitions](l)
        case Right(_) =>
            RightMut[Int, TTC_12_5_AddParameterMonitoringDefinitions_definitions](definitions)
    }
}.ensuring { (res: EitherMut[Int, TTC_12_5_AddParameterMonitoringDefinitions_definitions]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_12_5_AddParameterMonitoringDefinitions_definitions_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TC_12_5_AddParameterMonitoringDefinitions_definitions_ACN_Decode_pure(codec: ACN, TC_12_5_AddParameterMonitoringDefinitions_n: ULong): (ACN, EitherMut[Int, TTC_12_5_AddParameterMonitoringDefinitions_definitions]) = {
    require(codec.base.bitStream.validate_offset_bits(1187550L))
    val cpy = snapshot(codec)
    val res = TC_12_5_AddParameterMonitoringDefinitions_definitions_ACN_Decode(cpy, TC_12_5_AddParameterMonitoringDefinitions_n)
    (cpy, res)
}