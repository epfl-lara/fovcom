/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TTC_12_23_FunctionalMonitoringDefinition --------------------------------------------*/


case class TTC_12_23_FunctionalMonitoringDefinition_pmon_ID (nCount: Int, arr: Vector[TPMON_ID])
{
    require(this.arr.size <= 4095 && 1 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854644767L))
        TTC_12_23_FunctionalMonitoringDefinition_pmon_ID.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 131040L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854644767L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854644767L))
        TTC_12_23_FunctionalMonitoringDefinition_pmon_ID.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854644767L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854644767L))
        require((offset % 8L) == (otherOffset % 8L))
        TTC_12_23_FunctionalMonitoringDefinition_pmon_ID.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854644767L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854644767L))
        require((offset % 16L) == (otherOffset % 16L))
        TTC_12_23_FunctionalMonitoringDefinition_pmon_ID.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854644767L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854644767L))
        require((offset % 32L) == (otherOffset % 32L))
        TTC_12_23_FunctionalMonitoringDefinition_pmon_ID.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TTC_12_23_FunctionalMonitoringDefinition_pmon_ID {
    def sizeRange(ls: Vector[TPMON_ID], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 4095))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = 32L
            assert(elemSize == 32L)
            elemSize + TTC_12_23_FunctionalMonitoringDefinition_pmon_ID.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 32L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TPMON_ID], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 4095))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 32L
            val elemSizeOtherOff = 32L
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            TTC_12_23_FunctionalMonitoringDefinition_pmon_ID.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_12_23_FunctionalMonitoringDefinition_pmon_ID.sizeRange(ls, offset, from, to) == TTC_12_23_FunctionalMonitoringDefinition_pmon_ID.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TPMON_ID], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 4095))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 32L
            val elemSizeOtherOff = 32L
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            TTC_12_23_FunctionalMonitoringDefinition_pmon_ID.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_12_23_FunctionalMonitoringDefinition_pmon_ID.sizeRange(ls, offset, from, to) == TTC_12_23_FunctionalMonitoringDefinition_pmon_ID.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TPMON_ID], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 4095))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 32L
            val elemSizeOtherOff = 32L
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            TTC_12_23_FunctionalMonitoringDefinition_pmon_ID.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_12_23_FunctionalMonitoringDefinition_pmon_ID.sizeRange(ls, offset, from, to) == TTC_12_23_FunctionalMonitoringDefinition_pmon_ID.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TPMON_ID], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 4095))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 32L
            val elemSizeOtherOff = 32L
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            TTC_12_23_FunctionalMonitoringDefinition_pmon_ID.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_12_23_FunctionalMonitoringDefinition_pmon_ID.sizeRange(ls, offset, from, to) == TTC_12_23_FunctionalMonitoringDefinition_pmon_ID.sizeRange(ls, otherOffset, from, to)
    }
}

case class TTC_12_23_FunctionalMonitoringDefinition (
    fmon_ID: TFMON_ID, 
    checkValidityCondition: OptionMut[TCheckValidityCondition], 
    eventDefinition_ID: TEventDefinition_ID, 
    min_PMON_FailingNumber: OptionMut[TPUSC_UINT32], 
    pmon_ID: TTC_12_23_FunctionalMonitoringDefinition_pmon_ID
) {
    require(this.checkValidityCondition.isDefined && this.min_PMON_FailingNumber.isDefined)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854644583L))
        val size_0 = 32L
        val size_1 = this.checkValidityCondition match {
            case SomeMut(v) =>
                v.size(offset + size_0)
            case NoneMut() =>
                0L
        }
        val size_2 = 32L
        val size_3 = this.min_PMON_FailingNumber match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_4 = 32L
        val size_5 = this.pmon_ID.size(offset + size_0 + size_1 + size_2 + size_3 + size_4)
        size_0 + size_1 + size_2 + size_3 + size_4 + size_5
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 131224L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854644583L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854644583L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.checkValidityCondition match {
            case SomeMut(v) =>
                v.size(offset + size_0_offset)
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.checkValidityCondition match {
            case SomeMut(v) =>
                v.size(otherOffset + size_0_otherOffset)
            case NoneMut() =>
                0L
        }
        this.checkValidityCondition match {
            case SomeMut(v) =>
                v.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
            case NoneMut() =>
                ()
        }
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = this.min_PMON_FailingNumber match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_3_otherOffset = this.min_PMON_FailingNumber match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_4_offset = 32L
        val size_4_otherOffset = 32L
        val size_5_offset = this.pmon_ID.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset)
        val size_5_otherOffset = this.pmon_ID.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset)
        this.pmon_ID.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854644583L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854644583L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.checkValidityCondition match {
            case SomeMut(v) =>
                v.size(offset + size_0_offset)
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.checkValidityCondition match {
            case SomeMut(v) =>
                v.size(otherOffset + size_0_otherOffset)
            case NoneMut() =>
                0L
        }
        this.checkValidityCondition match {
            case SomeMut(v) =>
                v.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
            case NoneMut() =>
                ()
        }
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = this.min_PMON_FailingNumber match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_3_otherOffset = this.min_PMON_FailingNumber match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_4_offset = 32L
        val size_4_otherOffset = 32L
        val size_5_offset = this.pmon_ID.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset)
        val size_5_otherOffset = this.pmon_ID.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset)
        this.pmon_ID.sizeLemmaNextByte(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854644583L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854644583L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.checkValidityCondition match {
            case SomeMut(v) =>
                v.size(offset + size_0_offset)
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.checkValidityCondition match {
            case SomeMut(v) =>
                v.size(otherOffset + size_0_otherOffset)
            case NoneMut() =>
                0L
        }
        this.checkValidityCondition match {
            case SomeMut(v) =>
                v.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
            case NoneMut() =>
                ()
        }
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = this.min_PMON_FailingNumber match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_3_otherOffset = this.min_PMON_FailingNumber match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_4_offset = 32L
        val size_4_otherOffset = 32L
        val size_5_offset = this.pmon_ID.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset)
        val size_5_otherOffset = this.pmon_ID.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset)
        this.pmon_ID.sizeLemmaNextWord(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854644583L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854644583L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.checkValidityCondition match {
            case SomeMut(v) =>
                v.size(offset + size_0_offset)
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.checkValidityCondition match {
            case SomeMut(v) =>
                v.size(otherOffset + size_0_otherOffset)
            case NoneMut() =>
                0L
        }
        this.checkValidityCondition match {
            case SomeMut(v) =>
                v.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
            case NoneMut() =>
                ()
        }
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = this.min_PMON_FailingNumber match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_3_otherOffset = this.min_PMON_FailingNumber match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_4_offset = 32L
        val size_4_otherOffset = 32L
        val size_5_offset = this.pmon_ID.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset)
        val size_5_otherOffset = this.pmon_ID.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset)
        this.pmon_ID.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_12_23_FUNCTIONALMONITORINGDEFINITION_PMON_ID: Int = 1799 /*(SIZE(1 .. maxTC-12-23-PMON-ID-Count)) */
@inline @cCode.inline val ERR_TC_12_23_FUNCTIONALMONITORINGDEFINITION_PMON_ID_ELM_2: Int = 1794 /* */

@inline @cCode.inline val ERR_TC_12_23_FUNCTIONALMONITORINGDEFINITION: Int = 1804 /*(WITH COMPONENTS
{
    checkValidityCondition PRESENT,
    min-PMON-FailingNumber PRESENT
}) */
@inline @cCode.inline val ERR_TC_12_23_FUNCTIONALMONITORINGDEFINITION_FMON_ID_2: Int = 1718 /* */
@inline @cCode.inline val ERR_TC_12_23_FUNCTIONALMONITORINGDEFINITION_CHECKVALIDITYCONDITION_2: Int = 1757 /* */
@inline @cCode.inline val ERR_TC_12_23_FUNCTIONALMONITORINGDEFINITION_EVENTDEFINITION_ID_2: Int = 1767 /* */
@inline @cCode.inline val ERR_TC_12_23_FUNCTIONALMONITORINGDEFINITION_MIN_PMON_FAILINGNUMBER_2_2: Int = 1782 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_12_23_FUNCTIONALMONITORINGDEFINITION: Int = 1807 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_12_23_FUNCTIONALMONITORINGDEFINITION_FMON_ID_2: Int = 1721 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_12_23_FUNCTIONALMONITORINGDEFINITION_CHECKVALIDITYCONDITION_2: Int = 1760 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_12_23_FUNCTIONALMONITORINGDEFINITION_EVENTDEFINITION_ID_2: Int = 1770 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_12_23_FUNCTIONALMONITORINGDEFINITION_MIN_PMON_FAILINGNUMBER_2_2: Int = 1785 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_12_23_FUNCTIONALMONITORINGDEFINITION_N2_UNINITIALIZED: Int = 1808 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_12_23_FUNCTIONALMONITORINGDEFINITION_N2: Int = 1787 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_12_23_FUNCTIONALMONITORINGDEFINITION_PMON_ID: Int = 1802 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_12_23_FUNCTIONALMONITORINGDEFINITION_PMON_ID_ELM_2: Int = 1797 /*  */
@inline @cCode.inline val TTC_12_23_FunctionalMonitoringDefinition_REQUIRED_BYTES_FOR_ACN_ENCODING = 16403
@inline @cCode.inline val TTC_12_23_FunctionalMonitoringDefinition_REQUIRED_BITS_FOR_ACN_ENCODING = 131224

@inline @cCode.inline val ERR_ACN_DECODE_TC_12_23_FUNCTIONALMONITORINGDEFINITION: Int = 1809 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_12_23_FUNCTIONALMONITORINGDEFINITION_FMON_ID_2: Int = 1722 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_12_23_FUNCTIONALMONITORINGDEFINITION_CHECKVALIDITYCONDITION_2: Int = 1761 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_12_23_FUNCTIONALMONITORINGDEFINITION_EVENTDEFINITION_ID_2: Int = 1771 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_12_23_FUNCTIONALMONITORINGDEFINITION_MIN_PMON_FAILINGNUMBER_2_2: Int = 1786 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_12_23_FUNCTIONALMONITORINGDEFINITION_N2: Int = 1788 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_12_23_FUNCTIONALMONITORINGDEFINITION_PMON_ID: Int = 1803 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_12_23_FUNCTIONALMONITORINGDEFINITION_PMON_ID_ELM_2: Int = 1798 /*  */
/*-- TTC_12_23_AddFunctionalMonitoringDefinition --------------------------------------------*/


case class TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions (nCount: Int, arr: Vector[TTC_12_23_FunctionalMonitoringDefinition])
{
    require(this.arr.size <= 4095 && 1 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036317413527L))
        TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 537362280L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036317413527L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036317413527L))
        TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036317413527L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036317413527L))
        require((offset % 8L) == (otherOffset % 8L))
        TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036317413527L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036317413527L))
        require((offset % 16L) == (otherOffset % 16L))
        TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036317413527L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036317413527L))
        require((offset % 32L) == (otherOffset % 32L))
        TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions {
    def sizeRange(ls: Vector[TTC_12_23_FunctionalMonitoringDefinition], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 4095))
        require((0L <= offset) && (offset <= 9223372036854775807L - 131224L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(0L <= elemSize && elemSize <= 131224L)
            elemSize + TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 131224L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TTC_12_23_FunctionalMonitoringDefinition], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 4095))
        require((0L <= offset) && (offset <= 9223372036854775807L - 131224L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 131224L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 131224L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 131224L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions.sizeRange(ls, offset, from, to) == TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TTC_12_23_FunctionalMonitoringDefinition], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 4095))
        require((0L <= offset) && (offset <= 9223372036854775807L - 131224L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 131224L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 131224L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 131224L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions.sizeRange(ls, offset, from, to) == TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TTC_12_23_FunctionalMonitoringDefinition], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 4095))
        require((0L <= offset) && (offset <= 9223372036854775807L - 131224L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 131224L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 131224L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 131224L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions.sizeRange(ls, offset, from, to) == TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TTC_12_23_FunctionalMonitoringDefinition], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 4095))
        require((0L <= offset) && (offset <= 9223372036854775807L - 131224L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 131224L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 131224L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 131224L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions.sizeRange(ls, offset, from, to) == TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions.sizeRange(ls, otherOffset, from, to)
    }
}

case class TTC_12_23_AddFunctionalMonitoringDefinition (
    functionalMonitoringDefinitions: TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036317413495L))
        val size_0 = 32L
        val size_1 = this.functionalMonitoringDefinitions.size(offset + size_0)
        size_0 + size_1
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 537362312L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036317413495L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036317413495L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.functionalMonitoringDefinitions.size(offset + size_0_offset)
        val size_1_otherOffset = this.functionalMonitoringDefinitions.size(otherOffset + size_0_otherOffset)
        this.functionalMonitoringDefinitions.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036317413495L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036317413495L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.functionalMonitoringDefinitions.size(offset + size_0_offset)
        val size_1_otherOffset = this.functionalMonitoringDefinitions.size(otherOffset + size_0_otherOffset)
        this.functionalMonitoringDefinitions.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036317413495L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036317413495L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.functionalMonitoringDefinitions.size(offset + size_0_offset)
        val size_1_otherOffset = this.functionalMonitoringDefinitions.size(otherOffset + size_0_otherOffset)
        this.functionalMonitoringDefinitions.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036317413495L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036317413495L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.functionalMonitoringDefinitions.size(offset + size_0_offset)
        val size_1_otherOffset = this.functionalMonitoringDefinitions.size(otherOffset + size_0_otherOffset)
        this.functionalMonitoringDefinitions.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_12_23_ADDFUNCTIONALMONITORINGDEFINITION_FUNCTIONALMONITORINGDEFINITIONS: Int = 1702 /*(SIZE(1 .. maxTC-12-23-FunctionalMonitoringDefinitionCount)) */
@inline @cCode.inline val ERR_TC_12_23_ADDFUNCTIONALMONITORINGDEFINITION_FUNCTIONALMONITORINGDEFINITIONS_ELM_2: Int = 1697 /* */

@inline @cCode.inline val ERR_TC_12_23_ADDFUNCTIONALMONITORINGDEFINITION: Int = 1707 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_12_23_ADDFUNCTIONALMONITORINGDEFINITION: Int = 1710 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_12_23_ADDFUNCTIONALMONITORINGDEFINITION_N1_UNINITIALIZED: Int = 1711 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_12_23_ADDFUNCTIONALMONITORINGDEFINITION_N1: Int = 1599 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_12_23_ADDFUNCTIONALMONITORINGDEFINITION_FUNCTIONALMONITORINGDEFINITIONS: Int = 1705 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_12_23_ADDFUNCTIONALMONITORINGDEFINITION_FUNCTIONALMONITORINGDEFINITIONS_ELM_2: Int = 1700 /*  */
@inline @cCode.inline val TTC_12_23_AddFunctionalMonitoringDefinition_REQUIRED_BYTES_FOR_ACN_ENCODING = 67170289
@inline @cCode.inline val TTC_12_23_AddFunctionalMonitoringDefinition_REQUIRED_BITS_FOR_ACN_ENCODING = 537362312

@inline @cCode.inline val ERR_ACN_DECODE_TC_12_23_ADDFUNCTIONALMONITORINGDEFINITION: Int = 1712 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_12_23_ADDFUNCTIONALMONITORINGDEFINITION_N1: Int = 1600 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_12_23_ADDFUNCTIONALMONITORINGDEFINITION_FUNCTIONALMONITORINGDEFINITIONS: Int = 1706 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_12_23_ADDFUNCTIONALMONITORINGDEFINITION_FUNCTIONALMONITORINGDEFINITIONS_ELM_2: Int = 1701 /*  */

// @inline @cCode.inline val maxTC_12_23_FunctionalMonitoringDefinitionCount: Int = 4095 // defined in body
// @inline @cCode.inline val maxTC_12_23_PMON_ID_Count: Int = 4095 // defined in body

