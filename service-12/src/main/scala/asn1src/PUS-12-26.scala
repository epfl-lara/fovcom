/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

val maxTM_12_26_MonitoringDefinitionCount: Int = 4095 // variables:188
val maxTM_12_26_PMON_ID_Count: Int = 4095 // variables:188

def TTM_12_28_MonitoringDefinitionReport_pmon_ID_IsConstraintValid(pVal: TTM_12_28_MonitoringDefinitionReport_pmon_ID): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = ((1 <= pVal.nCount) && (pVal.nCount <= 4095)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TPMON_ID_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TTM_12_28_MonitoringDefinitionReport_IsConstraintValid(pVal: TTM_12_28_MonitoringDefinitionReport): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TFMON_ID_IsConstraintValid(pVal.fmon_ID)
    if ret.isRight then
        pVal.checkValidityCondition match
            case SomeMut(checkValidityCondition) =>
                ret = TCheckValidityCondition_IsConstraintValid(checkValidityCondition)
            case NoneMut() =>
        if ret.isRight then
            pVal.fmonProtectionStatus match
                case SomeMut(fmonProtectionStatus) =>
                    ret = TFMON_ProtectionStatus_IsConstraintValid(fmonProtectionStatus)
                case NoneMut() =>
            if ret.isRight then
                ret = TFMON_Status_IsConstraintValid(pVal.fmonStatus)
                if ret.isRight then
                    pVal.min_PMON_FailingNumber match
                        case SomeMut(min_PMON_FailingNumber) =>
                            ret = TPUSC_UINT32_IsConstraintValid(min_PMON_FailingNumber)
                        case NoneMut() =>
                    if ret.isRight then
                        ret = TTM_12_28_MonitoringDefinitionReport_pmon_ID_IsConstraintValid(pVal.pmon_ID)
    if ret.isRight then
        ret = (pVal.checkValidityCondition.isDefined == true) match
            case true =>
                Right(0)
            case false =>
                Left(45)
        if ret.isRight then
            ret = (pVal.fmonProtectionStatus.isDefined == true) match
                case true =>
                    Right(0)
                case false =>
                    Left(45)
            if ret.isRight then
                ret = (pVal.min_PMON_FailingNumber.isDefined == true) match
                    case true =>
                        Right(0)
                    case false =>
                        Left(45)
    ret
}

def TTM_12_28_MonitoringDefinitionReport_pmon_ID_Initialize(): TTM_12_28_MonitoringDefinitionReport_pmon_ID = TTM_12_28_MonitoringDefinitionReport_pmon_ID(1, Vector.fill(4095)(TPMON_ID.Tparam0))
def TTM_12_28_MonitoringDefinitionReport_Initialize(): TTM_12_28_MonitoringDefinitionReport = TTM_12_28_MonitoringDefinitionReport(fmon_ID = TFMON_ID.Tfunction0, checkValidityCondition = SomeMut(TCheckValidityCondition_Initialize()), fmonProtectionStatus = SomeMut(TFMON_ProtectionStatus.Tunprotected), fmonStatus = TFMON_Status.TFMON_Status_disabled, min_PMON_FailingNumber = SomeMut(ULong.fromRaw(0L)), pmon_ID = TTM_12_28_MonitoringDefinitionReport_pmon_ID_Initialize())

@opaque @inlineOnce 
def TTM_12_28_MonitoringDefinitionReport_ACN_Encode(pVal: TTM_12_28_MonitoringDefinitionReport, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(131194L))
    var i1: Int = 0
    TTM_12_28_MonitoringDefinitionReport_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode fmon_ID */
    TFMON_ID_ACN_Encode(pVal.fmon_ID, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 131194L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    TM_12_28_MonitoringDefinitionReport_checkValidityCondition_Optional_ACN_Encode(codec, pVal, pVal.checkValidityCondition) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 131162L, 56L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 88L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.checkValidityCondition match {
        case SomeMut(v) =>
            v.size(codec_0_2.base.bitStream.bitIndex)
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    TM_12_28_MonitoringDefinitionReport_fmonProtectionStatus_Optional_ACN_Encode(codec, pVal, pVal.fmonProtectionStatus) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_3.base.bitStream, codec.base.bitStream, 131106L, 1L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 89L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = pVal.fmonProtectionStatus match {
        case SomeMut(v) =>
            1L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    @ghost val codec_0_4 = snapshot(codec)
    /* Encode fmonStatus */
    TFMON_Status_ACN_Encode(pVal.fmonStatus, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_4.base.bitStream, codec.base.bitStream, 131105L, 1L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 90L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_3 = 1L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3)
    }
    @ghost val codec_0_5 = snapshot(codec)
    TM_12_28_MonitoringDefinitionReport_min_PMON_FailingNumber_Optional_ACN_Encode(codec, pVal, pVal.min_PMON_FailingNumber) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_5.base.bitStream, codec.base.bitStream, 131104L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 122L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_4 = pVal.min_PMON_FailingNumber match {
        case SomeMut(v) =>
            32L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3 + size_4)
    }
    @ghost val codec_0_6 = snapshot(codec)
    val TM_12_28_MonitoringDefinitionReport_n2 = ULong.fromRaw(pVal.pmon_ID.nCount)
    if TM_12_28_MonitoringDefinitionReport_n2 < ULong.fromRaw(1) || TM_12_28_MonitoringDefinitionReport_n2 > ULong.fromRaw(4095) then
        return Left(860)
    /* Encode TM_12_28_MonitoringDefinitionReport_n2 */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(TM_12_28_MonitoringDefinitionReport_n2)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(TM_12_28_MonitoringDefinitionReport_n2)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_6.base.bitStream, codec.base.bitStream, 131072L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 154L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_5 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3 + size_4 + size_5)
    }
    @ghost val codec_0_7 = snapshot(codec)
    /* Encode pmon_ID */
    TM_12_28_MonitoringDefinitionReport_pmon_ID_ACN_Encode(codec, pVal, TM_12_28_MonitoringDefinitionReport_n2, pVal.pmon_ID) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 131194L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_6 = pVal.pmon_ID.size(codec_0_7.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3 + size_4 + size_5 + size_6)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 131194L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2 + size_3 + size_4 + size_5 + size_6)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TM_12_28_MonitoringDefinitionReport_checkValidityCondition_Optional_ACN_Encode(codec: ACN, pVal: TTM_12_28_MonitoringDefinitionReport, checkValidityCondition: OptionMut[TCheckValidityCondition]): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(56L))
    @ghost val oldCdc = snapshot(codec)
    /* Encode checkValidityCondition */
    /* marked as ALWAYS PRESENT, so it must be Some */
    checkValidityCondition match
        case SomeMut(checkValidityCondition) =>
            TCheckValidityCondition_ACN_Encode(checkValidityCondition, codec, false) match // uper:6
                case Right(_) =>
                case Left(err) => return Left(err)
        case NoneMut() => return Left(628)
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + checkValidityCondition.get.size(old(codec).base.bitStream.bitIndex)
    }
}



@opaque @inlineOnce
def TM_12_28_MonitoringDefinitionReport_fmonProtectionStatus_Optional_ACN_Encode(codec: ACN, pVal: TTM_12_28_MonitoringDefinitionReport, fmonProtectionStatus: OptionMut[TFMON_ProtectionStatus]): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(1L))
    @ghost val oldCdc = snapshot(codec)
    /* Encode fmonProtectionStatus */
    /* marked as ALWAYS PRESENT, so it must be Some */
    fmonProtectionStatus match
        case SomeMut(fmonProtectionStatus) =>
            TFMON_ProtectionStatus_ACN_Encode(fmonProtectionStatus, codec, false) match // uper:6
                case Right(_) =>
                case Left(err) => return Left(err)
        case NoneMut() => return Left(628)
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 1L
    }
}



@opaque @inlineOnce
def TM_12_28_MonitoringDefinitionReport_min_PMON_FailingNumber_Optional_ACN_Encode(codec: ACN, pVal: TTM_12_28_MonitoringDefinitionReport, min_PMON_FailingNumber: OptionMut[ULong]): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(32L))
    @ghost val oldCdc = snapshot(codec)
    /* Encode min_PMON_FailingNumber */
    /* marked as ALWAYS PRESENT, so it must be Some */
    min_PMON_FailingNumber match
        case SomeMut(min_PMON_FailingNumber) =>
            TPUSC_UINT32_ACN_Encode(min_PMON_FailingNumber, codec, false) match // uper:6
                case Right(_) =>
                case Left(err) => return Left(err)
        case NoneMut() => return Left(628)
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 32L
    }
}



@opaque @inlineOnce
def TM_12_28_MonitoringDefinitionReport_pmon_ID_Encode_loop(codec: ACN, pmon_ID: TTM_12_28_MonitoringDefinitionReport_pmon_ID, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= pmon_ID.nCount))
    require((1 <= pmon_ID.nCount) && (pmon_ID.nCount <= pmon_ID.arr.size) && (pmon_ID.arr.size <= 4095))
    require(codec.base.bitStream.validate_offset_bits((32L * (pmon_ID.nCount - i1))))
    decreases(pmon_ID.nCount - i1)
    if (i1 == pmon_ID.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 32L * (pmon_ID.nCount - i1), 32L)
        }
        TPMON_ID_ACN_Encode(pmon_ID.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(32L * (i1 + 1) == 32L * i1 + 32L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 32L * (pmon_ID.nCount - i1), 32L)
            check(codec.base.bitStream.validate_offset_bits(32L * (pmon_ID.nCount - (i1 + 1))))
        }
        val res = TM_12_28_MonitoringDefinitionReport_pmon_ID_Encode_loop(codec, pmon_ID, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TTM_12_28_MonitoringDefinitionReport_pmon_ID.sizeRange(pmon_ID.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, pmon_ID.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + 32L)
                    assert(TTM_12_28_MonitoringDefinitionReport_pmon_ID.sizeRange(pmon_ID.arr, codecSnap1.base.bitStream.bitIndex, i1, pmon_ID.nCount) == TTM_12_28_MonitoringDefinitionReport_pmon_ID.sizeRange(pmon_ID.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, pmon_ID.nCount) + 32L)
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TTM_12_28_MonitoringDefinitionReport_pmon_ID.sizeRange(pmon_ID.arr, codecSnap1.base.bitStream.bitIndex, i1, pmon_ID.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_12_28_MonitoringDefinitionReport_pmon_ID.sizeRange(pmon_ID.arr, old(codec).base.bitStream.bitIndex, i1, pmon_ID.nCount)
    }
}



@opaque @inlineOnce
def TM_12_28_MonitoringDefinitionReport_pmon_ID_ACN_Encode(codec: ACN, pVal: TTM_12_28_MonitoringDefinitionReport, TM_12_28_MonitoringDefinitionReport_n2: ULong, pmon_ID: TTM_12_28_MonitoringDefinitionReport_pmon_ID): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(131040L))
    @ghost val oldCdc = snapshot(codec)
    TTM_12_28_MonitoringDefinitionReport_pmon_ID_IsConstraintValid(pmon_ID) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    TM_12_28_MonitoringDefinitionReport_pmon_ID_Encode_loop(codec, pmon_ID, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                pmon_ID.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
            ()
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pmon_ID.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTM_12_28_MonitoringDefinitionReport_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTM_12_28_MonitoringDefinitionReport] =
{
    require(codec.base.bitStream.validate_offset_bits(131194L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode fmon_ID */
    val pVal_fmon_ID = TFMON_ID_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 131194L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    val pVal_checkValidityCondition = TM_12_28_MonitoringDefinitionReport_checkValidityCondition_Optional_ACN_Decode(codec) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 131162L, 56L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 88L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_checkValidityCondition match {
        case SomeMut(v) =>
            v.size(codec_0_2.base.bitStream.bitIndex)
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    val pVal_fmonProtectionStatus = TM_12_28_MonitoringDefinitionReport_fmonProtectionStatus_Optional_ACN_Decode(codec) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_3.base.bitStream, codec.base.bitStream, 131106L, 1L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 89L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = pVal_fmonProtectionStatus match {
        case SomeMut(v) =>
            1L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    @ghost val codec_0_4 = snapshot(codec)
    /* Decode fmonStatus */
    val pVal_fmonStatus = TFMON_Status_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_4.base.bitStream, codec.base.bitStream, 131105L, 1L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 90L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_3 = 1L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3)
    }
    @ghost val codec_0_5 = snapshot(codec)
    val pVal_min_PMON_FailingNumber = TM_12_28_MonitoringDefinitionReport_min_PMON_FailingNumber_Optional_ACN_Decode(codec) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_5.base.bitStream, codec.base.bitStream, 131104L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 122L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_4 = pVal_min_PMON_FailingNumber match {
        case SomeMut(v) =>
            32L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3 + size_4)
    }
    @ghost val codec_0_6 = snapshot(codec)
    /* Decode TM_12_28_MonitoringDefinitionReport_n2 */
    val TM_12_28_MonitoringDefinitionReport_n2 = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_6.base.bitStream, codec.base.bitStream, 131072L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 154L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_5 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3 + size_4 + size_5)
    }
    @ghost val codec_0_7 = snapshot(codec)
    /* Decode pmon_ID */
    val pVal_pmon_ID = TM_12_28_MonitoringDefinitionReport_pmon_ID_ACN_Decode(codec, TM_12_28_MonitoringDefinitionReport_n2) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 131194L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_6 = pVal_pmon_ID.size(codec_0_7.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3 + size_4 + size_5 + size_6)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 131194L)
    }
    val pVal = TTM_12_28_MonitoringDefinitionReport(pVal_fmon_ID, pVal_checkValidityCondition, pVal_fmonProtectionStatus, pVal_fmonStatus, pVal_min_PMON_FailingNumber, pVal_pmon_ID)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2 + size_3 + size_4 + size_5 + size_6)
    }

    TTM_12_28_MonitoringDefinitionReport_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTM_12_28_MonitoringDefinitionReport](l)
        case Right(_) => RightMut[ErrorCode, TTM_12_28_MonitoringDefinitionReport](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTM_12_28_MonitoringDefinitionReport]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_12_28_MonitoringDefinitionReport_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTM_12_28_MonitoringDefinitionReport_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTM_12_28_MonitoringDefinitionReport]) =
{
    require(codec.base.bitStream.validate_offset_bits(131194L))
    val cpy = snapshot(codec)
    val res = TTM_12_28_MonitoringDefinitionReport_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def TM_12_28_MonitoringDefinitionReport_checkValidityCondition_Optional_ACN_Decode(codec: ACN): EitherMut[Int, OptionMut[TCheckValidityCondition]] = {
    require(codec.base.bitStream.validate_offset_bits(56L))
    @ghost val oldCdc = snapshot(codec)
    /* Decode checkValidityCondition */
    /* marked as ALWAYS PRESENT */
    val checkValidityCondition: OptionMut[TCheckValidityCondition] =
        val pVal_checkValidityCondition = TCheckValidityCondition_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        SomeMut(pVal_checkValidityCondition)
    RightMut[Int, OptionMut[TCheckValidityCondition]](checkValidityCondition)
}.ensuring { (res: EitherMut[Int, OptionMut[TCheckValidityCondition]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            resVal.isDefined && old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.get.size(old(codec).base.bitStream.bitIndex)
    }
}



@ghost @pure
def TM_12_28_MonitoringDefinitionReport_checkValidityCondition_Optional_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[Int, OptionMut[TCheckValidityCondition]]) = {
    require(codec.base.bitStream.validate_offset_bits(56L))
    val cpy = snapshot(codec)
    val res = TM_12_28_MonitoringDefinitionReport_checkValidityCondition_Optional_ACN_Decode(cpy)
    (cpy, res)
}



@opaque @inlineOnce
def TM_12_28_MonitoringDefinitionReport_fmonProtectionStatus_Optional_ACN_Decode(codec: ACN): EitherMut[Int, OptionMut[TFMON_ProtectionStatus]] = {
    require(codec.base.bitStream.validate_offset_bits(1L))
    @ghost val oldCdc = snapshot(codec)
    /* Decode fmonProtectionStatus */
    /* marked as ALWAYS PRESENT */
    val fmonProtectionStatus: OptionMut[TFMON_ProtectionStatus] =
        val pVal_fmonProtectionStatus = TFMON_ProtectionStatus_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        SomeMut(pVal_fmonProtectionStatus)
    RightMut[Int, OptionMut[TFMON_ProtectionStatus]](fmonProtectionStatus)
}.ensuring { (res: EitherMut[Int, OptionMut[TFMON_ProtectionStatus]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            resVal.isDefined && old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 1L
    }
}



@ghost @pure
def TM_12_28_MonitoringDefinitionReport_fmonProtectionStatus_Optional_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[Int, OptionMut[TFMON_ProtectionStatus]]) = {
    require(codec.base.bitStream.validate_offset_bits(1L))
    val cpy = snapshot(codec)
    val res = TM_12_28_MonitoringDefinitionReport_fmonProtectionStatus_Optional_ACN_Decode(cpy)
    (cpy, res)
}



@opaque @inlineOnce
def TM_12_28_MonitoringDefinitionReport_min_PMON_FailingNumber_Optional_ACN_Decode(codec: ACN): EitherMut[Int, OptionMut[ULong]] = {
    require(codec.base.bitStream.validate_offset_bits(32L))
    @ghost val oldCdc = snapshot(codec)
    /* Decode min_PMON_FailingNumber */
    /* marked as ALWAYS PRESENT */
    val min_PMON_FailingNumber: OptionMut[TPUSC_UINT32] =
        val pVal_min_PMON_FailingNumber = TPUSC_UINT32_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        SomeMut(pVal_min_PMON_FailingNumber)
    RightMut[Int, OptionMut[ULong]](min_PMON_FailingNumber)
}.ensuring { (res: EitherMut[Int, OptionMut[ULong]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            resVal.isDefined && old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 32L
    }
}



@ghost @pure
def TM_12_28_MonitoringDefinitionReport_min_PMON_FailingNumber_Optional_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[Int, OptionMut[ULong]]) = {
    require(codec.base.bitStream.validate_offset_bits(32L))
    val cpy = snapshot(codec)
    val res = TM_12_28_MonitoringDefinitionReport_min_PMON_FailingNumber_Optional_ACN_Decode(cpy)
    (cpy, res)
}



@opaque @inlineOnce
def TM_12_28_MonitoringDefinitionReport_pmon_ID_Decode_loop(codec: ACN, nCount: Int, pmon_ID: Vector[TPMON_ID], i1: Int): EitherMut[Int, Vector[TPMON_ID]] = {
    require((1 <= nCount) && (nCount <= 4095))
    require((0 <= i1) && (i1 <= nCount))
    require(pmon_ID.size == i1)
    require(codec.base.bitStream.validate_offset_bits((32L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(pmon_ID)
            vecRangesEqSlicedLemma(pmon_ID, pmon_ID, 0, pmon_ID.size, 0, i1)
        }
        RightMut[Int, Vector[TPMON_ID]](pmon_ID)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 32L * (nCount - i1), 32L)
        }
        val pmon_ID_arr_i1_ = TPMON_ID_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(32L * (i1 + 1) == 32L * i1 + 32L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 32L * (nCount - i1), 32L)
            check(codec.base.bitStream.validate_offset_bits(32L * (nCount - (i1 + 1))))
        }
        val res = TM_12_28_MonitoringDefinitionReport_pmon_ID_Decode_loop(codec, nCount, pmon_ID.append(pmon_ID_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(pmon_ID, newVec, pmon_ID_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(pmon_ID.append(pmon_ID_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(pmon_ID.list, pmon_ID_arr_i1_, i1)
                    Vector.listApplyEqVecApply(pmon_ID.append(pmon_ID_arr_i1_), i1)
                    check(pmon_ID_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TPMON_ID]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(pmon_ID, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_12_28_MonitoringDefinitionReport_pmon_ID.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def TM_12_28_MonitoringDefinitionReport_pmon_ID_ACN_Decode(codec: ACN, TM_12_28_MonitoringDefinitionReport_n2: ULong): EitherMut[Int, TTM_12_28_MonitoringDefinitionReport_pmon_ID] = {
    require(codec.base.bitStream.validate_offset_bits(131040L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val pmon_ID =
        if ((ULong.fromRaw(1) <= TM_12_28_MonitoringDefinitionReport_n2) && (TM_12_28_MonitoringDefinitionReport_n2 <= ULong.fromRaw(4095))) then
            val pmon_ID_nCount = TM_12_28_MonitoringDefinitionReport_n2.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val pmon_ID = TM_12_28_MonitoringDefinitionReport_pmon_ID_Decode_loop(codec, pmon_ID_nCount, Vector.empty[TPMON_ID], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val pmon_ID = TTM_12_28_MonitoringDefinitionReport_pmon_ID(pmon_ID_nCount, bdg)
                    ghostExpr {
                        pmon_ID.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    pmon_ID
            }
            pmon_ID
        else return LeftMut(ERR_ACN_DECODE_TM_12_28_MONITORINGDEFINITIONREPORT_PMON_ID)
    TTM_12_28_MonitoringDefinitionReport_pmon_ID_IsConstraintValid(pmon_ID) match {
        case Left(l) =>
            LeftMut[Int, TTM_12_28_MonitoringDefinitionReport_pmon_ID](l)
        case Right(_) =>
            RightMut[Int, TTM_12_28_MonitoringDefinitionReport_pmon_ID](pmon_ID)
    }
}.ensuring { (res: EitherMut[Int, TTM_12_28_MonitoringDefinitionReport_pmon_ID]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_12_28_MonitoringDefinitionReport_pmon_ID_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TM_12_28_MonitoringDefinitionReport_pmon_ID_ACN_Decode_pure(codec: ACN, TM_12_28_MonitoringDefinitionReport_n2: ULong): (ACN, EitherMut[Int, TTM_12_28_MonitoringDefinitionReport_pmon_ID]) = {
    require(codec.base.bitStream.validate_offset_bits(131040L))
    val cpy = snapshot(codec)
    val res = TM_12_28_MonitoringDefinitionReport_pmon_ID_ACN_Decode(cpy, TM_12_28_MonitoringDefinitionReport_n2)
    (cpy, res)
}

def TTM_12_28_FunctionalMonitoringDefinitionReport_report_IsConstraintValid(pVal: TTM_12_28_FunctionalMonitoringDefinitionReport_report): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = ((1 <= pVal.nCount) && (pVal.nCount <= 4095)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TTM_12_28_MonitoringDefinitionReport_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TTM_12_28_FunctionalMonitoringDefinitionReport_IsConstraintValid(pVal: TTM_12_28_FunctionalMonitoringDefinitionReport): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TTM_12_28_FunctionalMonitoringDefinitionReport_report_IsConstraintValid(pVal.report)
    ret
}

def TTM_12_28_FunctionalMonitoringDefinitionReport_report_Initialize(): TTM_12_28_FunctionalMonitoringDefinitionReport_report = TTM_12_28_FunctionalMonitoringDefinitionReport_report(1, Vector.fill(4095)(TTM_12_28_MonitoringDefinitionReport_Initialize()))
def TTM_12_28_FunctionalMonitoringDefinitionReport_Initialize(): TTM_12_28_FunctionalMonitoringDefinitionReport = TTM_12_28_FunctionalMonitoringDefinitionReport(report = TTM_12_28_FunctionalMonitoringDefinitionReport_report_Initialize())

@opaque @inlineOnce 
def TTM_12_28_FunctionalMonitoringDefinitionReport_ACN_Encode(pVal: TTM_12_28_FunctionalMonitoringDefinitionReport, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(537239462L))
    var i1: Int = 0
    TTM_12_28_FunctionalMonitoringDefinitionReport_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val TM_12_28_FunctionalMonitoringDefinitionReport_n1 = ULong.fromRaw(pVal.report.nCount)
    if TM_12_28_FunctionalMonitoringDefinitionReport_n1 < ULong.fromRaw(1) || TM_12_28_FunctionalMonitoringDefinitionReport_n1 > ULong.fromRaw(4095) then
        return Left(860)
    /* Encode TM_12_28_FunctionalMonitoringDefinitionReport_n1 */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(TM_12_28_FunctionalMonitoringDefinitionReport_n1)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(TM_12_28_FunctionalMonitoringDefinitionReport_n1)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 537239462L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode report */
    TM_12_28_FunctionalMonitoringDefinitionReport_report_ACN_Encode(codec, pVal, TM_12_28_FunctionalMonitoringDefinitionReport_n1, pVal.report) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 537239462L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.report.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 537239462L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TM_12_28_FunctionalMonitoringDefinitionReport_report_Encode_loop(codec: ACN, report: TTM_12_28_FunctionalMonitoringDefinitionReport_report, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= report.nCount))
    require((1 <= report.nCount) && (report.nCount <= report.arr.size) && (report.arr.size <= 4095))
    require(codec.base.bitStream.validate_offset_bits((131194L * (report.nCount - i1))))
    decreases(report.nCount - i1)
    if (i1 == report.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 131194L * (report.nCount - i1), 131194L)
        }
        TTM_12_28_MonitoringDefinitionReport_ACN_Encode(report.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(131194L * (i1 + 1) == 131194L * i1 + 131194L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 131194L * (report.nCount - i1), 131194L)
            check(codec.base.bitStream.validate_offset_bits(131194L * (report.nCount - (i1 + 1))))
        }
        val res = TM_12_28_FunctionalMonitoringDefinitionReport_report_Encode_loop(codec, report, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TTM_12_28_FunctionalMonitoringDefinitionReport_report.sizeRange(report.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, report.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + report.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TTM_12_28_FunctionalMonitoringDefinitionReport_report.sizeRange(report.arr, codecSnap1.base.bitStream.bitIndex, i1, report.nCount) == report.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TTM_12_28_FunctionalMonitoringDefinitionReport_report.sizeRange(report.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, report.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TTM_12_28_FunctionalMonitoringDefinitionReport_report.sizeRange(report.arr, codecSnap1.base.bitStream.bitIndex, i1, report.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_12_28_FunctionalMonitoringDefinitionReport_report.sizeRange(report.arr, old(codec).base.bitStream.bitIndex, i1, report.nCount)
    }
}



@opaque @inlineOnce
def TM_12_28_FunctionalMonitoringDefinitionReport_report_ACN_Encode(codec: ACN, pVal: TTM_12_28_FunctionalMonitoringDefinitionReport, TM_12_28_FunctionalMonitoringDefinitionReport_n1: ULong, report: TTM_12_28_FunctionalMonitoringDefinitionReport_report): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(537239430L))
    @ghost val oldCdc = snapshot(codec)
    TTM_12_28_FunctionalMonitoringDefinitionReport_report_IsConstraintValid(report) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    TM_12_28_FunctionalMonitoringDefinitionReport_report_Encode_loop(codec, report, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                report.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
            ()
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + report.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTM_12_28_FunctionalMonitoringDefinitionReport_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTM_12_28_FunctionalMonitoringDefinitionReport] =
{
    require(codec.base.bitStream.validate_offset_bits(537239462L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode TM_12_28_FunctionalMonitoringDefinitionReport_n1 */
    val TM_12_28_FunctionalMonitoringDefinitionReport_n1 = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 537239462L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode report */
    val pVal_report = TM_12_28_FunctionalMonitoringDefinitionReport_report_ACN_Decode(codec, TM_12_28_FunctionalMonitoringDefinitionReport_n1) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 537239462L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_report.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 537239462L)
    }
    val pVal = TTM_12_28_FunctionalMonitoringDefinitionReport(pVal_report)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }

    TTM_12_28_FunctionalMonitoringDefinitionReport_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTM_12_28_FunctionalMonitoringDefinitionReport](l)
        case Right(_) => RightMut[ErrorCode, TTM_12_28_FunctionalMonitoringDefinitionReport](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTM_12_28_FunctionalMonitoringDefinitionReport]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_12_28_FunctionalMonitoringDefinitionReport_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTM_12_28_FunctionalMonitoringDefinitionReport_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTM_12_28_FunctionalMonitoringDefinitionReport]) =
{
    require(codec.base.bitStream.validate_offset_bits(537239462L))
    val cpy = snapshot(codec)
    val res = TTM_12_28_FunctionalMonitoringDefinitionReport_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def TM_12_28_FunctionalMonitoringDefinitionReport_report_Decode_loop(codec: ACN, nCount: Int, report: Vector[TTM_12_28_MonitoringDefinitionReport], i1: Int): EitherMut[Int, Vector[TTM_12_28_MonitoringDefinitionReport]] = {
    require((1 <= nCount) && (nCount <= 4095))
    require((0 <= i1) && (i1 <= nCount))
    require(report.size == i1)
    require(codec.base.bitStream.validate_offset_bits((131194L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(report)
            vecRangesEqSlicedLemma(report, report, 0, report.size, 0, i1)
        }
        RightMut[Int, Vector[TTM_12_28_MonitoringDefinitionReport]](report)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 131194L * (nCount - i1), 131194L)
        }
        val report_arr_i1_ = TTM_12_28_MonitoringDefinitionReport_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(131194L * (i1 + 1) == 131194L * i1 + 131194L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 131194L * (nCount - i1), 131194L)
            check(codec.base.bitStream.validate_offset_bits(131194L * (nCount - (i1 + 1))))
        }
        val res = TM_12_28_FunctionalMonitoringDefinitionReport_report_Decode_loop(codec, nCount, report.append(report_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(report, newVec, report_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(report.append(report_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(report.list, report_arr_i1_, i1)
                    Vector.listApplyEqVecApply(report.append(report_arr_i1_), i1)
                    check(report_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TTM_12_28_MonitoringDefinitionReport]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(report, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_12_28_FunctionalMonitoringDefinitionReport_report.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def TM_12_28_FunctionalMonitoringDefinitionReport_report_ACN_Decode(codec: ACN, TM_12_28_FunctionalMonitoringDefinitionReport_n1: ULong): EitherMut[Int, TTM_12_28_FunctionalMonitoringDefinitionReport_report] = {
    require(codec.base.bitStream.validate_offset_bits(537239430L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val report =
        if ((ULong.fromRaw(1) <= TM_12_28_FunctionalMonitoringDefinitionReport_n1) && (TM_12_28_FunctionalMonitoringDefinitionReport_n1 <= ULong.fromRaw(4095))) then
            val report_nCount = TM_12_28_FunctionalMonitoringDefinitionReport_n1.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val report = TM_12_28_FunctionalMonitoringDefinitionReport_report_Decode_loop(codec, report_nCount, Vector.empty[TTM_12_28_MonitoringDefinitionReport], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val report = TTM_12_28_FunctionalMonitoringDefinitionReport_report(report_nCount, bdg)
                    ghostExpr {
                        report.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    report
            }
            report
        else return LeftMut(ERR_ACN_DECODE_TM_12_28_FUNCTIONALMONITORINGDEFINITIONREPORT_REPORT)
    TTM_12_28_FunctionalMonitoringDefinitionReport_report_IsConstraintValid(report) match {
        case Left(l) =>
            LeftMut[Int, TTM_12_28_FunctionalMonitoringDefinitionReport_report](l)
        case Right(_) =>
            RightMut[Int, TTM_12_28_FunctionalMonitoringDefinitionReport_report](report)
    }
}.ensuring { (res: EitherMut[Int, TTM_12_28_FunctionalMonitoringDefinitionReport_report]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_12_28_FunctionalMonitoringDefinitionReport_report_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TM_12_28_FunctionalMonitoringDefinitionReport_report_ACN_Decode_pure(codec: ACN, TM_12_28_FunctionalMonitoringDefinitionReport_n1: ULong): (ACN, EitherMut[Int, TTM_12_28_FunctionalMonitoringDefinitionReport_report]) = {
    require(codec.base.bitStream.validate_offset_bits(537239430L))
    val cpy = snapshot(codec)
    val res = TM_12_28_FunctionalMonitoringDefinitionReport_report_ACN_Decode(cpy, TM_12_28_FunctionalMonitoringDefinitionReport_n1)
    (cpy, res)
}