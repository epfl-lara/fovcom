/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

val maxTM_12_28_StatusReportCount: Int = 4095 // variables:188

def TTM_12_28_StatusReport_IsConstraintValid(pVal: TTM_12_28_StatusReport): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TFMON_ID_IsConstraintValid(pVal.fmon_ID)
    if ret.isRight then
        ret = TFMON_ProtectionStatus_IsConstraintValid(pVal.fmonProtectionStatus)
        if ret.isRight then
            ret = TFMON_Status_IsConstraintValid(pVal.fmonStatus)
            if ret.isRight then
                ret = TFMON_CheckingStatus_IsConstraintValid(pVal.fmonCheckingStatus)
    ret
}

def TTM_12_28_StatusReport_Initialize(): TTM_12_28_StatusReport = TTM_12_28_StatusReport(fmon_ID = TFMON_ID.Tfunction0, fmonProtectionStatus = TFMON_ProtectionStatus.Tunprotected, fmonStatus = TFMON_Status.TFMON_Status_disabled, fmonCheckingStatus = TFMON_CheckingStatus.TFMON_CheckingStatus_unchecked)

@opaque @inlineOnce 
def TTM_12_28_StatusReport_ACN_Encode(pVal: TTM_12_28_StatusReport, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(36L))
    TTM_12_28_StatusReport_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode fmon_ID */
    TFMON_ID_ACN_Encode(pVal.fmon_ID, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 36L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode fmonProtectionStatus */
    TFMON_ProtectionStatus_ACN_Encode(pVal.fmonProtectionStatus, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 4L, 1L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 33L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 1L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode fmonStatus */
    TFMON_Status_ACN_Encode(pVal.fmonStatus, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_3.base.bitStream, codec.base.bitStream, 3L, 1L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 34L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = 1L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    @ghost val codec_0_4 = snapshot(codec)
    /* Encode fmonCheckingStatus */
    TFMON_CheckingStatus_ACN_Encode(pVal.fmonCheckingStatus, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 36L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_3 = 2L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 36L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2 + size_3)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTM_12_28_StatusReport_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTM_12_28_StatusReport] =
{
    require(codec.base.bitStream.validate_offset_bits(36L))

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode fmon_ID */
    val pVal_fmon_ID = TFMON_ID_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 36L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode fmonProtectionStatus */
    val pVal_fmonProtectionStatus = TFMON_ProtectionStatus_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 4L, 1L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 33L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 1L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode fmonStatus */
    val pVal_fmonStatus = TFMON_Status_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_3.base.bitStream, codec.base.bitStream, 3L, 1L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 34L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = 1L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    @ghost val codec_0_4 = snapshot(codec)
    /* Decode fmonCheckingStatus */
    val pVal_fmonCheckingStatus = TFMON_CheckingStatus_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 36L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_3 = 2L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 36L)
    }
    val pVal = TTM_12_28_StatusReport(pVal_fmon_ID, pVal_fmonProtectionStatus, pVal_fmonStatus, pVal_fmonCheckingStatus)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2 + size_3)
    }

    TTM_12_28_StatusReport_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTM_12_28_StatusReport](l)
        case Right(_) => RightMut[ErrorCode, TTM_12_28_StatusReport](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTM_12_28_StatusReport]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_12_28_StatusReport_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTM_12_28_StatusReport_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTM_12_28_StatusReport]) =
{
    require(codec.base.bitStream.validate_offset_bits(36L))
    val cpy = snapshot(codec)
    val res = TTM_12_28_StatusReport_ACN_Decode(cpy)
    (cpy, res)
}

def TTM_12_28_FunctionalMonitoringDefinitionStatusReport_statusReport_IsConstraintValid(pVal: TTM_12_28_FunctionalMonitoringDefinitionStatusReport_statusReport): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = ((1 <= pVal.nCount) && (pVal.nCount <= 4095)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TTM_12_28_StatusReport_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TTM_12_28_FunctionalMonitoringDefinitionStatusReport_IsConstraintValid(pVal: TTM_12_28_FunctionalMonitoringDefinitionStatusReport): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TTM_12_28_FunctionalMonitoringDefinitionStatusReport_statusReport_IsConstraintValid(pVal.statusReport)
    ret
}

def TTM_12_28_FunctionalMonitoringDefinitionStatusReport_statusReport_Initialize(): TTM_12_28_FunctionalMonitoringDefinitionStatusReport_statusReport = TTM_12_28_FunctionalMonitoringDefinitionStatusReport_statusReport(1, Vector.fill(4095)(TTM_12_28_StatusReport_Initialize()))
def TTM_12_28_FunctionalMonitoringDefinitionStatusReport_Initialize(): TTM_12_28_FunctionalMonitoringDefinitionStatusReport = TTM_12_28_FunctionalMonitoringDefinitionStatusReport(statusReport = TTM_12_28_FunctionalMonitoringDefinitionStatusReport_statusReport_Initialize())

@opaque @inlineOnce 
def TTM_12_28_FunctionalMonitoringDefinitionStatusReport_ACN_Encode(pVal: TTM_12_28_FunctionalMonitoringDefinitionStatusReport, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(147452L))
    var i1: Int = 0
    TTM_12_28_FunctionalMonitoringDefinitionStatusReport_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val TM_12_28_FunctionalMonitoringDefinitionStatusReport_n = ULong.fromRaw(pVal.statusReport.nCount)
    if TM_12_28_FunctionalMonitoringDefinitionStatusReport_n < ULong.fromRaw(1) || TM_12_28_FunctionalMonitoringDefinitionStatusReport_n > ULong.fromRaw(4095) then
        return Left(860)
    /* Encode TM_12_28_FunctionalMonitoringDefinitionStatusReport_n */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(TM_12_28_FunctionalMonitoringDefinitionStatusReport_n)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(TM_12_28_FunctionalMonitoringDefinitionStatusReport_n)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 147452L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode statusReport */
    TM_12_28_FunctionalMonitoringDefinitionStatusReport_statusReport_ACN_Encode(codec, pVal, TM_12_28_FunctionalMonitoringDefinitionStatusReport_n, pVal.statusReport) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 147452L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.statusReport.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 147452L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TM_12_28_FunctionalMonitoringDefinitionStatusReport_statusReport_Encode_loop(codec: ACN, statusReport: TTM_12_28_FunctionalMonitoringDefinitionStatusReport_statusReport, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= statusReport.nCount))
    require((1 <= statusReport.nCount) && (statusReport.nCount <= statusReport.arr.size) && (statusReport.arr.size <= 4095))
    require(codec.base.bitStream.validate_offset_bits((36L * (statusReport.nCount - i1))))
    decreases(statusReport.nCount - i1)
    if (i1 == statusReport.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 36L * (statusReport.nCount - i1), 36L)
        }
        TTM_12_28_StatusReport_ACN_Encode(statusReport.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(36L * (i1 + 1) == 36L * i1 + 36L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 36L * (statusReport.nCount - i1), 36L)
            check(codec.base.bitStream.validate_offset_bits(36L * (statusReport.nCount - (i1 + 1))))
        }
        val res = TM_12_28_FunctionalMonitoringDefinitionStatusReport_statusReport_Encode_loop(codec, statusReport, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TTM_12_28_FunctionalMonitoringDefinitionStatusReport_statusReport.sizeRange(statusReport.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, statusReport.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + statusReport.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TTM_12_28_FunctionalMonitoringDefinitionStatusReport_statusReport.sizeRange(statusReport.arr, codecSnap1.base.bitStream.bitIndex, i1, statusReport.nCount) == statusReport.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TTM_12_28_FunctionalMonitoringDefinitionStatusReport_statusReport.sizeRange(statusReport.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, statusReport.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TTM_12_28_FunctionalMonitoringDefinitionStatusReport_statusReport.sizeRange(statusReport.arr, codecSnap1.base.bitStream.bitIndex, i1, statusReport.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_12_28_FunctionalMonitoringDefinitionStatusReport_statusReport.sizeRange(statusReport.arr, old(codec).base.bitStream.bitIndex, i1, statusReport.nCount)
    }
}



@opaque @inlineOnce
def TM_12_28_FunctionalMonitoringDefinitionStatusReport_statusReport_ACN_Encode(codec: ACN, pVal: TTM_12_28_FunctionalMonitoringDefinitionStatusReport, TM_12_28_FunctionalMonitoringDefinitionStatusReport_n: ULong, statusReport: TTM_12_28_FunctionalMonitoringDefinitionStatusReport_statusReport): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(147420L))
    @ghost val oldCdc = snapshot(codec)
    TTM_12_28_FunctionalMonitoringDefinitionStatusReport_statusReport_IsConstraintValid(statusReport) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    TM_12_28_FunctionalMonitoringDefinitionStatusReport_statusReport_Encode_loop(codec, statusReport, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                statusReport.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
            ()
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + statusReport.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTM_12_28_FunctionalMonitoringDefinitionStatusReport_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTM_12_28_FunctionalMonitoringDefinitionStatusReport] =
{
    require(codec.base.bitStream.validate_offset_bits(147452L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode TM_12_28_FunctionalMonitoringDefinitionStatusReport_n */
    val TM_12_28_FunctionalMonitoringDefinitionStatusReport_n = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 147452L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode statusReport */
    val pVal_statusReport = TM_12_28_FunctionalMonitoringDefinitionStatusReport_statusReport_ACN_Decode(codec, TM_12_28_FunctionalMonitoringDefinitionStatusReport_n) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 147452L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_statusReport.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 147452L)
    }
    val pVal = TTM_12_28_FunctionalMonitoringDefinitionStatusReport(pVal_statusReport)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }

    TTM_12_28_FunctionalMonitoringDefinitionStatusReport_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTM_12_28_FunctionalMonitoringDefinitionStatusReport](l)
        case Right(_) => RightMut[ErrorCode, TTM_12_28_FunctionalMonitoringDefinitionStatusReport](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTM_12_28_FunctionalMonitoringDefinitionStatusReport]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_12_28_FunctionalMonitoringDefinitionStatusReport_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTM_12_28_FunctionalMonitoringDefinitionStatusReport_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTM_12_28_FunctionalMonitoringDefinitionStatusReport]) =
{
    require(codec.base.bitStream.validate_offset_bits(147452L))
    val cpy = snapshot(codec)
    val res = TTM_12_28_FunctionalMonitoringDefinitionStatusReport_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def TM_12_28_FunctionalMonitoringDefinitionStatusReport_statusReport_Decode_loop(codec: ACN, nCount: Int, statusReport: Vector[TTM_12_28_StatusReport], i1: Int): EitherMut[Int, Vector[TTM_12_28_StatusReport]] = {
    require((1 <= nCount) && (nCount <= 4095))
    require((0 <= i1) && (i1 <= nCount))
    require(statusReport.size == i1)
    require(codec.base.bitStream.validate_offset_bits((36L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(statusReport)
            vecRangesEqSlicedLemma(statusReport, statusReport, 0, statusReport.size, 0, i1)
        }
        RightMut[Int, Vector[TTM_12_28_StatusReport]](statusReport)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 36L * (nCount - i1), 36L)
        }
        val statusReport_arr_i1_ = TTM_12_28_StatusReport_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(36L * (i1 + 1) == 36L * i1 + 36L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 36L * (nCount - i1), 36L)
            check(codec.base.bitStream.validate_offset_bits(36L * (nCount - (i1 + 1))))
        }
        val res = TM_12_28_FunctionalMonitoringDefinitionStatusReport_statusReport_Decode_loop(codec, nCount, statusReport.append(statusReport_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(statusReport, newVec, statusReport_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(statusReport.append(statusReport_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(statusReport.list, statusReport_arr_i1_, i1)
                    Vector.listApplyEqVecApply(statusReport.append(statusReport_arr_i1_), i1)
                    check(statusReport_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TTM_12_28_StatusReport]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(statusReport, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_12_28_FunctionalMonitoringDefinitionStatusReport_statusReport.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def TM_12_28_FunctionalMonitoringDefinitionStatusReport_statusReport_ACN_Decode(codec: ACN, TM_12_28_FunctionalMonitoringDefinitionStatusReport_n: ULong): EitherMut[Int, TTM_12_28_FunctionalMonitoringDefinitionStatusReport_statusReport] = {
    require(codec.base.bitStream.validate_offset_bits(147420L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val statusReport =
        if ((ULong.fromRaw(1) <= TM_12_28_FunctionalMonitoringDefinitionStatusReport_n) && (TM_12_28_FunctionalMonitoringDefinitionStatusReport_n <= ULong.fromRaw(4095))) then
            val statusReport_nCount = TM_12_28_FunctionalMonitoringDefinitionStatusReport_n.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val statusReport = TM_12_28_FunctionalMonitoringDefinitionStatusReport_statusReport_Decode_loop(codec, statusReport_nCount, Vector.empty[TTM_12_28_StatusReport], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val statusReport = TTM_12_28_FunctionalMonitoringDefinitionStatusReport_statusReport(statusReport_nCount, bdg)
                    ghostExpr {
                        statusReport.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    statusReport
            }
            statusReport
        else return LeftMut(ERR_ACN_DECODE_TM_12_28_FUNCTIONALMONITORINGDEFINITIONSTATUSREPORT_STATUSREPORT)
    TTM_12_28_FunctionalMonitoringDefinitionStatusReport_statusReport_IsConstraintValid(statusReport) match {
        case Left(l) =>
            LeftMut[Int, TTM_12_28_FunctionalMonitoringDefinitionStatusReport_statusReport](l)
        case Right(_) =>
            RightMut[Int, TTM_12_28_FunctionalMonitoringDefinitionStatusReport_statusReport](statusReport)
    }
}.ensuring { (res: EitherMut[Int, TTM_12_28_FunctionalMonitoringDefinitionStatusReport_statusReport]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_12_28_FunctionalMonitoringDefinitionStatusReport_statusReport_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TM_12_28_FunctionalMonitoringDefinitionStatusReport_statusReport_ACN_Decode_pure(codec: ACN, TM_12_28_FunctionalMonitoringDefinitionStatusReport_n: ULong): (ACN, EitherMut[Int, TTM_12_28_FunctionalMonitoringDefinitionStatusReport_statusReport]) = {
    require(codec.base.bitStream.validate_offset_bits(147420L))
    val cpy = snapshot(codec)
    val res = TM_12_28_FunctionalMonitoringDefinitionStatusReport_statusReport_ACN_Decode(cpy, TM_12_28_FunctionalMonitoringDefinitionStatusReport_n)
    (cpy, res)
}