/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._


def TTM_14_16_EventReportBlockingForwardControlConfigurationContnetReport_IsConstraintValid(pVal: TTM_14_16_EventReportBlockingForwardControlConfigurationContnetReport): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TEventDefinitionForwardControl_IsConstraintValid(pVal)
    ret
}

def TTM_14_16_EventReportBlockingForwardControlConfigurationContnetReport_Initialize(): TTM_14_16_EventReportBlockingForwardControlConfigurationContnetReport = TEventDefinitionForwardControl_Initialize()

@opaque @inlineOnce 
def TTM_14_16_EventReportBlockingForwardControlConfigurationContnetReport_ACN_Encode(pVal: TTM_14_16_EventReportBlockingForwardControlConfigurationContnetReport, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(32117L))
    TTM_14_16_EventReportBlockingForwardControlConfigurationContnetReport_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    TEventDefinitionForwardControl_ACN_Encode(pVal, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTM_14_16_EventReportBlockingForwardControlConfigurationContnetReport_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTM_14_16_EventReportBlockingForwardControlConfigurationContnetReport] =
{
    require(codec.base.bitStream.validate_offset_bits(32117L))

    @ghost val oldCdc = snapshot(codec)
    val pVal = TEventDefinitionForwardControl_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)

    TTM_14_16_EventReportBlockingForwardControlConfigurationContnetReport_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTM_14_16_EventReportBlockingForwardControlConfigurationContnetReport](l)
        case Right(_) => RightMut[ErrorCode, TTM_14_16_EventReportBlockingForwardControlConfigurationContnetReport](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTM_14_16_EventReportBlockingForwardControlConfigurationContnetReport]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_14_16_EventReportBlockingForwardControlConfigurationContnetReport_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTM_14_16_EventReportBlockingForwardControlConfigurationContnetReport_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTM_14_16_EventReportBlockingForwardControlConfigurationContnetReport]) =
{
    require(codec.base.bitStream.validate_offset_bits(32117L))
    val cpy = snapshot(codec)
    val res = TTM_14_16_EventReportBlockingForwardControlConfigurationContnetReport_ACN_Decode(cpy)
    (cpy, res)
}