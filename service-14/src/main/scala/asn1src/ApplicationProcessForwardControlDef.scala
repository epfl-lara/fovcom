/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TServiceTypeForwardControl --------------------------------------------*/


case class TServiceTypeForwardControl_messages (nCount: Int, arr: Vector[TMessageSubtype_ID])
{
    require(this.arr.size <= 31 && 0 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775559L))
        TServiceTypeForwardControl_messages.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 248L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775559L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775559L))
        TServiceTypeForwardControl_messages.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775559L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775559L))
        require((offset % 8L) == (otherOffset % 8L))
        TServiceTypeForwardControl_messages.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775559L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775559L))
        require((offset % 16L) == (otherOffset % 16L))
        TServiceTypeForwardControl_messages.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775559L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775559L))
        require((offset % 32L) == (otherOffset % 32L))
        TServiceTypeForwardControl_messages.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TServiceTypeForwardControl_messages {
    def sizeRange(ls: Vector[ULong], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 8L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = 8L
            assert(elemSize == 8L)
            elemSize + TServiceTypeForwardControl_messages.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 8L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[ULong], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 8L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 8L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 8L
            val elemSizeOtherOff = 8L
            assert(elemSizeOff == 8L)
            assert(elemSizeOtherOff == 8L)
            TServiceTypeForwardControl_messages.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TServiceTypeForwardControl_messages.sizeRange(ls, offset, from, to) == TServiceTypeForwardControl_messages.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[ULong], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 8L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 8L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 8L
            val elemSizeOtherOff = 8L
            assert(elemSizeOff == 8L)
            assert(elemSizeOtherOff == 8L)
            TServiceTypeForwardControl_messages.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TServiceTypeForwardControl_messages.sizeRange(ls, offset, from, to) == TServiceTypeForwardControl_messages.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[ULong], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 8L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 8L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 8L
            val elemSizeOtherOff = 8L
            assert(elemSizeOff == 8L)
            assert(elemSizeOtherOff == 8L)
            TServiceTypeForwardControl_messages.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TServiceTypeForwardControl_messages.sizeRange(ls, offset, from, to) == TServiceTypeForwardControl_messages.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[ULong], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 8L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 8L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 8L
            val elemSizeOtherOff = 8L
            assert(elemSizeOff == 8L)
            assert(elemSizeOtherOff == 8L)
            TServiceTypeForwardControl_messages.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TServiceTypeForwardControl_messages.sizeRange(ls, offset, from, to) == TServiceTypeForwardControl_messages.sizeRange(ls, otherOffset, from, to)
    }
}

case class TServiceTypeForwardControl (
    serviceType: TServiceType_ID, 
    messages: TServiceTypeForwardControl_messages
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775519L))
        val size_0 = 8L
        val size_1 = 32L
        val size_2 = this.messages.size(offset + size_0 + size_1)
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 288L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775519L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775519L))
        val size_0_offset = 8L
        val size_0_otherOffset = 8L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.messages.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.messages.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.messages.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775519L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775519L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 8L
        val size_0_otherOffset = 8L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.messages.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.messages.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.messages.sizeLemmaNextByte(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775519L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775519L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 8L
        val size_0_otherOffset = 8L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.messages.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.messages.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.messages.sizeLemmaNextWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775519L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775519L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 8L
        val size_0_otherOffset = 8L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.messages.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.messages.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.messages.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_SERVICETYPEFORWARDCONTROL_MESSAGES: Int = 160 /*(SIZE(0 .. maxMessageSubtypeForwardControl)) */
@inline @cCode.inline val ERR_SERVICETYPEFORWARDCONTROL_MESSAGES_ELM_2: Int = 155 /* */

@inline @cCode.inline val ERR_SERVICETYPEFORWARDCONTROL: Int = 165 /* */
@inline @cCode.inline val ERR_SERVICETYPEFORWARDCONTROL_SERVICETYPE_2: Int = 143 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_SERVICETYPEFORWARDCONTROL: Int = 168 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_SERVICETYPEFORWARDCONTROL_SERVICETYPE_2: Int = 146 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_SERVICETYPEFORWARDCONTROL_N3_UNINITIALIZED: Int = 169 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_SERVICETYPEFORWARDCONTROL_N3: Int = 148 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_SERVICETYPEFORWARDCONTROL_MESSAGES: Int = 163 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_SERVICETYPEFORWARDCONTROL_MESSAGES_ELM_2: Int = 158 /*  */
@inline @cCode.inline val TServiceTypeForwardControl_REQUIRED_BYTES_FOR_ACN_ENCODING = 36
@inline @cCode.inline val TServiceTypeForwardControl_REQUIRED_BITS_FOR_ACN_ENCODING = 288

@inline @cCode.inline val ERR_ACN_DECODE_SERVICETYPEFORWARDCONTROL: Int = 170 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_SERVICETYPEFORWARDCONTROL_SERVICETYPE_2: Int = 147 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_SERVICETYPEFORWARDCONTROL_N3: Int = 149 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_SERVICETYPEFORWARDCONTROL_MESSAGES: Int = 164 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_SERVICETYPEFORWARDCONTROL_MESSAGES_ELM_2: Int = 159 /*  */
/*-- TSingleApplicationProcessForwardControl --------------------------------------------*/


case class TSingleApplicationProcessForwardControl_services (nCount: Int, arr: Vector[TServiceTypeForwardControl])
{
    require(this.arr.size <= 31 && 0 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854766879L))
        TSingleApplicationProcessForwardControl_services.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 8928L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854766879L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854766879L))
        TSingleApplicationProcessForwardControl_services.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854766879L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854766879L))
        require((offset % 8L) == (otherOffset % 8L))
        TSingleApplicationProcessForwardControl_services.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854766879L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854766879L))
        require((offset % 16L) == (otherOffset % 16L))
        TSingleApplicationProcessForwardControl_services.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854766879L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854766879L))
        require((offset % 32L) == (otherOffset % 32L))
        TSingleApplicationProcessForwardControl_services.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TSingleApplicationProcessForwardControl_services {
    def sizeRange(ls: Vector[TServiceTypeForwardControl], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 288L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(0L <= elemSize && elemSize <= 288L)
            elemSize + TSingleApplicationProcessForwardControl_services.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 288L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TServiceTypeForwardControl], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 288L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 288L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 288L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 288L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TSingleApplicationProcessForwardControl_services.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TSingleApplicationProcessForwardControl_services.sizeRange(ls, offset, from, to) == TSingleApplicationProcessForwardControl_services.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TServiceTypeForwardControl], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 288L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 288L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 288L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 288L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TSingleApplicationProcessForwardControl_services.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TSingleApplicationProcessForwardControl_services.sizeRange(ls, offset, from, to) == TSingleApplicationProcessForwardControl_services.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TServiceTypeForwardControl], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 288L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 288L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 288L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 288L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TSingleApplicationProcessForwardControl_services.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TSingleApplicationProcessForwardControl_services.sizeRange(ls, offset, from, to) == TSingleApplicationProcessForwardControl_services.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TServiceTypeForwardControl], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 288L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 288L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 288L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 288L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TSingleApplicationProcessForwardControl_services.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TSingleApplicationProcessForwardControl_services.sizeRange(ls, offset, from, to) == TSingleApplicationProcessForwardControl_services.sizeRange(ls, otherOffset, from, to)
    }
}

case class TSingleApplicationProcessForwardControl (
    applicationProcess_ID: TApplicationProcess_ID, 
    services: TSingleApplicationProcessForwardControl_services
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854766836L))
        val size_0 = 11L
        val size_1 = 32L
        val size_2 = this.services.size(offset + size_0 + size_1)
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 8971L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854766836L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854766836L))
        val size_0_offset = 11L
        val size_0_otherOffset = 11L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.services.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.services.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.services.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854766836L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854766836L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 11L
        val size_0_otherOffset = 11L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.services.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.services.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.services.sizeLemmaNextByte(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854766836L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854766836L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 11L
        val size_0_otherOffset = 11L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.services.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.services.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.services.sizeLemmaNextWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854766836L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854766836L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 11L
        val size_0_otherOffset = 11L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.services.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.services.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.services.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_SINGLEAPPLICATIONPROCESSFORWARDCONTROL_SERVICES: Int = 127 /*(SIZE(0 .. maxServiceTypeForwardControl)) */
@inline @cCode.inline val ERR_SINGLEAPPLICATIONPROCESSFORWARDCONTROL_SERVICES_ELM_2: Int = 122 /* */

@inline @cCode.inline val ERR_SINGLEAPPLICATIONPROCESSFORWARDCONTROL: Int = 132 /* */
@inline @cCode.inline val ERR_SINGLEAPPLICATIONPROCESSFORWARDCONTROL_APPLICATIONPROCESS_ID_2: Int = 83 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_SINGLEAPPLICATIONPROCESSFORWARDCONTROL: Int = 135 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_SINGLEAPPLICATIONPROCESSFORWARDCONTROL_APPLICATIONPROCESS_ID_2: Int = 86 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_SINGLEAPPLICATIONPROCESSFORWARDCONTROL_N2_UNINITIALIZED: Int = 136 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_SINGLEAPPLICATIONPROCESSFORWARDCONTROL_N2: Int = 88 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_SINGLEAPPLICATIONPROCESSFORWARDCONTROL_SERVICES: Int = 130 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_SINGLEAPPLICATIONPROCESSFORWARDCONTROL_SERVICES_ELM_2: Int = 125 /*  */
@inline @cCode.inline val TSingleApplicationProcessForwardControl_REQUIRED_BYTES_FOR_ACN_ENCODING = 1122
@inline @cCode.inline val TSingleApplicationProcessForwardControl_REQUIRED_BITS_FOR_ACN_ENCODING = 8971

@inline @cCode.inline val ERR_ACN_DECODE_SINGLEAPPLICATIONPROCESSFORWARDCONTROL: Int = 137 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_SINGLEAPPLICATIONPROCESSFORWARDCONTROL_APPLICATIONPROCESS_ID_2: Int = 87 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_SINGLEAPPLICATIONPROCESSFORWARDCONTROL_N2: Int = 89 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_SINGLEAPPLICATIONPROCESSFORWARDCONTROL_SERVICES: Int = 131 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_SINGLEAPPLICATIONPROCESSFORWARDCONTROL_SERVICES_ELM_2: Int = 126 /*  */
/*-- TApplicationProcessForwardControl --------------------------------------------*/


case class TApplicationProcessForwardControl_forwardControl (nCount: Int, arr: Vector[TSingleApplicationProcessForwardControl])
{
    require(this.arr.size <= 31 && 1 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854497706L))
        TApplicationProcessForwardControl_forwardControl.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 278101L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854497706L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854497706L))
        TApplicationProcessForwardControl_forwardControl.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854497706L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854497706L))
        require((offset % 8L) == (otherOffset % 8L))
        TApplicationProcessForwardControl_forwardControl.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854497706L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854497706L))
        require((offset % 16L) == (otherOffset % 16L))
        TApplicationProcessForwardControl_forwardControl.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854497706L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854497706L))
        require((offset % 32L) == (otherOffset % 32L))
        TApplicationProcessForwardControl_forwardControl.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TApplicationProcessForwardControl_forwardControl {
    def sizeRange(ls: Vector[TSingleApplicationProcessForwardControl], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 8971L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(0L <= elemSize && elemSize <= 8971L)
            elemSize + TApplicationProcessForwardControl_forwardControl.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 8971L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TSingleApplicationProcessForwardControl], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 8971L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 8971L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 8971L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 8971L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TApplicationProcessForwardControl_forwardControl.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TApplicationProcessForwardControl_forwardControl.sizeRange(ls, offset, from, to) == TApplicationProcessForwardControl_forwardControl.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TSingleApplicationProcessForwardControl], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 8971L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 8971L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 8971L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 8971L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TApplicationProcessForwardControl_forwardControl.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TApplicationProcessForwardControl_forwardControl.sizeRange(ls, offset, from, to) == TApplicationProcessForwardControl_forwardControl.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TSingleApplicationProcessForwardControl], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 8971L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 8971L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 8971L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 8971L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TApplicationProcessForwardControl_forwardControl.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TApplicationProcessForwardControl_forwardControl.sizeRange(ls, offset, from, to) == TApplicationProcessForwardControl_forwardControl.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TSingleApplicationProcessForwardControl], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 8971L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 8971L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 8971L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 8971L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TApplicationProcessForwardControl_forwardControl.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TApplicationProcessForwardControl_forwardControl.sizeRange(ls, offset, from, to) == TApplicationProcessForwardControl_forwardControl.sizeRange(ls, otherOffset, from, to)
    }
}

case class TApplicationProcessForwardControl (
    forwardControl: TApplicationProcessForwardControl_forwardControl
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854497674L))
        val size_0 = 32L
        val size_1 = this.forwardControl.size(offset + size_0)
        size_0 + size_1
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 278133L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854497674L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854497674L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.forwardControl.size(offset + size_0_offset)
        val size_1_otherOffset = this.forwardControl.size(otherOffset + size_0_otherOffset)
        this.forwardControl.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854497674L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854497674L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.forwardControl.size(offset + size_0_offset)
        val size_1_otherOffset = this.forwardControl.size(otherOffset + size_0_otherOffset)
        this.forwardControl.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854497674L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854497674L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.forwardControl.size(offset + size_0_offset)
        val size_1_otherOffset = this.forwardControl.size(otherOffset + size_0_otherOffset)
        this.forwardControl.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854497674L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854497674L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.forwardControl.size(offset + size_0_offset)
        val size_1_otherOffset = this.forwardControl.size(otherOffset + size_0_otherOffset)
        this.forwardControl.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_APPLICATIONPROCESSFORWARDCONTROL_FORWARDCONTROL: Int = 67 /*(SIZE(1 .. maxApplicationProcessForwardControlCount)) */
@inline @cCode.inline val ERR_APPLICATIONPROCESSFORWARDCONTROL_FORWARDCONTROL_ELM_2: Int = 62 /* */

@inline @cCode.inline val ERR_APPLICATIONPROCESSFORWARDCONTROL: Int = 72 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_APPLICATIONPROCESSFORWARDCONTROL: Int = 75 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_APPLICATIONPROCESSFORWARDCONTROL_N1_UNINITIALIZED: Int = 76 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_APPLICATIONPROCESSFORWARDCONTROL_N1: Int = 1 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_APPLICATIONPROCESSFORWARDCONTROL_FORWARDCONTROL: Int = 70 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_APPLICATIONPROCESSFORWARDCONTROL_FORWARDCONTROL_ELM_2: Int = 65 /*  */
@inline @cCode.inline val TApplicationProcessForwardControl_REQUIRED_BYTES_FOR_ACN_ENCODING = 34767
@inline @cCode.inline val TApplicationProcessForwardControl_REQUIRED_BITS_FOR_ACN_ENCODING = 278133

@inline @cCode.inline val ERR_ACN_DECODE_APPLICATIONPROCESSFORWARDCONTROL: Int = 77 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_APPLICATIONPROCESSFORWARDCONTROL_N1: Int = 2 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_APPLICATIONPROCESSFORWARDCONTROL_FORWARDCONTROL: Int = 71 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_APPLICATIONPROCESSFORWARDCONTROL_FORWARDCONTROL_ELM_2: Int = 66 /*  */

// @inline @cCode.inline val maxApplicationProcessForwardControlCount: Int = 31 // defined in body
// @inline @cCode.inline val maxServiceTypeForwardControl: Int = 31 // defined in body
// @inline @cCode.inline val maxMessageSubtypeForwardControl: Int = 31 // defined in body

