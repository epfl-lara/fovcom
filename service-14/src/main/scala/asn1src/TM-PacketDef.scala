/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TTM_PacketSecondaryHeader --------------------------------------------*/
type TTM_PacketSecondaryHeader_messageTypeCounter = ULong


case class TTM_PacketSecondaryHeader (
    tmPacketPusVersionNumber: NullType, 
    spacecraftTimeReferenceStatus: TSpacecraftTimeReferenceStatus, 
    messageTypeCounter: TTM_PacketSecondaryHeader_messageTypeCounter, 
    destination_ID: TApplicationProcessUser_ID, 
    time: TCDS_AbsoluteTime_PFC_2
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775707L))
        val size_0 = 0L
        val size_1 = 4L
        val size_2 = 16L
        val size_3 = 16L
        val size_4 = this.time.size(offset + size_0 + size_1 + size_2 + size_3)
        size_0 + size_1 + size_2 + size_3 + size_4
    }.ensuring { (res: Long) => 
        res == 100L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775707L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775707L))
        val size_0_offset = 0L
        val size_0_otherOffset = 0L
        val size_1_offset = 4L
        val size_1_otherOffset = 4L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        val size_3_offset = 16L
        val size_3_otherOffset = 16L
        val size_4_offset = this.time.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset)
        val size_4_otherOffset = this.time.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset)
        this.time.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775707L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775707L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 0L
        val size_0_otherOffset = 0L
        val size_1_offset = 4L
        val size_1_otherOffset = 4L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        val size_3_offset = 16L
        val size_3_otherOffset = 16L
        val size_4_offset = this.time.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset)
        val size_4_otherOffset = this.time.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset)
        this.time.sizeLemmaNextByte(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775707L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775707L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 0L
        val size_0_otherOffset = 0L
        val size_1_offset = 4L
        val size_1_otherOffset = 4L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        val size_3_offset = 16L
        val size_3_otherOffset = 16L
        val size_4_offset = this.time.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset)
        val size_4_otherOffset = this.time.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset)
        this.time.sizeLemmaNextWord(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775707L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775707L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 0L
        val size_0_otherOffset = 0L
        val size_1_offset = 4L
        val size_1_otherOffset = 4L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        val size_3_offset = 16L
        val size_3_otherOffset = 16L
        val size_4_offset = this.time.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset)
        val size_4_otherOffset = this.time.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset)
        this.time.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TM_PACKETSECONDARYHEADER_MESSAGETYPECOUNTER: Int = 3596 /*(0 .. 65535) */

@inline @cCode.inline val ERR_TM_PACKETSECONDARYHEADER: Int = 3641 /* */
@inline @cCode.inline val ERR_TM_PACKETSECONDARYHEADER_SPACECRAFTTIMEREFERENCESTATUS_2: Int = 3591 /* */
@inline @cCode.inline val ERR_TM_PACKETSECONDARYHEADER_DESTINATION_ID_2: Int = 3606 /* */
@inline @cCode.inline val ERR_TM_PACKETSECONDARYHEADER_TIME_2_2: Int = 3636 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TM_PACKETSECONDARYHEADER: Int = 3644 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_PACKETSECONDARYHEADER_SPACECRAFTTIMEREFERENCESTATUS_2: Int = 3594 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_PACKETSECONDARYHEADER_MESSAGETYPECOUNTER: Int = 3599 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_PACKETSECONDARYHEADER_DESTINATION_ID_2: Int = 3609 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_PACKETSECONDARYHEADER_TIME_2_2: Int = 3639 /*  */
@inline @cCode.inline val TTM_PacketSecondaryHeader_REQUIRED_BYTES_FOR_ACN_ENCODING = 13
@inline @cCode.inline val TTM_PacketSecondaryHeader_REQUIRED_BITS_FOR_ACN_ENCODING = 100

@inline @cCode.inline val ERR_ACN_DECODE_TM_PACKETSECONDARYHEADER: Int = 3645 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_PACKETSECONDARYHEADER_SPACECRAFTTIMEREFERENCESTATUS_2: Int = 3595 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_PACKETSECONDARYHEADER_MESSAGETYPECOUNTER: Int = 3600 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_PACKETSECONDARYHEADER_DESTINATION_ID_2: Int = 3610 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_PACKETSECONDARYHEADER_TIME_2_2: Int = 3640 /*  */
/*-- TTM_DataWithSecondaryHeader --------------------------------------------*/

case class TTM_DataWithSecondaryHeader (
    secondaryHeader: TTM_PacketSecondaryHeader, 
    data: TTM_Payload, 
    packetErrorControl: OptionMut[TPacketErrorControl]
) {
    require(this.packetErrorControl.isDefined)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775653L))
        val size_1_0 = 0L
        val size_1_1 = 4L
        val size_1_2 = 8L
        val size_1_3 = 8L
        val size_1_4 = 16L
        val size_1_5 = 16L
        val size_1_6 = this.secondaryHeader.time.size(offset + size_1_0 + size_1_1 + size_1_2 + size_1_3 + size_1_4 + size_1_5)
        val size_0 = size_1_0 + size_1_1 + size_1_2 + size_1_3 + size_1_4 + size_1_5 + size_1_6
        val size_1 = this.data match {
            case TTM_Payload.tm_255_255_PRESENT(tm_255_255) =>
                alignedSizeToByte(8L, offset + size_0)
        }
        val size_2 = this.packetErrorControl match {
            case SomeMut(v) =>
                alignedSizeToByte(16L, offset + size_0 + size_1)
            case NoneMut() =>
                0L
        }
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 154L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775653L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775653L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_1_0_offset = 0L
        val size_1_1_offset = 4L
        val size_1_2_offset = 8L
        val size_1_3_offset = 8L
        val size_1_4_offset = 16L
        val size_1_5_offset = 16L
        val size_1_6_offset = this.secondaryHeader.time.size(offset + size_1_0_offset + size_1_1_offset + size_1_2_offset + size_1_3_offset + size_1_4_offset + size_1_5_offset)
        val size_0_offset = size_1_0_offset + size_1_1_offset + size_1_2_offset + size_1_3_offset + size_1_4_offset + size_1_5_offset + size_1_6_offset
        val size_1_0_otherOffset = 0L
        val size_1_1_otherOffset = 4L
        val size_1_2_otherOffset = 8L
        val size_1_3_otherOffset = 8L
        val size_1_4_otherOffset = 16L
        val size_1_5_otherOffset = 16L
        val size_1_6_otherOffset = this.secondaryHeader.time.size(otherOffset + size_1_0_otherOffset + size_1_1_otherOffset + size_1_2_otherOffset + size_1_3_otherOffset + size_1_4_otherOffset + size_1_5_otherOffset)
        val size_0_otherOffset = size_1_0_otherOffset + size_1_1_otherOffset + size_1_2_otherOffset + size_1_3_otherOffset + size_1_4_otherOffset + size_1_5_otherOffset + size_1_6_otherOffset
        this.secondaryHeader.sizeLemmaNextByte(offset, otherOffset)
        val size_1_offset = this.data match {
            case TTM_Payload.tm_255_255_PRESENT(tm_255_255) =>
                alignedSizeToByte(8L, offset + size_0_offset)
        }
        val size_1_otherOffset = this.data match {
            case TTM_Payload.tm_255_255_PRESENT(tm_255_255) =>
                alignedSizeToByte(8L, otherOffset + size_0_otherOffset)
        }
        this.data.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = this.packetErrorControl match {
            case SomeMut(v) =>
                alignedSizeToByte(16L, offset + size_0_offset + size_1_offset)
            case NoneMut() =>
                0L
        }
        val size_2_otherOffset = this.packetErrorControl match {
            case SomeMut(v) =>
                alignedSizeToByte(16L, otherOffset + size_0_otherOffset + size_1_otherOffset)
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775653L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775653L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_1_0_offset = 0L
        val size_1_1_offset = 4L
        val size_1_2_offset = 8L
        val size_1_3_offset = 8L
        val size_1_4_offset = 16L
        val size_1_5_offset = 16L
        val size_1_6_offset = this.secondaryHeader.time.size(offset + size_1_0_offset + size_1_1_offset + size_1_2_offset + size_1_3_offset + size_1_4_offset + size_1_5_offset)
        val size_0_offset = size_1_0_offset + size_1_1_offset + size_1_2_offset + size_1_3_offset + size_1_4_offset + size_1_5_offset + size_1_6_offset
        val size_1_0_otherOffset = 0L
        val size_1_1_otherOffset = 4L
        val size_1_2_otherOffset = 8L
        val size_1_3_otherOffset = 8L
        val size_1_4_otherOffset = 16L
        val size_1_5_otherOffset = 16L
        val size_1_6_otherOffset = this.secondaryHeader.time.size(otherOffset + size_1_0_otherOffset + size_1_1_otherOffset + size_1_2_otherOffset + size_1_3_otherOffset + size_1_4_otherOffset + size_1_5_otherOffset)
        val size_0_otherOffset = size_1_0_otherOffset + size_1_1_otherOffset + size_1_2_otherOffset + size_1_3_otherOffset + size_1_4_otherOffset + size_1_5_otherOffset + size_1_6_otherOffset
        this.secondaryHeader.sizeLemmaNextWord(offset, otherOffset)
        val size_1_offset = this.data match {
            case TTM_Payload.tm_255_255_PRESENT(tm_255_255) =>
                alignedSizeToByte(8L, offset + size_0_offset)
        }
        val size_1_otherOffset = this.data match {
            case TTM_Payload.tm_255_255_PRESENT(tm_255_255) =>
                alignedSizeToByte(8L, otherOffset + size_0_otherOffset)
        }
        this.data.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = this.packetErrorControl match {
            case SomeMut(v) =>
                alignedSizeToByte(16L, offset + size_0_offset + size_1_offset)
            case NoneMut() =>
                0L
        }
        val size_2_otherOffset = this.packetErrorControl match {
            case SomeMut(v) =>
                alignedSizeToByte(16L, otherOffset + size_0_otherOffset + size_1_otherOffset)
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775653L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775653L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_1_0_offset = 0L
        val size_1_1_offset = 4L
        val size_1_2_offset = 8L
        val size_1_3_offset = 8L
        val size_1_4_offset = 16L
        val size_1_5_offset = 16L
        val size_1_6_offset = this.secondaryHeader.time.size(offset + size_1_0_offset + size_1_1_offset + size_1_2_offset + size_1_3_offset + size_1_4_offset + size_1_5_offset)
        val size_0_offset = size_1_0_offset + size_1_1_offset + size_1_2_offset + size_1_3_offset + size_1_4_offset + size_1_5_offset + size_1_6_offset
        val size_1_0_otherOffset = 0L
        val size_1_1_otherOffset = 4L
        val size_1_2_otherOffset = 8L
        val size_1_3_otherOffset = 8L
        val size_1_4_otherOffset = 16L
        val size_1_5_otherOffset = 16L
        val size_1_6_otherOffset = this.secondaryHeader.time.size(otherOffset + size_1_0_otherOffset + size_1_1_otherOffset + size_1_2_otherOffset + size_1_3_otherOffset + size_1_4_otherOffset + size_1_5_otherOffset)
        val size_0_otherOffset = size_1_0_otherOffset + size_1_1_otherOffset + size_1_2_otherOffset + size_1_3_otherOffset + size_1_4_otherOffset + size_1_5_otherOffset + size_1_6_otherOffset
        this.secondaryHeader.sizeLemmaNextDWord(offset, otherOffset)
        val size_1_offset = this.data match {
            case TTM_Payload.tm_255_255_PRESENT(tm_255_255) =>
                alignedSizeToByte(8L, offset + size_0_offset)
        }
        val size_1_otherOffset = this.data match {
            case TTM_Payload.tm_255_255_PRESENT(tm_255_255) =>
                alignedSizeToByte(8L, otherOffset + size_0_otherOffset)
        }
        this.data.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = this.packetErrorControl match {
            case SomeMut(v) =>
                alignedSizeToByte(16L, offset + size_0_offset + size_1_offset)
            case NoneMut() =>
                0L
        }
        val size_2_otherOffset = this.packetErrorControl match {
            case SomeMut(v) =>
                alignedSizeToByte(16L, otherOffset + size_0_otherOffset + size_1_otherOffset)
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TM_DATAWITHSECONDARYHEADER: Int = 3551 /*(WITH COMPONENTS {packetErrorControl PRESENT}) */
@inline @cCode.inline val ERR_TM_DATAWITHSECONDARYHEADER_SECONDARYHEADER_2: Int = 3527 /* */
@inline @cCode.inline val ERR_TM_DATAWITHSECONDARYHEADER_DATA_2: Int = 3540 /* */
@inline @cCode.inline val ERR_TM_DATAWITHSECONDARYHEADER_PACKETERRORCONTROL_2: Int = 3548 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_TM_DATAWITHSECONDARYHEADER: Int = 3554 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_DATAWITHSECONDARYHEADER_SECONDARYHEADER: Int = 3525 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_DATAWITHSECONDARYHEADER_SECONDARYHEADER_SPACECRAFTTIMEREFERENCESTATUS_2: Int = 3471 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_DATAWITHSECONDARYHEADER_SECONDARYHEADER_SERVICETYPE_ID_UNINITIALIZED: Int = 3555 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_DATAWITHSECONDARYHEADER_SECONDARYHEADER_SERVICETYPE_ID: Int = 3473 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_DATAWITHSECONDARYHEADER_SECONDARYHEADER_MESSAGESUBTYPE_ID_UNINITIALIZED: Int = 3556 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_DATAWITHSECONDARYHEADER_SECONDARYHEADER_MESSAGESUBTYPE_ID: Int = 3475 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_DATAWITHSECONDARYHEADER_SECONDARYHEADER_MESSAGETYPECOUNTER: Int = 3480 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_DATAWITHSECONDARYHEADER_SECONDARYHEADER_DESTINATION_ID_2: Int = 3490 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_DATAWITHSECONDARYHEADER_SECONDARYHEADER_TIME_2_2: Int = 3520 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_DATAWITHSECONDARYHEADER_DATA: Int = 3538 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_DATAWITHSECONDARYHEADER_DATA_TM_255_255: Int = 3533 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_DATAWITHSECONDARYHEADER_PACKETERRORCONTROL: Int = 3546 /*  */
@inline @cCode.inline val TTM_DataWithSecondaryHeader_REQUIRED_BYTES_FOR_ACN_ENCODING = 20
@inline @cCode.inline val TTM_DataWithSecondaryHeader_REQUIRED_BITS_FOR_ACN_ENCODING = 154

@inline @cCode.inline val ERR_ACN_DECODE_TM_DATAWITHSECONDARYHEADER: Int = 3557 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_DATAWITHSECONDARYHEADER_SECONDARYHEADER: Int = 3526 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_DATAWITHSECONDARYHEADER_SECONDARYHEADER_SPACECRAFTTIMEREFERENCESTATUS_2: Int = 3472 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_DATAWITHSECONDARYHEADER_SECONDARYHEADER_SERVICETYPE_ID: Int = 3474 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_DATAWITHSECONDARYHEADER_SECONDARYHEADER_MESSAGESUBTYPE_ID: Int = 3476 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_DATAWITHSECONDARYHEADER_SECONDARYHEADER_MESSAGETYPECOUNTER: Int = 3481 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_DATAWITHSECONDARYHEADER_SECONDARYHEADER_DESTINATION_ID_2: Int = 3491 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_DATAWITHSECONDARYHEADER_SECONDARYHEADER_TIME_2_2: Int = 3521 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_DATAWITHSECONDARYHEADER_DATA: Int = 3539 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_DATAWITHSECONDARYHEADER_DATA_TM_255_255: Int = 3534 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_DATAWITHSECONDARYHEADER_PACKETERRORCONTROL: Int = 3547 /*  */
/*-- TTM_DataNoSecondaryHeader --------------------------------------------*/

case class TTM_DataNoSecondaryHeader (
    data: TTM_NoHeaderPayload, 
    packetErrorControl: OptionMut[TPacketErrorControl]
) {
    require(this.packetErrorControl.isDefined)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775784L))
        val size_0 = 0L
        val size_1 = this.packetErrorControl match {
            case SomeMut(v) =>
                alignedSizeToByte(16L, offset + size_0)
            case NoneMut() =>
                0L
        }
        size_0 + size_1
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 23L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775784L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775784L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 0L
        val size_0_otherOffset = 0L
        val size_1_offset = this.packetErrorControl match {
            case SomeMut(v) =>
                alignedSizeToByte(16L, offset + size_0_offset)
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.packetErrorControl match {
            case SomeMut(v) =>
                alignedSizeToByte(16L, otherOffset + size_0_otherOffset)
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775784L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775784L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 0L
        val size_0_otherOffset = 0L
        val size_1_offset = this.packetErrorControl match {
            case SomeMut(v) =>
                alignedSizeToByte(16L, offset + size_0_offset)
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.packetErrorControl match {
            case SomeMut(v) =>
                alignedSizeToByte(16L, otherOffset + size_0_otherOffset)
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775784L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775784L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 0L
        val size_0_otherOffset = 0L
        val size_1_offset = this.packetErrorControl match {
            case SomeMut(v) =>
                alignedSizeToByte(16L, offset + size_0_offset)
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.packetErrorControl match {
            case SomeMut(v) =>
                alignedSizeToByte(16L, otherOffset + size_0_otherOffset)
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TM_DATANOSECONDARYHEADER: Int = 3454 /*(WITH COMPONENTS {packetErrorControl PRESENT}) */
@inline @cCode.inline val ERR_TM_DATANOSECONDARYHEADER_DATA: Int = 3441 /* */
@inline @cCode.inline val ERR_TM_DATANOSECONDARYHEADER_PACKETERRORCONTROL_2: Int = 3451 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_TM_DATANOSECONDARYHEADER: Int = 3457 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_DATANOSECONDARYHEADER_DATA_2: Int = 3444 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_DATANOSECONDARYHEADER_PACKETERRORCONTROL: Int = 3449 /*  */
@inline @cCode.inline val TTM_DataNoSecondaryHeader_REQUIRED_BYTES_FOR_ACN_ENCODING = 3
@inline @cCode.inline val TTM_DataNoSecondaryHeader_REQUIRED_BITS_FOR_ACN_ENCODING = 23

@inline @cCode.inline val ERR_ACN_DECODE_TM_DATANOSECONDARYHEADER: Int = 3458 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_DATANOSECONDARYHEADER_DATA_2: Int = 3445 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_DATANOSECONDARYHEADER_PACKETERRORCONTROL: Int = 3450 /*  */
/*-- TTM_PacketDataField --------------------------------------------*/

enum TTM_PacketDataField:
    case TM_PacketDataField_dataWithSecondaryHeader_PRESENT(dataWithSecondaryHeader: TTM_DataWithSecondaryHeader)
    case TM_PacketDataField_dataNoSecondaryHeader_PRESENT(dataNoSecondaryHeader: TTM_DataNoSecondaryHeader)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775653L))
        this match {
            case TTM_PacketDataField.TM_PacketDataField_dataWithSecondaryHeader_PRESENT(dataWithSecondaryHeader) =>
                val size_2_0 = 0L
                val size_2_1 = 4L
                val size_2_2 = 8L
                val size_2_3 = 8L
                val size_2_4 = 16L
                val size_2_5 = 16L
                val size_2_6 = dataWithSecondaryHeader.secondaryHeader.time.size(offset + size_2_0 + size_2_1 + size_2_2 + size_2_3 + size_2_4 + size_2_5)
                val size_1_0 = size_2_0 + size_2_1 + size_2_2 + size_2_3 + size_2_4 + size_2_5 + size_2_6
                val size_1_1 = dataWithSecondaryHeader.data match {
                    case TTM_Payload.tm_255_255_PRESENT(tm_255_255) =>
                        alignedSizeToByte(8L, offset + size_1_0)
                }
                val size_1_2 = dataWithSecondaryHeader.packetErrorControl match {
                    case SomeMut(v) =>
                        alignedSizeToByte(16L, offset + size_1_0 + size_1_1)
                    case NoneMut() =>
                        0L
                }
                size_1_0 + size_1_1 + size_1_2
            case TTM_PacketDataField.TM_PacketDataField_dataNoSecondaryHeader_PRESENT(dataNoSecondaryHeader) =>
                val size_1_0 = 0L
                val size_1_1 = dataNoSecondaryHeader.packetErrorControl match {
                    case SomeMut(v) =>
                        alignedSizeToByte(16L, offset + size_1_0)
                    case NoneMut() =>
                        0L
                }
                size_1_0 + size_1_1
        }
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 154L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775653L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775653L))
        require((offset % 8L) == (otherOffset % 8L))
        this match {
            case TTM_PacketDataField.TM_PacketDataField_dataWithSecondaryHeader_PRESENT(dataWithSecondaryHeader) =>
                dataWithSecondaryHeader.sizeLemmaNextByte(offset, otherOffset)
            case TTM_PacketDataField.TM_PacketDataField_dataNoSecondaryHeader_PRESENT(dataNoSecondaryHeader) =>
                dataNoSecondaryHeader.sizeLemmaNextByte(offset, otherOffset)
        }
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775653L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775653L))
        require((offset % 16L) == (otherOffset % 16L))
        this match {
            case TTM_PacketDataField.TM_PacketDataField_dataWithSecondaryHeader_PRESENT(dataWithSecondaryHeader) =>
                dataWithSecondaryHeader.sizeLemmaNextWord(offset, otherOffset)
            case TTM_PacketDataField.TM_PacketDataField_dataNoSecondaryHeader_PRESENT(dataNoSecondaryHeader) =>
                dataNoSecondaryHeader.sizeLemmaNextWord(offset, otherOffset)
        }
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775653L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775653L))
        require((offset % 32L) == (otherOffset % 32L))
        this match {
            case TTM_PacketDataField.TM_PacketDataField_dataWithSecondaryHeader_PRESENT(dataWithSecondaryHeader) =>
                dataWithSecondaryHeader.sizeLemmaNextDWord(offset, otherOffset)
            case TTM_PacketDataField.TM_PacketDataField_dataNoSecondaryHeader_PRESENT(dataNoSecondaryHeader) =>
                dataNoSecondaryHeader.sizeLemmaNextDWord(offset, otherOffset)
        }
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

@inline @cCode.inline val ERR_TM_PACKETDATAFIELD: Int = 3432 /* */
@inline @cCode.inline val ERR_TM_PACKETDATAFIELD_DATAWITHSECONDARYHEADER_2: Int = 3404 /* */
@inline @cCode.inline val ERR_TM_PACKETDATAFIELD_DATANOSECONDARYHEADER_2: Int = 3429 /* */

 
type TTM_PacketType = NullType


 

@inline @cCode.inline val ERR_ACN_ENCODE_TM_PACKETTYPE: Int = 3648 /*  */
@inline @cCode.inline val TTM_PacketType_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TTM_PacketType_REQUIRED_BITS_FOR_ACN_ENCODING = 1

@inline @cCode.inline val ERR_ACN_DECODE_TM_PACKETTYPE: Int = 3649 /*  */
/*-- TTM_Packet_ID --------------------------------------------*/

case class TTM_Packet_ID (
    packetType: TTM_PacketType, 
    applicationProcess_ID: TApplicationProcess_ID
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775795L))
        val size_0 = 1L
        val size_1 = 11L
        size_0 + size_1
    }.ensuring { (res: Long) => 
        res == 12L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775795L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775795L))
        val size_0_offset = 1L
        val size_0_otherOffset = 1L
        val size_1_offset = 11L
        val size_1_otherOffset = 11L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775795L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775795L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 1L
        val size_0_otherOffset = 1L
        val size_1_offset = 11L
        val size_1_otherOffset = 11L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775795L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775795L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 1L
        val size_0_otherOffset = 1L
        val size_1_offset = 11L
        val size_1_otherOffset = 11L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775795L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775795L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 1L
        val size_0_otherOffset = 1L
        val size_1_offset = 11L
        val size_1_otherOffset = 11L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TM_PACKET_ID: Int = 3577 /* */
@inline @cCode.inline val ERR_TM_PACKET_ID_PACKETTYPE: Int = 3562 /* */
@inline @cCode.inline val ERR_TM_PACKET_ID_APPLICATIONPROCESS_ID_2: Int = 3572 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_TM_PACKET_ID: Int = 3580 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_PACKET_ID_PACKETTYPE_2: Int = 3565 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_PACKET_ID_APPLICATIONPROCESS_ID_2: Int = 3575 /*  */
@inline @cCode.inline val TTM_Packet_ID_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TTM_Packet_ID_REQUIRED_BITS_FOR_ACN_ENCODING = 12

@inline @cCode.inline val ERR_ACN_DECODE_TM_PACKET_ID: Int = 3581 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_PACKET_ID_PACKETTYPE_2: Int = 3566 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_PACKET_ID_APPLICATIONPROCESS_ID_2: Int = 3576 /*  */
/*-- TTM_CCSDS_Packet --------------------------------------------*/

case class TTM_CCSDS_Packet (
    packetVersionNumber: TPacketVersionNumberValue, 
    packet_ID: TTM_Packet_ID, 
    packetSequenceControl: TPacketSequenceControl, 
    packetDataLength: TPacketDataLength, 
    packetDataField: TTM_PacketDataField
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775605L))
        val size_0 = 3L
        val size_1_1 = 1L
        val size_1_2 = 1L
        val size_1_3 = 11L
        val size_1 = size_1_1 + size_1_2 + size_1_3
        val size_2 = this.packetSequenceControl.size(offset + size_0 + size_1)
        val size_3 = 16L
        val size_4 = this.packetDataField match {
            case TTM_PacketDataField.TM_PacketDataField_dataWithSecondaryHeader_PRESENT(dataWithSecondaryHeader) =>
                val size_3_4 = 0L
                val size_3_5 = 4L
                val size_3_6 = 8L
                val size_3_7 = 8L
                val size_3_8 = 16L
                val size_3_9 = 16L
                val size_3_10 = dataWithSecondaryHeader.secondaryHeader.time.size(offset + size_0 + size_1 + size_2 + size_3 + size_3_4 + size_3_5 + size_3_6 + size_3_7 + size_3_8 + size_3_9)
                val size_2_4 = size_3_4 + size_3_5 + size_3_6 + size_3_7 + size_3_8 + size_3_9 + size_3_10
                val size_2_5 = dataWithSecondaryHeader.data match {
                    case TTM_Payload.tm_255_255_PRESENT(tm_255_255) =>
                        alignedSizeToByte(8L, offset + size_0 + size_1 + size_2 + size_3 + size_2_4)
                }
                val size_2_6 = dataWithSecondaryHeader.packetErrorControl match {
                    case SomeMut(v) =>
                        alignedSizeToByte(16L, offset + size_0 + size_1 + size_2 + size_3 + size_2_4 + size_2_5)
                    case NoneMut() =>
                        0L
                }
                size_2_4 + size_2_5 + size_2_6
            case TTM_PacketDataField.TM_PacketDataField_dataNoSecondaryHeader_PRESENT(dataNoSecondaryHeader) =>
                val size_2_4 = 0L
                val size_2_5 = dataNoSecondaryHeader.packetErrorControl match {
                    case SomeMut(v) =>
                        alignedSizeToByte(16L, offset + size_0 + size_1 + size_2 + size_3 + size_2_4)
                    case NoneMut() =>
                        0L
                }
                size_2_4 + size_2_5
        }
        size_0 + size_1 + size_2 + size_3 + size_4
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 202L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775605L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775605L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 3L
        val size_0_otherOffset = 3L
        val size_1_1_offset = 1L
        val size_1_2_offset = 1L
        val size_1_3_offset = 11L
        val size_1_offset = size_1_1_offset + size_1_2_offset + size_1_3_offset
        val size_1_1_otherOffset = 1L
        val size_1_2_otherOffset = 1L
        val size_1_3_otherOffset = 11L
        val size_1_otherOffset = size_1_1_otherOffset + size_1_2_otherOffset + size_1_3_otherOffset
        this.packet_ID.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = this.packetSequenceControl.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.packetSequenceControl.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.packetSequenceControl.sizeLemmaNextByte(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        val size_3_offset = 16L
        val size_3_otherOffset = 16L
        val size_4_offset = this.packetDataField match {
            case TTM_PacketDataField.TM_PacketDataField_dataWithSecondaryHeader_PRESENT(dataWithSecondaryHeader) =>
                val size_3_4 = 0L
                val size_3_5 = 4L
                val size_3_6 = 8L
                val size_3_7 = 8L
                val size_3_8 = 16L
                val size_3_9 = 16L
                val size_3_10 = dataWithSecondaryHeader.secondaryHeader.time.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_3_4 + size_3_5 + size_3_6 + size_3_7 + size_3_8 + size_3_9)
                val size_2_4 = size_3_4 + size_3_5 + size_3_6 + size_3_7 + size_3_8 + size_3_9 + size_3_10
                val size_2_5 = dataWithSecondaryHeader.data match {
                    case TTM_Payload.tm_255_255_PRESENT(tm_255_255) =>
                        alignedSizeToByte(8L, offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_2_4)
                }
                val size_2_6 = dataWithSecondaryHeader.packetErrorControl match {
                    case SomeMut(v) =>
                        alignedSizeToByte(16L, offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_2_4 + size_2_5)
                    case NoneMut() =>
                        0L
                }
                size_2_4 + size_2_5 + size_2_6
            case TTM_PacketDataField.TM_PacketDataField_dataNoSecondaryHeader_PRESENT(dataNoSecondaryHeader) =>
                val size_2_4 = 0L
                val size_2_5 = dataNoSecondaryHeader.packetErrorControl match {
                    case SomeMut(v) =>
                        alignedSizeToByte(16L, offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_2_4)
                    case NoneMut() =>
                        0L
                }
                size_2_4 + size_2_5
        }
        val size_4_otherOffset = this.packetDataField match {
            case TTM_PacketDataField.TM_PacketDataField_dataWithSecondaryHeader_PRESENT(dataWithSecondaryHeader) =>
                val size_3_4 = 0L
                val size_3_5 = 4L
                val size_3_6 = 8L
                val size_3_7 = 8L
                val size_3_8 = 16L
                val size_3_9 = 16L
                val size_3_10 = dataWithSecondaryHeader.secondaryHeader.time.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_3_4 + size_3_5 + size_3_6 + size_3_7 + size_3_8 + size_3_9)
                val size_2_4 = size_3_4 + size_3_5 + size_3_6 + size_3_7 + size_3_8 + size_3_9 + size_3_10
                val size_2_5 = dataWithSecondaryHeader.data match {
                    case TTM_Payload.tm_255_255_PRESENT(tm_255_255) =>
                        alignedSizeToByte(8L, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_2_4)
                }
                val size_2_6 = dataWithSecondaryHeader.packetErrorControl match {
                    case SomeMut(v) =>
                        alignedSizeToByte(16L, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_2_4 + size_2_5)
                    case NoneMut() =>
                        0L
                }
                size_2_4 + size_2_5 + size_2_6
            case TTM_PacketDataField.TM_PacketDataField_dataNoSecondaryHeader_PRESENT(dataNoSecondaryHeader) =>
                val size_2_4 = 0L
                val size_2_5 = dataNoSecondaryHeader.packetErrorControl match {
                    case SomeMut(v) =>
                        alignedSizeToByte(16L, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_2_4)
                    case NoneMut() =>
                        0L
                }
                size_2_4 + size_2_5
        }
        this.packetDataField.sizeLemmaNextByte(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775605L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775605L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 3L
        val size_0_otherOffset = 3L
        val size_1_1_offset = 1L
        val size_1_2_offset = 1L
        val size_1_3_offset = 11L
        val size_1_offset = size_1_1_offset + size_1_2_offset + size_1_3_offset
        val size_1_1_otherOffset = 1L
        val size_1_2_otherOffset = 1L
        val size_1_3_otherOffset = 11L
        val size_1_otherOffset = size_1_1_otherOffset + size_1_2_otherOffset + size_1_3_otherOffset
        this.packet_ID.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = this.packetSequenceControl.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.packetSequenceControl.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.packetSequenceControl.sizeLemmaNextWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        val size_3_offset = 16L
        val size_3_otherOffset = 16L
        val size_4_offset = this.packetDataField match {
            case TTM_PacketDataField.TM_PacketDataField_dataWithSecondaryHeader_PRESENT(dataWithSecondaryHeader) =>
                val size_3_4 = 0L
                val size_3_5 = 4L
                val size_3_6 = 8L
                val size_3_7 = 8L
                val size_3_8 = 16L
                val size_3_9 = 16L
                val size_3_10 = dataWithSecondaryHeader.secondaryHeader.time.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_3_4 + size_3_5 + size_3_6 + size_3_7 + size_3_8 + size_3_9)
                val size_2_4 = size_3_4 + size_3_5 + size_3_6 + size_3_7 + size_3_8 + size_3_9 + size_3_10
                val size_2_5 = dataWithSecondaryHeader.data match {
                    case TTM_Payload.tm_255_255_PRESENT(tm_255_255) =>
                        alignedSizeToByte(8L, offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_2_4)
                }
                val size_2_6 = dataWithSecondaryHeader.packetErrorControl match {
                    case SomeMut(v) =>
                        alignedSizeToByte(16L, offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_2_4 + size_2_5)
                    case NoneMut() =>
                        0L
                }
                size_2_4 + size_2_5 + size_2_6
            case TTM_PacketDataField.TM_PacketDataField_dataNoSecondaryHeader_PRESENT(dataNoSecondaryHeader) =>
                val size_2_4 = 0L
                val size_2_5 = dataNoSecondaryHeader.packetErrorControl match {
                    case SomeMut(v) =>
                        alignedSizeToByte(16L, offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_2_4)
                    case NoneMut() =>
                        0L
                }
                size_2_4 + size_2_5
        }
        val size_4_otherOffset = this.packetDataField match {
            case TTM_PacketDataField.TM_PacketDataField_dataWithSecondaryHeader_PRESENT(dataWithSecondaryHeader) =>
                val size_3_4 = 0L
                val size_3_5 = 4L
                val size_3_6 = 8L
                val size_3_7 = 8L
                val size_3_8 = 16L
                val size_3_9 = 16L
                val size_3_10 = dataWithSecondaryHeader.secondaryHeader.time.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_3_4 + size_3_5 + size_3_6 + size_3_7 + size_3_8 + size_3_9)
                val size_2_4 = size_3_4 + size_3_5 + size_3_6 + size_3_7 + size_3_8 + size_3_9 + size_3_10
                val size_2_5 = dataWithSecondaryHeader.data match {
                    case TTM_Payload.tm_255_255_PRESENT(tm_255_255) =>
                        alignedSizeToByte(8L, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_2_4)
                }
                val size_2_6 = dataWithSecondaryHeader.packetErrorControl match {
                    case SomeMut(v) =>
                        alignedSizeToByte(16L, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_2_4 + size_2_5)
                    case NoneMut() =>
                        0L
                }
                size_2_4 + size_2_5 + size_2_6
            case TTM_PacketDataField.TM_PacketDataField_dataNoSecondaryHeader_PRESENT(dataNoSecondaryHeader) =>
                val size_2_4 = 0L
                val size_2_5 = dataNoSecondaryHeader.packetErrorControl match {
                    case SomeMut(v) =>
                        alignedSizeToByte(16L, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_2_4)
                    case NoneMut() =>
                        0L
                }
                size_2_4 + size_2_5
        }
        this.packetDataField.sizeLemmaNextWord(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775605L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775605L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 3L
        val size_0_otherOffset = 3L
        val size_1_1_offset = 1L
        val size_1_2_offset = 1L
        val size_1_3_offset = 11L
        val size_1_offset = size_1_1_offset + size_1_2_offset + size_1_3_offset
        val size_1_1_otherOffset = 1L
        val size_1_2_otherOffset = 1L
        val size_1_3_otherOffset = 11L
        val size_1_otherOffset = size_1_1_otherOffset + size_1_2_otherOffset + size_1_3_otherOffset
        this.packet_ID.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = this.packetSequenceControl.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.packetSequenceControl.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.packetSequenceControl.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        val size_3_offset = 16L
        val size_3_otherOffset = 16L
        val size_4_offset = this.packetDataField match {
            case TTM_PacketDataField.TM_PacketDataField_dataWithSecondaryHeader_PRESENT(dataWithSecondaryHeader) =>
                val size_3_4 = 0L
                val size_3_5 = 4L
                val size_3_6 = 8L
                val size_3_7 = 8L
                val size_3_8 = 16L
                val size_3_9 = 16L
                val size_3_10 = dataWithSecondaryHeader.secondaryHeader.time.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_3_4 + size_3_5 + size_3_6 + size_3_7 + size_3_8 + size_3_9)
                val size_2_4 = size_3_4 + size_3_5 + size_3_6 + size_3_7 + size_3_8 + size_3_9 + size_3_10
                val size_2_5 = dataWithSecondaryHeader.data match {
                    case TTM_Payload.tm_255_255_PRESENT(tm_255_255) =>
                        alignedSizeToByte(8L, offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_2_4)
                }
                val size_2_6 = dataWithSecondaryHeader.packetErrorControl match {
                    case SomeMut(v) =>
                        alignedSizeToByte(16L, offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_2_4 + size_2_5)
                    case NoneMut() =>
                        0L
                }
                size_2_4 + size_2_5 + size_2_6
            case TTM_PacketDataField.TM_PacketDataField_dataNoSecondaryHeader_PRESENT(dataNoSecondaryHeader) =>
                val size_2_4 = 0L
                val size_2_5 = dataNoSecondaryHeader.packetErrorControl match {
                    case SomeMut(v) =>
                        alignedSizeToByte(16L, offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_2_4)
                    case NoneMut() =>
                        0L
                }
                size_2_4 + size_2_5
        }
        val size_4_otherOffset = this.packetDataField match {
            case TTM_PacketDataField.TM_PacketDataField_dataWithSecondaryHeader_PRESENT(dataWithSecondaryHeader) =>
                val size_3_4 = 0L
                val size_3_5 = 4L
                val size_3_6 = 8L
                val size_3_7 = 8L
                val size_3_8 = 16L
                val size_3_9 = 16L
                val size_3_10 = dataWithSecondaryHeader.secondaryHeader.time.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_3_4 + size_3_5 + size_3_6 + size_3_7 + size_3_8 + size_3_9)
                val size_2_4 = size_3_4 + size_3_5 + size_3_6 + size_3_7 + size_3_8 + size_3_9 + size_3_10
                val size_2_5 = dataWithSecondaryHeader.data match {
                    case TTM_Payload.tm_255_255_PRESENT(tm_255_255) =>
                        alignedSizeToByte(8L, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_2_4)
                }
                val size_2_6 = dataWithSecondaryHeader.packetErrorControl match {
                    case SomeMut(v) =>
                        alignedSizeToByte(16L, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_2_4 + size_2_5)
                    case NoneMut() =>
                        0L
                }
                size_2_4 + size_2_5 + size_2_6
            case TTM_PacketDataField.TM_PacketDataField_dataNoSecondaryHeader_PRESENT(dataNoSecondaryHeader) =>
                val size_2_4 = 0L
                val size_2_5 = dataNoSecondaryHeader.packetErrorControl match {
                    case SomeMut(v) =>
                        alignedSizeToByte(16L, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_2_4)
                    case NoneMut() =>
                        0L
                }
                size_2_4 + size_2_5
        }
        this.packetDataField.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TM_CCSDS_PACKET: Int = 3299 /* */
@inline @cCode.inline val ERR_TM_CCSDS_PACKET_PACKETVERSIONNUMBER: Int = 3103 /* */
@inline @cCode.inline val ERR_TM_CCSDS_PACKET_PACKET_ID_2: Int = 3134 /* */
@inline @cCode.inline val ERR_TM_CCSDS_PACKET_PACKETSEQUENCECONTROL_2: Int = 3151 /* */
@inline @cCode.inline val ERR_TM_CCSDS_PACKET_PACKETDATALENGTH_2: Int = 3161 /* */
@inline @cCode.inline val ERR_TM_CCSDS_PACKET_PACKETDATAFIELD_2: Int = 3296 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_TM_CCSDS_PACKET: Int = 3302 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_CCSDS_PACKET_PACKETVERSIONNUMBER_2: Int = 3106 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_CCSDS_PACKET_PACKET_ID: Int = 3132 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_CCSDS_PACKET_PACKET_ID_PACKETTYPE_2: Int = 3115 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_CCSDS_PACKET_PACKET_ID_SECONDARYHEADERFLAG_UNINITIALIZED: Int = 3303 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_CCSDS_PACKET_PACKET_ID_SECONDARYHEADERFLAG: Int = 3117 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_CCSDS_PACKET_PACKET_ID_APPLICATIONPROCESS_ID_2: Int = 3127 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_CCSDS_PACKET_PACKETSEQUENCECONTROL_2: Int = 3154 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_CCSDS_PACKET_PACKETDATALENGTH_2: Int = 3164 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_CCSDS_PACKET_PACKETDATAFIELD: Int = 3294 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER: Int = 3261 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER_SECONDARYHEADER: Int = 3232 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER_SECONDARYHEADER_SPACECRAFTTIMEREFERENCESTATUS_2: Int = 3178 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER_SECONDARYHEADER_SERVICETYPE_ID_UNINITIALIZED: Int = 3304 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER_SECONDARYHEADER_SERVICETYPE_ID: Int = 3180 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER_SECONDARYHEADER_MESSAGESUBTYPE_ID_UNINITIALIZED: Int = 3305 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER_SECONDARYHEADER_MESSAGESUBTYPE_ID: Int = 3182 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER_SECONDARYHEADER_MESSAGETYPECOUNTER: Int = 3187 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER_SECONDARYHEADER_DESTINATION_ID_2: Int = 3197 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER_SECONDARYHEADER_TIME_2_2: Int = 3227 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER_DATA: Int = 3245 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER_DATA_TM_255_255: Int = 3240 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER_PACKETERRORCONTROL: Int = 3253 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_CCSDS_PACKET_PACKETDATAFIELD_DATANOSECONDARYHEADER: Int = 3286 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_CCSDS_PACKET_PACKETDATAFIELD_DATANOSECONDARYHEADER_DATA_2: Int = 3273 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_CCSDS_PACKET_PACKETDATAFIELD_DATANOSECONDARYHEADER_PACKETERRORCONTROL: Int = 3278 /*  */
@inline @cCode.inline val TTM_CCSDS_Packet_REQUIRED_BYTES_FOR_ACN_ENCODING = 26
@inline @cCode.inline val TTM_CCSDS_Packet_REQUIRED_BITS_FOR_ACN_ENCODING = 202

@inline @cCode.inline val ERR_ACN_DECODE_TM_CCSDS_PACKET: Int = 3306 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_CCSDS_PACKET_PACKETVERSIONNUMBER_2: Int = 3107 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_CCSDS_PACKET_PACKET_ID: Int = 3133 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_CCSDS_PACKET_PACKET_ID_PACKETTYPE_2: Int = 3116 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_CCSDS_PACKET_PACKET_ID_SECONDARYHEADERFLAG: Int = 3118 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_CCSDS_PACKET_PACKET_ID_APPLICATIONPROCESS_ID_2: Int = 3128 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_CCSDS_PACKET_PACKETSEQUENCECONTROL_2: Int = 3155 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_CCSDS_PACKET_PACKETDATALENGTH_2: Int = 3165 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_CCSDS_PACKET_PACKETDATAFIELD: Int = 3295 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER: Int = 3262 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER_SECONDARYHEADER: Int = 3233 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER_SECONDARYHEADER_SPACECRAFTTIMEREFERENCESTATUS_2: Int = 3179 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER_SECONDARYHEADER_SERVICETYPE_ID: Int = 3181 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER_SECONDARYHEADER_MESSAGESUBTYPE_ID: Int = 3183 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER_SECONDARYHEADER_MESSAGETYPECOUNTER: Int = 3188 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER_SECONDARYHEADER_DESTINATION_ID_2: Int = 3198 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER_SECONDARYHEADER_TIME_2_2: Int = 3228 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER_DATA: Int = 3246 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER_DATA_TM_255_255: Int = 3241 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_CCSDS_PACKET_PACKETDATAFIELD_DATAWITHSECONDARYHEADER_PACKETERRORCONTROL: Int = 3254 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_CCSDS_PACKET_PACKETDATAFIELD_DATANOSECONDARYHEADER: Int = 3287 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_CCSDS_PACKET_PACKETDATAFIELD_DATANOSECONDARYHEADER_DATA_2: Int = 3274 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_CCSDS_PACKET_PACKETDATAFIELD_DATANOSECONDARYHEADER_PACKETERRORCONTROL: Int = 3279 /*  */


