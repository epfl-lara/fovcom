/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

type TPUSC_BOOL1 = BooleanNoRTL


@inline @cCode.inline val ERR_PUSC_BOOL1: Int = 1635 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_BOOL1: Int = 1638 /*  */
@inline @cCode.inline val TPUSC_BOOL1_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_BOOL1_REQUIRED_BITS_FOR_ACN_ENCODING = 1

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_BOOL1: Int = 1639 /*  */
type TPUSC_BOOL8 = BooleanNoRTL


@inline @cCode.inline val ERR_PUSC_BOOL8: Int = 1640 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_BOOL8: Int = 1643 /*  */
@inline @cCode.inline val TPUSC_BOOL8_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_BOOL8_REQUIRED_BITS_FOR_ACN_ENCODING = 8

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_BOOL8: Int = 1644 /*  */
type TPUSC_BOOL16 = BooleanNoRTL


@inline @cCode.inline val ERR_PUSC_BOOL16: Int = 1645 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_BOOL16: Int = 1648 /*  */
@inline @cCode.inline val TPUSC_BOOL16_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_BOOL16_REQUIRED_BITS_FOR_ACN_ENCODING = 16

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_BOOL16: Int = 1649 /*  */
type TPUSC_BOOL32 = BooleanNoRTL


@inline @cCode.inline val ERR_PUSC_BOOL32: Int = 1650 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_BOOL32: Int = 1653 /*  */
@inline @cCode.inline val TPUSC_BOOL32_REQUIRED_BYTES_FOR_ACN_ENCODING = 4
@inline @cCode.inline val TPUSC_BOOL32_REQUIRED_BITS_FOR_ACN_ENCODING = 32

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_BOOL32: Int = 1654 /*  */
type TPUSC_UINT4 = ULong


@inline @cCode.inline val ERR_PUSC_UINT4: Int = 1655 /*(0 .. 15) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT4: Int = 1658 /*  */
@inline @cCode.inline val TPUSC_UINT4_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_UINT4_REQUIRED_BITS_FOR_ACN_ENCODING = 4

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT4: Int = 1659 /*  */
type TPUSC_UINT5 = ULong


@inline @cCode.inline val ERR_PUSC_UINT5: Int = 1660 /*(0 .. 31) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT5: Int = 1663 /*  */
@inline @cCode.inline val TPUSC_UINT5_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_UINT5_REQUIRED_BITS_FOR_ACN_ENCODING = 5

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT5: Int = 1664 /*  */
type TPUSC_UINT6 = ULong


@inline @cCode.inline val ERR_PUSC_UINT6: Int = 1665 /*(0 .. 63) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT6: Int = 1668 /*  */
@inline @cCode.inline val TPUSC_UINT6_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_UINT6_REQUIRED_BITS_FOR_ACN_ENCODING = 6

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT6: Int = 1669 /*  */
type TPUSC_UINT7 = ULong


@inline @cCode.inline val ERR_PUSC_UINT7: Int = 1670 /*(0 .. 127) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT7: Int = 1673 /*  */
@inline @cCode.inline val TPUSC_UINT7_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_UINT7_REQUIRED_BITS_FOR_ACN_ENCODING = 7

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT7: Int = 1674 /*  */
type TPUSC_UINT8 = ULong


@inline @cCode.inline val ERR_PUSC_UINT8: Int = 1675 /*(0 .. 255) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT8: Int = 1678 /*  */
@inline @cCode.inline val TPUSC_UINT8_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_UINT8_REQUIRED_BITS_FOR_ACN_ENCODING = 8

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT8: Int = 1679 /*  */
type TPUSC_UINT9 = ULong


@inline @cCode.inline val ERR_PUSC_UINT9: Int = 1680 /*(0 .. 511) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT9: Int = 1683 /*  */
@inline @cCode.inline val TPUSC_UINT9_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_UINT9_REQUIRED_BITS_FOR_ACN_ENCODING = 9

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT9: Int = 1684 /*  */
type TPUSC_UINT10 = ULong


@inline @cCode.inline val ERR_PUSC_UINT10: Int = 1685 /*(0 .. 1023) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT10: Int = 1688 /*  */
@inline @cCode.inline val TPUSC_UINT10_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_UINT10_REQUIRED_BITS_FOR_ACN_ENCODING = 10

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT10: Int = 1689 /*  */
type TPUSC_UINT11 = ULong


@inline @cCode.inline val ERR_PUSC_UINT11: Int = 1690 /*(0 .. 2047) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT11: Int = 1693 /*  */
@inline @cCode.inline val TPUSC_UINT11_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_UINT11_REQUIRED_BITS_FOR_ACN_ENCODING = 11

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT11: Int = 1694 /*  */
type TPUSC_UINT12 = ULong


@inline @cCode.inline val ERR_PUSC_UINT12: Int = 1695 /*(0 .. 4095) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT12: Int = 1698 /*  */
@inline @cCode.inline val TPUSC_UINT12_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_UINT12_REQUIRED_BITS_FOR_ACN_ENCODING = 12

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT12: Int = 1699 /*  */
type TPUSC_UINT13 = ULong


@inline @cCode.inline val ERR_PUSC_UINT13: Int = 1700 /*(0 .. 8191) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT13: Int = 1703 /*  */
@inline @cCode.inline val TPUSC_UINT13_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_UINT13_REQUIRED_BITS_FOR_ACN_ENCODING = 13

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT13: Int = 1704 /*  */
type TPUSC_UINT14 = ULong


@inline @cCode.inline val ERR_PUSC_UINT14: Int = 1705 /*(0 .. 16383) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT14: Int = 1708 /*  */
@inline @cCode.inline val TPUSC_UINT14_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_UINT14_REQUIRED_BITS_FOR_ACN_ENCODING = 14

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT14: Int = 1709 /*  */
type TPUSC_UINT15 = ULong


@inline @cCode.inline val ERR_PUSC_UINT15: Int = 1710 /*(0 .. 32767) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT15: Int = 1713 /*  */
@inline @cCode.inline val TPUSC_UINT15_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_UINT15_REQUIRED_BITS_FOR_ACN_ENCODING = 15

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT15: Int = 1714 /*  */
type TPUSC_UINT16 = ULong


@inline @cCode.inline val ERR_PUSC_UINT16: Int = 1715 /*(0 .. 65535) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT16: Int = 1718 /*  */
@inline @cCode.inline val TPUSC_UINT16_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_UINT16_REQUIRED_BITS_FOR_ACN_ENCODING = 16

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT16: Int = 1719 /*  */
type TPUSC_UINT24 = ULong


@inline @cCode.inline val ERR_PUSC_UINT24: Int = 1720 /*(0 .. 16777215) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT24: Int = 1723 /*  */
@inline @cCode.inline val TPUSC_UINT24_REQUIRED_BYTES_FOR_ACN_ENCODING = 3
@inline @cCode.inline val TPUSC_UINT24_REQUIRED_BITS_FOR_ACN_ENCODING = 24

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT24: Int = 1724 /*  */
type TPUSC_UINT32 = ULong


@inline @cCode.inline val ERR_PUSC_UINT32: Int = 1725 /*(0 .. 4294967295) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT32: Int = 1728 /*  */
@inline @cCode.inline val TPUSC_UINT32_REQUIRED_BYTES_FOR_ACN_ENCODING = 4
@inline @cCode.inline val TPUSC_UINT32_REQUIRED_BITS_FOR_ACN_ENCODING = 32

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT32: Int = 1729 /*  */
type TPUSC_UINT48 = ULong


@inline @cCode.inline val ERR_PUSC_UINT48: Int = 1730 /*(0 .. 281474976710655) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT48: Int = 1733 /*  */
@inline @cCode.inline val TPUSC_UINT48_REQUIRED_BYTES_FOR_ACN_ENCODING = 6
@inline @cCode.inline val TPUSC_UINT48_REQUIRED_BITS_FOR_ACN_ENCODING = 48

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT48: Int = 1734 /*  */
type TPUSC_UINT64 = ULong


@inline @cCode.inline val ERR_PUSC_UINT64: Int = 1735 /*(0 .. 9223372036854775807) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT64: Int = 1738 /*  */
@inline @cCode.inline val TPUSC_UINT64_REQUIRED_BYTES_FOR_ACN_ENCODING = 8
@inline @cCode.inline val TPUSC_UINT64_REQUIRED_BITS_FOR_ACN_ENCODING = 64

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT64: Int = 1739 /*  */
type TPUSC_UINT1 = ULong


@inline @cCode.inline val ERR_PUSC_UINT1: Int = 1740 /*(0 .. 1) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT1: Int = 1743 /*  */
@inline @cCode.inline val TPUSC_UINT1_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_UINT1_REQUIRED_BITS_FOR_ACN_ENCODING = 1

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT1: Int = 1744 /*  */
type TPUSC_UINT2 = ULong


@inline @cCode.inline val ERR_PUSC_UINT2: Int = 1745 /*(0 .. 3) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT2: Int = 1748 /*  */
@inline @cCode.inline val TPUSC_UINT2_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_UINT2_REQUIRED_BITS_FOR_ACN_ENCODING = 2

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT2: Int = 1749 /*  */
type TPUSC_UINT3 = ULong


@inline @cCode.inline val ERR_PUSC_UINT3: Int = 1750 /*(0 .. 7) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT3: Int = 1753 /*  */
@inline @cCode.inline val TPUSC_UINT3_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_UINT3_REQUIRED_BITS_FOR_ACN_ENCODING = 3

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT3: Int = 1754 /*  */
type TPUSC_INT4 = Long


@inline @cCode.inline val ERR_PUSC_INT4: Int = 1755 /*(-8 .. 7) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT4: Int = 1758 /*  */
@inline @cCode.inline val TPUSC_INT4_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_INT4_REQUIRED_BITS_FOR_ACN_ENCODING = 4

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT4: Int = 1759 /*  */
type TPUSC_INT5 = Long


@inline @cCode.inline val ERR_PUSC_INT5: Int = 1760 /*(-16 .. 15) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT5: Int = 1763 /*  */
@inline @cCode.inline val TPUSC_INT5_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_INT5_REQUIRED_BITS_FOR_ACN_ENCODING = 5

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT5: Int = 1764 /*  */
type TPUSC_INT6 = Long


@inline @cCode.inline val ERR_PUSC_INT6: Int = 1765 /*(-32 .. 31) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT6: Int = 1768 /*  */
@inline @cCode.inline val TPUSC_INT6_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_INT6_REQUIRED_BITS_FOR_ACN_ENCODING = 6

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT6: Int = 1769 /*  */
type TPUSC_INT7 = Long


@inline @cCode.inline val ERR_PUSC_INT7: Int = 1770 /*(-64 .. 63) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT7: Int = 1773 /*  */
@inline @cCode.inline val TPUSC_INT7_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_INT7_REQUIRED_BITS_FOR_ACN_ENCODING = 7

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT7: Int = 1774 /*  */
type TPUSC_INT8 = Long


@inline @cCode.inline val ERR_PUSC_INT8: Int = 1775 /*(-128 .. 127) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT8: Int = 1778 /*  */
@inline @cCode.inline val TPUSC_INT8_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_INT8_REQUIRED_BITS_FOR_ACN_ENCODING = 8

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT8: Int = 1779 /*  */
type TPUSC_INT9 = Long


@inline @cCode.inline val ERR_PUSC_INT9: Int = 1780 /*(-256 .. 255) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT9: Int = 1783 /*  */
@inline @cCode.inline val TPUSC_INT9_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_INT9_REQUIRED_BITS_FOR_ACN_ENCODING = 9

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT9: Int = 1784 /*  */
type TPUSC_INT10 = Long


@inline @cCode.inline val ERR_PUSC_INT10: Int = 1785 /*(-512 .. 511) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT10: Int = 1788 /*  */
@inline @cCode.inline val TPUSC_INT10_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_INT10_REQUIRED_BITS_FOR_ACN_ENCODING = 10

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT10: Int = 1789 /*  */
type TPUSC_INT11 = Long


@inline @cCode.inline val ERR_PUSC_INT11: Int = 1790 /*(-1024 .. 1023) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT11: Int = 1793 /*  */
@inline @cCode.inline val TPUSC_INT11_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_INT11_REQUIRED_BITS_FOR_ACN_ENCODING = 11

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT11: Int = 1794 /*  */
type TPUSC_INT12 = Long


@inline @cCode.inline val ERR_PUSC_INT12: Int = 1795 /*(-2048 .. 2047) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT12: Int = 1798 /*  */
@inline @cCode.inline val TPUSC_INT12_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_INT12_REQUIRED_BITS_FOR_ACN_ENCODING = 12

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT12: Int = 1799 /*  */
type TPUSC_INT13 = Long


@inline @cCode.inline val ERR_PUSC_INT13: Int = 1800 /*(-4096 .. 4095) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT13: Int = 1803 /*  */
@inline @cCode.inline val TPUSC_INT13_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_INT13_REQUIRED_BITS_FOR_ACN_ENCODING = 13

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT13: Int = 1804 /*  */
type TPUSC_INT14 = Long


@inline @cCode.inline val ERR_PUSC_INT14: Int = 1805 /*(-8192 .. 8191) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT14: Int = 1808 /*  */
@inline @cCode.inline val TPUSC_INT14_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_INT14_REQUIRED_BITS_FOR_ACN_ENCODING = 14

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT14: Int = 1809 /*  */
type TPUSC_INT15 = Long


@inline @cCode.inline val ERR_PUSC_INT15: Int = 1810 /*(-16384 .. 16383) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT15: Int = 1813 /*  */
@inline @cCode.inline val TPUSC_INT15_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_INT15_REQUIRED_BITS_FOR_ACN_ENCODING = 15

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT15: Int = 1814 /*  */
type TPUSC_INT16 = Long


@inline @cCode.inline val ERR_PUSC_INT16: Int = 1815 /*(-32768 .. 32767) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT16: Int = 1818 /*  */
@inline @cCode.inline val TPUSC_INT16_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_INT16_REQUIRED_BITS_FOR_ACN_ENCODING = 16

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT16: Int = 1819 /*  */
type TPUSC_INT24 = Long


@inline @cCode.inline val ERR_PUSC_INT24: Int = 1820 /*(-8388608 .. 8388607) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT24: Int = 1823 /*  */
@inline @cCode.inline val TPUSC_INT24_REQUIRED_BYTES_FOR_ACN_ENCODING = 3
@inline @cCode.inline val TPUSC_INT24_REQUIRED_BITS_FOR_ACN_ENCODING = 24

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT24: Int = 1824 /*  */
type TPUSC_INT32 = Long


@inline @cCode.inline val ERR_PUSC_INT32: Int = 1825 /*(-2147483648 .. 2147483647) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT32: Int = 1828 /*  */
@inline @cCode.inline val TPUSC_INT32_REQUIRED_BYTES_FOR_ACN_ENCODING = 4
@inline @cCode.inline val TPUSC_INT32_REQUIRED_BITS_FOR_ACN_ENCODING = 32

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT32: Int = 1829 /*  */
type TPUSC_INT48 = Long


@inline @cCode.inline val ERR_PUSC_INT48: Int = 1830 /*(-140737488355328 .. 140737488355327) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT48: Int = 1833 /*  */
@inline @cCode.inline val TPUSC_INT48_REQUIRED_BYTES_FOR_ACN_ENCODING = 6
@inline @cCode.inline val TPUSC_INT48_REQUIRED_BITS_FOR_ACN_ENCODING = 48

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT48: Int = 1834 /*  */
type TPUSC_INT64 = Long


@inline @cCode.inline val ERR_PUSC_INT64: Int = 1835 /*(-4611686018427387903 .. 4611686018427387903) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT64: Int = 1838 /*  */
@inline @cCode.inline val TPUSC_INT64_REQUIRED_BYTES_FOR_ACN_ENCODING = 8
@inline @cCode.inline val TPUSC_INT64_REQUIRED_BITS_FOR_ACN_ENCODING = 64

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT64: Int = 1839 /*  */
@extern
type TPUSC_FLOAT32 = Double


@inline @cCode.inline val ERR_PUSC_FLOAT32: Int = 1840 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_FLOAT32: Int = 1843 /*  */
@inline @cCode.inline val TPUSC_FLOAT32_REQUIRED_BYTES_FOR_ACN_ENCODING = 4
@inline @cCode.inline val TPUSC_FLOAT32_REQUIRED_BITS_FOR_ACN_ENCODING = 32

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_FLOAT32: Int = 1844 /*  */
@extern
type TPUSC_FLOAT64 = Double


@inline @cCode.inline val ERR_PUSC_FLOAT64: Int = 1845 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_FLOAT64: Int = 1848 /*  */
@inline @cCode.inline val TPUSC_FLOAT64_REQUIRED_BYTES_FOR_ACN_ENCODING = 8
@inline @cCode.inline val TPUSC_FLOAT64_REQUIRED_BITS_FOR_ACN_ENCODING = 64

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_FLOAT64: Int = 1849 /*  */
/*-- TPUSC_MIL_FLOAT32 --------------------------------------------*/

case class TPUSC_MIL_FLOAT32_mant(arr: Vector[UByte])
{
    require(this.arr.length == 3)
}
type TPUSC_MIL_FLOAT32_exp = Long


case class TPUSC_MIL_FLOAT32 (
    mant: TPUSC_MIL_FLOAT32_mant, 
    exp: TPUSC_MIL_FLOAT32_exp
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        val size_0 = (24L)
        val size_1 = 8L
        size_0 + size_1
    }.ensuring { (res: Long) => 
        res == 32L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        val size_0_offset = (24L)
        val size_0_otherOffset = 24L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = (24L)
        val size_0_otherOffset = 24L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = (24L)
        val size_0_otherOffset = 24L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = (24L)
        val size_0_otherOffset = 24L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_PUSC_MIL_FLOAT32_MANT: Int = 1850 /*(SIZE(24)) */

@inline @cCode.inline val ERR_PUSC_MIL_FLOAT32_EXP: Int = 1855 /*(-128 .. 127) */

@inline @cCode.inline val ERR_PUSC_MIL_FLOAT32: Int = 1860 /* */

 
 
 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_MIL_FLOAT32: Int = 1863 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_MIL_FLOAT32_MANT: Int = 1853 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_MIL_FLOAT32_EXP: Int = 1858 /*  */
@inline @cCode.inline val TPUSC_MIL_FLOAT32_REQUIRED_BYTES_FOR_ACN_ENCODING = 4
@inline @cCode.inline val TPUSC_MIL_FLOAT32_REQUIRED_BITS_FOR_ACN_ENCODING = 32

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_MIL_FLOAT32: Int = 1864 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PUSC_MIL_FLOAT32_MANT: Int = 1854 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PUSC_MIL_FLOAT32_EXP: Int = 1859 /*  */
/*-- TPUSC_MIL_FLOAT48 --------------------------------------------*/

case class TPUSC_MIL_FLOAT48_mant_MSB(arr: Vector[UByte])
{
    require(this.arr.length == 3)
}
type TPUSC_MIL_FLOAT48_exp = Long


case class TPUSC_MIL_FLOAT48_mant_LSB(arr: Vector[UByte])
{
    require(this.arr.length == 2)
}

case class TPUSC_MIL_FLOAT48 (
    mant_MSB: TPUSC_MIL_FLOAT48_mant_MSB, 
    exp: TPUSC_MIL_FLOAT48_exp, 
    mant_LSB: TPUSC_MIL_FLOAT48_mant_LSB
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775759L))
        val size_0 = (24L)
        val size_1 = 8L
        val size_2 = 16L
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        res == 48L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775759L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775759L))
        val size_0_offset = (24L)
        val size_0_otherOffset = 24L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775759L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775759L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = (24L)
        val size_0_otherOffset = 24L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775759L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775759L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = (24L)
        val size_0_otherOffset = 24L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775759L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775759L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = (24L)
        val size_0_otherOffset = 24L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_PUSC_MIL_FLOAT48_MANT_MSB: Int = 1865 /*(SIZE(24)) */

@inline @cCode.inline val ERR_PUSC_MIL_FLOAT48_EXP: Int = 1870 /*(-128 .. 127) */

@inline @cCode.inline val ERR_PUSC_MIL_FLOAT48_MANT_LSB: Int = 1875 /*(SIZE(16)) */

@inline @cCode.inline val ERR_PUSC_MIL_FLOAT48: Int = 1880 /* */

 
 
 
 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_MIL_FLOAT48: Int = 1883 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_MIL_FLOAT48_MANT_MSB: Int = 1868 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_MIL_FLOAT48_EXP: Int = 1873 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_MIL_FLOAT48_MANT_LSB: Int = 1878 /*  */
@inline @cCode.inline val TPUSC_MIL_FLOAT48_REQUIRED_BYTES_FOR_ACN_ENCODING = 6
@inline @cCode.inline val TPUSC_MIL_FLOAT48_REQUIRED_BITS_FOR_ACN_ENCODING = 48

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_MIL_FLOAT48: Int = 1884 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PUSC_MIL_FLOAT48_MANT_MSB: Int = 1869 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PUSC_MIL_FLOAT48_EXP: Int = 1874 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PUSC_MIL_FLOAT48_MANT_LSB: Int = 1879 /*  */

/*nCount equals to Number of bits in the array. Max value is : 4095 */
case class TPUSC_BITSTR_VARIABLE_LEN(nCount: Long, arr: Vector[UByte])
{
    require(this.arr.length <= 512 && 0L <= this.nCount && this.nCount <= this.arr.length * 8L)
}

@inline @cCode.inline val ERR_PUSC_BITSTR_VARIABLE_LEN: Int = 1885 /*(SIZE(0 .. 4095)) */

 
/*nCount equals to Number of bytes in the array. Max value is : 4095 (unsure - TODO read asn1 standard)*/
case class TPUSC_OCTSTR_VARIABLE_LEN(nCount: Long, arr: Vector[UByte])
{
    require(this.arr.length <= 4095 && 0 <= this.nCount && this.nCount <= this.arr.length)
}

@inline @cCode.inline val ERR_PUSC_OCTSTR_VARIABLE_LEN: Int = 1890 /*(SIZE(0 .. 4095)) */

 
type TPUSC_CHARSTR_VARIABLE_LEN = Vector[UByte]

@inline @cCode.inline val ERR_PUSC_CHARSTR_VARIABLE_LEN: Int = 1895 /*(SIZE(0 .. 4095)) */

 
/*-- TCDS_AbsoluteTime_PFC_1 --------------------------------------------*/
type TCDS_AbsoluteTime_PFC_1_day = ULong

type TCDS_AbsoluteTime_PFC_1_msOfDay = ULong


case class TCDS_AbsoluteTime_PFC_1 (
    day: TCDS_AbsoluteTime_PFC_1_day, 
    msOfDay: TCDS_AbsoluteTime_PFC_1_msOfDay
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775759L))
        val size_0 = 16L
        val size_1 = 32L
        size_0 + size_1
    }.ensuring { (res: Long) => 
        res == 48L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775759L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775759L))
        val size_0_offset = 16L
        val size_0_otherOffset = 16L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775759L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775759L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 16L
        val size_0_otherOffset = 16L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775759L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775759L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 16L
        val size_0_otherOffset = 16L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775759L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775759L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 16L
        val size_0_otherOffset = 16L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_CDS_ABSOLUTETIME_PFC_1_DAY: Int = 1900 /*(0 .. 65535) */

@inline @cCode.inline val ERR_CDS_ABSOLUTETIME_PFC_1_MSOFDAY: Int = 1905 /*(0 .. 4294967295) */

@inline @cCode.inline val ERR_CDS_ABSOLUTETIME_PFC_1: Int = 1910 /* */

 
 
 

@inline @cCode.inline val ERR_ACN_ENCODE_CDS_ABSOLUTETIME_PFC_1: Int = 1913 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CDS_ABSOLUTETIME_PFC_1_DAY: Int = 1903 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CDS_ABSOLUTETIME_PFC_1_MSOFDAY: Int = 1908 /*  */
@inline @cCode.inline val TCDS_AbsoluteTime_PFC_1_REQUIRED_BYTES_FOR_ACN_ENCODING = 6
@inline @cCode.inline val TCDS_AbsoluteTime_PFC_1_REQUIRED_BITS_FOR_ACN_ENCODING = 48

@inline @cCode.inline val ERR_ACN_DECODE_CDS_ABSOLUTETIME_PFC_1: Int = 1914 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CDS_ABSOLUTETIME_PFC_1_DAY: Int = 1904 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CDS_ABSOLUTETIME_PFC_1_MSOFDAY: Int = 1909 /*  */
/*-- TCDS_AbsoluteTime_PFC_2 --------------------------------------------*/
type TCDS_AbsoluteTime_PFC_2_day = ULong

type TCDS_AbsoluteTime_PFC_2_msOfDay = ULong

type TCDS_AbsoluteTime_PFC_2_usOfDay = ULong


case class TCDS_AbsoluteTime_PFC_2 (
    day: TCDS_AbsoluteTime_PFC_2_day, 
    msOfDay: TCDS_AbsoluteTime_PFC_2_msOfDay, 
    usOfDay: TCDS_AbsoluteTime_PFC_2_usOfDay
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        val size_0 = 16L
        val size_1 = 32L
        val size_2 = 16L
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        res == 64L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775743L))
        val size_0_offset = 16L
        val size_0_otherOffset = 16L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775743L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 16L
        val size_0_otherOffset = 16L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775743L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 16L
        val size_0_otherOffset = 16L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775743L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 16L
        val size_0_otherOffset = 16L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_CDS_ABSOLUTETIME_PFC_2_DAY: Int = 1915 /*(0 .. 65535) */

@inline @cCode.inline val ERR_CDS_ABSOLUTETIME_PFC_2_MSOFDAY: Int = 1920 /*(0 .. 4294967295) */

@inline @cCode.inline val ERR_CDS_ABSOLUTETIME_PFC_2_USOFDAY: Int = 1925 /*(0 .. 65535) */

@inline @cCode.inline val ERR_CDS_ABSOLUTETIME_PFC_2: Int = 1930 /* */

 
 
 
 

@inline @cCode.inline val ERR_ACN_ENCODE_CDS_ABSOLUTETIME_PFC_2: Int = 1933 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CDS_ABSOLUTETIME_PFC_2_DAY: Int = 1918 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CDS_ABSOLUTETIME_PFC_2_MSOFDAY: Int = 1923 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CDS_ABSOLUTETIME_PFC_2_USOFDAY: Int = 1928 /*  */
@inline @cCode.inline val TCDS_AbsoluteTime_PFC_2_REQUIRED_BYTES_FOR_ACN_ENCODING = 8
@inline @cCode.inline val TCDS_AbsoluteTime_PFC_2_REQUIRED_BITS_FOR_ACN_ENCODING = 64

@inline @cCode.inline val ERR_ACN_DECODE_CDS_ABSOLUTETIME_PFC_2: Int = 1934 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CDS_ABSOLUTETIME_PFC_2_DAY: Int = 1919 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CDS_ABSOLUTETIME_PFC_2_MSOFDAY: Int = 1924 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CDS_ABSOLUTETIME_PFC_2_USOFDAY: Int = 1929 /*  */
type TAbsoluteTime = TCDS_AbsoluteTime_PFC_2

object TAbsoluteTime {
    def apply(day: ULong, msOfDay: ULong, usOfDay: ULong): TAbsoluteTime = {
        TCDS_AbsoluteTime_PFC_2(day, msOfDay, usOfDay)
    }
}



@inline @cCode.inline val ERR_ABSOLUTETIME_2: Int = 2015 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_ABSOLUTETIME_2: Int = 2018 /*  */
@inline @cCode.inline val TAbsoluteTime_REQUIRED_BYTES_FOR_ACN_ENCODING = 8
@inline @cCode.inline val TAbsoluteTime_REQUIRED_BITS_FOR_ACN_ENCODING = 64

@inline @cCode.inline val ERR_ACN_DECODE_ABSOLUTETIME_2: Int = 2019 /*  */
/*-- TCUC_AbsoluteTime_PFC_3 --------------------------------------------*/
case class TCUC_AbsoluteTime_PFC_3_coarseTime(arr: Vector[UByte])
{
    require(this.arr.length == 1)
}
case class TCUC_AbsoluteTime_PFC_3_fineTime(arr: Vector[UByte])
{
    require(this.arr.length == 1)
}

case class TCUC_AbsoluteTime_PFC_3 (
    coarseTime: TCUC_AbsoluteTime_PFC_3_coarseTime, 
    fineTime: TCUC_AbsoluteTime_PFC_3_fineTime
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775791L))
        val size_0 = (8L)
        val size_1 = 8L
        size_0 + size_1
    }.ensuring { (res: Long) => 
        res == 16L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775791L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775791L))
        val size_0_offset = (8L)
        val size_0_otherOffset = 8L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775791L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775791L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = (8L)
        val size_0_otherOffset = 8L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775791L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775791L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = (8L)
        val size_0_otherOffset = 8L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775791L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775791L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = (8L)
        val size_0_otherOffset = 8L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_CUC_ABSOLUTETIME_PFC_3_COARSETIME: Int = 1935 /*(SIZE(1)) */

@inline @cCode.inline val ERR_CUC_ABSOLUTETIME_PFC_3_FINETIME: Int = 1940 /*(SIZE(1)) */

@inline @cCode.inline val ERR_CUC_ABSOLUTETIME_PFC_3: Int = 1945 /* */

 
 
 

@inline @cCode.inline val ERR_ACN_ENCODE_CUC_ABSOLUTETIME_PFC_3: Int = 1948 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CUC_ABSOLUTETIME_PFC_3_COARSETIME: Int = 1938 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CUC_ABSOLUTETIME_PFC_3_FINETIME: Int = 1943 /*  */
@inline @cCode.inline val TCUC_AbsoluteTime_PFC_3_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TCUC_AbsoluteTime_PFC_3_REQUIRED_BITS_FOR_ACN_ENCODING = 16

@inline @cCode.inline val ERR_ACN_DECODE_CUC_ABSOLUTETIME_PFC_3: Int = 1949 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CUC_ABSOLUTETIME_PFC_3_COARSETIME: Int = 1939 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CUC_ABSOLUTETIME_PFC_3_FINETIME: Int = 1944 /*  */
/*-- TCUC_AbsoluteTime_PFC_18 --------------------------------------------*/
case class TCUC_AbsoluteTime_PFC_18_coarseTime(arr: Vector[UByte])
{
    require(this.arr.length == 4)
}
case class TCUC_AbsoluteTime_PFC_18_fineTime(arr: Vector[UByte])
{
    require(this.arr.length == 3)
}

case class TCUC_AbsoluteTime_PFC_18 (
    coarseTime: TCUC_AbsoluteTime_PFC_18_coarseTime, 
    fineTime: TCUC_AbsoluteTime_PFC_18_fineTime
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775751L))
        val size_0 = (32L)
        val size_1 = 24L
        size_0 + size_1
    }.ensuring { (res: Long) => 
        res == 56L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775751L))
        val size_0_offset = (32L)
        val size_0_otherOffset = 32L
        val size_1_offset = 24L
        val size_1_otherOffset = 24L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775751L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = (32L)
        val size_0_otherOffset = 32L
        val size_1_offset = 24L
        val size_1_otherOffset = 24L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775751L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = (32L)
        val size_0_otherOffset = 32L
        val size_1_offset = 24L
        val size_1_otherOffset = 24L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775751L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = (32L)
        val size_0_otherOffset = 32L
        val size_1_offset = 24L
        val size_1_otherOffset = 24L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_CUC_ABSOLUTETIME_PFC_18_COARSETIME: Int = 1950 /*(SIZE(4)) */

@inline @cCode.inline val ERR_CUC_ABSOLUTETIME_PFC_18_FINETIME: Int = 1955 /*(SIZE(3)) */

@inline @cCode.inline val ERR_CUC_ABSOLUTETIME_PFC_18: Int = 1960 /* */

 
 
 

@inline @cCode.inline val ERR_ACN_ENCODE_CUC_ABSOLUTETIME_PFC_18: Int = 1963 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CUC_ABSOLUTETIME_PFC_18_COARSETIME: Int = 1953 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CUC_ABSOLUTETIME_PFC_18_FINETIME: Int = 1958 /*  */
@inline @cCode.inline val TCUC_AbsoluteTime_PFC_18_REQUIRED_BYTES_FOR_ACN_ENCODING = 7
@inline @cCode.inline val TCUC_AbsoluteTime_PFC_18_REQUIRED_BITS_FOR_ACN_ENCODING = 56

@inline @cCode.inline val ERR_ACN_DECODE_CUC_ABSOLUTETIME_PFC_18: Int = 1964 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CUC_ABSOLUTETIME_PFC_18_COARSETIME: Int = 1954 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CUC_ABSOLUTETIME_PFC_18_FINETIME: Int = 1959 /*  */
/*-- TCUC_AbsoluteTime_PFC_19 --------------------------------------------*/
case class TCUC_AbsoluteTime_PFC_19_coarseTime(arr: Vector[UByte])
{
    require(this.arr.length == 1)
}
case class TCUC_AbsoluteTime_PFC_19_fineTime(arr: Vector[UByte])
{
    require(this.arr.length == 4)
}

case class TCUC_AbsoluteTime_PFC_19 (
    coarseTime: TCUC_AbsoluteTime_PFC_19_coarseTime, 
    fineTime: TCUC_AbsoluteTime_PFC_19_fineTime
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775767L))
        val size_0 = (8L)
        val size_1 = 32L
        size_0 + size_1
    }.ensuring { (res: Long) => 
        res == 40L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775767L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775767L))
        val size_0_offset = (8L)
        val size_0_otherOffset = 8L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775767L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775767L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = (8L)
        val size_0_otherOffset = 8L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775767L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775767L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = (8L)
        val size_0_otherOffset = 8L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775767L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775767L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = (8L)
        val size_0_otherOffset = 8L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_CUC_ABSOLUTETIME_PFC_19_COARSETIME: Int = 1965 /*(SIZE(1)) */

@inline @cCode.inline val ERR_CUC_ABSOLUTETIME_PFC_19_FINETIME: Int = 1970 /*(SIZE(4)) */

@inline @cCode.inline val ERR_CUC_ABSOLUTETIME_PFC_19: Int = 1975 /* */

 
 
 

@inline @cCode.inline val ERR_ACN_ENCODE_CUC_ABSOLUTETIME_PFC_19: Int = 1978 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CUC_ABSOLUTETIME_PFC_19_COARSETIME: Int = 1968 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CUC_ABSOLUTETIME_PFC_19_FINETIME: Int = 1973 /*  */
@inline @cCode.inline val TCUC_AbsoluteTime_PFC_19_REQUIRED_BYTES_FOR_ACN_ENCODING = 5
@inline @cCode.inline val TCUC_AbsoluteTime_PFC_19_REQUIRED_BITS_FOR_ACN_ENCODING = 40

@inline @cCode.inline val ERR_ACN_DECODE_CUC_ABSOLUTETIME_PFC_19: Int = 1979 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CUC_ABSOLUTETIME_PFC_19_COARSETIME: Int = 1969 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CUC_ABSOLUTETIME_PFC_19_FINETIME: Int = 1974 /*  */
/*-- TCUC_AbsoluteTime_PFC_46 --------------------------------------------*/
case class TCUC_AbsoluteTime_PFC_46_coarseTime(arr: Vector[UByte])
{
    require(this.arr.length == 4)
}
case class TCUC_AbsoluteTime_PFC_46_fineTime(arr: Vector[UByte])
{
    require(this.arr.length == 10)
}

case class TCUC_AbsoluteTime_PFC_46 (
    coarseTime: TCUC_AbsoluteTime_PFC_46_coarseTime, 
    fineTime: TCUC_AbsoluteTime_PFC_46_fineTime
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775695L))
        val size_0 = (32L)
        val size_1 = 80L
        size_0 + size_1
    }.ensuring { (res: Long) => 
        res == 112L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775695L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775695L))
        val size_0_offset = (32L)
        val size_0_otherOffset = 32L
        val size_1_offset = 80L
        val size_1_otherOffset = 80L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775695L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775695L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = (32L)
        val size_0_otherOffset = 32L
        val size_1_offset = 80L
        val size_1_otherOffset = 80L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775695L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775695L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = (32L)
        val size_0_otherOffset = 32L
        val size_1_offset = 80L
        val size_1_otherOffset = 80L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775695L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775695L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = (32L)
        val size_0_otherOffset = 32L
        val size_1_offset = 80L
        val size_1_otherOffset = 80L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_CUC_ABSOLUTETIME_PFC_46_COARSETIME: Int = 1980 /*(SIZE(4)) */

@inline @cCode.inline val ERR_CUC_ABSOLUTETIME_PFC_46_FINETIME: Int = 1985 /*(SIZE(10)) */

@inline @cCode.inline val ERR_CUC_ABSOLUTETIME_PFC_46: Int = 1990 /* */

 
 
 

@inline @cCode.inline val ERR_ACN_ENCODE_CUC_ABSOLUTETIME_PFC_46: Int = 1993 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CUC_ABSOLUTETIME_PFC_46_COARSETIME: Int = 1983 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CUC_ABSOLUTETIME_PFC_46_FINETIME: Int = 1988 /*  */
@inline @cCode.inline val TCUC_AbsoluteTime_PFC_46_REQUIRED_BYTES_FOR_ACN_ENCODING = 14
@inline @cCode.inline val TCUC_AbsoluteTime_PFC_46_REQUIRED_BITS_FOR_ACN_ENCODING = 112

@inline @cCode.inline val ERR_ACN_DECODE_CUC_ABSOLUTETIME_PFC_46: Int = 1994 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CUC_ABSOLUTETIME_PFC_46_COARSETIME: Int = 1984 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CUC_ABSOLUTETIME_PFC_46_FINETIME: Int = 1989 /*  */
/*-- TCDS_RelativeTime_PFC_2 --------------------------------------------*/
type TCDS_RelativeTime_PFC_2_day = ULong

type TCDS_RelativeTime_PFC_2_msOfDay = ULong

type TCDS_RelativeTime_PFC_2_usOfMs = ULong


case class TCDS_RelativeTime_PFC_2 (
    day: TCDS_RelativeTime_PFC_2_day, 
    msOfDay: TCDS_RelativeTime_PFC_2_msOfDay, 
    usOfMs: TCDS_RelativeTime_PFC_2_usOfMs
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        val size_0 = 16L
        val size_1 = 32L
        val size_2 = 16L
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        res == 64L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775743L))
        val size_0_offset = 16L
        val size_0_otherOffset = 16L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775743L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 16L
        val size_0_otherOffset = 16L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775743L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 16L
        val size_0_otherOffset = 16L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775743L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 16L
        val size_0_otherOffset = 16L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_CDS_RELATIVETIME_PFC_2_DAY: Int = 2020 /*(0 .. 65535) */

@inline @cCode.inline val ERR_CDS_RELATIVETIME_PFC_2_MSOFDAY: Int = 2025 /*(0 .. 4294967295) */

@inline @cCode.inline val ERR_CDS_RELATIVETIME_PFC_2_USOFMS: Int = 2030 /*(0 .. 65535) */

@inline @cCode.inline val ERR_CDS_RELATIVETIME_PFC_2: Int = 2035 /* */

 
 
 
 

@inline @cCode.inline val ERR_ACN_ENCODE_CDS_RELATIVETIME_PFC_2: Int = 2038 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CDS_RELATIVETIME_PFC_2_DAY: Int = 2023 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CDS_RELATIVETIME_PFC_2_MSOFDAY: Int = 2028 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CDS_RELATIVETIME_PFC_2_USOFMS: Int = 2033 /*  */
@inline @cCode.inline val TCDS_RelativeTime_PFC_2_REQUIRED_BYTES_FOR_ACN_ENCODING = 8
@inline @cCode.inline val TCDS_RelativeTime_PFC_2_REQUIRED_BITS_FOR_ACN_ENCODING = 64

@inline @cCode.inline val ERR_ACN_DECODE_CDS_RELATIVETIME_PFC_2: Int = 2039 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CDS_RELATIVETIME_PFC_2_DAY: Int = 2024 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CDS_RELATIVETIME_PFC_2_MSOFDAY: Int = 2029 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CDS_RELATIVETIME_PFC_2_USOFMS: Int = 2034 /*  */
type TRelativeTime = TCDS_RelativeTime_PFC_2

object TRelativeTime {
    def apply(day: ULong, msOfDay: ULong, usOfMs: ULong): TRelativeTime = {
        TCDS_RelativeTime_PFC_2(day, msOfDay, usOfMs)
    }
}



@inline @cCode.inline val ERR_RELATIVETIME_2: Int = 2090 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_RELATIVETIME_2: Int = 2093 /*  */
@inline @cCode.inline val TRelativeTime_REQUIRED_BYTES_FOR_ACN_ENCODING = 8
@inline @cCode.inline val TRelativeTime_REQUIRED_BITS_FOR_ACN_ENCODING = 64

@inline @cCode.inline val ERR_ACN_DECODE_RELATIVETIME_2: Int = 2094 /*  */
/*-- TCUC_RelativeTime_PFC_3 --------------------------------------------*/
case class TCUC_RelativeTime_PFC_3_coarseTime(arr: Vector[UByte])
{
    require(this.arr.length == 1)
}
case class TCUC_RelativeTime_PFC_3_fineTime(arr: Vector[UByte])
{
    require(this.arr.length == 1)
}

case class TCUC_RelativeTime_PFC_3 (
    coarseTime: TCUC_RelativeTime_PFC_3_coarseTime, 
    fineTime: TCUC_RelativeTime_PFC_3_fineTime
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775791L))
        val size_0 = (8L)
        val size_1 = 8L
        size_0 + size_1
    }.ensuring { (res: Long) => 
        res == 16L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775791L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775791L))
        val size_0_offset = (8L)
        val size_0_otherOffset = 8L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775791L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775791L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = (8L)
        val size_0_otherOffset = 8L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775791L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775791L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = (8L)
        val size_0_otherOffset = 8L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775791L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775791L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = (8L)
        val size_0_otherOffset = 8L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_CUC_RELATIVETIME_PFC_3_COARSETIME: Int = 2040 /*(SIZE(1)) */

@inline @cCode.inline val ERR_CUC_RELATIVETIME_PFC_3_FINETIME: Int = 2045 /*(SIZE(1)) */

@inline @cCode.inline val ERR_CUC_RELATIVETIME_PFC_3: Int = 2050 /* */

 
 
 

@inline @cCode.inline val ERR_ACN_ENCODE_CUC_RELATIVETIME_PFC_3: Int = 2053 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CUC_RELATIVETIME_PFC_3_COARSETIME: Int = 2043 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CUC_RELATIVETIME_PFC_3_FINETIME: Int = 2048 /*  */
@inline @cCode.inline val TCUC_RelativeTime_PFC_3_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TCUC_RelativeTime_PFC_3_REQUIRED_BITS_FOR_ACN_ENCODING = 16

@inline @cCode.inline val ERR_ACN_DECODE_CUC_RELATIVETIME_PFC_3: Int = 2054 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CUC_RELATIVETIME_PFC_3_COARSETIME: Int = 2044 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CUC_RELATIVETIME_PFC_3_FINETIME: Int = 2049 /*  */
/*-- TCUC_RelativeTime_PFC_18 --------------------------------------------*/
case class TCUC_RelativeTime_PFC_18_coarseTime(arr: Vector[UByte])
{
    require(this.arr.length == 4)
}
case class TCUC_RelativeTime_PFC_18_fineTime(arr: Vector[UByte])
{
    require(this.arr.length == 3)
}

case class TCUC_RelativeTime_PFC_18 (
    coarseTime: TCUC_RelativeTime_PFC_18_coarseTime, 
    fineTime: TCUC_RelativeTime_PFC_18_fineTime
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775751L))
        val size_0 = (32L)
        val size_1 = 24L
        size_0 + size_1
    }.ensuring { (res: Long) => 
        res == 56L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775751L))
        val size_0_offset = (32L)
        val size_0_otherOffset = 32L
        val size_1_offset = 24L
        val size_1_otherOffset = 24L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775751L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = (32L)
        val size_0_otherOffset = 32L
        val size_1_offset = 24L
        val size_1_otherOffset = 24L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775751L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = (32L)
        val size_0_otherOffset = 32L
        val size_1_offset = 24L
        val size_1_otherOffset = 24L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775751L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = (32L)
        val size_0_otherOffset = 32L
        val size_1_offset = 24L
        val size_1_otherOffset = 24L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_CUC_RELATIVETIME_PFC_18_COARSETIME: Int = 2055 /*(SIZE(4)) */

@inline @cCode.inline val ERR_CUC_RELATIVETIME_PFC_18_FINETIME: Int = 2060 /*(SIZE(3)) */

@inline @cCode.inline val ERR_CUC_RELATIVETIME_PFC_18: Int = 2065 /* */

 
 
 

@inline @cCode.inline val ERR_ACN_ENCODE_CUC_RELATIVETIME_PFC_18: Int = 2068 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CUC_RELATIVETIME_PFC_18_COARSETIME: Int = 2058 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CUC_RELATIVETIME_PFC_18_FINETIME: Int = 2063 /*  */
@inline @cCode.inline val TCUC_RelativeTime_PFC_18_REQUIRED_BYTES_FOR_ACN_ENCODING = 7
@inline @cCode.inline val TCUC_RelativeTime_PFC_18_REQUIRED_BITS_FOR_ACN_ENCODING = 56

@inline @cCode.inline val ERR_ACN_DECODE_CUC_RELATIVETIME_PFC_18: Int = 2069 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CUC_RELATIVETIME_PFC_18_COARSETIME: Int = 2059 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CUC_RELATIVETIME_PFC_18_FINETIME: Int = 2064 /*  */


