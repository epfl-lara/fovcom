/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

type TPUSC_BOOL1 = BooleanNoRTL


@inline @cCode.inline val ERR_PUSC_BOOL1: Int = 204 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_BOOL1: Int = 207 /*  */
@inline @cCode.inline val TPUSC_BOOL1_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_BOOL1_REQUIRED_BITS_FOR_ACN_ENCODING = 1

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_BOOL1: Int = 208 /*  */
type TPUSC_BOOL8 = BooleanNoRTL


@inline @cCode.inline val ERR_PUSC_BOOL8: Int = 209 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_BOOL8: Int = 212 /*  */
@inline @cCode.inline val TPUSC_BOOL8_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_BOOL8_REQUIRED_BITS_FOR_ACN_ENCODING = 8

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_BOOL8: Int = 213 /*  */
type TPUSC_BOOL16 = BooleanNoRTL


@inline @cCode.inline val ERR_PUSC_BOOL16: Int = 214 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_BOOL16: Int = 217 /*  */
@inline @cCode.inline val TPUSC_BOOL16_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_BOOL16_REQUIRED_BITS_FOR_ACN_ENCODING = 16

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_BOOL16: Int = 218 /*  */
type TPUSC_BOOL32 = BooleanNoRTL


@inline @cCode.inline val ERR_PUSC_BOOL32: Int = 219 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_BOOL32: Int = 222 /*  */
@inline @cCode.inline val TPUSC_BOOL32_REQUIRED_BYTES_FOR_ACN_ENCODING = 4
@inline @cCode.inline val TPUSC_BOOL32_REQUIRED_BITS_FOR_ACN_ENCODING = 32

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_BOOL32: Int = 223 /*  */
type TPUSC_UINT4 = ULong


@inline @cCode.inline val ERR_PUSC_UINT4: Int = 224 /*(0 .. 15) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT4: Int = 227 /*  */
@inline @cCode.inline val TPUSC_UINT4_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_UINT4_REQUIRED_BITS_FOR_ACN_ENCODING = 4

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT4: Int = 228 /*  */
type TPUSC_UINT5 = ULong


@inline @cCode.inline val ERR_PUSC_UINT5: Int = 229 /*(0 .. 31) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT5: Int = 232 /*  */
@inline @cCode.inline val TPUSC_UINT5_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_UINT5_REQUIRED_BITS_FOR_ACN_ENCODING = 5

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT5: Int = 233 /*  */
type TPUSC_UINT6 = ULong


@inline @cCode.inline val ERR_PUSC_UINT6: Int = 234 /*(0 .. 63) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT6: Int = 237 /*  */
@inline @cCode.inline val TPUSC_UINT6_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_UINT6_REQUIRED_BITS_FOR_ACN_ENCODING = 6

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT6: Int = 238 /*  */
type TPUSC_UINT7 = ULong


@inline @cCode.inline val ERR_PUSC_UINT7: Int = 239 /*(0 .. 127) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT7: Int = 242 /*  */
@inline @cCode.inline val TPUSC_UINT7_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_UINT7_REQUIRED_BITS_FOR_ACN_ENCODING = 7

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT7: Int = 243 /*  */
type TPUSC_UINT8 = ULong


@inline @cCode.inline val ERR_PUSC_UINT8: Int = 244 /*(0 .. 255) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT8: Int = 247 /*  */
@inline @cCode.inline val TPUSC_UINT8_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_UINT8_REQUIRED_BITS_FOR_ACN_ENCODING = 8

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT8: Int = 248 /*  */
type TPUSC_UINT9 = ULong


@inline @cCode.inline val ERR_PUSC_UINT9: Int = 249 /*(0 .. 511) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT9: Int = 252 /*  */
@inline @cCode.inline val TPUSC_UINT9_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_UINT9_REQUIRED_BITS_FOR_ACN_ENCODING = 9

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT9: Int = 253 /*  */
type TPUSC_UINT10 = ULong


@inline @cCode.inline val ERR_PUSC_UINT10: Int = 254 /*(0 .. 1023) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT10: Int = 257 /*  */
@inline @cCode.inline val TPUSC_UINT10_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_UINT10_REQUIRED_BITS_FOR_ACN_ENCODING = 10

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT10: Int = 258 /*  */
type TPUSC_UINT11 = ULong


@inline @cCode.inline val ERR_PUSC_UINT11: Int = 259 /*(0 .. 2047) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT11: Int = 262 /*  */
@inline @cCode.inline val TPUSC_UINT11_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_UINT11_REQUIRED_BITS_FOR_ACN_ENCODING = 11

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT11: Int = 263 /*  */
type TPUSC_UINT12 = ULong


@inline @cCode.inline val ERR_PUSC_UINT12: Int = 264 /*(0 .. 4095) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT12: Int = 267 /*  */
@inline @cCode.inline val TPUSC_UINT12_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_UINT12_REQUIRED_BITS_FOR_ACN_ENCODING = 12

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT12: Int = 268 /*  */
type TPUSC_UINT13 = ULong


@inline @cCode.inline val ERR_PUSC_UINT13: Int = 269 /*(0 .. 8191) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT13: Int = 272 /*  */
@inline @cCode.inline val TPUSC_UINT13_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_UINT13_REQUIRED_BITS_FOR_ACN_ENCODING = 13

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT13: Int = 273 /*  */
type TPUSC_UINT14 = ULong


@inline @cCode.inline val ERR_PUSC_UINT14: Int = 274 /*(0 .. 16383) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT14: Int = 277 /*  */
@inline @cCode.inline val TPUSC_UINT14_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_UINT14_REQUIRED_BITS_FOR_ACN_ENCODING = 14

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT14: Int = 278 /*  */
type TPUSC_UINT15 = ULong


@inline @cCode.inline val ERR_PUSC_UINT15: Int = 279 /*(0 .. 32767) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT15: Int = 282 /*  */
@inline @cCode.inline val TPUSC_UINT15_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_UINT15_REQUIRED_BITS_FOR_ACN_ENCODING = 15

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT15: Int = 283 /*  */
type TPUSC_UINT16 = ULong


@inline @cCode.inline val ERR_PUSC_UINT16: Int = 284 /*(0 .. 65535) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT16: Int = 287 /*  */
@inline @cCode.inline val TPUSC_UINT16_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_UINT16_REQUIRED_BITS_FOR_ACN_ENCODING = 16

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT16: Int = 288 /*  */
type TPUSC_UINT24 = ULong


@inline @cCode.inline val ERR_PUSC_UINT24: Int = 289 /*(0 .. 16777215) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT24: Int = 292 /*  */
@inline @cCode.inline val TPUSC_UINT24_REQUIRED_BYTES_FOR_ACN_ENCODING = 3
@inline @cCode.inline val TPUSC_UINT24_REQUIRED_BITS_FOR_ACN_ENCODING = 24

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT24: Int = 293 /*  */
type TPUSC_UINT32 = ULong


@inline @cCode.inline val ERR_PUSC_UINT32: Int = 294 /*(0 .. 4294967295) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT32: Int = 297 /*  */
@inline @cCode.inline val TPUSC_UINT32_REQUIRED_BYTES_FOR_ACN_ENCODING = 4
@inline @cCode.inline val TPUSC_UINT32_REQUIRED_BITS_FOR_ACN_ENCODING = 32

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT32: Int = 298 /*  */
type TPUSC_UINT48 = ULong


@inline @cCode.inline val ERR_PUSC_UINT48: Int = 299 /*(0 .. 281474976710655) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT48: Int = 302 /*  */
@inline @cCode.inline val TPUSC_UINT48_REQUIRED_BYTES_FOR_ACN_ENCODING = 6
@inline @cCode.inline val TPUSC_UINT48_REQUIRED_BITS_FOR_ACN_ENCODING = 48

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT48: Int = 303 /*  */
type TPUSC_UINT64 = ULong


@inline @cCode.inline val ERR_PUSC_UINT64: Int = 304 /*(0 .. 9223372036854775807) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT64: Int = 307 /*  */
@inline @cCode.inline val TPUSC_UINT64_REQUIRED_BYTES_FOR_ACN_ENCODING = 8
@inline @cCode.inline val TPUSC_UINT64_REQUIRED_BITS_FOR_ACN_ENCODING = 64

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT64: Int = 308 /*  */
type TPUSC_UINT1 = ULong


@inline @cCode.inline val ERR_PUSC_UINT1: Int = 309 /*(0 .. 1) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT1: Int = 312 /*  */
@inline @cCode.inline val TPUSC_UINT1_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_UINT1_REQUIRED_BITS_FOR_ACN_ENCODING = 1

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT1: Int = 313 /*  */
type TPUSC_UINT2 = ULong


@inline @cCode.inline val ERR_PUSC_UINT2: Int = 314 /*(0 .. 3) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT2: Int = 317 /*  */
@inline @cCode.inline val TPUSC_UINT2_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_UINT2_REQUIRED_BITS_FOR_ACN_ENCODING = 2

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT2: Int = 318 /*  */
type TPUSC_UINT3 = ULong


@inline @cCode.inline val ERR_PUSC_UINT3: Int = 319 /*(0 .. 7) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_UINT3: Int = 322 /*  */
@inline @cCode.inline val TPUSC_UINT3_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_UINT3_REQUIRED_BITS_FOR_ACN_ENCODING = 3

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_UINT3: Int = 323 /*  */
type TPUSC_INT4 = Long


@inline @cCode.inline val ERR_PUSC_INT4: Int = 324 /*(-8 .. 7) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT4: Int = 327 /*  */
@inline @cCode.inline val TPUSC_INT4_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_INT4_REQUIRED_BITS_FOR_ACN_ENCODING = 4

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT4: Int = 328 /*  */
type TPUSC_INT5 = Long


@inline @cCode.inline val ERR_PUSC_INT5: Int = 329 /*(-16 .. 15) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT5: Int = 332 /*  */
@inline @cCode.inline val TPUSC_INT5_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_INT5_REQUIRED_BITS_FOR_ACN_ENCODING = 5

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT5: Int = 333 /*  */
type TPUSC_INT6 = Long


@inline @cCode.inline val ERR_PUSC_INT6: Int = 334 /*(-32 .. 31) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT6: Int = 337 /*  */
@inline @cCode.inline val TPUSC_INT6_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_INT6_REQUIRED_BITS_FOR_ACN_ENCODING = 6

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT6: Int = 338 /*  */
type TPUSC_INT7 = Long


@inline @cCode.inline val ERR_PUSC_INT7: Int = 339 /*(-64 .. 63) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT7: Int = 342 /*  */
@inline @cCode.inline val TPUSC_INT7_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_INT7_REQUIRED_BITS_FOR_ACN_ENCODING = 7

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT7: Int = 343 /*  */
type TPUSC_INT8 = Long


@inline @cCode.inline val ERR_PUSC_INT8: Int = 344 /*(-128 .. 127) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT8: Int = 347 /*  */
@inline @cCode.inline val TPUSC_INT8_REQUIRED_BYTES_FOR_ACN_ENCODING = 1
@inline @cCode.inline val TPUSC_INT8_REQUIRED_BITS_FOR_ACN_ENCODING = 8

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT8: Int = 348 /*  */
type TPUSC_INT9 = Long


@inline @cCode.inline val ERR_PUSC_INT9: Int = 349 /*(-256 .. 255) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT9: Int = 352 /*  */
@inline @cCode.inline val TPUSC_INT9_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_INT9_REQUIRED_BITS_FOR_ACN_ENCODING = 9

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT9: Int = 353 /*  */
type TPUSC_INT10 = Long


@inline @cCode.inline val ERR_PUSC_INT10: Int = 354 /*(-512 .. 511) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT10: Int = 357 /*  */
@inline @cCode.inline val TPUSC_INT10_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_INT10_REQUIRED_BITS_FOR_ACN_ENCODING = 10

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT10: Int = 358 /*  */
type TPUSC_INT11 = Long


@inline @cCode.inline val ERR_PUSC_INT11: Int = 359 /*(-1024 .. 1023) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT11: Int = 362 /*  */
@inline @cCode.inline val TPUSC_INT11_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_INT11_REQUIRED_BITS_FOR_ACN_ENCODING = 11

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT11: Int = 363 /*  */
type TPUSC_INT12 = Long


@inline @cCode.inline val ERR_PUSC_INT12: Int = 364 /*(-2048 .. 2047) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT12: Int = 367 /*  */
@inline @cCode.inline val TPUSC_INT12_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_INT12_REQUIRED_BITS_FOR_ACN_ENCODING = 12

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT12: Int = 368 /*  */
type TPUSC_INT13 = Long


@inline @cCode.inline val ERR_PUSC_INT13: Int = 369 /*(-4096 .. 4095) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT13: Int = 372 /*  */
@inline @cCode.inline val TPUSC_INT13_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_INT13_REQUIRED_BITS_FOR_ACN_ENCODING = 13

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT13: Int = 373 /*  */
type TPUSC_INT14 = Long


@inline @cCode.inline val ERR_PUSC_INT14: Int = 374 /*(-8192 .. 8191) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT14: Int = 377 /*  */
@inline @cCode.inline val TPUSC_INT14_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_INT14_REQUIRED_BITS_FOR_ACN_ENCODING = 14

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT14: Int = 378 /*  */
type TPUSC_INT15 = Long


@inline @cCode.inline val ERR_PUSC_INT15: Int = 379 /*(-16384 .. 16383) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT15: Int = 382 /*  */
@inline @cCode.inline val TPUSC_INT15_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_INT15_REQUIRED_BITS_FOR_ACN_ENCODING = 15

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT15: Int = 383 /*  */
type TPUSC_INT16 = Long


@inline @cCode.inline val ERR_PUSC_INT16: Int = 384 /*(-32768 .. 32767) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT16: Int = 387 /*  */
@inline @cCode.inline val TPUSC_INT16_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TPUSC_INT16_REQUIRED_BITS_FOR_ACN_ENCODING = 16

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT16: Int = 388 /*  */
type TPUSC_INT24 = Long


@inline @cCode.inline val ERR_PUSC_INT24: Int = 389 /*(-8388608 .. 8388607) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT24: Int = 392 /*  */
@inline @cCode.inline val TPUSC_INT24_REQUIRED_BYTES_FOR_ACN_ENCODING = 3
@inline @cCode.inline val TPUSC_INT24_REQUIRED_BITS_FOR_ACN_ENCODING = 24

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT24: Int = 393 /*  */
type TPUSC_INT32 = Long


@inline @cCode.inline val ERR_PUSC_INT32: Int = 394 /*(-2147483648 .. 2147483647) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT32: Int = 397 /*  */
@inline @cCode.inline val TPUSC_INT32_REQUIRED_BYTES_FOR_ACN_ENCODING = 4
@inline @cCode.inline val TPUSC_INT32_REQUIRED_BITS_FOR_ACN_ENCODING = 32

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT32: Int = 398 /*  */
type TPUSC_INT48 = Long


@inline @cCode.inline val ERR_PUSC_INT48: Int = 399 /*(-140737488355328 .. 140737488355327) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT48: Int = 402 /*  */
@inline @cCode.inline val TPUSC_INT48_REQUIRED_BYTES_FOR_ACN_ENCODING = 6
@inline @cCode.inline val TPUSC_INT48_REQUIRED_BITS_FOR_ACN_ENCODING = 48

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT48: Int = 403 /*  */
type TPUSC_INT64 = Long


@inline @cCode.inline val ERR_PUSC_INT64: Int = 404 /*(-4611686018427387903 .. 4611686018427387903) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_INT64: Int = 407 /*  */
@inline @cCode.inline val TPUSC_INT64_REQUIRED_BYTES_FOR_ACN_ENCODING = 8
@inline @cCode.inline val TPUSC_INT64_REQUIRED_BITS_FOR_ACN_ENCODING = 64

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_INT64: Int = 408 /*  */
@extern
type TPUSC_FLOAT32 = Double


@inline @cCode.inline val ERR_PUSC_FLOAT32: Int = 409 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_FLOAT32: Int = 412 /*  */
@inline @cCode.inline val TPUSC_FLOAT32_REQUIRED_BYTES_FOR_ACN_ENCODING = 4
@inline @cCode.inline val TPUSC_FLOAT32_REQUIRED_BITS_FOR_ACN_ENCODING = 32

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_FLOAT32: Int = 413 /*  */
@extern
type TPUSC_FLOAT64 = Double


@inline @cCode.inline val ERR_PUSC_FLOAT64: Int = 414 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_FLOAT64: Int = 417 /*  */
@inline @cCode.inline val TPUSC_FLOAT64_REQUIRED_BYTES_FOR_ACN_ENCODING = 8
@inline @cCode.inline val TPUSC_FLOAT64_REQUIRED_BITS_FOR_ACN_ENCODING = 64

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_FLOAT64: Int = 418 /*  */
/*-- TPUSC_MIL_FLOAT32 --------------------------------------------*/

case class TPUSC_MIL_FLOAT32_mant(arr: Vector[UByte])
{
    require(this.arr.length == 3)
}
type TPUSC_MIL_FLOAT32_exp = Long


case class TPUSC_MIL_FLOAT32 (
    mant: TPUSC_MIL_FLOAT32_mant, 
    exp: TPUSC_MIL_FLOAT32_exp
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        val size_0 = (24L)
        val size_1 = 8L
        size_0 + size_1
    }.ensuring { (res: Long) => 
        res == 32L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        val size_0_offset = (24L)
        val size_0_otherOffset = 24L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = (24L)
        val size_0_otherOffset = 24L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = (24L)
        val size_0_otherOffset = 24L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = (24L)
        val size_0_otherOffset = 24L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_PUSC_MIL_FLOAT32_MANT: Int = 419 /*(SIZE(24)) */

@inline @cCode.inline val ERR_PUSC_MIL_FLOAT32_EXP: Int = 424 /*(-128 .. 127) */

@inline @cCode.inline val ERR_PUSC_MIL_FLOAT32: Int = 429 /* */

 
 
 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_MIL_FLOAT32: Int = 432 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_MIL_FLOAT32_MANT: Int = 422 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_MIL_FLOAT32_EXP: Int = 427 /*  */
@inline @cCode.inline val TPUSC_MIL_FLOAT32_REQUIRED_BYTES_FOR_ACN_ENCODING = 4
@inline @cCode.inline val TPUSC_MIL_FLOAT32_REQUIRED_BITS_FOR_ACN_ENCODING = 32

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_MIL_FLOAT32: Int = 433 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PUSC_MIL_FLOAT32_MANT: Int = 423 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PUSC_MIL_FLOAT32_EXP: Int = 428 /*  */
/*-- TPUSC_MIL_FLOAT48 --------------------------------------------*/

case class TPUSC_MIL_FLOAT48_mant_MSB(arr: Vector[UByte])
{
    require(this.arr.length == 3)
}
type TPUSC_MIL_FLOAT48_exp = Long


case class TPUSC_MIL_FLOAT48_mant_LSB(arr: Vector[UByte])
{
    require(this.arr.length == 2)
}

case class TPUSC_MIL_FLOAT48 (
    mant_MSB: TPUSC_MIL_FLOAT48_mant_MSB, 
    exp: TPUSC_MIL_FLOAT48_exp, 
    mant_LSB: TPUSC_MIL_FLOAT48_mant_LSB
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775759L))
        val size_0 = (24L)
        val size_1 = 8L
        val size_2 = 16L
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        res == 48L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775759L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775759L))
        val size_0_offset = (24L)
        val size_0_otherOffset = 24L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775759L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775759L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = (24L)
        val size_0_otherOffset = 24L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775759L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775759L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = (24L)
        val size_0_otherOffset = 24L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775759L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775759L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = (24L)
        val size_0_otherOffset = 24L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_PUSC_MIL_FLOAT48_MANT_MSB: Int = 434 /*(SIZE(24)) */

@inline @cCode.inline val ERR_PUSC_MIL_FLOAT48_EXP: Int = 439 /*(-128 .. 127) */

@inline @cCode.inline val ERR_PUSC_MIL_FLOAT48_MANT_LSB: Int = 444 /*(SIZE(16)) */

@inline @cCode.inline val ERR_PUSC_MIL_FLOAT48: Int = 449 /* */

 
 
 
 

@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_MIL_FLOAT48: Int = 452 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_MIL_FLOAT48_MANT_MSB: Int = 437 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_MIL_FLOAT48_EXP: Int = 442 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PUSC_MIL_FLOAT48_MANT_LSB: Int = 447 /*  */
@inline @cCode.inline val TPUSC_MIL_FLOAT48_REQUIRED_BYTES_FOR_ACN_ENCODING = 6
@inline @cCode.inline val TPUSC_MIL_FLOAT48_REQUIRED_BITS_FOR_ACN_ENCODING = 48

@inline @cCode.inline val ERR_ACN_DECODE_PUSC_MIL_FLOAT48: Int = 453 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PUSC_MIL_FLOAT48_MANT_MSB: Int = 438 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PUSC_MIL_FLOAT48_EXP: Int = 443 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PUSC_MIL_FLOAT48_MANT_LSB: Int = 448 /*  */

/*nCount equals to Number of bits in the array. Max value is : 4095 */
case class TPUSC_BITSTR_VARIABLE_LEN(nCount: Long, arr: Vector[UByte])
{
    require(this.arr.length <= 512 && 0L <= this.nCount && this.nCount <= this.arr.length * 8L)
}

@inline @cCode.inline val ERR_PUSC_BITSTR_VARIABLE_LEN: Int = 454 /*(SIZE(0 .. 4095)) */

 
/*nCount equals to Number of bytes in the array. Max value is : 4095 (unsure - TODO read asn1 standard)*/
case class TPUSC_OCTSTR_VARIABLE_LEN(nCount: Long, arr: Vector[UByte])
{
    require(this.arr.length <= 4095 && 0 <= this.nCount && this.nCount <= this.arr.length)
}

@inline @cCode.inline val ERR_PUSC_OCTSTR_VARIABLE_LEN: Int = 459 /*(SIZE(0 .. 4095)) */

 
type TPUSC_CHARSTR_VARIABLE_LEN = Vector[UByte]

@inline @cCode.inline val ERR_PUSC_CHARSTR_VARIABLE_LEN: Int = 464 /*(SIZE(0 .. 4095)) */

 
/*-- TCDS_AbsoluteTime_PFC_1 --------------------------------------------*/
type TCDS_AbsoluteTime_PFC_1_day = ULong

type TCDS_AbsoluteTime_PFC_1_msOfDay = ULong


case class TCDS_AbsoluteTime_PFC_1 (
    day: TCDS_AbsoluteTime_PFC_1_day, 
    msOfDay: TCDS_AbsoluteTime_PFC_1_msOfDay
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775759L))
        val size_0 = 16L
        val size_1 = 32L
        size_0 + size_1
    }.ensuring { (res: Long) => 
        res == 48L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775759L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775759L))
        val size_0_offset = 16L
        val size_0_otherOffset = 16L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775759L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775759L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 16L
        val size_0_otherOffset = 16L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775759L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775759L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 16L
        val size_0_otherOffset = 16L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775759L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775759L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 16L
        val size_0_otherOffset = 16L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_CDS_ABSOLUTETIME_PFC_1_DAY: Int = 469 /*(0 .. 65535) */

@inline @cCode.inline val ERR_CDS_ABSOLUTETIME_PFC_1_MSOFDAY: Int = 474 /*(0 .. 4294967295) */

@inline @cCode.inline val ERR_CDS_ABSOLUTETIME_PFC_1: Int = 479 /* */

 
 
 

@inline @cCode.inline val ERR_ACN_ENCODE_CDS_ABSOLUTETIME_PFC_1: Int = 482 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CDS_ABSOLUTETIME_PFC_1_DAY: Int = 472 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CDS_ABSOLUTETIME_PFC_1_MSOFDAY: Int = 477 /*  */
@inline @cCode.inline val TCDS_AbsoluteTime_PFC_1_REQUIRED_BYTES_FOR_ACN_ENCODING = 6
@inline @cCode.inline val TCDS_AbsoluteTime_PFC_1_REQUIRED_BITS_FOR_ACN_ENCODING = 48

@inline @cCode.inline val ERR_ACN_DECODE_CDS_ABSOLUTETIME_PFC_1: Int = 483 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CDS_ABSOLUTETIME_PFC_1_DAY: Int = 473 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CDS_ABSOLUTETIME_PFC_1_MSOFDAY: Int = 478 /*  */
/*-- TCDS_AbsoluteTime_PFC_2 --------------------------------------------*/
type TCDS_AbsoluteTime_PFC_2_day = ULong

type TCDS_AbsoluteTime_PFC_2_msOfDay = ULong

type TCDS_AbsoluteTime_PFC_2_usOfDay = ULong


case class TCDS_AbsoluteTime_PFC_2 (
    day: TCDS_AbsoluteTime_PFC_2_day, 
    msOfDay: TCDS_AbsoluteTime_PFC_2_msOfDay, 
    usOfDay: TCDS_AbsoluteTime_PFC_2_usOfDay
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        val size_0 = 16L
        val size_1 = 32L
        val size_2 = 16L
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        res == 64L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775743L))
        val size_0_offset = 16L
        val size_0_otherOffset = 16L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775743L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 16L
        val size_0_otherOffset = 16L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775743L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 16L
        val size_0_otherOffset = 16L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775743L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 16L
        val size_0_otherOffset = 16L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_CDS_ABSOLUTETIME_PFC_2_DAY: Int = 484 /*(0 .. 65535) */

@inline @cCode.inline val ERR_CDS_ABSOLUTETIME_PFC_2_MSOFDAY: Int = 489 /*(0 .. 4294967295) */

@inline @cCode.inline val ERR_CDS_ABSOLUTETIME_PFC_2_USOFDAY: Int = 494 /*(0 .. 65535) */

@inline @cCode.inline val ERR_CDS_ABSOLUTETIME_PFC_2: Int = 499 /* */

 
 
 
 

@inline @cCode.inline val ERR_ACN_ENCODE_CDS_ABSOLUTETIME_PFC_2: Int = 502 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CDS_ABSOLUTETIME_PFC_2_DAY: Int = 487 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CDS_ABSOLUTETIME_PFC_2_MSOFDAY: Int = 492 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CDS_ABSOLUTETIME_PFC_2_USOFDAY: Int = 497 /*  */
@inline @cCode.inline val TCDS_AbsoluteTime_PFC_2_REQUIRED_BYTES_FOR_ACN_ENCODING = 8
@inline @cCode.inline val TCDS_AbsoluteTime_PFC_2_REQUIRED_BITS_FOR_ACN_ENCODING = 64

@inline @cCode.inline val ERR_ACN_DECODE_CDS_ABSOLUTETIME_PFC_2: Int = 503 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CDS_ABSOLUTETIME_PFC_2_DAY: Int = 488 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CDS_ABSOLUTETIME_PFC_2_MSOFDAY: Int = 493 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CDS_ABSOLUTETIME_PFC_2_USOFDAY: Int = 498 /*  */
type TAbsoluteTime = TCDS_AbsoluteTime_PFC_2

object TAbsoluteTime {
    def apply(day: ULong, msOfDay: ULong, usOfDay: ULong): TAbsoluteTime = {
        TCDS_AbsoluteTime_PFC_2(day, msOfDay, usOfDay)
    }
}



@inline @cCode.inline val ERR_ABSOLUTETIME_2: Int = 584 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_ABSOLUTETIME_2: Int = 587 /*  */
@inline @cCode.inline val TAbsoluteTime_REQUIRED_BYTES_FOR_ACN_ENCODING = 8
@inline @cCode.inline val TAbsoluteTime_REQUIRED_BITS_FOR_ACN_ENCODING = 64

@inline @cCode.inline val ERR_ACN_DECODE_ABSOLUTETIME_2: Int = 588 /*  */
/*-- TCUC_AbsoluteTime_PFC_3 --------------------------------------------*/
case class TCUC_AbsoluteTime_PFC_3_coarseTime(arr: Vector[UByte])
{
    require(this.arr.length == 1)
}
case class TCUC_AbsoluteTime_PFC_3_fineTime(arr: Vector[UByte])
{
    require(this.arr.length == 1)
}

case class TCUC_AbsoluteTime_PFC_3 (
    coarseTime: TCUC_AbsoluteTime_PFC_3_coarseTime, 
    fineTime: TCUC_AbsoluteTime_PFC_3_fineTime
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775791L))
        val size_0 = (8L)
        val size_1 = 8L
        size_0 + size_1
    }.ensuring { (res: Long) => 
        res == 16L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775791L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775791L))
        val size_0_offset = (8L)
        val size_0_otherOffset = 8L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775791L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775791L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = (8L)
        val size_0_otherOffset = 8L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775791L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775791L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = (8L)
        val size_0_otherOffset = 8L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775791L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775791L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = (8L)
        val size_0_otherOffset = 8L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_CUC_ABSOLUTETIME_PFC_3_COARSETIME: Int = 504 /*(SIZE(1)) */

@inline @cCode.inline val ERR_CUC_ABSOLUTETIME_PFC_3_FINETIME: Int = 509 /*(SIZE(1)) */

@inline @cCode.inline val ERR_CUC_ABSOLUTETIME_PFC_3: Int = 514 /* */

 
 
 

@inline @cCode.inline val ERR_ACN_ENCODE_CUC_ABSOLUTETIME_PFC_3: Int = 517 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CUC_ABSOLUTETIME_PFC_3_COARSETIME: Int = 507 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CUC_ABSOLUTETIME_PFC_3_FINETIME: Int = 512 /*  */
@inline @cCode.inline val TCUC_AbsoluteTime_PFC_3_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TCUC_AbsoluteTime_PFC_3_REQUIRED_BITS_FOR_ACN_ENCODING = 16

@inline @cCode.inline val ERR_ACN_DECODE_CUC_ABSOLUTETIME_PFC_3: Int = 518 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CUC_ABSOLUTETIME_PFC_3_COARSETIME: Int = 508 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CUC_ABSOLUTETIME_PFC_3_FINETIME: Int = 513 /*  */
/*-- TCUC_AbsoluteTime_PFC_18 --------------------------------------------*/
case class TCUC_AbsoluteTime_PFC_18_coarseTime(arr: Vector[UByte])
{
    require(this.arr.length == 4)
}
case class TCUC_AbsoluteTime_PFC_18_fineTime(arr: Vector[UByte])
{
    require(this.arr.length == 3)
}

case class TCUC_AbsoluteTime_PFC_18 (
    coarseTime: TCUC_AbsoluteTime_PFC_18_coarseTime, 
    fineTime: TCUC_AbsoluteTime_PFC_18_fineTime
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775751L))
        val size_0 = (32L)
        val size_1 = 24L
        size_0 + size_1
    }.ensuring { (res: Long) => 
        res == 56L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775751L))
        val size_0_offset = (32L)
        val size_0_otherOffset = 32L
        val size_1_offset = 24L
        val size_1_otherOffset = 24L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775751L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = (32L)
        val size_0_otherOffset = 32L
        val size_1_offset = 24L
        val size_1_otherOffset = 24L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775751L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = (32L)
        val size_0_otherOffset = 32L
        val size_1_offset = 24L
        val size_1_otherOffset = 24L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775751L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = (32L)
        val size_0_otherOffset = 32L
        val size_1_offset = 24L
        val size_1_otherOffset = 24L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_CUC_ABSOLUTETIME_PFC_18_COARSETIME: Int = 519 /*(SIZE(4)) */

@inline @cCode.inline val ERR_CUC_ABSOLUTETIME_PFC_18_FINETIME: Int = 524 /*(SIZE(3)) */

@inline @cCode.inline val ERR_CUC_ABSOLUTETIME_PFC_18: Int = 529 /* */

 
 
 

@inline @cCode.inline val ERR_ACN_ENCODE_CUC_ABSOLUTETIME_PFC_18: Int = 532 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CUC_ABSOLUTETIME_PFC_18_COARSETIME: Int = 522 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CUC_ABSOLUTETIME_PFC_18_FINETIME: Int = 527 /*  */
@inline @cCode.inline val TCUC_AbsoluteTime_PFC_18_REQUIRED_BYTES_FOR_ACN_ENCODING = 7
@inline @cCode.inline val TCUC_AbsoluteTime_PFC_18_REQUIRED_BITS_FOR_ACN_ENCODING = 56

@inline @cCode.inline val ERR_ACN_DECODE_CUC_ABSOLUTETIME_PFC_18: Int = 533 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CUC_ABSOLUTETIME_PFC_18_COARSETIME: Int = 523 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CUC_ABSOLUTETIME_PFC_18_FINETIME: Int = 528 /*  */
/*-- TCUC_AbsoluteTime_PFC_19 --------------------------------------------*/
case class TCUC_AbsoluteTime_PFC_19_coarseTime(arr: Vector[UByte])
{
    require(this.arr.length == 1)
}
case class TCUC_AbsoluteTime_PFC_19_fineTime(arr: Vector[UByte])
{
    require(this.arr.length == 4)
}

case class TCUC_AbsoluteTime_PFC_19 (
    coarseTime: TCUC_AbsoluteTime_PFC_19_coarseTime, 
    fineTime: TCUC_AbsoluteTime_PFC_19_fineTime
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775767L))
        val size_0 = (8L)
        val size_1 = 32L
        size_0 + size_1
    }.ensuring { (res: Long) => 
        res == 40L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775767L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775767L))
        val size_0_offset = (8L)
        val size_0_otherOffset = 8L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775767L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775767L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = (8L)
        val size_0_otherOffset = 8L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775767L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775767L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = (8L)
        val size_0_otherOffset = 8L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775767L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775767L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = (8L)
        val size_0_otherOffset = 8L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_CUC_ABSOLUTETIME_PFC_19_COARSETIME: Int = 534 /*(SIZE(1)) */

@inline @cCode.inline val ERR_CUC_ABSOLUTETIME_PFC_19_FINETIME: Int = 539 /*(SIZE(4)) */

@inline @cCode.inline val ERR_CUC_ABSOLUTETIME_PFC_19: Int = 544 /* */

 
 
 

@inline @cCode.inline val ERR_ACN_ENCODE_CUC_ABSOLUTETIME_PFC_19: Int = 547 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CUC_ABSOLUTETIME_PFC_19_COARSETIME: Int = 537 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CUC_ABSOLUTETIME_PFC_19_FINETIME: Int = 542 /*  */
@inline @cCode.inline val TCUC_AbsoluteTime_PFC_19_REQUIRED_BYTES_FOR_ACN_ENCODING = 5
@inline @cCode.inline val TCUC_AbsoluteTime_PFC_19_REQUIRED_BITS_FOR_ACN_ENCODING = 40

@inline @cCode.inline val ERR_ACN_DECODE_CUC_ABSOLUTETIME_PFC_19: Int = 548 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CUC_ABSOLUTETIME_PFC_19_COARSETIME: Int = 538 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CUC_ABSOLUTETIME_PFC_19_FINETIME: Int = 543 /*  */
/*-- TCUC_AbsoluteTime_PFC_46 --------------------------------------------*/
case class TCUC_AbsoluteTime_PFC_46_coarseTime(arr: Vector[UByte])
{
    require(this.arr.length == 4)
}
case class TCUC_AbsoluteTime_PFC_46_fineTime(arr: Vector[UByte])
{
    require(this.arr.length == 10)
}

case class TCUC_AbsoluteTime_PFC_46 (
    coarseTime: TCUC_AbsoluteTime_PFC_46_coarseTime, 
    fineTime: TCUC_AbsoluteTime_PFC_46_fineTime
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775695L))
        val size_0 = (32L)
        val size_1 = 80L
        size_0 + size_1
    }.ensuring { (res: Long) => 
        res == 112L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775695L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775695L))
        val size_0_offset = (32L)
        val size_0_otherOffset = 32L
        val size_1_offset = 80L
        val size_1_otherOffset = 80L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775695L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775695L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = (32L)
        val size_0_otherOffset = 32L
        val size_1_offset = 80L
        val size_1_otherOffset = 80L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775695L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775695L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = (32L)
        val size_0_otherOffset = 32L
        val size_1_offset = 80L
        val size_1_otherOffset = 80L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775695L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775695L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = (32L)
        val size_0_otherOffset = 32L
        val size_1_offset = 80L
        val size_1_otherOffset = 80L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_CUC_ABSOLUTETIME_PFC_46_COARSETIME: Int = 549 /*(SIZE(4)) */

@inline @cCode.inline val ERR_CUC_ABSOLUTETIME_PFC_46_FINETIME: Int = 554 /*(SIZE(10)) */

@inline @cCode.inline val ERR_CUC_ABSOLUTETIME_PFC_46: Int = 559 /* */

 
 
 

@inline @cCode.inline val ERR_ACN_ENCODE_CUC_ABSOLUTETIME_PFC_46: Int = 562 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CUC_ABSOLUTETIME_PFC_46_COARSETIME: Int = 552 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CUC_ABSOLUTETIME_PFC_46_FINETIME: Int = 557 /*  */
@inline @cCode.inline val TCUC_AbsoluteTime_PFC_46_REQUIRED_BYTES_FOR_ACN_ENCODING = 14
@inline @cCode.inline val TCUC_AbsoluteTime_PFC_46_REQUIRED_BITS_FOR_ACN_ENCODING = 112

@inline @cCode.inline val ERR_ACN_DECODE_CUC_ABSOLUTETIME_PFC_46: Int = 563 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CUC_ABSOLUTETIME_PFC_46_COARSETIME: Int = 553 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CUC_ABSOLUTETIME_PFC_46_FINETIME: Int = 558 /*  */
/*-- TCDS_RelativeTime_PFC_2 --------------------------------------------*/
type TCDS_RelativeTime_PFC_2_day = ULong

type TCDS_RelativeTime_PFC_2_msOfDay = ULong

type TCDS_RelativeTime_PFC_2_usOfMs = ULong


case class TCDS_RelativeTime_PFC_2 (
    day: TCDS_RelativeTime_PFC_2_day, 
    msOfDay: TCDS_RelativeTime_PFC_2_msOfDay, 
    usOfMs: TCDS_RelativeTime_PFC_2_usOfMs
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        val size_0 = 16L
        val size_1 = 32L
        val size_2 = 16L
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        res == 64L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775743L))
        val size_0_offset = 16L
        val size_0_otherOffset = 16L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775743L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 16L
        val size_0_otherOffset = 16L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775743L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 16L
        val size_0_otherOffset = 16L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775743L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775743L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 16L
        val size_0_otherOffset = 16L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 16L
        val size_2_otherOffset = 16L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_CDS_RELATIVETIME_PFC_2_DAY: Int = 589 /*(0 .. 65535) */

@inline @cCode.inline val ERR_CDS_RELATIVETIME_PFC_2_MSOFDAY: Int = 594 /*(0 .. 4294967295) */

@inline @cCode.inline val ERR_CDS_RELATIVETIME_PFC_2_USOFMS: Int = 599 /*(0 .. 65535) */

@inline @cCode.inline val ERR_CDS_RELATIVETIME_PFC_2: Int = 604 /* */

 
 
 
 

@inline @cCode.inline val ERR_ACN_ENCODE_CDS_RELATIVETIME_PFC_2: Int = 607 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CDS_RELATIVETIME_PFC_2_DAY: Int = 592 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CDS_RELATIVETIME_PFC_2_MSOFDAY: Int = 597 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CDS_RELATIVETIME_PFC_2_USOFMS: Int = 602 /*  */
@inline @cCode.inline val TCDS_RelativeTime_PFC_2_REQUIRED_BYTES_FOR_ACN_ENCODING = 8
@inline @cCode.inline val TCDS_RelativeTime_PFC_2_REQUIRED_BITS_FOR_ACN_ENCODING = 64

@inline @cCode.inline val ERR_ACN_DECODE_CDS_RELATIVETIME_PFC_2: Int = 608 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CDS_RELATIVETIME_PFC_2_DAY: Int = 593 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CDS_RELATIVETIME_PFC_2_MSOFDAY: Int = 598 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CDS_RELATIVETIME_PFC_2_USOFMS: Int = 603 /*  */
type TRelativeTime = TCDS_RelativeTime_PFC_2

object TRelativeTime {
    def apply(day: ULong, msOfDay: ULong, usOfMs: ULong): TRelativeTime = {
        TCDS_RelativeTime_PFC_2(day, msOfDay, usOfMs)
    }
}



@inline @cCode.inline val ERR_RELATIVETIME_2: Int = 659 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_RELATIVETIME_2: Int = 662 /*  */
@inline @cCode.inline val TRelativeTime_REQUIRED_BYTES_FOR_ACN_ENCODING = 8
@inline @cCode.inline val TRelativeTime_REQUIRED_BITS_FOR_ACN_ENCODING = 64

@inline @cCode.inline val ERR_ACN_DECODE_RELATIVETIME_2: Int = 663 /*  */
/*-- TCUC_RelativeTime_PFC_3 --------------------------------------------*/
case class TCUC_RelativeTime_PFC_3_coarseTime(arr: Vector[UByte])
{
    require(this.arr.length == 1)
}
case class TCUC_RelativeTime_PFC_3_fineTime(arr: Vector[UByte])
{
    require(this.arr.length == 1)
}

case class TCUC_RelativeTime_PFC_3 (
    coarseTime: TCUC_RelativeTime_PFC_3_coarseTime, 
    fineTime: TCUC_RelativeTime_PFC_3_fineTime
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775791L))
        val size_0 = (8L)
        val size_1 = 8L
        size_0 + size_1
    }.ensuring { (res: Long) => 
        res == 16L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775791L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775791L))
        val size_0_offset = (8L)
        val size_0_otherOffset = 8L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775791L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775791L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = (8L)
        val size_0_otherOffset = 8L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775791L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775791L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = (8L)
        val size_0_otherOffset = 8L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775791L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775791L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = (8L)
        val size_0_otherOffset = 8L
        val size_1_offset = 8L
        val size_1_otherOffset = 8L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_CUC_RELATIVETIME_PFC_3_COARSETIME: Int = 609 /*(SIZE(1)) */

@inline @cCode.inline val ERR_CUC_RELATIVETIME_PFC_3_FINETIME: Int = 614 /*(SIZE(1)) */

@inline @cCode.inline val ERR_CUC_RELATIVETIME_PFC_3: Int = 619 /* */

 
 
 

@inline @cCode.inline val ERR_ACN_ENCODE_CUC_RELATIVETIME_PFC_3: Int = 622 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CUC_RELATIVETIME_PFC_3_COARSETIME: Int = 612 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CUC_RELATIVETIME_PFC_3_FINETIME: Int = 617 /*  */
@inline @cCode.inline val TCUC_RelativeTime_PFC_3_REQUIRED_BYTES_FOR_ACN_ENCODING = 2
@inline @cCode.inline val TCUC_RelativeTime_PFC_3_REQUIRED_BITS_FOR_ACN_ENCODING = 16

@inline @cCode.inline val ERR_ACN_DECODE_CUC_RELATIVETIME_PFC_3: Int = 623 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CUC_RELATIVETIME_PFC_3_COARSETIME: Int = 613 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CUC_RELATIVETIME_PFC_3_FINETIME: Int = 618 /*  */
/*-- TCUC_RelativeTime_PFC_18 --------------------------------------------*/
case class TCUC_RelativeTime_PFC_18_coarseTime(arr: Vector[UByte])
{
    require(this.arr.length == 4)
}
case class TCUC_RelativeTime_PFC_18_fineTime(arr: Vector[UByte])
{
    require(this.arr.length == 3)
}

case class TCUC_RelativeTime_PFC_18 (
    coarseTime: TCUC_RelativeTime_PFC_18_coarseTime, 
    fineTime: TCUC_RelativeTime_PFC_18_fineTime
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775751L))
        val size_0 = (32L)
        val size_1 = 24L
        size_0 + size_1
    }.ensuring { (res: Long) => 
        res == 56L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775751L))
        val size_0_offset = (32L)
        val size_0_otherOffset = 32L
        val size_1_offset = 24L
        val size_1_otherOffset = 24L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775751L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = (32L)
        val size_0_otherOffset = 32L
        val size_1_offset = 24L
        val size_1_otherOffset = 24L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775751L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = (32L)
        val size_0_otherOffset = 32L
        val size_1_offset = 24L
        val size_1_otherOffset = 24L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775751L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = (32L)
        val size_0_otherOffset = 32L
        val size_1_offset = 24L
        val size_1_otherOffset = 24L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_CUC_RELATIVETIME_PFC_18_COARSETIME: Int = 624 /*(SIZE(4)) */

@inline @cCode.inline val ERR_CUC_RELATIVETIME_PFC_18_FINETIME: Int = 629 /*(SIZE(3)) */

@inline @cCode.inline val ERR_CUC_RELATIVETIME_PFC_18: Int = 634 /* */

 
 
 

@inline @cCode.inline val ERR_ACN_ENCODE_CUC_RELATIVETIME_PFC_18: Int = 637 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CUC_RELATIVETIME_PFC_18_COARSETIME: Int = 627 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CUC_RELATIVETIME_PFC_18_FINETIME: Int = 632 /*  */
@inline @cCode.inline val TCUC_RelativeTime_PFC_18_REQUIRED_BYTES_FOR_ACN_ENCODING = 7
@inline @cCode.inline val TCUC_RelativeTime_PFC_18_REQUIRED_BITS_FOR_ACN_ENCODING = 56

@inline @cCode.inline val ERR_ACN_DECODE_CUC_RELATIVETIME_PFC_18: Int = 638 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CUC_RELATIVETIME_PFC_18_COARSETIME: Int = 628 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CUC_RELATIVETIME_PFC_18_FINETIME: Int = 633 /*  */


