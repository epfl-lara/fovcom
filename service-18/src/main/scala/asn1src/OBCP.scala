/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

val max_OBCP_ID_Size: Int = 5 // variables:188

def TOBCP_ID_IsConstraintValid(pVal: TOBCP_ID): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = (pVal.indexOf(0.toRawUByte) == 5) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    ret
}

def TOBCP_ID_Initialize(): TOBCP_ID = Vector.fill[UByte](5.toInt+1)(0x0.toRawUByte)

@opaque @inlineOnce 
def TOBCP_ID_ACN_Encode(pVal: TOBCP_ID, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(35L))
    var i1: Int = 0
    TOBCP_ID_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    OBCP_ID_Encode_loop(codec, pVal, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ()
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 35L
    }
}

@opaque @inlineOnce
def OBCP_ID_Encode_loop(codec: ACN, pVal: Vector[UByte], i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= 5))
    require(pVal.size == (6))
    require(codec.base.bitStream.validate_offset_bits((7L * (5 - i1))))
    decreases(5 - i1)
    if (i1 == 5) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        if (!(UByte.fromRaw(0.toByte) <= pVal.apply(i1) && pVal.apply(i1) <= UByte.fromRaw(127.toByte))) {
            return Left[Int, Int](1)
        } else {
            ()
        }
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 7L * (5 - i1), 7L)
        }
        codec.base.encodeConstrainedWholeNumber(pVal(i1).toRaw, 0, 127)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(7L * (i1 + 1) == 7L * i1 + 7L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 7L * (5 - i1), 7L)
            check(codec.base.bitStream.validate_offset_bits(7L * (5 - (i1 + 1))))
        }
        val res = OBCP_ID_Encode_loop(codec, pVal, i1 + 1)
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 7L * (5 - i1)
    }
}



@opaque @inlineOnce 
def TOBCP_ID_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TOBCP_ID] =
{
    require(codec.base.bitStream.validate_offset_bits(35L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    val pVal = OBCP_ID_Decode_loop(codec, Vector.empty[UByte], 0) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(bdg) =>
            bdg
    }

    TOBCP_ID_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TOBCP_ID](l)
        case Right(_) => RightMut[ErrorCode, TOBCP_ID](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TOBCP_ID]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 35L && resVal.size == 6 && TOBCP_ID_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TOBCP_ID_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TOBCP_ID]) =
{
    require(codec.base.bitStream.validate_offset_bits(35L))
    val cpy = snapshot(codec)
    val res = TOBCP_ID_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def OBCP_ID_Decode_loop(codec: ACN, pVal: Vector[UByte], i1: Int): EitherMut[Int, Vector[UByte]] = {
    require((0 <= i1) && (i1 <= 5))
    require(pVal.size == i1)
    require(codec.base.bitStream.validate_offset_bits((7L * (5 - i1))))
    decreases(5 - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == 5) {
        ghostExpr {
            vecRangesEqReflexiveLemma(pVal.append(UByte.fromRaw(0.toByte)))
            vecRangesEqSlicedLemma(pVal.append(UByte.fromRaw(0.toByte)), pVal.append(UByte.fromRaw(0.toByte)), 0, pVal.append(UByte.fromRaw(0.toByte)).size, 0, i1)
        }
        RightMut[Int, Vector[UByte]](pVal.append(UByte.fromRaw(0.toByte)))
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 7L * (5 - i1), 7L)
        }
        val pVal_arr_i1_ = UByte.fromRaw(codec.base.decodeConstrainedWholeNumberByte(0, 127)) // uper:109
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(7L * (i1 + 1) == 7L * i1 + 7L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 7L * (5 - i1), 7L)
            check(codec.base.bitStream.validate_offset_bits(7L * (5 - (i1 + 1))))
        }
        val res = OBCP_ID_Decode_loop(codec, pVal.append(pVal_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(pVal, newVec, pVal_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(pVal.append(pVal_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(pVal.list, pVal_arr_i1_, i1)
                    Vector.listApplyEqVecApply(pVal.append(pVal_arr_i1_), i1)
                    check(pVal_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[UByte]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == 6 && vecRangesEq(pVal, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 7L * (5 - i1)
    }
}

