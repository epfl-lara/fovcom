/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TTC_18_13_LoadAnOBCPByReference --------------------------------------------*/

case class TTC_18_13_LoadAnOBCPByReference (
    obcp_ID: TOBCP_ID, 
    filePath: OptionMut[TFilePath]
) {
    require((6 == this.obcp_ID.length && this.obcp_ID.indexOfOrLength(UByte.fromRaw(0.toByte)) <= 5) && this.filePath.isDefined)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854718418L))
        val size_0 = (35L)
        val size_1 = this.filePath match {
            case SomeMut(v) =>
                v.size(offset + size_0)
            case NoneMut() =>
                0L
        }
        size_0 + size_1
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 57389L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854718418L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854718418L))
        val size_0_offset = (35L)
        val size_0_otherOffset = 35L
        val size_1_offset = this.filePath match {
            case SomeMut(v) =>
                v.size(offset + size_0_offset)
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.filePath match {
            case SomeMut(v) =>
                v.size(otherOffset + size_0_otherOffset)
            case NoneMut() =>
                0L
        }
        this.filePath match {
            case SomeMut(v) =>
                v.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
            case NoneMut() =>
                ()
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854718418L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854718418L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = (35L)
        val size_0_otherOffset = 35L
        val size_1_offset = this.filePath match {
            case SomeMut(v) =>
                v.size(offset + size_0_offset)
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.filePath match {
            case SomeMut(v) =>
                v.size(otherOffset + size_0_otherOffset)
            case NoneMut() =>
                0L
        }
        this.filePath match {
            case SomeMut(v) =>
                v.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
            case NoneMut() =>
                ()
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854718418L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854718418L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = (35L)
        val size_0_otherOffset = 35L
        val size_1_offset = this.filePath match {
            case SomeMut(v) =>
                v.size(offset + size_0_offset)
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.filePath match {
            case SomeMut(v) =>
                v.size(otherOffset + size_0_otherOffset)
            case NoneMut() =>
                0L
        }
        this.filePath match {
            case SomeMut(v) =>
                v.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
            case NoneMut() =>
                ()
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854718418L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854718418L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = (35L)
        val size_0_otherOffset = 35L
        val size_1_offset = this.filePath match {
            case SomeMut(v) =>
                v.size(offset + size_0_offset)
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.filePath match {
            case SomeMut(v) =>
                v.size(otherOffset + size_0_otherOffset)
            case NoneMut() =>
                0L
        }
        this.filePath match {
            case SomeMut(v) =>
                v.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
            case NoneMut() =>
                ()
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_18_13_LOADANOBCPBYREFERENCE: Int = 142 /*(WITH COMPONENTS {filePath PRESENT}) */
@inline @cCode.inline val ERR_TC_18_13_LOADANOBCPBYREFERENCE_OBCP_ID_2: Int = 107 /* */
@inline @cCode.inline val ERR_TC_18_13_LOADANOBCPBYREFERENCE_FILEPATH_2: Int = 137 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_18_13_LOADANOBCPBYREFERENCE: Int = 145 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_18_13_LOADANOBCPBYREFERENCE_OBCP_ID_2: Int = 110 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_18_13_LOADANOBCPBYREFERENCE_FILEPATH_2: Int = 140 /*  */
@inline @cCode.inline val TTC_18_13_LoadAnOBCPByReference_REQUIRED_BYTES_FOR_ACN_ENCODING = 7174
@inline @cCode.inline val TTC_18_13_LoadAnOBCPByReference_REQUIRED_BITS_FOR_ACN_ENCODING = 57389

@inline @cCode.inline val ERR_ACN_DECODE_TC_18_13_LOADANOBCPBYREFERENCE: Int = 146 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_18_13_LOADANOBCPBYREFERENCE_OBCP_ID_2: Int = 111 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_18_13_LOADANOBCPBYREFERENCE_FILEPATH_2: Int = 141 /*  */


