/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TTC_18_16_OBCPObservabilitySetting --------------------------------------------*/

case class TTC_18_16_OBCPObservabilitySetting (
    obcp_ID: TOBCP_ID, 
    observabilityLevel: TOBCPObservabilityLevel
) {
    require(6 == this.obcp_ID.length && this.obcp_ID.indexOfOrLength(UByte.fromRaw(0.toByte)) <= 5)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775770L))
        val size_0 = (35L)
        val size_1 = 2L
        size_0 + size_1
    }.ensuring { (res: Long) => 
        res == 37L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775770L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775770L))
        val size_0_offset = (35L)
        val size_0_otherOffset = 35L
        val size_1_offset = 2L
        val size_1_otherOffset = 2L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775770L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775770L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = (35L)
        val size_0_otherOffset = 35L
        val size_1_offset = 2L
        val size_1_otherOffset = 2L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775770L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775770L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = (35L)
        val size_0_otherOffset = 35L
        val size_1_offset = 2L
        val size_1_otherOffset = 2L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775770L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775770L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = (35L)
        val size_0_otherOffset = 35L
        val size_1_offset = 2L
        val size_1_otherOffset = 2L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_18_16_OBCPOBSERVABILITYSETTING: Int = 265 /* */
@inline @cCode.inline val ERR_TC_18_16_OBCPOBSERVABILITYSETTING_OBCP_ID_2: Int = 250 /* */
@inline @cCode.inline val ERR_TC_18_16_OBCPOBSERVABILITYSETTING_OBSERVABILITYLEVEL_2: Int = 260 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_18_16_OBCPOBSERVABILITYSETTING: Int = 268 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_18_16_OBCPOBSERVABILITYSETTING_OBCP_ID_2: Int = 253 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_18_16_OBCPOBSERVABILITYSETTING_OBSERVABILITYLEVEL_2: Int = 263 /*  */
@inline @cCode.inline val TTC_18_16_OBCPObservabilitySetting_REQUIRED_BYTES_FOR_ACN_ENCODING = 5
@inline @cCode.inline val TTC_18_16_OBCPObservabilitySetting_REQUIRED_BITS_FOR_ACN_ENCODING = 37

@inline @cCode.inline val ERR_ACN_DECODE_TC_18_16_OBCPOBSERVABILITYSETTING: Int = 269 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_18_16_OBCPOBSERVABILITYSETTING_OBCP_ID_2: Int = 254 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_18_16_OBCPOBSERVABILITYSETTING_OBSERVABILITYLEVEL_2: Int = 264 /*  */
/*-- TTC_18_16_SetTheObservabilityLevelOfOBCP --------------------------------------------*/


case class TTC_18_16_SetTheObservabilityLevelOfOBCP_observabilitySettings (nCount: Int, arr: Vector[TTC_18_16_OBCPObservabilitySetting])
{
    require(this.arr.size <= 15 && 1 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775252L))
        TTC_18_16_SetTheObservabilityLevelOfOBCP_observabilitySettings.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 555L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775252L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775252L))
        TTC_18_16_SetTheObservabilityLevelOfOBCP_observabilitySettings.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775252L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775252L))
        require((offset % 8L) == (otherOffset % 8L))
        TTC_18_16_SetTheObservabilityLevelOfOBCP_observabilitySettings.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775252L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775252L))
        require((offset % 16L) == (otherOffset % 16L))
        TTC_18_16_SetTheObservabilityLevelOfOBCP_observabilitySettings.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775252L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775252L))
        require((offset % 32L) == (otherOffset % 32L))
        TTC_18_16_SetTheObservabilityLevelOfOBCP_observabilitySettings.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TTC_18_16_SetTheObservabilityLevelOfOBCP_observabilitySettings {
    def sizeRange(ls: Vector[TTC_18_16_OBCPObservabilitySetting], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 15))
        require((0L <= offset) && (offset <= 9223372036854775807L - 37L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(elemSize == 37L)
            elemSize + TTC_18_16_SetTheObservabilityLevelOfOBCP_observabilitySettings.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 37L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TTC_18_16_OBCPObservabilitySetting], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 15))
        require((0L <= offset) && (offset <= 9223372036854775807L - 37L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 37L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 37L)
            assert(elemSizeOtherOff == 37L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TTC_18_16_SetTheObservabilityLevelOfOBCP_observabilitySettings.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_18_16_SetTheObservabilityLevelOfOBCP_observabilitySettings.sizeRange(ls, offset, from, to) == TTC_18_16_SetTheObservabilityLevelOfOBCP_observabilitySettings.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TTC_18_16_OBCPObservabilitySetting], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 15))
        require((0L <= offset) && (offset <= 9223372036854775807L - 37L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 37L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 37L)
            assert(elemSizeOtherOff == 37L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TTC_18_16_SetTheObservabilityLevelOfOBCP_observabilitySettings.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_18_16_SetTheObservabilityLevelOfOBCP_observabilitySettings.sizeRange(ls, offset, from, to) == TTC_18_16_SetTheObservabilityLevelOfOBCP_observabilitySettings.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TTC_18_16_OBCPObservabilitySetting], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 15))
        require((0L <= offset) && (offset <= 9223372036854775807L - 37L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 37L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 37L)
            assert(elemSizeOtherOff == 37L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TTC_18_16_SetTheObservabilityLevelOfOBCP_observabilitySettings.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_18_16_SetTheObservabilityLevelOfOBCP_observabilitySettings.sizeRange(ls, offset, from, to) == TTC_18_16_SetTheObservabilityLevelOfOBCP_observabilitySettings.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TTC_18_16_OBCPObservabilitySetting], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 15))
        require((0L <= offset) && (offset <= 9223372036854775807L - 37L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 37L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 37L)
            assert(elemSizeOtherOff == 37L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TTC_18_16_SetTheObservabilityLevelOfOBCP_observabilitySettings.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_18_16_SetTheObservabilityLevelOfOBCP_observabilitySettings.sizeRange(ls, offset, from, to) == TTC_18_16_SetTheObservabilityLevelOfOBCP_observabilitySettings.sizeRange(ls, otherOffset, from, to)
    }
}

case class TTC_18_16_SetTheObservabilityLevelOfOBCP (
    observabilitySettings: TTC_18_16_SetTheObservabilityLevelOfOBCP_observabilitySettings
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775220L))
        val size_0 = 32L
        val size_1 = this.observabilitySettings.size(offset + size_0)
        size_0 + size_1
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 587L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775220L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775220L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.observabilitySettings.size(offset + size_0_offset)
        val size_1_otherOffset = this.observabilitySettings.size(otherOffset + size_0_otherOffset)
        this.observabilitySettings.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775220L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775220L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.observabilitySettings.size(offset + size_0_offset)
        val size_1_otherOffset = this.observabilitySettings.size(otherOffset + size_0_otherOffset)
        this.observabilitySettings.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775220L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775220L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.observabilitySettings.size(offset + size_0_offset)
        val size_1_otherOffset = this.observabilitySettings.size(otherOffset + size_0_otherOffset)
        this.observabilitySettings.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775220L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775220L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.observabilitySettings.size(offset + size_0_offset)
        val size_1_otherOffset = this.observabilitySettings.size(otherOffset + size_0_otherOffset)
        this.observabilitySettings.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_18_16_SETTHEOBSERVABILITYLEVELOFOBCP_OBSERVABILITYSETTINGS: Int = 234 /*(SIZE(1 .. maxTC-18-16-OBCPObservabilitySettingsCount)) */
@inline @cCode.inline val ERR_TC_18_16_SETTHEOBSERVABILITYLEVELOFOBCP_OBSERVABILITYSETTINGS_ELM_2: Int = 229 /* */

@inline @cCode.inline val ERR_TC_18_16_SETTHEOBSERVABILITYLEVELOFOBCP: Int = 239 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_18_16_SETTHEOBSERVABILITYLEVELOFOBCP: Int = 242 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_18_16_SETTHEOBSERVABILITYLEVELOFOBCP_N_UNINITIALIZED: Int = 243 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_18_16_SETTHEOBSERVABILITYLEVELOFOBCP_N: Int = 202 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_18_16_SETTHEOBSERVABILITYLEVELOFOBCP_OBSERVABILITYSETTINGS: Int = 237 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_18_16_SETTHEOBSERVABILITYLEVELOFOBCP_OBSERVABILITYSETTINGS_ELM_2: Int = 232 /*  */
@inline @cCode.inline val TTC_18_16_SetTheObservabilityLevelOfOBCP_REQUIRED_BYTES_FOR_ACN_ENCODING = 74
@inline @cCode.inline val TTC_18_16_SetTheObservabilityLevelOfOBCP_REQUIRED_BITS_FOR_ACN_ENCODING = 587

@inline @cCode.inline val ERR_ACN_DECODE_TC_18_16_SETTHEOBSERVABILITYLEVELOFOBCP: Int = 244 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_18_16_SETTHEOBSERVABILITYLEVELOFOBCP_N: Int = 203 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_18_16_SETTHEOBSERVABILITYLEVELOFOBCP_OBSERVABILITYSETTINGS: Int = 238 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_18_16_SETTHEOBSERVABILITYLEVELOFOBCP_OBSERVABILITYSETTINGS_ELM_2: Int = 233 /*  */

// @inline @cCode.inline val maxTC_18_16_OBCPObservabilitySettingsCount: Int = 15 // defined in body

