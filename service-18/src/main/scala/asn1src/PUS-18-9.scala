/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

val maxTM_18_9_OBCPExecutionStatusCount: Int = 15 // variables:188

def TTM_18_9_OBCPExecutionStatus_obcpChecksum_IsConstraintValid(@annotation.unused pVal: TTM_18_9_OBCPExecutionStatus_obcpChecksum): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = Right(0)
    ret
}

def TTM_18_9_OBCPExecutionStatus_IsConstraintValid(pVal: TTM_18_9_OBCPExecutionStatus): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TOBCP_ID_IsConstraintValid(pVal.obcp_ID)
    if ret.isRight then
        pVal.obcpChecksum match
            case SomeMut(obcpChecksum) =>
                ret = TTM_18_9_OBCPExecutionStatus_obcpChecksum_IsConstraintValid(obcpChecksum)
            case NoneMut() =>
        if ret.isRight then
            ret = TOBCPExecutionStatus_IsConstraintValid(pVal.obcpExecutionStatus)
    if ret.isRight then
        ret = (pVal.obcpChecksum.isDefined == true) match
            case true =>
                Right(0)
            case false =>
                Left(45)
    ret
}

def TTM_18_9_OBCPExecutionStatus_obcpChecksum_Initialize(): TTM_18_9_OBCPExecutionStatus_obcpChecksum = TTM_18_9_OBCPExecutionStatus_obcpChecksum(Vector.fill(2)(0.toRawUByte))
def TTM_18_9_OBCPExecutionStatus_Initialize(): TTM_18_9_OBCPExecutionStatus = TTM_18_9_OBCPExecutionStatus(obcp_ID = Vector.fill[UByte](5.toInt+1)(0x0.toRawUByte), obcpChecksum = SomeMut(TTM_18_9_OBCPExecutionStatus_obcpChecksum(Vector.fill(2)(0.toRawUByte))), obcpExecutionStatus = TOBCPExecutionStatus.Tinactive)

@opaque @inlineOnce 
def TTM_18_9_OBCPExecutionStatus_ACN_Encode(pVal: TTM_18_9_OBCPExecutionStatus, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(53L))
    TTM_18_9_OBCPExecutionStatus_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode obcp_ID */
    TOBCP_ID_ACN_Encode(pVal.obcp_ID, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 53L, 35L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 35L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 35L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    TM_18_9_OBCPExecutionStatus_obcpChecksum_Optional_ACN_Encode(codec, pVal, pVal.obcpChecksum) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 18L, 16L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 51L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.obcpChecksum match {
        case SomeMut(v) =>
            16L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode obcpExecutionStatus */
    TOBCPExecutionStatus_ACN_Encode(pVal.obcpExecutionStatus, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 53L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = 2L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 53L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TM_18_9_OBCPExecutionStatus_obcpChecksum_Optional_ACN_Encode(codec: ACN, pVal: TTM_18_9_OBCPExecutionStatus, obcpChecksum: OptionMut[TTM_18_9_OBCPExecutionStatus_obcpChecksum]): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(16L))
    @ghost val oldCdc = snapshot(codec)
    obcpChecksum match {
        case SomeMut(v) =>
            TTM_18_9_OBCPExecutionStatus_obcpChecksum_IsConstraintValid(v) match {
                case Left(l) =>
                    return Left[Int, Int](l)
                case Right(_) =>
            }
        case NoneMut() =>
            ()
    }
    /* Encode obcpChecksum */
    /* marked as ALWAYS PRESENT, so it must be Some */
    obcpChecksum match
        case SomeMut(obcpChecksum) =>
            assert(16.toInt >= 0) // overflow may happen during cast
            codec.base.bitStream.appendBitsMSBFirstVec(obcpChecksum.arr, 16.toInt)
    
        case NoneMut() => return Left(628)
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 16L
    }
}



@opaque @inlineOnce 
def TTM_18_9_OBCPExecutionStatus_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTM_18_9_OBCPExecutionStatus] =
{
    require(codec.base.bitStream.validate_offset_bits(53L))

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode obcp_ID */
    val pVal_obcp_ID = TOBCP_ID_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 53L, 35L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 35L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 35L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    val pVal_obcpChecksum = TM_18_9_OBCPExecutionStatus_obcpChecksum_Optional_ACN_Decode(codec) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 18L, 16L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 51L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_obcpChecksum match {
        case SomeMut(v) =>
            16L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode obcpExecutionStatus */
    val pVal_obcpExecutionStatus = TOBCPExecutionStatus_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 53L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = 2L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 53L)
    }
    val pVal = TTM_18_9_OBCPExecutionStatus(pVal_obcp_ID, pVal_obcpChecksum, pVal_obcpExecutionStatus)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }

    TTM_18_9_OBCPExecutionStatus_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTM_18_9_OBCPExecutionStatus](l)
        case Right(_) => RightMut[ErrorCode, TTM_18_9_OBCPExecutionStatus](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTM_18_9_OBCPExecutionStatus]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_18_9_OBCPExecutionStatus_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTM_18_9_OBCPExecutionStatus_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTM_18_9_OBCPExecutionStatus]) =
{
    require(codec.base.bitStream.validate_offset_bits(53L))
    val cpy = snapshot(codec)
    val res = TTM_18_9_OBCPExecutionStatus_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def TM_18_9_OBCPExecutionStatus_obcpChecksum_Optional_ACN_Decode(codec: ACN): EitherMut[Int, OptionMut[TTM_18_9_OBCPExecutionStatus_obcpChecksum]] = {
    require(codec.base.bitStream.validate_offset_bits(16L))
    @ghost val oldCdc = snapshot(codec)
    /* Decode obcpChecksum */
    /* marked as ALWAYS PRESENT */
    val obcpChecksum: OptionMut[TTM_18_9_OBCPExecutionStatus_obcpChecksum] =
        val pVal_obcpChecksum = TTM_18_9_OBCPExecutionStatus_obcpChecksum(codec.base.bitStream.readBitsVec(16.toInt))
        SomeMut(pVal_obcpChecksum)
    obcpChecksum match {
        case SomeMut(v) =>
            TTM_18_9_OBCPExecutionStatus_obcpChecksum_IsConstraintValid(v) match {
                case Left(l) =>
                    LeftMut[Int, OptionMut[TTM_18_9_OBCPExecutionStatus_obcpChecksum]](l)
                case Right(_) =>
                    RightMut[Int, OptionMut[TTM_18_9_OBCPExecutionStatus_obcpChecksum]](obcpChecksum)
            }
        case NoneMut() =>
            RightMut[Int, OptionMut[TTM_18_9_OBCPExecutionStatus_obcpChecksum]](obcpChecksum)
    }
}.ensuring { (res: EitherMut[Int, OptionMut[TTM_18_9_OBCPExecutionStatus_obcpChecksum]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            resVal.isDefined && old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 16L && (resVal match {
                case SomeMut(v) =>
                    TTM_18_9_OBCPExecutionStatus_obcpChecksum_IsConstraintValid(v).isRight
                case NoneMut() =>
                    true
            })
    }
}



@ghost @pure
def TM_18_9_OBCPExecutionStatus_obcpChecksum_Optional_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[Int, OptionMut[TTM_18_9_OBCPExecutionStatus_obcpChecksum]]) = {
    require(codec.base.bitStream.validate_offset_bits(16L))
    val cpy = snapshot(codec)
    val res = TM_18_9_OBCPExecutionStatus_obcpChecksum_Optional_ACN_Decode(cpy)
    (cpy, res)
}



def TTM_18_9_OBCPExecutionStatusReport_executionStatueses_IsConstraintValid(pVal: TTM_18_9_OBCPExecutionStatusReport_executionStatueses): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = ((1 <= pVal.nCount) && (pVal.nCount <= 15)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TTM_18_9_OBCPExecutionStatus_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TTM_18_9_OBCPExecutionStatusReport_IsConstraintValid(pVal: TTM_18_9_OBCPExecutionStatusReport): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TTM_18_9_OBCPExecutionStatusReport_executionStatueses_IsConstraintValid(pVal.executionStatueses)
    ret
}

def TTM_18_9_OBCPExecutionStatusReport_executionStatueses_Initialize(): TTM_18_9_OBCPExecutionStatusReport_executionStatueses = TTM_18_9_OBCPExecutionStatusReport_executionStatueses(1, Vector.fill(15)(TTM_18_9_OBCPExecutionStatus_Initialize()))
def TTM_18_9_OBCPExecutionStatusReport_Initialize(): TTM_18_9_OBCPExecutionStatusReport = TTM_18_9_OBCPExecutionStatusReport(executionStatueses = TTM_18_9_OBCPExecutionStatusReport_executionStatueses_Initialize())

@opaque @inlineOnce 
def TTM_18_9_OBCPExecutionStatusReport_ACN_Encode(pVal: TTM_18_9_OBCPExecutionStatusReport, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(827L))
    var i1: Int = 0
    TTM_18_9_OBCPExecutionStatusReport_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val TM_18_9_OBCPExecutionStatusReport_n = ULong.fromRaw(pVal.executionStatueses.nCount)
    if TM_18_9_OBCPExecutionStatusReport_n < ULong.fromRaw(1) || TM_18_9_OBCPExecutionStatusReport_n > ULong.fromRaw(15) then
        return Left(860)
    /* Encode TM_18_9_OBCPExecutionStatusReport_n */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(TM_18_9_OBCPExecutionStatusReport_n)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(TM_18_9_OBCPExecutionStatusReport_n)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 827L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode executionStatueses */
    TM_18_9_OBCPExecutionStatusReport_executionStatueses_ACN_Encode(codec, pVal, TM_18_9_OBCPExecutionStatusReport_n, pVal.executionStatueses) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 827L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.executionStatueses.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 827L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TM_18_9_OBCPExecutionStatusReport_executionStatueses_Encode_loop(codec: ACN, executionStatueses: TTM_18_9_OBCPExecutionStatusReport_executionStatueses, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= executionStatueses.nCount))
    require((1 <= executionStatueses.nCount) && (executionStatueses.nCount <= executionStatueses.arr.size) && (executionStatueses.arr.size <= 15))
    require(codec.base.bitStream.validate_offset_bits((53L * (executionStatueses.nCount - i1))))
    decreases(executionStatueses.nCount - i1)
    if (i1 == executionStatueses.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 53L * (executionStatueses.nCount - i1), 53L)
        }
        TTM_18_9_OBCPExecutionStatus_ACN_Encode(executionStatueses.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(53L * (i1 + 1) == 53L * i1 + 53L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 53L * (executionStatueses.nCount - i1), 53L)
            check(codec.base.bitStream.validate_offset_bits(53L * (executionStatueses.nCount - (i1 + 1))))
        }
        val res = TM_18_9_OBCPExecutionStatusReport_executionStatueses_Encode_loop(codec, executionStatueses, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TTM_18_9_OBCPExecutionStatusReport_executionStatueses.sizeRange(executionStatueses.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, executionStatueses.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + executionStatueses.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TTM_18_9_OBCPExecutionStatusReport_executionStatueses.sizeRange(executionStatueses.arr, codecSnap1.base.bitStream.bitIndex, i1, executionStatueses.nCount) == executionStatueses.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TTM_18_9_OBCPExecutionStatusReport_executionStatueses.sizeRange(executionStatueses.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, executionStatueses.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TTM_18_9_OBCPExecutionStatusReport_executionStatueses.sizeRange(executionStatueses.arr, codecSnap1.base.bitStream.bitIndex, i1, executionStatueses.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_18_9_OBCPExecutionStatusReport_executionStatueses.sizeRange(executionStatueses.arr, old(codec).base.bitStream.bitIndex, i1, executionStatueses.nCount)
    }
}



@opaque @inlineOnce
def TM_18_9_OBCPExecutionStatusReport_executionStatueses_ACN_Encode(codec: ACN, pVal: TTM_18_9_OBCPExecutionStatusReport, TM_18_9_OBCPExecutionStatusReport_n: ULong, executionStatueses: TTM_18_9_OBCPExecutionStatusReport_executionStatueses): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(795L))
    @ghost val oldCdc = snapshot(codec)
    TTM_18_9_OBCPExecutionStatusReport_executionStatueses_IsConstraintValid(executionStatueses) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    TM_18_9_OBCPExecutionStatusReport_executionStatueses_Encode_loop(codec, executionStatueses, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                executionStatueses.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
            ()
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + executionStatueses.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTM_18_9_OBCPExecutionStatusReport_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTM_18_9_OBCPExecutionStatusReport] =
{
    require(codec.base.bitStream.validate_offset_bits(827L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode TM_18_9_OBCPExecutionStatusReport_n */
    val TM_18_9_OBCPExecutionStatusReport_n = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 827L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode executionStatueses */
    val pVal_executionStatueses = TM_18_9_OBCPExecutionStatusReport_executionStatueses_ACN_Decode(codec, TM_18_9_OBCPExecutionStatusReport_n) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 827L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_executionStatueses.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 827L)
    }
    val pVal = TTM_18_9_OBCPExecutionStatusReport(pVal_executionStatueses)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }

    TTM_18_9_OBCPExecutionStatusReport_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTM_18_9_OBCPExecutionStatusReport](l)
        case Right(_) => RightMut[ErrorCode, TTM_18_9_OBCPExecutionStatusReport](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTM_18_9_OBCPExecutionStatusReport]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_18_9_OBCPExecutionStatusReport_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTM_18_9_OBCPExecutionStatusReport_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTM_18_9_OBCPExecutionStatusReport]) =
{
    require(codec.base.bitStream.validate_offset_bits(827L))
    val cpy = snapshot(codec)
    val res = TTM_18_9_OBCPExecutionStatusReport_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def TM_18_9_OBCPExecutionStatusReport_executionStatueses_Decode_loop(codec: ACN, nCount: Int, executionStatueses: Vector[TTM_18_9_OBCPExecutionStatus], i1: Int): EitherMut[Int, Vector[TTM_18_9_OBCPExecutionStatus]] = {
    require((1 <= nCount) && (nCount <= 15))
    require((0 <= i1) && (i1 <= nCount))
    require(executionStatueses.size == i1)
    require(codec.base.bitStream.validate_offset_bits((53L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(executionStatueses)
            vecRangesEqSlicedLemma(executionStatueses, executionStatueses, 0, executionStatueses.size, 0, i1)
        }
        RightMut[Int, Vector[TTM_18_9_OBCPExecutionStatus]](executionStatueses)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 53L * (nCount - i1), 53L)
        }
        val executionStatueses_arr_i1_ = TTM_18_9_OBCPExecutionStatus_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(53L * (i1 + 1) == 53L * i1 + 53L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 53L * (nCount - i1), 53L)
            check(codec.base.bitStream.validate_offset_bits(53L * (nCount - (i1 + 1))))
        }
        val res = TM_18_9_OBCPExecutionStatusReport_executionStatueses_Decode_loop(codec, nCount, executionStatueses.append(executionStatueses_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(executionStatueses, newVec, executionStatueses_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(executionStatueses.append(executionStatueses_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(executionStatueses.list, executionStatueses_arr_i1_, i1)
                    Vector.listApplyEqVecApply(executionStatueses.append(executionStatueses_arr_i1_), i1)
                    check(executionStatueses_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TTM_18_9_OBCPExecutionStatus]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(executionStatueses, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_18_9_OBCPExecutionStatusReport_executionStatueses.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def TM_18_9_OBCPExecutionStatusReport_executionStatueses_ACN_Decode(codec: ACN, TM_18_9_OBCPExecutionStatusReport_n: ULong): EitherMut[Int, TTM_18_9_OBCPExecutionStatusReport_executionStatueses] = {
    require(codec.base.bitStream.validate_offset_bits(795L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val executionStatueses =
        if ((ULong.fromRaw(1) <= TM_18_9_OBCPExecutionStatusReport_n) && (TM_18_9_OBCPExecutionStatusReport_n <= ULong.fromRaw(15))) then
            val executionStatueses_nCount = TM_18_9_OBCPExecutionStatusReport_n.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val executionStatueses = TM_18_9_OBCPExecutionStatusReport_executionStatueses_Decode_loop(codec, executionStatueses_nCount, Vector.empty[TTM_18_9_OBCPExecutionStatus], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val executionStatueses = TTM_18_9_OBCPExecutionStatusReport_executionStatueses(executionStatueses_nCount, bdg)
                    ghostExpr {
                        executionStatueses.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    executionStatueses
            }
            executionStatueses
        else return LeftMut(ERR_ACN_DECODE_TM_18_9_OBCPEXECUTIONSTATUSREPORT_EXECUTIONSTATUESES)
    TTM_18_9_OBCPExecutionStatusReport_executionStatueses_IsConstraintValid(executionStatueses) match {
        case Left(l) =>
            LeftMut[Int, TTM_18_9_OBCPExecutionStatusReport_executionStatueses](l)
        case Right(_) =>
            RightMut[Int, TTM_18_9_OBCPExecutionStatusReport_executionStatueses](executionStatueses)
    }
}.ensuring { (res: EitherMut[Int, TTM_18_9_OBCPExecutionStatusReport_executionStatueses]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_18_9_OBCPExecutionStatusReport_executionStatueses_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TM_18_9_OBCPExecutionStatusReport_executionStatueses_ACN_Decode_pure(codec: ACN, TM_18_9_OBCPExecutionStatusReport_n: ULong): (ACN, EitherMut[Int, TTM_18_9_OBCPExecutionStatusReport_executionStatueses]) = {
    require(codec.base.bitStream.validate_offset_bits(795L))
    val cpy = snapshot(codec)
    val res = TM_18_9_OBCPExecutionStatusReport_executionStatueses_ACN_Decode(cpy, TM_18_9_OBCPExecutionStatusReport_n)
    (cpy, res)
}