/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TOBCPActivation --------------------------------------------*/

case class TOBCPActivation (
    observabilityLevel: OptionMut[TOBCPObservabilityLevel], 
    argumentValues: TOBCPArgumentValues
) {
    require(this.observabilityLevel.isDefined)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775762L))
        val size_0 = 35L
        val size_1 = this.observabilityLevel match {
            case SomeMut(v) =>
                2L
            case NoneMut() =>
                0L
        }
        val size_2 = this.argumentValues match {
            case TOBCPArgumentValues.arg0_PRESENT(arg0) =>
                8L
        }
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        res == 45L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775762L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775762L))
        val size_0_offset = 35L
        val size_0_otherOffset = 35L
        val size_1_offset = this.observabilityLevel match {
            case SomeMut(v) =>
                2L
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.observabilityLevel match {
            case SomeMut(v) =>
                2L
            case NoneMut() =>
                0L
        }
        val size_2_offset = this.argumentValues match {
            case TOBCPArgumentValues.arg0_PRESENT(arg0) =>
                8L
        }
        val size_2_otherOffset = this.argumentValues match {
            case TOBCPArgumentValues.arg0_PRESENT(arg0) =>
                8L
        }
        this.argumentValues.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775762L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775762L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 35L
        val size_0_otherOffset = 35L
        val size_1_offset = this.observabilityLevel match {
            case SomeMut(v) =>
                2L
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.observabilityLevel match {
            case SomeMut(v) =>
                2L
            case NoneMut() =>
                0L
        }
        val size_2_offset = this.argumentValues match {
            case TOBCPArgumentValues.arg0_PRESENT(arg0) =>
                8L
        }
        val size_2_otherOffset = this.argumentValues match {
            case TOBCPArgumentValues.arg0_PRESENT(arg0) =>
                8L
        }
        this.argumentValues.sizeLemmaNextByte(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775762L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775762L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 35L
        val size_0_otherOffset = 35L
        val size_1_offset = this.observabilityLevel match {
            case SomeMut(v) =>
                2L
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.observabilityLevel match {
            case SomeMut(v) =>
                2L
            case NoneMut() =>
                0L
        }
        val size_2_offset = this.argumentValues match {
            case TOBCPArgumentValues.arg0_PRESENT(arg0) =>
                8L
        }
        val size_2_otherOffset = this.argumentValues match {
            case TOBCPArgumentValues.arg0_PRESENT(arg0) =>
                8L
        }
        this.argumentValues.sizeLemmaNextWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775762L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775762L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 35L
        val size_0_otherOffset = 35L
        val size_1_offset = this.observabilityLevel match {
            case SomeMut(v) =>
                2L
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.observabilityLevel match {
            case SomeMut(v) =>
                2L
            case NoneMut() =>
                0L
        }
        val size_2_offset = this.argumentValues match {
            case TOBCPArgumentValues.arg0_PRESENT(arg0) =>
                8L
        }
        val size_2_otherOffset = this.argumentValues match {
            case TOBCPArgumentValues.arg0_PRESENT(arg0) =>
                8L
        }
        this.argumentValues.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_OBCPACTIVATION: Int = 26 /*(WITH COMPONENTS {observabilityLevel PRESENT}) */
@inline @cCode.inline val ERR_OBCPACTIVATION_OBSERVABILITYLEVEL_2: Int = 8 /* */
@inline @cCode.inline val ERR_OBCPACTIVATION_ARGUMENTVALUES_2: Int = 23 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_OBCPACTIVATION: Int = 29 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_OBCPACTIVATION_OBCP_ID_UNINITIALIZED: Int = 30 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_OBCPACTIVATION_OBCP_ID: Int = 1 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_OBCPACTIVATION_OBSERVABILITYLEVEL_2: Int = 11 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_OBCPACTIVATION_ARGUMENTVALUES: Int = 21 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_OBCPACTIVATION_ARGUMENTVALUES_ARG0: Int = 16 /*  */
@inline @cCode.inline val TOBCPActivation_REQUIRED_BYTES_FOR_ACN_ENCODING = 6
@inline @cCode.inline val TOBCPActivation_REQUIRED_BITS_FOR_ACN_ENCODING = 45

@inline @cCode.inline val ERR_ACN_DECODE_OBCPACTIVATION: Int = 31 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_OBCPACTIVATION_OBCP_ID: Int = 2 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_OBCPACTIVATION_OBSERVABILITYLEVEL_2: Int = 12 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_OBCPACTIVATION_ARGUMENTVALUES: Int = 22 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_OBCPACTIVATION_ARGUMENTVALUES_ARG0: Int = 17 /*  */


