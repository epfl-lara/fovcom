/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TTC_18_1_Direct_LoadAnOBCP --------------------------------------------*/

case class TTC_18_1_Direct_LoadAnOBCP_checksum(arr: Vector[UByte])
{
    require(this.arr.length == 2)
}

case class TTC_18_1_Direct_LoadAnOBCP (
    obcp_ID: TOBCP_ID, 
    obcpCode: TPUSC_OCTSTR_VARIABLE_LEN, 
    checksum: OptionMut[TTC_18_1_Direct_LoadAnOBCP_checksum]
) {
    require((6 == this.obcp_ID.length && this.obcp_ID.indexOfOrLength(UByte.fromRaw(0.toByte)) <= 5) && this.checksum.isDefined)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854742964L))
        val size_0 = (35L)
        val size_1 = 32L
        val size_2 = 8L * this.obcpCode.nCount
        val size_3 = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        size_0 + size_1 + size_2 + size_3
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 32843L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854742964L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854742964L))
        val size_0_offset = (35L)
        val size_0_otherOffset = 35L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 8L * this.obcpCode.nCount
        val size_2_otherOffset = 8L * this.obcpCode.nCount
        val size_3_offset = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        val size_3_otherOffset = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854742964L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854742964L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = (35L)
        val size_0_otherOffset = 35L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 8L * this.obcpCode.nCount
        val size_2_otherOffset = 8L * this.obcpCode.nCount
        val size_3_offset = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        val size_3_otherOffset = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854742964L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854742964L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = (35L)
        val size_0_otherOffset = 35L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 8L * this.obcpCode.nCount
        val size_2_otherOffset = 8L * this.obcpCode.nCount
        val size_3_offset = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        val size_3_otherOffset = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854742964L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854742964L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = (35L)
        val size_0_otherOffset = 35L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 8L * this.obcpCode.nCount
        val size_2_otherOffset = 8L * this.obcpCode.nCount
        val size_3_offset = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        val size_3_otherOffset = this.checksum match {
            case SomeMut(v) =>
                16L
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_18_1_DIRECT_LOADANOBCP_CHECKSUM: Int = 387 /*(SIZE(16)) */

@inline @cCode.inline val ERR_TC_18_1_DIRECT_LOADANOBCP: Int = 392 /*(WITH COMPONENTS {checksum PRESENT}) */
@inline @cCode.inline val ERR_TC_18_1_DIRECT_LOADANOBCP_OBCP_ID_2: Int = 372 /* */
@inline @cCode.inline val ERR_TC_18_1_DIRECT_LOADANOBCP_OBCPCODE_2: Int = 384 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_18_1_DIRECT_LOADANOBCP: Int = 395 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_18_1_DIRECT_LOADANOBCP_OBCP_ID_2: Int = 375 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_18_1_DIRECT_LOADANOBCP_OBCPCODELENGTH_UNINITIALIZED: Int = 396 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_18_1_DIRECT_LOADANOBCP_OBCPCODELENGTH: Int = 377 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_18_1_DIRECT_LOADANOBCP_OBCPCODE: Int = 382 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_18_1_DIRECT_LOADANOBCP_CHECKSUM: Int = 390 /*  */
@inline @cCode.inline val TTC_18_1_Direct_LoadAnOBCP_REQUIRED_BYTES_FOR_ACN_ENCODING = 4106
@inline @cCode.inline val TTC_18_1_Direct_LoadAnOBCP_REQUIRED_BITS_FOR_ACN_ENCODING = 32843

@inline @cCode.inline val ERR_ACN_DECODE_TC_18_1_DIRECT_LOADANOBCP: Int = 397 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_18_1_DIRECT_LOADANOBCP_OBCP_ID_2: Int = 376 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_18_1_DIRECT_LOADANOBCP_OBCPCODELENGTH: Int = 378 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_18_1_DIRECT_LOADANOBCP_OBCPCODE: Int = 383 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_18_1_DIRECT_LOADANOBCP_CHECKSUM: Int = 391 /*  */


