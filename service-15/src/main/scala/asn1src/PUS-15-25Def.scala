/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TTC_15_25_PacketToResize --------------------------------------------*/

case class TTC_15_25_PacketToResize (
    packetStore_ID: TPacketStore_ID, 
    packetStoreSize: TPUSC_UINT32
) {
    require(33 == this.packetStore_ID.length && this.packetStore_ID.indexOfOrLength(UByte.fromRaw(0.toByte)) <= 32)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775551L))
        val size_0 = (224L)
        val size_1 = 32L
        size_0 + size_1
    }.ensuring { (res: Long) => 
        res == 256L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775551L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775551L))
        val size_0_offset = (224L)
        val size_0_otherOffset = 224L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775551L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775551L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = (224L)
        val size_0_otherOffset = 224L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775551L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775551L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = (224L)
        val size_0_otherOffset = 224L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775551L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775551L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = (224L)
        val size_0_otherOffset = 224L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_15_25_PACKETTORESIZE: Int = 1274 /* */
@inline @cCode.inline val ERR_TC_15_25_PACKETTORESIZE_PACKETSTORE_ID_2: Int = 1259 /* */
@inline @cCode.inline val ERR_TC_15_25_PACKETTORESIZE_PACKETSTORESIZE_2: Int = 1269 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_15_25_PACKETTORESIZE: Int = 1277 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_15_25_PACKETTORESIZE_PACKETSTORE_ID_2: Int = 1262 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_15_25_PACKETTORESIZE_PACKETSTORESIZE_2: Int = 1272 /*  */
@inline @cCode.inline val TTC_15_25_PacketToResize_REQUIRED_BYTES_FOR_ACN_ENCODING = 32
@inline @cCode.inline val TTC_15_25_PacketToResize_REQUIRED_BITS_FOR_ACN_ENCODING = 256

@inline @cCode.inline val ERR_ACN_DECODE_TC_15_25_PACKETTORESIZE: Int = 1278 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_15_25_PACKETTORESIZE_PACKETSTORE_ID_2: Int = 1263 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_15_25_PACKETTORESIZE_PACKETSTORESIZE_2: Int = 1273 /*  */
/*-- TTC_15_25_ResizePacketStores --------------------------------------------*/


case class TTC_15_25_ResizePacketStores_packetsToResize (nCount: Int, arr: Vector[TTC_15_25_PacketToResize])
{
    require(this.arr.size <= 32 && 1 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854767615L))
        TTC_15_25_ResizePacketStores_packetsToResize.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 8192L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767615L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767615L))
        TTC_15_25_ResizePacketStores_packetsToResize.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767615L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767615L))
        require((offset % 8L) == (otherOffset % 8L))
        TTC_15_25_ResizePacketStores_packetsToResize.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767615L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767615L))
        require((offset % 16L) == (otherOffset % 16L))
        TTC_15_25_ResizePacketStores_packetsToResize.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767615L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767615L))
        require((offset % 32L) == (otherOffset % 32L))
        TTC_15_25_ResizePacketStores_packetsToResize.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TTC_15_25_ResizePacketStores_packetsToResize {
    def sizeRange(ls: Vector[TTC_15_25_PacketToResize], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 32))
        require((0L <= offset) && (offset <= 9223372036854775807L - 256L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(elemSize == 256L)
            elemSize + TTC_15_25_ResizePacketStores_packetsToResize.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 256L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TTC_15_25_PacketToResize], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 32))
        require((0L <= offset) && (offset <= 9223372036854775807L - 256L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 256L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 256L)
            assert(elemSizeOtherOff == 256L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TTC_15_25_ResizePacketStores_packetsToResize.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_15_25_ResizePacketStores_packetsToResize.sizeRange(ls, offset, from, to) == TTC_15_25_ResizePacketStores_packetsToResize.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TTC_15_25_PacketToResize], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 32))
        require((0L <= offset) && (offset <= 9223372036854775807L - 256L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 256L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 256L)
            assert(elemSizeOtherOff == 256L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TTC_15_25_ResizePacketStores_packetsToResize.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_15_25_ResizePacketStores_packetsToResize.sizeRange(ls, offset, from, to) == TTC_15_25_ResizePacketStores_packetsToResize.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TTC_15_25_PacketToResize], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 32))
        require((0L <= offset) && (offset <= 9223372036854775807L - 256L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 256L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 256L)
            assert(elemSizeOtherOff == 256L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TTC_15_25_ResizePacketStores_packetsToResize.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_15_25_ResizePacketStores_packetsToResize.sizeRange(ls, offset, from, to) == TTC_15_25_ResizePacketStores_packetsToResize.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TTC_15_25_PacketToResize], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 32))
        require((0L <= offset) && (offset <= 9223372036854775807L - 256L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 256L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 256L)
            assert(elemSizeOtherOff == 256L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TTC_15_25_ResizePacketStores_packetsToResize.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_15_25_ResizePacketStores_packetsToResize.sizeRange(ls, offset, from, to) == TTC_15_25_ResizePacketStores_packetsToResize.sizeRange(ls, otherOffset, from, to)
    }
}

case class TTC_15_25_ResizePacketStores (
    packetsToResize: TTC_15_25_ResizePacketStores_packetsToResize
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854767583L))
        val size_0 = 32L
        val size_1 = this.packetsToResize.size(offset + size_0)
        size_0 + size_1
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 8224L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767583L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767583L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.packetsToResize.size(offset + size_0_offset)
        val size_1_otherOffset = this.packetsToResize.size(otherOffset + size_0_otherOffset)
        this.packetsToResize.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767583L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767583L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.packetsToResize.size(offset + size_0_offset)
        val size_1_otherOffset = this.packetsToResize.size(otherOffset + size_0_otherOffset)
        this.packetsToResize.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767583L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767583L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.packetsToResize.size(offset + size_0_offset)
        val size_1_otherOffset = this.packetsToResize.size(otherOffset + size_0_otherOffset)
        this.packetsToResize.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767583L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767583L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.packetsToResize.size(offset + size_0_offset)
        val size_1_otherOffset = this.packetsToResize.size(otherOffset + size_0_otherOffset)
        this.packetsToResize.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_15_25_RESIZEPACKETSTORES_PACKETSTORESIZE: Int = 1243 /*(SIZE(1 .. maxPacketsToResizeSize)) */
@inline @cCode.inline val ERR_TC_15_25_RESIZEPACKETSTORES_PACKETSTORESIZE_ELM_2: Int = 1238 /* */

@inline @cCode.inline val ERR_TC_15_25_RESIZEPACKETSTORES: Int = 1248 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_15_25_RESIZEPACKETSTORES: Int = 1251 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_15_25_RESIZEPACKETSTORES_N_UNINITIALIZED: Int = 1252 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_15_25_RESIZEPACKETSTORES_N: Int = 1211 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_15_25_RESIZEPACKETSTORES_PACKETSTORESIZE: Int = 1246 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_15_25_RESIZEPACKETSTORES_PACKETSTORESIZE_ELM_2: Int = 1241 /*  */
@inline @cCode.inline val TTC_15_25_ResizePacketStores_REQUIRED_BYTES_FOR_ACN_ENCODING = 1028
@inline @cCode.inline val TTC_15_25_ResizePacketStores_REQUIRED_BITS_FOR_ACN_ENCODING = 8224

@inline @cCode.inline val ERR_ACN_DECODE_TC_15_25_RESIZEPACKETSTORES: Int = 1253 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_15_25_RESIZEPACKETSTORES_N: Int = 1212 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_15_25_RESIZEPACKETSTORES_PACKETSTORESIZE: Int = 1247 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_15_25_RESIZEPACKETSTORES_PACKETSTORESIZE_ELM_2: Int = 1242 /*  */

// @inline @cCode.inline val maxPacketsToResizeSize: Int = 32 // defined in body

