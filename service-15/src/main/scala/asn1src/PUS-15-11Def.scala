/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TTC_15_11_DeleteTheContentOfPacketStoresUpToTheSpecifiedTime --------------------------------------------*/

case class TTC_15_11_DeleteTheContentOfPacketStoresUpToTheSpecifiedTime (
    storageTime: TCDS_AbsoluteTime_PFC_2, 
    packetStoreSequence: TPacketStoreSequence
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854768543L))
        val size_0 = this.storageTime.size(offset)
        val size_1 = this.packetStoreSequence.size(offset + size_0)
        size_0 + size_1
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 7264L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854768543L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854768543L))
        val size_0_offset = this.storageTime.size(offset)
        val size_0_otherOffset = this.storageTime.size(otherOffset)
        this.storageTime.sizeLemmaAnyOffset(offset, otherOffset)
        val size_1_offset = this.packetStoreSequence.size(offset + size_0_offset)
        val size_1_otherOffset = this.packetStoreSequence.size(otherOffset + size_0_otherOffset)
        this.packetStoreSequence.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854768543L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854768543L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = this.storageTime.size(offset)
        val size_0_otherOffset = this.storageTime.size(otherOffset)
        this.storageTime.sizeLemmaNextByte(offset, otherOffset)
        val size_1_offset = this.packetStoreSequence.size(offset + size_0_offset)
        val size_1_otherOffset = this.packetStoreSequence.size(otherOffset + size_0_otherOffset)
        this.packetStoreSequence.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854768543L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854768543L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = this.storageTime.size(offset)
        val size_0_otherOffset = this.storageTime.size(otherOffset)
        this.storageTime.sizeLemmaNextWord(offset, otherOffset)
        val size_1_offset = this.packetStoreSequence.size(offset + size_0_offset)
        val size_1_otherOffset = this.packetStoreSequence.size(otherOffset + size_0_otherOffset)
        this.packetStoreSequence.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854768543L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854768543L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = this.storageTime.size(offset)
        val size_0_otherOffset = this.storageTime.size(otherOffset)
        this.storageTime.sizeLemmaNextDWord(offset, otherOffset)
        val size_1_offset = this.packetStoreSequence.size(offset + size_0_offset)
        val size_1_otherOffset = this.packetStoreSequence.size(otherOffset + size_0_otherOffset)
        this.packetStoreSequence.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_15_11_DELETETHECONTENTOFPACKETSTORESUPTOTHESPECIFIEDTIME: Int = 224 /* */
@inline @cCode.inline val ERR_TC_15_11_DELETETHECONTENTOFPACKETSTORESUPTOTHESPECIFIEDTIME_STORAGETIME_2_2: Int = 192 /* */
@inline @cCode.inline val ERR_TC_15_11_DELETETHECONTENTOFPACKETSTORESUPTOTHESPECIFIEDTIME_PACKETSTORESEQUENCE_2: Int = 219 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_15_11_DELETETHECONTENTOFPACKETSTORESUPTOTHESPECIFIEDTIME: Int = 227 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_15_11_DELETETHECONTENTOFPACKETSTORESUPTOTHESPECIFIEDTIME_STORAGETIME_2_2: Int = 195 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_15_11_DELETETHECONTENTOFPACKETSTORESUPTOTHESPECIFIEDTIME_PACKETSTORESEQUENCE_2: Int = 222 /*  */
@inline @cCode.inline val TTC_15_11_DeleteTheContentOfPacketStoresUpToTheSpecifiedTime_REQUIRED_BYTES_FOR_ACN_ENCODING = 908
@inline @cCode.inline val TTC_15_11_DeleteTheContentOfPacketStoresUpToTheSpecifiedTime_REQUIRED_BITS_FOR_ACN_ENCODING = 7264

@inline @cCode.inline val ERR_ACN_DECODE_TC_15_11_DELETETHECONTENTOFPACKETSTORESUPTOTHESPECIFIEDTIME: Int = 228 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_15_11_DELETETHECONTENTOFPACKETSTORESUPTOTHESPECIFIEDTIME_STORAGETIME_2_2: Int = 196 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_15_11_DELETETHECONTENTOFPACKETSTORESUPTOTHESPECIFIEDTIME_PACKETSTORESEQUENCE_2: Int = 223 /*  */


