/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

val max_PacketStore_IDSize: Int = 32 // variables:188

def TPacketStore_ID_IsConstraintValid(pVal: TPacketStore_ID): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = (pVal.indexOf(0.toRawUByte) == 32) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    ret
}

def TPacketStore_ID_Initialize(): TPacketStore_ID = Vector.fill[UByte](32.toInt+1)(0x0.toRawUByte)

@opaque @inlineOnce 
def TPacketStore_ID_ACN_Encode(pVal: TPacketStore_ID, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(224L))
    var i1: Int = 0
    TPacketStore_ID_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    PacketStore_ID_Encode_loop(codec, pVal, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ()
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 224L
    }
}

@opaque @inlineOnce
def PacketStore_ID_Encode_loop(codec: ACN, pVal: Vector[UByte], i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= 32))
    require(pVal.size == (33))
    require(codec.base.bitStream.validate_offset_bits((7L * (32 - i1))))
    decreases(32 - i1)
    if (i1 == 32) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        if (!(UByte.fromRaw(0.toByte) <= pVal.apply(i1) && pVal.apply(i1) <= UByte.fromRaw(127.toByte))) {
            return Left[Int, Int](1)
        } else {
            ()
        }
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 7L * (32 - i1), 7L)
        }
        codec.base.encodeConstrainedWholeNumber(pVal(i1).toRaw, 0, 127)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(7L * (i1 + 1) == 7L * i1 + 7L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 7L * (32 - i1), 7L)
            check(codec.base.bitStream.validate_offset_bits(7L * (32 - (i1 + 1))))
        }
        val res = PacketStore_ID_Encode_loop(codec, pVal, i1 + 1)
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 7L * (32 - i1)
    }
}



@opaque @inlineOnce 
def TPacketStore_ID_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TPacketStore_ID] =
{
    require(codec.base.bitStream.validate_offset_bits(224L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    val pVal = PacketStore_ID_Decode_loop(codec, Vector.empty[UByte], 0) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(bdg) =>
            bdg
    }

    TPacketStore_ID_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TPacketStore_ID](l)
        case Right(_) => RightMut[ErrorCode, TPacketStore_ID](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TPacketStore_ID]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 224L && resVal.size == 33 && TPacketStore_ID_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TPacketStore_ID_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TPacketStore_ID]) =
{
    require(codec.base.bitStream.validate_offset_bits(224L))
    val cpy = snapshot(codec)
    val res = TPacketStore_ID_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def PacketStore_ID_Decode_loop(codec: ACN, pVal: Vector[UByte], i1: Int): EitherMut[Int, Vector[UByte]] = {
    require((0 <= i1) && (i1 <= 32))
    require(pVal.size == i1)
    require(codec.base.bitStream.validate_offset_bits((7L * (32 - i1))))
    decreases(32 - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == 32) {
        ghostExpr {
            vecRangesEqReflexiveLemma(pVal.append(UByte.fromRaw(0.toByte)))
            vecRangesEqSlicedLemma(pVal.append(UByte.fromRaw(0.toByte)), pVal.append(UByte.fromRaw(0.toByte)), 0, pVal.append(UByte.fromRaw(0.toByte)).size, 0, i1)
        }
        RightMut[Int, Vector[UByte]](pVal.append(UByte.fromRaw(0.toByte)))
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 7L * (32 - i1), 7L)
        }
        val pVal_arr_i1_ = UByte.fromRaw(codec.base.decodeConstrainedWholeNumberByte(0, 127)) // uper:109
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(7L * (i1 + 1) == 7L * i1 + 7L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 7L * (32 - i1), 7L)
            check(codec.base.bitStream.validate_offset_bits(7L * (32 - (i1 + 1))))
        }
        val res = PacketStore_ID_Decode_loop(codec, pVal.append(pVal_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(pVal, newVec, pVal_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(pVal.append(pVal_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(pVal.list, pVal_arr_i1_, i1)
                    Vector.listApplyEqVecApply(pVal.append(pVal_arr_i1_), i1)
                    check(pVal_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[UByte]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == 33 && vecRangesEq(pVal, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 7L * (32 - i1)
    }
}



def TPacketStoreSequence_packetStores_IsConstraintValid(pVal: TPacketStoreSequence_packetStores): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = ((1 <= pVal.nCount) && (pVal.nCount <= 32)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TPacketStore_ID_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TPacketStoreSequence_IsConstraintValid(pVal: TPacketStoreSequence): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TPacketStoreSequence_packetStores_IsConstraintValid(pVal.packetStores)
    ret
}

def TPacketStoreSequence_packetStores_Initialize(): TPacketStoreSequence_packetStores = TPacketStoreSequence_packetStores(1, Vector.fill(32)(Vector.fill[UByte](32.toInt+1)(0x0.toRawUByte)))
def TPacketStoreSequence_Initialize(): TPacketStoreSequence = TPacketStoreSequence(packetStores = TPacketStoreSequence_packetStores_Initialize())

@opaque @inlineOnce 
def TPacketStoreSequence_ACN_Encode(pVal: TPacketStoreSequence, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(7200L))
    var i1: Int = 0
    TPacketStoreSequence_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val PacketStoreSequence_n = ULong.fromRaw(pVal.packetStores.nCount)
    if PacketStoreSequence_n < ULong.fromRaw(1) || PacketStoreSequence_n > ULong.fromRaw(32) then
        return Left(860)
    /* Encode PacketStoreSequence_n */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(PacketStoreSequence_n)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(PacketStoreSequence_n)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 7200L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode packetStores */
    PacketStoreSequence_packetStores_ACN_Encode(codec, pVal, PacketStoreSequence_n, pVal.packetStores) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 7200L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.packetStores.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 7200L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def PacketStoreSequence_packetStores_Encode_loop(codec: ACN, packetStores: TPacketStoreSequence_packetStores, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= packetStores.nCount))
    require((1 <= packetStores.nCount) && (packetStores.nCount <= packetStores.arr.size) && (packetStores.arr.size <= 32))
    require(codec.base.bitStream.validate_offset_bits((224L * (packetStores.nCount - i1))))
    decreases(packetStores.nCount - i1)
    if (i1 == packetStores.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 224L * (packetStores.nCount - i1), 224L)
        }
        TPacketStore_ID_ACN_Encode(packetStores.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(224L * (i1 + 1) == 224L * i1 + 224L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 224L * (packetStores.nCount - i1), 224L)
            check(codec.base.bitStream.validate_offset_bits(224L * (packetStores.nCount - (i1 + 1))))
        }
        val res = PacketStoreSequence_packetStores_Encode_loop(codec, packetStores, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TPacketStoreSequence_packetStores.sizeRange(packetStores.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, packetStores.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + 224L)
                    assert(TPacketStoreSequence_packetStores.sizeRange(packetStores.arr, codecSnap1.base.bitStream.bitIndex, i1, packetStores.nCount) == TPacketStoreSequence_packetStores.sizeRange(packetStores.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, packetStores.nCount) + 224L)
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TPacketStoreSequence_packetStores.sizeRange(packetStores.arr, codecSnap1.base.bitStream.bitIndex, i1, packetStores.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TPacketStoreSequence_packetStores.sizeRange(packetStores.arr, old(codec).base.bitStream.bitIndex, i1, packetStores.nCount)
    }
}



@opaque @inlineOnce
def PacketStoreSequence_packetStores_ACN_Encode(codec: ACN, pVal: TPacketStoreSequence, PacketStoreSequence_n: ULong, packetStores: TPacketStoreSequence_packetStores): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(7168L))
    @ghost val oldCdc = snapshot(codec)
    TPacketStoreSequence_packetStores_IsConstraintValid(packetStores) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    PacketStoreSequence_packetStores_Encode_loop(codec, packetStores, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                packetStores.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
            ()
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + packetStores.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TPacketStoreSequence_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TPacketStoreSequence] =
{
    require(codec.base.bitStream.validate_offset_bits(7200L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode PacketStoreSequence_n */
    val PacketStoreSequence_n = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 7200L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode packetStores */
    val pVal_packetStores = PacketStoreSequence_packetStores_ACN_Decode(codec, PacketStoreSequence_n) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 7200L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_packetStores.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 7200L)
    }
    val pVal = TPacketStoreSequence(pVal_packetStores)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }

    TPacketStoreSequence_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TPacketStoreSequence](l)
        case Right(_) => RightMut[ErrorCode, TPacketStoreSequence](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TPacketStoreSequence]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TPacketStoreSequence_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TPacketStoreSequence_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TPacketStoreSequence]) =
{
    require(codec.base.bitStream.validate_offset_bits(7200L))
    val cpy = snapshot(codec)
    val res = TPacketStoreSequence_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def PacketStoreSequence_packetStores_Decode_loop(codec: ACN, nCount: Int, packetStores: Vector[Vector[UByte]], i1: Int): EitherMut[Int, Vector[Vector[UByte]]] = {
    require((1 <= nCount) && (nCount <= 32))
    require((0 <= i1) && (i1 <= nCount))
    require(packetStores.size == i1)
    require(codec.base.bitStream.validate_offset_bits((224L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(packetStores)
            vecRangesEqSlicedLemma(packetStores, packetStores, 0, packetStores.size, 0, i1)
        }
        RightMut[Int, Vector[Vector[UByte]]](packetStores)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 224L * (nCount - i1), 224L)
        }
        val packetStores_arr_i1_ = TPacketStore_ID_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(224L * (i1 + 1) == 224L * i1 + 224L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 224L * (nCount - i1), 224L)
            check(codec.base.bitStream.validate_offset_bits(224L * (nCount - (i1 + 1))))
        }
        val res = PacketStoreSequence_packetStores_Decode_loop(codec, nCount, packetStores.append(packetStores_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(packetStores, newVec, packetStores_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(packetStores.append(packetStores_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(packetStores.list, packetStores_arr_i1_, i1)
                    Vector.listApplyEqVecApply(packetStores.append(packetStores_arr_i1_), i1)
                    check(packetStores_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[Vector[UByte]]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(packetStores, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TPacketStoreSequence_packetStores.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def PacketStoreSequence_packetStores_ACN_Decode(codec: ACN, PacketStoreSequence_n: ULong): EitherMut[Int, TPacketStoreSequence_packetStores] = {
    require(codec.base.bitStream.validate_offset_bits(7168L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val packetStores =
        if ((ULong.fromRaw(1) <= PacketStoreSequence_n) && (PacketStoreSequence_n <= ULong.fromRaw(32))) then
            val packetStores_nCount = PacketStoreSequence_n.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val packetStores = PacketStoreSequence_packetStores_Decode_loop(codec, packetStores_nCount, Vector.empty[Vector[UByte]], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val packetStores = TPacketStoreSequence_packetStores(packetStores_nCount, bdg)
                    ghostExpr {
                        packetStores.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    packetStores
            }
            packetStores
        else return LeftMut(ERR_ACN_DECODE_PACKETSTORESEQUENCE_PACKETSTORES)
    TPacketStoreSequence_packetStores_IsConstraintValid(packetStores) match {
        case Left(l) =>
            LeftMut[Int, TPacketStoreSequence_packetStores](l)
        case Right(_) =>
            RightMut[Int, TPacketStoreSequence_packetStores](packetStores)
    }
}.ensuring { (res: EitherMut[Int, TPacketStoreSequence_packetStores]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TPacketStoreSequence_packetStores_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def PacketStoreSequence_packetStores_ACN_Decode_pure(codec: ACN, PacketStoreSequence_n: ULong): (ACN, EitherMut[Int, TPacketStoreSequence_packetStores]) = {
    require(codec.base.bitStream.validate_offset_bits(7168L))
    val cpy = snapshot(codec)
    val res = PacketStoreSequence_packetStores_ACN_Decode(cpy, PacketStoreSequence_n)
    (cpy, res)
}