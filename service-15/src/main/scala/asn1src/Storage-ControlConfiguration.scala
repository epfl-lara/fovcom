/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

val maxConfigurationSize: TStorage_ControlConfigurationSizeType = 31 // variables:188
val maxTailSize: TStorage_ControlConfigurationSizeType = 31 // variables:188

def TStorage_ControlConfigurationSizeType_IsConstraintValid(@annotation.unused pVal: TStorage_ControlConfigurationSizeType): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = Right(0)
    ret
}

def TStorage_ControlConfigurationSizeType_Initialize(): TStorage_ControlConfigurationSizeType = 0

@opaque @inlineOnce 
def TStorage_ControlConfigurationSizeType_ACN_Encode(pVal: TStorage_ControlConfigurationSizeType, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(72L))
    TStorage_ControlConfigurationSizeType_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    codec.base.encodeUnconstrainedWholeNumber(pVal)
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 8L * GetLengthForEncodingSigned(pVal) + 8L
    }
}

@opaque @inlineOnce 
def TStorage_ControlConfigurationSizeType_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TStorage_ControlConfigurationSizeType] =
{
    require(codec.base.bitStream.validate_offset_bits(72L))

    @ghost val oldCdc = snapshot(codec)
    val pVal = codec.base.decodeUnconstrainedWholeNumber() match {
        case None() => return LeftMut(ERR_ACN_DECODE_STORAGE_CONTROLCONFIGURATIONSIZETYPE)
        case Some(v) => v
    }

    TStorage_ControlConfigurationSizeType_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TStorage_ControlConfigurationSizeType](l)
        case Right(_) => RightMut[ErrorCode, TStorage_ControlConfigurationSizeType](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TStorage_ControlConfigurationSizeType]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 8L * GetLengthForEncodingSigned(resVal) + 8L && TStorage_ControlConfigurationSizeType_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TStorage_ControlConfigurationSizeType_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TStorage_ControlConfigurationSizeType]) =
{
    require(codec.base.bitStream.validate_offset_bits(72L))
    val cpy = snapshot(codec)
    val res = TStorage_ControlConfigurationSizeType_ACN_Decode(cpy)
    (cpy, res)
}