/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

val maxMessageSubtypeSize: Int = 32 // variables:188

def TStorage_ControlReportTypeMessageSubtypes_messageSubtype_IsConstraintValid(pVal: TStorage_ControlReportTypeMessageSubtypes_messageSubtype): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = (pVal.nCount <= 32) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TMessageSubtype_ID_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TStorage_ControlReportTypeMessageSubtypes_IsConstraintValid(pVal: TStorage_ControlReportTypeMessageSubtypes): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TStorage_ControlReportTypeMessageSubtypes_messageSubtype_IsConstraintValid(pVal.messageSubtype)
    ret
}

def TStorage_ControlReportTypeMessageSubtypes_messageSubtype_Initialize(): TStorage_ControlReportTypeMessageSubtypes_messageSubtype = TStorage_ControlReportTypeMessageSubtypes_messageSubtype(0, Vector.fill(32)(ULong.fromRaw(1L)))
def TStorage_ControlReportTypeMessageSubtypes_Initialize(): TStorage_ControlReportTypeMessageSubtypes = TStorage_ControlReportTypeMessageSubtypes(messageSubtype = TStorage_ControlReportTypeMessageSubtypes_messageSubtype_Initialize())

@opaque @inlineOnce 
def TStorage_ControlReportTypeMessageSubtypes_ACN_Encode(pVal: TStorage_ControlReportTypeMessageSubtypes, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(288L))
    var i1: Int = 0
    TStorage_ControlReportTypeMessageSubtypes_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val Storage_ControlReportTypeMessageSubtypes_n3 = ULong.fromRaw(pVal.messageSubtype.nCount)
    if Storage_ControlReportTypeMessageSubtypes_n3 < ULong.fromRaw(0) || Storage_ControlReportTypeMessageSubtypes_n3 > ULong.fromRaw(32) then
        return Left(860)
    /* Encode Storage_ControlReportTypeMessageSubtypes_n3 */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(Storage_ControlReportTypeMessageSubtypes_n3)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(Storage_ControlReportTypeMessageSubtypes_n3)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 288L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode messageSubtype */
    Storage_ControlReportTypeMessageSubtypes_messageSubtype_ACN_Encode(codec, pVal, Storage_ControlReportTypeMessageSubtypes_n3, pVal.messageSubtype) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 288L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.messageSubtype.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 288L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def Storage_ControlReportTypeMessageSubtypes_messageSubtype_Encode_loop(codec: ACN, messageSubtype: TStorage_ControlReportTypeMessageSubtypes_messageSubtype, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= messageSubtype.nCount))
    require((0 <= messageSubtype.nCount) && (messageSubtype.nCount <= messageSubtype.arr.size) && (messageSubtype.arr.size <= 32))
    require(codec.base.bitStream.validate_offset_bits((8L * (messageSubtype.nCount - i1))))
    decreases(messageSubtype.nCount - i1)
    if (i1 == messageSubtype.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 8L * (messageSubtype.nCount - i1), 8L)
        }
        TMessageSubtype_ID_ACN_Encode(messageSubtype.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(8L * (i1 + 1) == 8L * i1 + 8L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 8L * (messageSubtype.nCount - i1), 8L)
            check(codec.base.bitStream.validate_offset_bits(8L * (messageSubtype.nCount - (i1 + 1))))
        }
        val res = Storage_ControlReportTypeMessageSubtypes_messageSubtype_Encode_loop(codec, messageSubtype, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TStorage_ControlReportTypeMessageSubtypes_messageSubtype.sizeRange(messageSubtype.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, messageSubtype.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + 8L)
                    assert(TStorage_ControlReportTypeMessageSubtypes_messageSubtype.sizeRange(messageSubtype.arr, codecSnap1.base.bitStream.bitIndex, i1, messageSubtype.nCount) == TStorage_ControlReportTypeMessageSubtypes_messageSubtype.sizeRange(messageSubtype.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, messageSubtype.nCount) + 8L)
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TStorage_ControlReportTypeMessageSubtypes_messageSubtype.sizeRange(messageSubtype.arr, codecSnap1.base.bitStream.bitIndex, i1, messageSubtype.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TStorage_ControlReportTypeMessageSubtypes_messageSubtype.sizeRange(messageSubtype.arr, old(codec).base.bitStream.bitIndex, i1, messageSubtype.nCount)
    }
}



@opaque @inlineOnce
def Storage_ControlReportTypeMessageSubtypes_messageSubtype_ACN_Encode(codec: ACN, pVal: TStorage_ControlReportTypeMessageSubtypes, Storage_ControlReportTypeMessageSubtypes_n3: ULong, messageSubtype: TStorage_ControlReportTypeMessageSubtypes_messageSubtype): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(256L))
    @ghost val oldCdc = snapshot(codec)
    TStorage_ControlReportTypeMessageSubtypes_messageSubtype_IsConstraintValid(messageSubtype) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    Storage_ControlReportTypeMessageSubtypes_messageSubtype_Encode_loop(codec, messageSubtype, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                messageSubtype.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
            ()
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + messageSubtype.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TStorage_ControlReportTypeMessageSubtypes_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TStorage_ControlReportTypeMessageSubtypes] =
{
    require(codec.base.bitStream.validate_offset_bits(288L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode Storage_ControlReportTypeMessageSubtypes_n3 */
    val Storage_ControlReportTypeMessageSubtypes_n3 = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 288L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode messageSubtype */
    val pVal_messageSubtype = Storage_ControlReportTypeMessageSubtypes_messageSubtype_ACN_Decode(codec, Storage_ControlReportTypeMessageSubtypes_n3) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 288L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_messageSubtype.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 288L)
    }
    val pVal = TStorage_ControlReportTypeMessageSubtypes(pVal_messageSubtype)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }

    TStorage_ControlReportTypeMessageSubtypes_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TStorage_ControlReportTypeMessageSubtypes](l)
        case Right(_) => RightMut[ErrorCode, TStorage_ControlReportTypeMessageSubtypes](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TStorage_ControlReportTypeMessageSubtypes]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TStorage_ControlReportTypeMessageSubtypes_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TStorage_ControlReportTypeMessageSubtypes_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TStorage_ControlReportTypeMessageSubtypes]) =
{
    require(codec.base.bitStream.validate_offset_bits(288L))
    val cpy = snapshot(codec)
    val res = TStorage_ControlReportTypeMessageSubtypes_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def Storage_ControlReportTypeMessageSubtypes_messageSubtype_Decode_loop(codec: ACN, nCount: Int, messageSubtype: Vector[ULong], i1: Int): EitherMut[Int, Vector[ULong]] = {
    require((0 <= nCount) && (nCount <= 32))
    require((0 <= i1) && (i1 <= nCount))
    require(messageSubtype.size == i1)
    require(codec.base.bitStream.validate_offset_bits((8L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(messageSubtype)
            vecRangesEqSlicedLemma(messageSubtype, messageSubtype, 0, messageSubtype.size, 0, i1)
        }
        RightMut[Int, Vector[ULong]](messageSubtype)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 8L * (nCount - i1), 8L)
        }
        val messageSubtype_arr_i1_ = TMessageSubtype_ID_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(8L * (i1 + 1) == 8L * i1 + 8L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 8L * (nCount - i1), 8L)
            check(codec.base.bitStream.validate_offset_bits(8L * (nCount - (i1 + 1))))
        }
        val res = Storage_ControlReportTypeMessageSubtypes_messageSubtype_Decode_loop(codec, nCount, messageSubtype.append(messageSubtype_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(messageSubtype, newVec, messageSubtype_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(messageSubtype.append(messageSubtype_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(messageSubtype.list, messageSubtype_arr_i1_, i1)
                    Vector.listApplyEqVecApply(messageSubtype.append(messageSubtype_arr_i1_), i1)
                    check(messageSubtype_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[ULong]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(messageSubtype, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TStorage_ControlReportTypeMessageSubtypes_messageSubtype.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def Storage_ControlReportTypeMessageSubtypes_messageSubtype_ACN_Decode(codec: ACN, Storage_ControlReportTypeMessageSubtypes_n3: ULong): EitherMut[Int, TStorage_ControlReportTypeMessageSubtypes_messageSubtype] = {
    require(codec.base.bitStream.validate_offset_bits(256L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val messageSubtype =
        if ((Storage_ControlReportTypeMessageSubtypes_n3 <= ULong.fromRaw(32))) then
            val messageSubtype_nCount = Storage_ControlReportTypeMessageSubtypes_n3.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val messageSubtype = Storage_ControlReportTypeMessageSubtypes_messageSubtype_Decode_loop(codec, messageSubtype_nCount, Vector.empty[ULong], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val messageSubtype = TStorage_ControlReportTypeMessageSubtypes_messageSubtype(messageSubtype_nCount, bdg)
                    ghostExpr {
                        messageSubtype.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    messageSubtype
            }
            messageSubtype
        else return LeftMut(ERR_ACN_DECODE_STORAGE_CONTROLREPORTTYPEMESSAGESUBTYPES_MESSAGESUBTYPE)
    TStorage_ControlReportTypeMessageSubtypes_messageSubtype_IsConstraintValid(messageSubtype) match {
        case Left(l) =>
            LeftMut[Int, TStorage_ControlReportTypeMessageSubtypes_messageSubtype](l)
        case Right(_) =>
            RightMut[Int, TStorage_ControlReportTypeMessageSubtypes_messageSubtype](messageSubtype)
    }
}.ensuring { (res: EitherMut[Int, TStorage_ControlReportTypeMessageSubtypes_messageSubtype]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TStorage_ControlReportTypeMessageSubtypes_messageSubtype_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def Storage_ControlReportTypeMessageSubtypes_messageSubtype_ACN_Decode_pure(codec: ACN, Storage_ControlReportTypeMessageSubtypes_n3: ULong): (ACN, EitherMut[Int, TStorage_ControlReportTypeMessageSubtypes_messageSubtype]) = {
    require(codec.base.bitStream.validate_offset_bits(256L))
    val cpy = snapshot(codec)
    val res = Storage_ControlReportTypeMessageSubtypes_messageSubtype_ACN_Decode(cpy, Storage_ControlReportTypeMessageSubtypes_n3)
    (cpy, res)
}

def TStorage_ControlReportTypeStorage_ControlConfiguration_tail_IsConstraintValid(pVal: TStorage_ControlReportTypeStorage_ControlConfiguration_tail): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = (pVal.nCount <= 31) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TStorage_ControlReportTypeMessageSubtypes_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TStorage_ControlReportTypeStorage_ControlConfiguration_IsConstraintValid(pVal: TStorage_ControlReportTypeStorage_ControlConfiguration): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    pVal.applicationProcess_ID match
        case SomeMut(applicationProcess_ID) =>
            ret = TApplicationProcess_ID_IsConstraintValid(applicationProcess_ID)
        case NoneMut() =>
    if ret.isRight then
        ret = TStorage_ControlReportTypeStorage_ControlConfiguration_tail_IsConstraintValid(pVal.tail)
    ret
}

def TStorage_ControlReportTypeStorage_ControlConfiguration_tail_Initialize(): TStorage_ControlReportTypeStorage_ControlConfiguration_tail = TStorage_ControlReportTypeStorage_ControlConfiguration_tail(0, Vector.fill(31)(TStorage_ControlReportTypeMessageSubtypes_Initialize()))
def TStorage_ControlReportTypeStorage_ControlConfiguration_Initialize(): TStorage_ControlReportTypeStorage_ControlConfiguration = TStorage_ControlReportTypeStorage_ControlConfiguration(applicationProcess_ID = SomeMut(ULong.fromRaw(0L)), tail = TStorage_ControlReportTypeStorage_ControlConfiguration_tail_Initialize())

@opaque @inlineOnce 
def TStorage_ControlReportTypeStorage_ControlConfiguration_ACN_Encode(pVal: TStorage_ControlReportTypeStorage_ControlConfiguration, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(8972L))
    var i1: Int = 0
    TStorage_ControlReportTypeStorage_ControlConfiguration_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    codec.base.bitStream.appendBit(pVal.applicationProcess_ID.isDefined)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 8972L, 1L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 1L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 1L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    Storage_ControlReportTypeStorage_ControlConfiguration_applicationProcess_ID_Optional_ACN_Encode(codec, pVal, pVal.applicationProcess_ID) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 8971L, 11L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 12L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.applicationProcess_ID match {
        case SomeMut(v) =>
            11L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    val Storage_ControlReportTypeStorage_ControlConfiguration_n2 = ULong.fromRaw(pVal.tail.nCount)
    if Storage_ControlReportTypeStorage_ControlConfiguration_n2 < ULong.fromRaw(0) || Storage_ControlReportTypeStorage_ControlConfiguration_n2 > ULong.fromRaw(31) then
        return Left(860)
    /* Encode Storage_ControlReportTypeStorage_ControlConfiguration_n2 */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(Storage_ControlReportTypeStorage_ControlConfiguration_n2)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(Storage_ControlReportTypeStorage_ControlConfiguration_n2)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_3.base.bitStream, codec.base.bitStream, 8960L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 44L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    @ghost val codec_0_4 = snapshot(codec)
    /* Encode tail */
    Storage_ControlReportTypeStorage_ControlConfiguration_tail_ACN_Encode(codec, pVal, Storage_ControlReportTypeStorage_ControlConfiguration_n2, pVal.tail) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 8972L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_3 = pVal.tail.size(codec_0_4.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 8972L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2 + size_3)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def Storage_ControlReportTypeStorage_ControlConfiguration_applicationProcess_ID_Optional_ACN_Encode(codec: ACN, pVal: TStorage_ControlReportTypeStorage_ControlConfiguration, applicationProcess_ID: OptionMut[ULong]): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(11L))
    @ghost val oldCdc = snapshot(codec)
    /* Encode applicationProcess_ID */
    applicationProcess_ID match
        case SomeMut(applicationProcess_ID) =>
            TApplicationProcess_ID_ACN_Encode(applicationProcess_ID, codec, false) match // uper:6
                case Right(_) =>
                case Left(err) => return Left(err)
        case NoneMut() =>
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + (if (applicationProcess_ID.isDefined) {
                11L
            } else {
                0L
            })
    }
}



@opaque @inlineOnce
def Storage_ControlReportTypeStorage_ControlConfiguration_tail_Encode_loop(codec: ACN, tail: TStorage_ControlReportTypeStorage_ControlConfiguration_tail, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= tail.nCount))
    require((0 <= tail.nCount) && (tail.nCount <= tail.arr.size) && (tail.arr.size <= 31))
    require(codec.base.bitStream.validate_offset_bits((288L * (tail.nCount - i1))))
    decreases(tail.nCount - i1)
    if (i1 == tail.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 288L * (tail.nCount - i1), 288L)
        }
        TStorage_ControlReportTypeMessageSubtypes_ACN_Encode(tail.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(288L * (i1 + 1) == 288L * i1 + 288L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 288L * (tail.nCount - i1), 288L)
            check(codec.base.bitStream.validate_offset_bits(288L * (tail.nCount - (i1 + 1))))
        }
        val res = Storage_ControlReportTypeStorage_ControlConfiguration_tail_Encode_loop(codec, tail, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TStorage_ControlReportTypeStorage_ControlConfiguration_tail.sizeRange(tail.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, tail.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + tail.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TStorage_ControlReportTypeStorage_ControlConfiguration_tail.sizeRange(tail.arr, codecSnap1.base.bitStream.bitIndex, i1, tail.nCount) == tail.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TStorage_ControlReportTypeStorage_ControlConfiguration_tail.sizeRange(tail.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, tail.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TStorage_ControlReportTypeStorage_ControlConfiguration_tail.sizeRange(tail.arr, codecSnap1.base.bitStream.bitIndex, i1, tail.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TStorage_ControlReportTypeStorage_ControlConfiguration_tail.sizeRange(tail.arr, old(codec).base.bitStream.bitIndex, i1, tail.nCount)
    }
}



@opaque @inlineOnce
def Storage_ControlReportTypeStorage_ControlConfiguration_tail_ACN_Encode(codec: ACN, pVal: TStorage_ControlReportTypeStorage_ControlConfiguration, Storage_ControlReportTypeStorage_ControlConfiguration_n2: ULong, tail: TStorage_ControlReportTypeStorage_ControlConfiguration_tail): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(8928L))
    @ghost val oldCdc = snapshot(codec)
    TStorage_ControlReportTypeStorage_ControlConfiguration_tail_IsConstraintValid(tail) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    Storage_ControlReportTypeStorage_ControlConfiguration_tail_Encode_loop(codec, tail, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                tail.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
            ()
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + tail.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TStorage_ControlReportTypeStorage_ControlConfiguration_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TStorage_ControlReportTypeStorage_ControlConfiguration] =
{
    require(codec.base.bitStream.validate_offset_bits(8972L))
    var applicationProcess_ID_exist: Boolean = false
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    applicationProcess_ID_exist = codec.base.bitStream.readBit()
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 8972L, 1L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 1L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 1L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    val pVal_applicationProcess_ID = Storage_ControlReportTypeStorage_ControlConfiguration_applicationProcess_ID_Optional_ACN_Decode(codec, applicationProcess_ID_exist) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 8971L, 11L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 12L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_applicationProcess_ID match {
        case SomeMut(v) =>
            11L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode Storage_ControlReportTypeStorage_ControlConfiguration_n2 */
    val Storage_ControlReportTypeStorage_ControlConfiguration_n2 = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_3.base.bitStream, codec.base.bitStream, 8960L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 44L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    @ghost val codec_0_4 = snapshot(codec)
    /* Decode tail */
    val pVal_tail = Storage_ControlReportTypeStorage_ControlConfiguration_tail_ACN_Decode(codec, Storage_ControlReportTypeStorage_ControlConfiguration_n2) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 8972L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_3 = pVal_tail.size(codec_0_4.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 8972L)
    }
    val pVal = TStorage_ControlReportTypeStorage_ControlConfiguration(pVal_applicationProcess_ID, pVal_tail)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2 + size_3)
    }

    TStorage_ControlReportTypeStorage_ControlConfiguration_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TStorage_ControlReportTypeStorage_ControlConfiguration](l)
        case Right(_) => RightMut[ErrorCode, TStorage_ControlReportTypeStorage_ControlConfiguration](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TStorage_ControlReportTypeStorage_ControlConfiguration]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TStorage_ControlReportTypeStorage_ControlConfiguration_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TStorage_ControlReportTypeStorage_ControlConfiguration_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TStorage_ControlReportTypeStorage_ControlConfiguration]) =
{
    require(codec.base.bitStream.validate_offset_bits(8972L))
    val cpy = snapshot(codec)
    val res = TStorage_ControlReportTypeStorage_ControlConfiguration_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def Storage_ControlReportTypeStorage_ControlConfiguration_applicationProcess_ID_Optional_ACN_Decode(codec: ACN, applicationProcess_ID_exist: Boolean): EitherMut[Int, OptionMut[ULong]] = {
    require(codec.base.bitStream.validate_offset_bits(11L))
    @ghost val oldCdc = snapshot(codec)
    /* Decode applicationProcess_ID */
    val applicationProcess_ID: OptionMut[TApplicationProcess_ID] =
        if applicationProcess_ID_exist then
            val pVal_applicationProcess_ID = TApplicationProcess_ID_ACN_Decode(codec) match // uper:13
                case RightMut(decData) => decData
                case LeftMut(err) => return LeftMut(err)
            SomeMut(pVal_applicationProcess_ID)
        else NoneMut[TApplicationProcess_ID]()
    RightMut[Int, OptionMut[ULong]](applicationProcess_ID)
}.ensuring { (res: EitherMut[Int, OptionMut[ULong]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + (if (resVal.isDefined) {
                11L
            } else {
                0L
            })
    }
}



@ghost @pure
def Storage_ControlReportTypeStorage_ControlConfiguration_applicationProcess_ID_Optional_ACN_Decode_pure(codec: ACN, applicationProcess_ID_exist: Boolean): (ACN, EitherMut[Int, OptionMut[ULong]]) = {
    require(codec.base.bitStream.validate_offset_bits(11L))
    val cpy = snapshot(codec)
    val res = Storage_ControlReportTypeStorage_ControlConfiguration_applicationProcess_ID_Optional_ACN_Decode(cpy, applicationProcess_ID_exist)
    (cpy, res)
}



@opaque @inlineOnce
def Storage_ControlReportTypeStorage_ControlConfiguration_tail_Decode_loop(codec: ACN, nCount: Int, tail: Vector[TStorage_ControlReportTypeMessageSubtypes], i1: Int): EitherMut[Int, Vector[TStorage_ControlReportTypeMessageSubtypes]] = {
    require((0 <= nCount) && (nCount <= 31))
    require((0 <= i1) && (i1 <= nCount))
    require(tail.size == i1)
    require(codec.base.bitStream.validate_offset_bits((288L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(tail)
            vecRangesEqSlicedLemma(tail, tail, 0, tail.size, 0, i1)
        }
        RightMut[Int, Vector[TStorage_ControlReportTypeMessageSubtypes]](tail)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 288L * (nCount - i1), 288L)
        }
        val tail_arr_i1_ = TStorage_ControlReportTypeMessageSubtypes_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(288L * (i1 + 1) == 288L * i1 + 288L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 288L * (nCount - i1), 288L)
            check(codec.base.bitStream.validate_offset_bits(288L * (nCount - (i1 + 1))))
        }
        val res = Storage_ControlReportTypeStorage_ControlConfiguration_tail_Decode_loop(codec, nCount, tail.append(tail_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(tail, newVec, tail_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(tail.append(tail_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(tail.list, tail_arr_i1_, i1)
                    Vector.listApplyEqVecApply(tail.append(tail_arr_i1_), i1)
                    check(tail_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TStorage_ControlReportTypeMessageSubtypes]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(tail, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TStorage_ControlReportTypeStorage_ControlConfiguration_tail.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def Storage_ControlReportTypeStorage_ControlConfiguration_tail_ACN_Decode(codec: ACN, Storage_ControlReportTypeStorage_ControlConfiguration_n2: ULong): EitherMut[Int, TStorage_ControlReportTypeStorage_ControlConfiguration_tail] = {
    require(codec.base.bitStream.validate_offset_bits(8928L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val tail =
        if ((Storage_ControlReportTypeStorage_ControlConfiguration_n2 <= ULong.fromRaw(31))) then
            val tail_nCount = Storage_ControlReportTypeStorage_ControlConfiguration_n2.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val tail = Storage_ControlReportTypeStorage_ControlConfiguration_tail_Decode_loop(codec, tail_nCount, Vector.empty[TStorage_ControlReportTypeMessageSubtypes], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val tail = TStorage_ControlReportTypeStorage_ControlConfiguration_tail(tail_nCount, bdg)
                    ghostExpr {
                        tail.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    tail
            }
            tail
        else return LeftMut(ERR_ACN_DECODE_STORAGE_CONTROLREPORTTYPESTORAGE_CONTROLCONFIGURATION_TAIL)
    TStorage_ControlReportTypeStorage_ControlConfiguration_tail_IsConstraintValid(tail) match {
        case Left(l) =>
            LeftMut[Int, TStorage_ControlReportTypeStorage_ControlConfiguration_tail](l)
        case Right(_) =>
            RightMut[Int, TStorage_ControlReportTypeStorage_ControlConfiguration_tail](tail)
    }
}.ensuring { (res: EitherMut[Int, TStorage_ControlReportTypeStorage_ControlConfiguration_tail]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TStorage_ControlReportTypeStorage_ControlConfiguration_tail_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def Storage_ControlReportTypeStorage_ControlConfiguration_tail_ACN_Decode_pure(codec: ACN, Storage_ControlReportTypeStorage_ControlConfiguration_n2: ULong): (ACN, EitherMut[Int, TStorage_ControlReportTypeStorage_ControlConfiguration_tail]) = {
    require(codec.base.bitStream.validate_offset_bits(8928L))
    val cpy = snapshot(codec)
    val res = Storage_ControlReportTypeStorage_ControlConfiguration_tail_ACN_Decode(cpy, Storage_ControlReportTypeStorage_ControlConfiguration_n2)
    (cpy, res)
}

def TStorage_ControlReportType_configuration_IsConstraintValid(pVal: TStorage_ControlReportType_configuration): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = (pVal.nCount <= 31) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TStorage_ControlReportTypeStorage_ControlConfiguration_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TStorage_ControlReportType_IsConstraintValid(pVal: TStorage_ControlReportType): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TPacketStore_ID_IsConstraintValid(pVal.packetStoreID)
    if ret.isRight then
        ret = TStorage_ControlReportType_configuration_IsConstraintValid(pVal.configuration)
    ret
}

def TStorage_ControlReportType_configuration_Initialize(): TStorage_ControlReportType_configuration = TStorage_ControlReportType_configuration(0, Vector.fill(31)(TStorage_ControlReportTypeStorage_ControlConfiguration_Initialize()))
def TStorage_ControlReportType_Initialize(): TStorage_ControlReportType = TStorage_ControlReportType(packetStoreID = Vector.fill[UByte](32.toInt+1)(0x0.toRawUByte), configuration = TStorage_ControlReportType_configuration_Initialize())

@opaque @inlineOnce 
def TStorage_ControlReportType_ACN_Encode(pVal: TStorage_ControlReportType, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(278388L))
    var i1: Int = 0
    TStorage_ControlReportType_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode packetStoreID */
    TPacketStore_ID_ACN_Encode(pVal.packetStoreID, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 278388L, 224L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 224L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 224L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    val Storage_ControlReportType_n1 = ULong.fromRaw(pVal.configuration.nCount)
    if Storage_ControlReportType_n1 < ULong.fromRaw(0) || Storage_ControlReportType_n1 > ULong.fromRaw(31) then
        return Left(860)
    /* Encode Storage_ControlReportType_n1 */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(Storage_ControlReportType_n1)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(Storage_ControlReportType_n1)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 278164L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 256L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode configuration */
    Storage_ControlReportType_configuration_ACN_Encode(codec, pVal, Storage_ControlReportType_n1, pVal.configuration) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 278388L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = pVal.configuration.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 278388L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def Storage_ControlReportType_configuration_Encode_loop(codec: ACN, configuration: TStorage_ControlReportType_configuration, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= configuration.nCount))
    require((0 <= configuration.nCount) && (configuration.nCount <= configuration.arr.size) && (configuration.arr.size <= 31))
    require(codec.base.bitStream.validate_offset_bits((8972L * (configuration.nCount - i1))))
    decreases(configuration.nCount - i1)
    if (i1 == configuration.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 8972L * (configuration.nCount - i1), 8972L)
        }
        TStorage_ControlReportTypeStorage_ControlConfiguration_ACN_Encode(configuration.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(8972L * (i1 + 1) == 8972L * i1 + 8972L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 8972L * (configuration.nCount - i1), 8972L)
            check(codec.base.bitStream.validate_offset_bits(8972L * (configuration.nCount - (i1 + 1))))
        }
        val res = Storage_ControlReportType_configuration_Encode_loop(codec, configuration, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TStorage_ControlReportType_configuration.sizeRange(configuration.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, configuration.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + configuration.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TStorage_ControlReportType_configuration.sizeRange(configuration.arr, codecSnap1.base.bitStream.bitIndex, i1, configuration.nCount) == configuration.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TStorage_ControlReportType_configuration.sizeRange(configuration.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, configuration.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TStorage_ControlReportType_configuration.sizeRange(configuration.arr, codecSnap1.base.bitStream.bitIndex, i1, configuration.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TStorage_ControlReportType_configuration.sizeRange(configuration.arr, old(codec).base.bitStream.bitIndex, i1, configuration.nCount)
    }
}



@opaque @inlineOnce
def Storage_ControlReportType_configuration_ACN_Encode(codec: ACN, pVal: TStorage_ControlReportType, Storage_ControlReportType_n1: ULong, configuration: TStorage_ControlReportType_configuration): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(278132L))
    @ghost val oldCdc = snapshot(codec)
    TStorage_ControlReportType_configuration_IsConstraintValid(configuration) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    Storage_ControlReportType_configuration_Encode_loop(codec, configuration, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                configuration.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
            ()
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + configuration.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TStorage_ControlReportType_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TStorage_ControlReportType] =
{
    require(codec.base.bitStream.validate_offset_bits(278388L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode packetStoreID */
    val pVal_packetStoreID = TPacketStore_ID_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 278388L, 224L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 224L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 224L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode Storage_ControlReportType_n1 */
    val Storage_ControlReportType_n1 = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 278164L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 256L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode configuration */
    val pVal_configuration = Storage_ControlReportType_configuration_ACN_Decode(codec, Storage_ControlReportType_n1) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 278388L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = pVal_configuration.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 278388L)
    }
    val pVal = TStorage_ControlReportType(pVal_packetStoreID, pVal_configuration)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }

    TStorage_ControlReportType_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TStorage_ControlReportType](l)
        case Right(_) => RightMut[ErrorCode, TStorage_ControlReportType](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TStorage_ControlReportType]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TStorage_ControlReportType_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TStorage_ControlReportType_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TStorage_ControlReportType]) =
{
    require(codec.base.bitStream.validate_offset_bits(278388L))
    val cpy = snapshot(codec)
    val res = TStorage_ControlReportType_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def Storage_ControlReportType_configuration_Decode_loop(codec: ACN, nCount: Int, configuration: Vector[TStorage_ControlReportTypeStorage_ControlConfiguration], i1: Int): EitherMut[Int, Vector[TStorage_ControlReportTypeStorage_ControlConfiguration]] = {
    require((0 <= nCount) && (nCount <= 31))
    require((0 <= i1) && (i1 <= nCount))
    require(configuration.size == i1)
    require(codec.base.bitStream.validate_offset_bits((8972L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(configuration)
            vecRangesEqSlicedLemma(configuration, configuration, 0, configuration.size, 0, i1)
        }
        RightMut[Int, Vector[TStorage_ControlReportTypeStorage_ControlConfiguration]](configuration)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 8972L * (nCount - i1), 8972L)
        }
        val configuration_arr_i1_ = TStorage_ControlReportTypeStorage_ControlConfiguration_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(8972L * (i1 + 1) == 8972L * i1 + 8972L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 8972L * (nCount - i1), 8972L)
            check(codec.base.bitStream.validate_offset_bits(8972L * (nCount - (i1 + 1))))
        }
        val res = Storage_ControlReportType_configuration_Decode_loop(codec, nCount, configuration.append(configuration_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(configuration, newVec, configuration_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(configuration.append(configuration_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(configuration.list, configuration_arr_i1_, i1)
                    Vector.listApplyEqVecApply(configuration.append(configuration_arr_i1_), i1)
                    check(configuration_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TStorage_ControlReportTypeStorage_ControlConfiguration]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(configuration, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TStorage_ControlReportType_configuration.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def Storage_ControlReportType_configuration_ACN_Decode(codec: ACN, Storage_ControlReportType_n1: ULong): EitherMut[Int, TStorage_ControlReportType_configuration] = {
    require(codec.base.bitStream.validate_offset_bits(278132L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val configuration =
        if ((Storage_ControlReportType_n1 <= ULong.fromRaw(31))) then
            val configuration_nCount = Storage_ControlReportType_n1.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val configuration = Storage_ControlReportType_configuration_Decode_loop(codec, configuration_nCount, Vector.empty[TStorage_ControlReportTypeStorage_ControlConfiguration], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val configuration = TStorage_ControlReportType_configuration(configuration_nCount, bdg)
                    ghostExpr {
                        configuration.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    configuration
            }
            configuration
        else return LeftMut(ERR_ACN_DECODE_STORAGE_CONTROLREPORTTYPE_CONFIGURATION)
    TStorage_ControlReportType_configuration_IsConstraintValid(configuration) match {
        case Left(l) =>
            LeftMut[Int, TStorage_ControlReportType_configuration](l)
        case Right(_) =>
            RightMut[Int, TStorage_ControlReportType_configuration](configuration)
    }
}.ensuring { (res: EitherMut[Int, TStorage_ControlReportType_configuration]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TStorage_ControlReportType_configuration_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def Storage_ControlReportType_configuration_ACN_Decode_pure(codec: ACN, Storage_ControlReportType_n1: ULong): (ACN, EitherMut[Int, TStorage_ControlReportType_configuration]) = {
    require(codec.base.bitStream.validate_offset_bits(278132L))
    val cpy = snapshot(codec)
    val res = Storage_ControlReportType_configuration_ACN_Decode(cpy, Storage_ControlReportType_n1)
    (cpy, res)
}