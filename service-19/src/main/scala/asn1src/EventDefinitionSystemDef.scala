/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TEventDefinitionSystem_ID --------------------------------------------*/

case class TEventDefinitionSystem_ID (
    applicationProcess_ID: OptionMut[TApplicationProcess_ID], 
    event_Definition_ID: TEventDefinition_ID
) {
    require(this.applicationProcess_ID.isDefined)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775764L))
        val size_0 = (this.applicationProcess_ID match {
            case SomeMut(v) =>
                11L
            case NoneMut() =>
                0L
        })
        val size_1 = 32L
        size_0 + size_1
    }.ensuring { (res: Long) => 
        res == 43L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775764L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775764L))
        val size_0_offset = (this.applicationProcess_ID match {
            case SomeMut(v) =>
                11L
            case NoneMut() =>
                0L
        })
        val size_0_otherOffset = this.applicationProcess_ID match {
            case SomeMut(v) =>
                11L
            case NoneMut() =>
                0L
        }
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775764L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775764L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = (this.applicationProcess_ID match {
            case SomeMut(v) =>
                11L
            case NoneMut() =>
                0L
        })
        val size_0_otherOffset = this.applicationProcess_ID match {
            case SomeMut(v) =>
                11L
            case NoneMut() =>
                0L
        }
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775764L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775764L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = (this.applicationProcess_ID match {
            case SomeMut(v) =>
                11L
            case NoneMut() =>
                0L
        })
        val size_0_otherOffset = this.applicationProcess_ID match {
            case SomeMut(v) =>
                11L
            case NoneMut() =>
                0L
        }
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775764L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775764L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = (this.applicationProcess_ID match {
            case SomeMut(v) =>
                11L
            case NoneMut() =>
                0L
        })
        val size_0_otherOffset = this.applicationProcess_ID match {
            case SomeMut(v) =>
                11L
            case NoneMut() =>
                0L
        }
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_EVENTDEFINITIONSYSTEM_ID: Int = 26 /*(WITH COMPONENTS
{
    applicationProcess-ID PRESENT
}) */
@inline @cCode.inline val ERR_EVENTDEFINITIONSYSTEM_ID_APPLICATIONPROCESS_ID_2: Int = 11 /* */
@inline @cCode.inline val ERR_EVENTDEFINITIONSYSTEM_ID_EVENT_DEFINITION_ID_2: Int = 21 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_EVENTDEFINITIONSYSTEM_ID: Int = 29 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_EVENTDEFINITIONSYSTEM_ID_APPLICATIONPROCESS_ID_2: Int = 14 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_EVENTDEFINITIONSYSTEM_ID_EVENT_DEFINITION_ID_2: Int = 24 /*  */
@inline @cCode.inline val TEventDefinitionSystem_ID_REQUIRED_BYTES_FOR_ACN_ENCODING = 6
@inline @cCode.inline val TEventDefinitionSystem_ID_REQUIRED_BITS_FOR_ACN_ENCODING = 43

@inline @cCode.inline val ERR_ACN_DECODE_EVENTDEFINITIONSYSTEM_ID: Int = 30 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_EVENTDEFINITIONSYSTEM_ID_APPLICATIONPROCESS_ID_2: Int = 15 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_EVENTDEFINITIONSYSTEM_ID_EVENT_DEFINITION_ID_2: Int = 25 /*  */


