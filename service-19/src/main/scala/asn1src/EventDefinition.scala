/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

val eventDefinition_ID_Size: Int = 32 // variables:188

def TEventDefinitionAuxiliaryData_IsConstraintValid(pVal: TEventDefinitionAuxiliaryData): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TDummyType_IsConstraintValid(pVal)
    ret
}

def TEventDefinitionAuxiliaryData_Initialize(): TEventDefinitionAuxiliaryData = ULong.fromRaw(15L)

@opaque @inlineOnce 
def TEventDefinitionAuxiliaryData_ACN_Encode(pVal: TEventDefinitionAuxiliaryData, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(4L))
    TEventDefinitionAuxiliaryData_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    TDummyType_ACN_Encode(pVal, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 4L
    }
}

@opaque @inlineOnce 
def TEventDefinitionAuxiliaryData_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TEventDefinitionAuxiliaryData] =
{
    require(codec.base.bitStream.validate_offset_bits(4L))

    @ghost val oldCdc = snapshot(codec)
    val pVal = TDummyType_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)

    TEventDefinitionAuxiliaryData_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TEventDefinitionAuxiliaryData](l)
        case Right(_) => RightMut[ErrorCode, TEventDefinitionAuxiliaryData](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TEventDefinitionAuxiliaryData]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 4L && TEventDefinitionAuxiliaryData_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TEventDefinitionAuxiliaryData_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TEventDefinitionAuxiliaryData]) =
{
    require(codec.base.bitStream.validate_offset_bits(4L))
    val cpy = snapshot(codec)
    val res = TEventDefinitionAuxiliaryData_ACN_Decode(cpy)
    (cpy, res)
}

def TEventDefinition_ID_IsConstraintValid(pVal: TEventDefinition_ID): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = (pVal <= ULong.fromRaw(4294967295L)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    ret
}

def TEventDefinition_ID_Initialize(): TEventDefinition_ID = ULong.fromRaw(0L)

@opaque @inlineOnce 
def TEventDefinition_ID_ACN_Encode(pVal: TEventDefinition_ID, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(32L))
    TEventDefinition_ID_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(pVal)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(pVal)
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 32L
    }
}

@opaque @inlineOnce 
def TEventDefinition_ID_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TEventDefinition_ID] =
{
    require(codec.base.bitStream.validate_offset_bits(32L))

    @ghost val oldCdc = snapshot(codec)
    val pVal = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()


    TEventDefinition_ID_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TEventDefinition_ID](l)
        case Right(_) => RightMut[ErrorCode, TEventDefinition_ID](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TEventDefinition_ID]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 32L && TEventDefinition_ID_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TEventDefinition_ID_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TEventDefinition_ID]) =
{
    require(codec.base.bitStream.validate_offset_bits(32L))
    val cpy = snapshot(codec)
    val res = TEventDefinition_ID_ACN_Decode(cpy)
    (cpy, res)
}