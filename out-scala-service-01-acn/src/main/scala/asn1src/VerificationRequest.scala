/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._


def TVerificationRequest_ID_packet_ID_IsConstraintValid(pVal: TVerificationRequest_ID_packet_ID): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TSecondaryHeaderFlag_IsConstraintValid(pVal.secondaryHeaderFlag)
    if ret.isRight then
        ret = TApplicationProcess_ID_IsConstraintValid(pVal.applicationProcess_ID)
    ret
}

def TVerificationRequest_ID_IsConstraintValid(pVal: TVerificationRequest_ID): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TVerificationRequest_ID_packet_ID_IsConstraintValid(pVal.packet_ID)
    if ret.isRight then
        ret = TPacketSequenceControl_IsConstraintValid(pVal.packetSequenceControl)
    ret
}

def TVerificationRequest_ID_packet_ID_Initialize(): TVerificationRequest_ID_packet_ID = TVerificationRequest_ID_packet_ID(packetType = 0, secondaryHeaderFlag = ULong.fromRaw(0L), applicationProcess_ID = ULong.fromRaw(0L))
def TVerificationRequest_ID_Initialize(): TVerificationRequest_ID = TVerificationRequest_ID(packetVersionNumber = 0, packet_ID = TVerificationRequest_ID_packet_ID_Initialize(), packetSequenceControl = TPacketSequenceControl_Initialize())

@opaque @inlineOnce 
def TVerificationRequest_ID_ACN_Encode(pVal: TVerificationRequest_ID, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(32L))
    TVerificationRequest_ID_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode packetVersionNumber */
    TPacketVersionNumberValue_ACN_Encode(pVal.packetVersionNumber, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 32L, 3L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 3L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 3L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode packet_ID */
    VerificationRequest_ID_packet_ID_ACN_Encode(codec, pVal, pVal.packet_ID) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 29L, 13L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 16L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1_1 = 1L
    @ghost val size_1_2 = 1L
    @ghost val size_1_3 = 11L
    @ghost val size_1 = size_1_1 + size_1_2 + size_1_3
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode packetSequenceControl */
    TPacketSequenceControl_ACN_Encode(pVal.packetSequenceControl, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = pVal.packetSequenceControl.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 32L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def VerificationRequest_ID_packet_ID_ACN_Encode(codec: ACN, pVal: TVerificationRequest_ID, packet_ID: TVerificationRequest_ID_packet_ID): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(13L))
    @ghost val oldCdc = snapshot(codec)
    TVerificationRequest_ID_packet_ID_IsConstraintValid(packet_ID) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode packetType */
    TTC_PacketType_ACN_Encode(packet_ID.packetType, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 13L, 1L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 1L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 1L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode secondaryHeaderFlag */
    TSecondaryHeaderFlag_ACN_Encode(packet_ID.secondaryHeaderFlag, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 12L, 1L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 2L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 1L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode applicationProcess_ID */
    TApplicationProcess_ID_ACN_Encode(packet_ID.applicationProcess_ID, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 13L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = 11L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 13L)
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            val size_1_0 = 1L
            val size_1_1 = 1L
            val size_1_2 = 11L
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + size_1_0 + size_1_1 + size_1_2
    }
}

@opaque @inlineOnce 
def TVerificationRequest_ID_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TVerificationRequest_ID] =
{
    require(codec.base.bitStream.validate_offset_bits(32L))

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode packetVersionNumber */
    val pVal_packetVersionNumber = TPacketVersionNumberValue_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 32L, 3L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 3L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 3L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode packet_ID */
    val pVal_packet_ID = VerificationRequest_ID_packet_ID_ACN_Decode(codec) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 29L, 13L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 16L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1_1 = 1L
    @ghost val size_1_2 = 1L
    @ghost val size_1_3 = 11L
    @ghost val size_1 = size_1_1 + size_1_2 + size_1_3
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode packetSequenceControl */
    val pVal_packetSequenceControl = TPacketSequenceControl_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = pVal_packetSequenceControl.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 32L)
    }
    val pVal = TVerificationRequest_ID(pVal_packetVersionNumber, pVal_packet_ID, pVal_packetSequenceControl)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }

    TVerificationRequest_ID_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TVerificationRequest_ID](l)
        case Right(_) => RightMut[ErrorCode, TVerificationRequest_ID](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TVerificationRequest_ID]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TVerificationRequest_ID_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TVerificationRequest_ID_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TVerificationRequest_ID]) =
{
    require(codec.base.bitStream.validate_offset_bits(32L))
    val cpy = snapshot(codec)
    val res = TVerificationRequest_ID_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def VerificationRequest_ID_packet_ID_ACN_Decode(codec: ACN): EitherMut[Int, TVerificationRequest_ID_packet_ID] = {
    require(codec.base.bitStream.validate_offset_bits(13L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode packetType */
    val packet_ID_packetType = TTC_PacketType_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 13L, 1L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 1L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 1L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode secondaryHeaderFlag */
    val packet_ID_secondaryHeaderFlag = TSecondaryHeaderFlag_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 12L, 1L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 2L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 1L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode applicationProcess_ID */
    val packet_ID_applicationProcess_ID = TApplicationProcess_ID_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 13L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = 11L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 13L)
    }
    val packet_ID = TVerificationRequest_ID_packet_ID(packet_ID_packetType, packet_ID_secondaryHeaderFlag, packet_ID_applicationProcess_ID)
    TVerificationRequest_ID_packet_ID_IsConstraintValid(packet_ID) match {
        case Left(l) =>
            LeftMut[Int, TVerificationRequest_ID_packet_ID](l)
        case Right(_) =>
            RightMut[Int, TVerificationRequest_ID_packet_ID](packet_ID)
    }
}.ensuring { (res: EitherMut[Int, TVerificationRequest_ID_packet_ID]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            val size_1_0 = 1L
            val size_1_1 = 1L
            val size_1_2 = 11L
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + size_1_0 + size_1_1 + size_1_2 && TVerificationRequest_ID_packet_ID_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def VerificationRequest_ID_packet_ID_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[Int, TVerificationRequest_ID_packet_ID]) = {
    require(codec.base.bitStream.validate_offset_bits(13L))
    val cpy = snapshot(codec)
    val res = VerificationRequest_ID_packet_ID_ACN_Decode(cpy)
    (cpy, res)
}