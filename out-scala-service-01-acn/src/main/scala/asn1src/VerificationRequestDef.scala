/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TVerificationRequest_ID --------------------------------------------*/
/*-- TVerificationRequest_ID_packet_ID --------------------------------------------*/

case class TVerificationRequest_ID_packet_ID (
    packetType: TTC_PacketType, 
    secondaryHeaderFlag: TSecondaryHeaderFlag, 
    applicationProcess_ID: TApplicationProcess_ID
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775794L))
        val size_0 = 1L
        val size_1 = 1L
        val size_2 = 11L
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        res == 13L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775794L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775794L))
        val size_0_offset = 1L
        val size_0_otherOffset = 1L
        val size_1_offset = 1L
        val size_1_otherOffset = 1L
        val size_2_offset = 11L
        val size_2_otherOffset = 11L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775794L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775794L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 1L
        val size_0_otherOffset = 1L
        val size_1_offset = 1L
        val size_1_otherOffset = 1L
        val size_2_offset = 11L
        val size_2_otherOffset = 11L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775794L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775794L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 1L
        val size_0_otherOffset = 1L
        val size_1_offset = 1L
        val size_1_otherOffset = 1L
        val size_2_offset = 11L
        val size_2_otherOffset = 11L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775794L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775794L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 1L
        val size_0_otherOffset = 1L
        val size_1_offset = 1L
        val size_1_otherOffset = 1L
        val size_2_offset = 11L
        val size_2_otherOffset = 11L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


case class TVerificationRequest_ID (
    packetVersionNumber: TPacketVersionNumberValue, 
    packet_ID: TVerificationRequest_ID_packet_ID, 
    packetSequenceControl: TPacketSequenceControl
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        val size_0 = 3L
        val size_1_1 = 1L
        val size_1_2 = 1L
        val size_1_3 = 11L
        val size_1 = size_1_1 + size_1_2 + size_1_3
        val size_2 = this.packetSequenceControl.size(offset + size_0 + size_1)
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        res == 32L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        val size_0_offset = 3L
        val size_0_otherOffset = 3L
        val size_1_1_offset = 1L
        val size_1_2_offset = 1L
        val size_1_3_offset = 11L
        val size_1_offset = size_1_1_offset + size_1_2_offset + size_1_3_offset
        val size_1_1_otherOffset = 1L
        val size_1_2_otherOffset = 1L
        val size_1_3_otherOffset = 11L
        val size_1_otherOffset = size_1_1_otherOffset + size_1_2_otherOffset + size_1_3_otherOffset
        this.packet_ID.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = this.packetSequenceControl.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.packetSequenceControl.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.packetSequenceControl.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 3L
        val size_0_otherOffset = 3L
        val size_1_1_offset = 1L
        val size_1_2_offset = 1L
        val size_1_3_offset = 11L
        val size_1_offset = size_1_1_offset + size_1_2_offset + size_1_3_offset
        val size_1_1_otherOffset = 1L
        val size_1_2_otherOffset = 1L
        val size_1_3_otherOffset = 11L
        val size_1_otherOffset = size_1_1_otherOffset + size_1_2_otherOffset + size_1_3_otherOffset
        this.packet_ID.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = this.packetSequenceControl.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.packetSequenceControl.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.packetSequenceControl.sizeLemmaNextByte(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 3L
        val size_0_otherOffset = 3L
        val size_1_1_offset = 1L
        val size_1_2_offset = 1L
        val size_1_3_offset = 11L
        val size_1_offset = size_1_1_offset + size_1_2_offset + size_1_3_offset
        val size_1_1_otherOffset = 1L
        val size_1_2_otherOffset = 1L
        val size_1_3_otherOffset = 11L
        val size_1_otherOffset = size_1_1_otherOffset + size_1_2_otherOffset + size_1_3_otherOffset
        this.packet_ID.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = this.packetSequenceControl.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.packetSequenceControl.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.packetSequenceControl.sizeLemmaNextWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 3L
        val size_0_otherOffset = 3L
        val size_1_1_offset = 1L
        val size_1_2_offset = 1L
        val size_1_3_offset = 11L
        val size_1_offset = size_1_1_offset + size_1_2_offset + size_1_3_offset
        val size_1_1_otherOffset = 1L
        val size_1_2_otherOffset = 1L
        val size_1_3_otherOffset = 11L
        val size_1_otherOffset = size_1_1_otherOffset + size_1_2_otherOffset + size_1_3_otherOffset
        this.packet_ID.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = this.packetSequenceControl.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.packetSequenceControl.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.packetSequenceControl.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_VERIFICATIONREQUEST_ID_PACKET_ID: Int = 990 /* */
@inline @cCode.inline val ERR_VERIFICATIONREQUEST_ID_PACKET_ID_PACKETTYPE: Int = 965 /* */
@inline @cCode.inline val ERR_VERIFICATIONREQUEST_ID_PACKET_ID_SECONDARYHEADERFLAG_2: Int = 975 /* */
@inline @cCode.inline val ERR_VERIFICATIONREQUEST_ID_PACKET_ID_APPLICATIONPROCESS_ID_2: Int = 985 /* */

@inline @cCode.inline val ERR_VERIFICATIONREQUEST_ID: Int = 1014 /* */
@inline @cCode.inline val ERR_VERIFICATIONREQUEST_ID_PACKETVERSIONNUMBER: Int = 956 /* */
@inline @cCode.inline val ERR_VERIFICATIONREQUEST_ID_PACKETSEQUENCECONTROL_2: Int = 1009 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_VERIFICATIONREQUEST_ID: Int = 1017 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_VERIFICATIONREQUEST_ID_PACKETVERSIONNUMBER_2: Int = 959 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_VERIFICATIONREQUEST_ID_PACKET_ID: Int = 993 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_VERIFICATIONREQUEST_ID_PACKET_ID_PACKETTYPE_2: Int = 968 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_VERIFICATIONREQUEST_ID_PACKET_ID_SECONDARYHEADERFLAG_2: Int = 978 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_VERIFICATIONREQUEST_ID_PACKET_ID_APPLICATIONPROCESS_ID_2: Int = 988 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_VERIFICATIONREQUEST_ID_PACKETSEQUENCECONTROL_2: Int = 1012 /*  */
@inline @cCode.inline val TVerificationRequest_ID_REQUIRED_BYTES_FOR_ACN_ENCODING = 4
@inline @cCode.inline val TVerificationRequest_ID_REQUIRED_BITS_FOR_ACN_ENCODING = 32

@inline @cCode.inline val ERR_ACN_DECODE_VERIFICATIONREQUEST_ID: Int = 1018 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_VERIFICATIONREQUEST_ID_PACKETVERSIONNUMBER_2: Int = 960 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_VERIFICATIONREQUEST_ID_PACKET_ID: Int = 994 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_VERIFICATIONREQUEST_ID_PACKET_ID_PACKETTYPE_2: Int = 969 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_VERIFICATIONREQUEST_ID_PACKET_ID_SECONDARYHEADERFLAG_2: Int = 979 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_VERIFICATIONREQUEST_ID_PACKET_ID_APPLICATIONPROCESS_ID_2: Int = 989 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_VERIFICATIONREQUEST_ID_PACKETSEQUENCECONTROL_2: Int = 1013 /*  */


