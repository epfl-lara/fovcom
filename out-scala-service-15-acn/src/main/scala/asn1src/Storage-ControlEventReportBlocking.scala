/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._


def TStorage_ControlEventReportBlockingConfiguration_tail_IsConstraintValid(pVal: TStorage_ControlEventReportBlockingConfiguration_tail): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = (pVal.nCount <= 31) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TEventDefinition_ID_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TStorage_ControlEventReportBlockingConfiguration_IsConstraintValid(pVal: TStorage_ControlEventReportBlockingConfiguration): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    pVal.applicationProcess_ID match
        case SomeMut(applicationProcess_ID) =>
            ret = TApplicationProcess_ID_IsConstraintValid(applicationProcess_ID)
        case NoneMut() =>
    if ret.isRight then
        ret = TStorage_ControlEventReportBlockingConfiguration_tail_IsConstraintValid(pVal.tail)
    ret
}

def TStorage_ControlEventReportBlockingConfiguration_tail_Initialize(): TStorage_ControlEventReportBlockingConfiguration_tail = TStorage_ControlEventReportBlockingConfiguration_tail(0, Vector.fill(31)(ULong.fromRaw(0L)))
def TStorage_ControlEventReportBlockingConfiguration_Initialize(): TStorage_ControlEventReportBlockingConfiguration = TStorage_ControlEventReportBlockingConfiguration(applicationProcess_ID = SomeMut(ULong.fromRaw(0L)), tail = TStorage_ControlEventReportBlockingConfiguration_tail_Initialize())

@opaque @inlineOnce 
def TStorage_ControlEventReportBlockingConfiguration_ACN_Encode(pVal: TStorage_ControlEventReportBlockingConfiguration, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(1036L))
    var i1: Int = 0
    TStorage_ControlEventReportBlockingConfiguration_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    codec.base.bitStream.appendBit(pVal.applicationProcess_ID.isDefined)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 1036L, 1L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 1L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 1L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    Storage_ControlEventReportBlockingConfiguration_applicationProcess_ID_Optional_ACN_Encode(codec, pVal, pVal.applicationProcess_ID) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 1035L, 11L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 12L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.applicationProcess_ID match {
        case SomeMut(v) =>
            11L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    val Storage_ControlEventReportBlockingConfiguration_n2 = ULong.fromRaw(pVal.tail.nCount)
    if Storage_ControlEventReportBlockingConfiguration_n2 < ULong.fromRaw(0) || Storage_ControlEventReportBlockingConfiguration_n2 > ULong.fromRaw(31) then
        return Left(860)
    /* Encode Storage_ControlEventReportBlockingConfiguration_n2 */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(Storage_ControlEventReportBlockingConfiguration_n2)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(Storage_ControlEventReportBlockingConfiguration_n2)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_3.base.bitStream, codec.base.bitStream, 1024L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 44L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    @ghost val codec_0_4 = snapshot(codec)
    /* Encode tail */
    Storage_ControlEventReportBlockingConfiguration_tail_ACN_Encode(codec, pVal, Storage_ControlEventReportBlockingConfiguration_n2, pVal.tail) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 1036L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_3 = pVal.tail.size(codec_0_4.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 1036L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2 + size_3)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def Storage_ControlEventReportBlockingConfiguration_applicationProcess_ID_Optional_ACN_Encode(codec: ACN, pVal: TStorage_ControlEventReportBlockingConfiguration, applicationProcess_ID: OptionMut[ULong]): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(11L))
    @ghost val oldCdc = snapshot(codec)
    /* Encode applicationProcess_ID */
    applicationProcess_ID match
        case SomeMut(applicationProcess_ID) =>
            TApplicationProcess_ID_ACN_Encode(applicationProcess_ID, codec, false) match // uper:6
                case Right(_) =>
                case Left(err) => return Left(err)
        case NoneMut() =>
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + (if (applicationProcess_ID.isDefined) {
                11L
            } else {
                0L
            })
    }
}



@opaque @inlineOnce
def Storage_ControlEventReportBlocking_TStorage_ControlEventReportBlockingConfiguration_tail_pVal_tail_tail_Encode_loop(codec: ACN, tail: TStorage_ControlEventReportBlockingConfiguration_tail, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= tail.nCount))
    require((0 <= tail.nCount) && (tail.nCount <= tail.arr.size) && (tail.arr.size <= 31))
    require(codec.base.bitStream.validate_offset_bits((32L * (tail.nCount - i1))))
    decreases(tail.nCount - i1)
    if (i1 == tail.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 32L * (tail.nCount - i1), 32L)
        }
        TEventDefinition_ID_ACN_Encode(tail.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(32L * (i1 + 1) == 32L * i1 + 32L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 32L * (tail.nCount - i1), 32L)
            check(codec.base.bitStream.validate_offset_bits(32L * (tail.nCount - (i1 + 1))))
        }
        val res = Storage_ControlEventReportBlocking_TStorage_ControlEventReportBlockingConfiguration_tail_pVal_tail_tail_Encode_loop(codec, tail, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TStorage_ControlEventReportBlockingConfiguration_tail.sizeRange(tail.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, tail.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + 32L)
                    assert(TStorage_ControlEventReportBlockingConfiguration_tail.sizeRange(tail.arr, codecSnap1.base.bitStream.bitIndex, i1, tail.nCount) == TStorage_ControlEventReportBlockingConfiguration_tail.sizeRange(tail.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, tail.nCount) + 32L)
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TStorage_ControlEventReportBlockingConfiguration_tail.sizeRange(tail.arr, codecSnap1.base.bitStream.bitIndex, i1, tail.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TStorage_ControlEventReportBlockingConfiguration_tail.sizeRange(tail.arr, old(codec).base.bitStream.bitIndex, i1, tail.nCount)
    }
}



@opaque @inlineOnce
def Storage_ControlEventReportBlockingConfiguration_tail_ACN_Encode(codec: ACN, pVal: TStorage_ControlEventReportBlockingConfiguration, Storage_ControlEventReportBlockingConfiguration_n2: ULong, tail: TStorage_ControlEventReportBlockingConfiguration_tail): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(992L))
    @ghost val oldCdc = snapshot(codec)
    TStorage_ControlEventReportBlockingConfiguration_tail_IsConstraintValid(tail) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    Storage_ControlEventReportBlocking_TStorage_ControlEventReportBlockingConfiguration_tail_pVal_tail_tail_Encode_loop(codec, tail, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                tail.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + tail.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TStorage_ControlEventReportBlockingConfiguration_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TStorage_ControlEventReportBlockingConfiguration] =
{
    require(codec.base.bitStream.validate_offset_bits(1036L))
    var applicationProcess_ID_exist: Boolean = false
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    applicationProcess_ID_exist = codec.base.bitStream.readBit()
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 1036L, 1L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 1L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 1L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    val pVal_applicationProcess_ID = Storage_ControlEventReportBlockingConfiguration_applicationProcess_ID_Optional_ACN_Decode(codec, applicationProcess_ID_exist) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 1035L, 11L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 12L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_applicationProcess_ID match {
        case SomeMut(v) =>
            11L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode Storage_ControlEventReportBlockingConfiguration_n2 */
    val Storage_ControlEventReportBlockingConfiguration_n2 = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_3.base.bitStream, codec.base.bitStream, 1024L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 44L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    @ghost val codec_0_4 = snapshot(codec)
    /* Decode tail */
    val pVal_tail = Storage_ControlEventReportBlockingConfiguration_tail_ACN_Decode(codec, Storage_ControlEventReportBlockingConfiguration_n2) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 1036L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_3 = pVal_tail.size(codec_0_4.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 1036L)
    }
    val pVal = TStorage_ControlEventReportBlockingConfiguration(pVal_applicationProcess_ID, pVal_tail)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2 + size_3)
    }

    TStorage_ControlEventReportBlockingConfiguration_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TStorage_ControlEventReportBlockingConfiguration](l)
        case Right(_) => RightMut[ErrorCode, TStorage_ControlEventReportBlockingConfiguration](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TStorage_ControlEventReportBlockingConfiguration]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TStorage_ControlEventReportBlockingConfiguration_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TStorage_ControlEventReportBlockingConfiguration_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TStorage_ControlEventReportBlockingConfiguration]) =
{
    require(codec.base.bitStream.validate_offset_bits(1036L))
    val cpy = snapshot(codec)
    val res = TStorage_ControlEventReportBlockingConfiguration_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def Storage_ControlEventReportBlockingConfiguration_applicationProcess_ID_Optional_ACN_Decode(codec: ACN, applicationProcess_ID_exist: Boolean): EitherMut[Int, OptionMut[ULong]] = {
    require(codec.base.bitStream.validate_offset_bits(11L))
    @ghost val oldCdc = snapshot(codec)
    /* Decode applicationProcess_ID */
    val applicationProcess_ID: OptionMut[TApplicationProcess_ID] =
        if applicationProcess_ID_exist then
            val pVal_applicationProcess_ID = TApplicationProcess_ID_ACN_Decode(codec) match // uper:13
                case RightMut(decData) => decData
                case LeftMut(err) => return LeftMut(err)
            SomeMut(pVal_applicationProcess_ID)
        else NoneMut[TApplicationProcess_ID]()
    RightMut[Int, OptionMut[ULong]](applicationProcess_ID)
}.ensuring { (res: EitherMut[Int, OptionMut[ULong]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + (if (resVal.isDefined) {
                11L
            } else {
                0L
            })
    }
}



@ghost @pure
def Storage_ControlEventReportBlockingConfiguration_applicationProcess_ID_Optional_ACN_Decode_pure(codec: ACN, applicationProcess_ID_exist: Boolean): (ACN, EitherMut[Int, OptionMut[ULong]]) = {
    require(codec.base.bitStream.validate_offset_bits(11L))
    val cpy = snapshot(codec)
    val res = Storage_ControlEventReportBlockingConfiguration_applicationProcess_ID_Optional_ACN_Decode(cpy, applicationProcess_ID_exist)
    (cpy, res)
}



@opaque @inlineOnce
def Storage_ControlEventReportBlocking_TStorage_ControlEventReportBlockingConfiguration_tail_pVal_tail_tail_Decode_loop(codec: ACN, nCount: Int, tail: Vector[ULong], i1: Int): EitherMut[Int, Vector[ULong]] = {
    require((0 <= nCount) && (nCount <= 31))
    require((0 <= i1) && (i1 <= nCount))
    require(tail.size == i1)
    require(codec.base.bitStream.validate_offset_bits((32L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(tail)
            vecRangesEqSlicedLemma(tail, tail, 0, tail.size, 0, i1)
        }
        RightMut[Int, Vector[ULong]](tail)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 32L * (nCount - i1), 32L)
        }
        val tail_arr_i1_ = TEventDefinition_ID_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(32L * (i1 + 1) == 32L * i1 + 32L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 32L * (nCount - i1), 32L)
            check(codec.base.bitStream.validate_offset_bits(32L * (nCount - (i1 + 1))))
        }
        val res = Storage_ControlEventReportBlocking_TStorage_ControlEventReportBlockingConfiguration_tail_pVal_tail_tail_Decode_loop(codec, nCount, tail.append(tail_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(tail, newVec, tail_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(tail.append(tail_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(tail.list, tail_arr_i1_, i1)
                    Vector.listApplyEqVecApply(tail.append(tail_arr_i1_), i1)
                    check(tail_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[ULong]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(tail, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TStorage_ControlEventReportBlockingConfiguration_tail.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def Storage_ControlEventReportBlockingConfiguration_tail_ACN_Decode(codec: ACN, Storage_ControlEventReportBlockingConfiguration_n2: ULong): EitherMut[Int, TStorage_ControlEventReportBlockingConfiguration_tail] = {
    require(codec.base.bitStream.validate_offset_bits(992L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val tail =
        if ((Storage_ControlEventReportBlockingConfiguration_n2 <= ULong.fromRaw(31))) then
            val tail_nCount = Storage_ControlEventReportBlockingConfiguration_n2.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val tail = Storage_ControlEventReportBlocking_TStorage_ControlEventReportBlockingConfiguration_tail_pVal_tail_tail_Decode_loop(codec, tail_nCount, Vector.empty[ULong], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val tail = TStorage_ControlEventReportBlockingConfiguration_tail(tail_nCount, bdg)
                    ghostExpr {
                        tail.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    tail
            }
            tail
        else return LeftMut(ERR_ACN_DECODE_STORAGE_CONTROLEVENTREPORTBLOCKINGCONFIGURATION_TAIL)
    TStorage_ControlEventReportBlockingConfiguration_tail_IsConstraintValid(tail) match {
        case Left(l) =>
            LeftMut[Int, TStorage_ControlEventReportBlockingConfiguration_tail](l)
        case Right(_) =>
            RightMut[Int, TStorage_ControlEventReportBlockingConfiguration_tail](tail)
    }
}.ensuring { (res: EitherMut[Int, TStorage_ControlEventReportBlockingConfiguration_tail]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TStorage_ControlEventReportBlockingConfiguration_tail_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def Storage_ControlEventReportBlockingConfiguration_tail_ACN_Decode_pure(codec: ACN, Storage_ControlEventReportBlockingConfiguration_n2: ULong): (ACN, EitherMut[Int, TStorage_ControlEventReportBlockingConfiguration_tail]) = {
    require(codec.base.bitStream.validate_offset_bits(992L))
    val cpy = snapshot(codec)
    val res = Storage_ControlEventReportBlockingConfiguration_tail_ACN_Decode(cpy, Storage_ControlEventReportBlockingConfiguration_n2)
    (cpy, res)
}

def TStorage_ControlEventReportBlocking_configuration_IsConstraintValid(pVal: TStorage_ControlEventReportBlocking_configuration): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = (pVal.nCount <= 31) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TStorage_ControlEventReportBlockingConfiguration_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TStorage_ControlEventReportBlocking_IsConstraintValid(pVal: TStorage_ControlEventReportBlocking): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TPacketStore_ID_IsConstraintValid(pVal.packetStoreID)
    if ret.isRight then
        ret = TStorage_ControlEventReportBlocking_configuration_IsConstraintValid(pVal.configuration)
    ret
}

def TStorage_ControlEventReportBlocking_configuration_Initialize(): TStorage_ControlEventReportBlocking_configuration = TStorage_ControlEventReportBlocking_configuration(0, Vector.fill(31)(TStorage_ControlEventReportBlockingConfiguration_Initialize()))
def TStorage_ControlEventReportBlocking_Initialize(): TStorage_ControlEventReportBlocking = TStorage_ControlEventReportBlocking(packetStoreID = Vector.fill[UByte](32.toInt+1)(0x0.toRawUByte), configuration = TStorage_ControlEventReportBlocking_configuration_Initialize())

@opaque @inlineOnce 
def TStorage_ControlEventReportBlocking_ACN_Encode(pVal: TStorage_ControlEventReportBlocking, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(32372L))
    var i1: Int = 0
    TStorage_ControlEventReportBlocking_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode packetStoreID */
    TPacketStore_ID_ACN_Encode(pVal.packetStoreID, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 32372L, 224L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 224L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 224L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    val Storage_ControlEventReportBlocking_n1 = ULong.fromRaw(pVal.configuration.nCount)
    if Storage_ControlEventReportBlocking_n1 < ULong.fromRaw(0) || Storage_ControlEventReportBlocking_n1 > ULong.fromRaw(31) then
        return Left(860)
    /* Encode Storage_ControlEventReportBlocking_n1 */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(Storage_ControlEventReportBlocking_n1)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(Storage_ControlEventReportBlocking_n1)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 32148L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 256L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode configuration */
    Storage_ControlEventReportBlocking_configuration_ACN_Encode(codec, pVal, Storage_ControlEventReportBlocking_n1, pVal.configuration) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32372L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = pVal.configuration.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 32372L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def Storage_ControlEventReportBlocking_TStorage_ControlEventReportBlocking_configuration_pVal_configuration_configuration_Encode_loop(codec: ACN, configuration: TStorage_ControlEventReportBlocking_configuration, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= configuration.nCount))
    require((0 <= configuration.nCount) && (configuration.nCount <= configuration.arr.size) && (configuration.arr.size <= 31))
    require(codec.base.bitStream.validate_offset_bits((1036L * (configuration.nCount - i1))))
    decreases(configuration.nCount - i1)
    if (i1 == configuration.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 1036L * (configuration.nCount - i1), 1036L)
        }
        TStorage_ControlEventReportBlockingConfiguration_ACN_Encode(configuration.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(1036L * (i1 + 1) == 1036L * i1 + 1036L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 1036L * (configuration.nCount - i1), 1036L)
            check(codec.base.bitStream.validate_offset_bits(1036L * (configuration.nCount - (i1 + 1))))
        }
        val res = Storage_ControlEventReportBlocking_TStorage_ControlEventReportBlocking_configuration_pVal_configuration_configuration_Encode_loop(codec, configuration, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TStorage_ControlEventReportBlocking_configuration.sizeRange(configuration.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, configuration.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + configuration.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TStorage_ControlEventReportBlocking_configuration.sizeRange(configuration.arr, codecSnap1.base.bitStream.bitIndex, i1, configuration.nCount) == configuration.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TStorage_ControlEventReportBlocking_configuration.sizeRange(configuration.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, configuration.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TStorage_ControlEventReportBlocking_configuration.sizeRange(configuration.arr, codecSnap1.base.bitStream.bitIndex, i1, configuration.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TStorage_ControlEventReportBlocking_configuration.sizeRange(configuration.arr, old(codec).base.bitStream.bitIndex, i1, configuration.nCount)
    }
}



@opaque @inlineOnce
def Storage_ControlEventReportBlocking_configuration_ACN_Encode(codec: ACN, pVal: TStorage_ControlEventReportBlocking, Storage_ControlEventReportBlocking_n1: ULong, configuration: TStorage_ControlEventReportBlocking_configuration): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(32116L))
    @ghost val oldCdc = snapshot(codec)
    TStorage_ControlEventReportBlocking_configuration_IsConstraintValid(configuration) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    Storage_ControlEventReportBlocking_TStorage_ControlEventReportBlocking_configuration_pVal_configuration_configuration_Encode_loop(codec, configuration, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                configuration.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + configuration.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TStorage_ControlEventReportBlocking_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TStorage_ControlEventReportBlocking] =
{
    require(codec.base.bitStream.validate_offset_bits(32372L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode packetStoreID */
    val pVal_packetStoreID = TPacketStore_ID_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 32372L, 224L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 224L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 224L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode Storage_ControlEventReportBlocking_n1 */
    val Storage_ControlEventReportBlocking_n1 = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 32148L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 256L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode configuration */
    val pVal_configuration = Storage_ControlEventReportBlocking_configuration_ACN_Decode(codec, Storage_ControlEventReportBlocking_n1) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32372L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = pVal_configuration.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 32372L)
    }
    val pVal = TStorage_ControlEventReportBlocking(pVal_packetStoreID, pVal_configuration)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }

    TStorage_ControlEventReportBlocking_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TStorage_ControlEventReportBlocking](l)
        case Right(_) => RightMut[ErrorCode, TStorage_ControlEventReportBlocking](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TStorage_ControlEventReportBlocking]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TStorage_ControlEventReportBlocking_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TStorage_ControlEventReportBlocking_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TStorage_ControlEventReportBlocking]) =
{
    require(codec.base.bitStream.validate_offset_bits(32372L))
    val cpy = snapshot(codec)
    val res = TStorage_ControlEventReportBlocking_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def Storage_ControlEventReportBlocking_TStorage_ControlEventReportBlocking_configuration_pVal_configuration_configuration_Decode_loop(codec: ACN, nCount: Int, configuration: Vector[TStorage_ControlEventReportBlockingConfiguration], i1: Int): EitherMut[Int, Vector[TStorage_ControlEventReportBlockingConfiguration]] = {
    require((0 <= nCount) && (nCount <= 31))
    require((0 <= i1) && (i1 <= nCount))
    require(configuration.size == i1)
    require(codec.base.bitStream.validate_offset_bits((1036L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(configuration)
            vecRangesEqSlicedLemma(configuration, configuration, 0, configuration.size, 0, i1)
        }
        RightMut[Int, Vector[TStorage_ControlEventReportBlockingConfiguration]](configuration)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 1036L * (nCount - i1), 1036L)
        }
        val configuration_arr_i1_ = TStorage_ControlEventReportBlockingConfiguration_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(1036L * (i1 + 1) == 1036L * i1 + 1036L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 1036L * (nCount - i1), 1036L)
            check(codec.base.bitStream.validate_offset_bits(1036L * (nCount - (i1 + 1))))
        }
        val res = Storage_ControlEventReportBlocking_TStorage_ControlEventReportBlocking_configuration_pVal_configuration_configuration_Decode_loop(codec, nCount, configuration.append(configuration_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(configuration, newVec, configuration_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(configuration.append(configuration_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(configuration.list, configuration_arr_i1_, i1)
                    Vector.listApplyEqVecApply(configuration.append(configuration_arr_i1_), i1)
                    check(configuration_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TStorage_ControlEventReportBlockingConfiguration]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(configuration, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TStorage_ControlEventReportBlocking_configuration.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def Storage_ControlEventReportBlocking_configuration_ACN_Decode(codec: ACN, Storage_ControlEventReportBlocking_n1: ULong): EitherMut[Int, TStorage_ControlEventReportBlocking_configuration] = {
    require(codec.base.bitStream.validate_offset_bits(32116L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val configuration =
        if ((Storage_ControlEventReportBlocking_n1 <= ULong.fromRaw(31))) then
            val configuration_nCount = Storage_ControlEventReportBlocking_n1.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val configuration = Storage_ControlEventReportBlocking_TStorage_ControlEventReportBlocking_configuration_pVal_configuration_configuration_Decode_loop(codec, configuration_nCount, Vector.empty[TStorage_ControlEventReportBlockingConfiguration], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val configuration = TStorage_ControlEventReportBlocking_configuration(configuration_nCount, bdg)
                    ghostExpr {
                        configuration.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    configuration
            }
            configuration
        else return LeftMut(ERR_ACN_DECODE_STORAGE_CONTROLEVENTREPORTBLOCKING_CONFIGURATION)
    TStorage_ControlEventReportBlocking_configuration_IsConstraintValid(configuration) match {
        case Left(l) =>
            LeftMut[Int, TStorage_ControlEventReportBlocking_configuration](l)
        case Right(_) =>
            RightMut[Int, TStorage_ControlEventReportBlocking_configuration](configuration)
    }
}.ensuring { (res: EitherMut[Int, TStorage_ControlEventReportBlocking_configuration]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TStorage_ControlEventReportBlocking_configuration_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def Storage_ControlEventReportBlocking_configuration_ACN_Decode_pure(codec: ACN, Storage_ControlEventReportBlocking_n1: ULong): (ACN, EitherMut[Int, TStorage_ControlEventReportBlocking_configuration]) = {
    require(codec.base.bitStream.validate_offset_bits(32116L))
    val cpy = snapshot(codec)
    val res = Storage_ControlEventReportBlocking_configuration_ACN_Decode(cpy, Storage_ControlEventReportBlocking_n1)
    (cpy, res)
}