/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TTM_15_13_ReportContent --------------------------------------------*/

case class TTM_15_13_ReportContent (
    oldestStoredPacketTime: TCDS_AbsoluteTime_PFC_2, 
    newestStoredPacketTime: TCDS_AbsoluteTime_PFC_2, 
    currentOpenRetrievalStartTimeTag: TCDS_AbsoluteTime_PFC_2, 
    percentageFilled: TPUSC_UINT32, 
    fromOpenRetrievalStartTimeTagPercentageFilled: TPUSC_UINT32
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775551L))
        val size_0 = this.oldestStoredPacketTime.size(offset)
        val size_1 = this.newestStoredPacketTime.size(offset + size_0)
        val size_2 = this.currentOpenRetrievalStartTimeTag.size(offset + size_0 + size_1)
        val size_3 = 32L
        val size_4 = 32L
        size_0 + size_1 + size_2 + size_3 + size_4
    }.ensuring { (res: Long) => 
        res == 256L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775551L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775551L))
        val size_0_offset = this.oldestStoredPacketTime.size(offset)
        val size_0_otherOffset = this.oldestStoredPacketTime.size(otherOffset)
        this.oldestStoredPacketTime.sizeLemmaAnyOffset(offset, otherOffset)
        val size_1_offset = this.newestStoredPacketTime.size(offset + size_0_offset)
        val size_1_otherOffset = this.newestStoredPacketTime.size(otherOffset + size_0_otherOffset)
        this.newestStoredPacketTime.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = this.currentOpenRetrievalStartTimeTag.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.currentOpenRetrievalStartTimeTag.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.currentOpenRetrievalStartTimeTag.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        val size_3_offset = 32L
        val size_3_otherOffset = 32L
        val size_4_offset = 32L
        val size_4_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775551L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775551L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = this.oldestStoredPacketTime.size(offset)
        val size_0_otherOffset = this.oldestStoredPacketTime.size(otherOffset)
        this.oldestStoredPacketTime.sizeLemmaNextByte(offset, otherOffset)
        val size_1_offset = this.newestStoredPacketTime.size(offset + size_0_offset)
        val size_1_otherOffset = this.newestStoredPacketTime.size(otherOffset + size_0_otherOffset)
        this.newestStoredPacketTime.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = this.currentOpenRetrievalStartTimeTag.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.currentOpenRetrievalStartTimeTag.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.currentOpenRetrievalStartTimeTag.sizeLemmaNextByte(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        val size_3_offset = 32L
        val size_3_otherOffset = 32L
        val size_4_offset = 32L
        val size_4_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775551L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775551L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = this.oldestStoredPacketTime.size(offset)
        val size_0_otherOffset = this.oldestStoredPacketTime.size(otherOffset)
        this.oldestStoredPacketTime.sizeLemmaNextWord(offset, otherOffset)
        val size_1_offset = this.newestStoredPacketTime.size(offset + size_0_offset)
        val size_1_otherOffset = this.newestStoredPacketTime.size(otherOffset + size_0_otherOffset)
        this.newestStoredPacketTime.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = this.currentOpenRetrievalStartTimeTag.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.currentOpenRetrievalStartTimeTag.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.currentOpenRetrievalStartTimeTag.sizeLemmaNextWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        val size_3_offset = 32L
        val size_3_otherOffset = 32L
        val size_4_offset = 32L
        val size_4_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775551L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775551L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = this.oldestStoredPacketTime.size(offset)
        val size_0_otherOffset = this.oldestStoredPacketTime.size(otherOffset)
        this.oldestStoredPacketTime.sizeLemmaNextDWord(offset, otherOffset)
        val size_1_offset = this.newestStoredPacketTime.size(offset + size_0_offset)
        val size_1_otherOffset = this.newestStoredPacketTime.size(otherOffset + size_0_otherOffset)
        this.newestStoredPacketTime.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = this.currentOpenRetrievalStartTimeTag.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.currentOpenRetrievalStartTimeTag.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.currentOpenRetrievalStartTimeTag.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        val size_3_offset = 32L
        val size_3_otherOffset = 32L
        val size_4_offset = 32L
        val size_4_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TM_15_13_REPORTCONTENT: Int = 514 /* */
@inline @cCode.inline val ERR_TM_15_13_REPORTCONTENT_OLDESTSTOREDPACKETTIME_2_2: Int = 429 /* */
@inline @cCode.inline val ERR_TM_15_13_REPORTCONTENT_NEWESTSTOREDPACKETTIME_2_2: Int = 459 /* */
@inline @cCode.inline val ERR_TM_15_13_REPORTCONTENT_CURRENTOPENRETRIEVALSTARTTIMETAG_2_2: Int = 489 /* */
@inline @cCode.inline val ERR_TM_15_13_REPORTCONTENT_PERCENTAGEFILLED_2: Int = 499 /* */
@inline @cCode.inline val ERR_TM_15_13_REPORTCONTENT_FROMOPENRETRIEVALSTARTTIMETAGPERCENTAGEFILLED_2: Int = 509 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_TM_15_13_REPORTCONTENT: Int = 517 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_15_13_REPORTCONTENT_OLDESTSTOREDPACKETTIME_2_2: Int = 432 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_15_13_REPORTCONTENT_NEWESTSTOREDPACKETTIME_2_2: Int = 462 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_15_13_REPORTCONTENT_CURRENTOPENRETRIEVALSTARTTIMETAG_2_2: Int = 492 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_15_13_REPORTCONTENT_PERCENTAGEFILLED_2: Int = 502 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_15_13_REPORTCONTENT_FROMOPENRETRIEVALSTARTTIMETAGPERCENTAGEFILLED_2: Int = 512 /*  */
@inline @cCode.inline val TTM_15_13_ReportContent_REQUIRED_BYTES_FOR_ACN_ENCODING = 32
@inline @cCode.inline val TTM_15_13_ReportContent_REQUIRED_BITS_FOR_ACN_ENCODING = 256

@inline @cCode.inline val ERR_ACN_DECODE_TM_15_13_REPORTCONTENT: Int = 518 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_15_13_REPORTCONTENT_OLDESTSTOREDPACKETTIME_2_2: Int = 433 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_15_13_REPORTCONTENT_NEWESTSTOREDPACKETTIME_2_2: Int = 463 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_15_13_REPORTCONTENT_CURRENTOPENRETRIEVALSTARTTIMETAG_2_2: Int = 493 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_15_13_REPORTCONTENT_PERCENTAGEFILLED_2: Int = 503 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_15_13_REPORTCONTENT_FROMOPENRETRIEVALSTARTTIMETAGPERCENTAGEFILLED_2: Int = 513 /*  */
/*-- TTM_15_13_PacketStoreContentSummaryReport --------------------------------------------*/


case class TTM_15_13_PacketStoreContentSummaryReport_reportContents (nCount: Int, arr: Vector[TTM_15_13_ReportContent])
{
    require(this.arr.size <= 32 && 1 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854767615L))
        TTM_15_13_PacketStoreContentSummaryReport_reportContents.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 8192L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767615L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767615L))
        TTM_15_13_PacketStoreContentSummaryReport_reportContents.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767615L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767615L))
        require((offset % 8L) == (otherOffset % 8L))
        TTM_15_13_PacketStoreContentSummaryReport_reportContents.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767615L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767615L))
        require((offset % 16L) == (otherOffset % 16L))
        TTM_15_13_PacketStoreContentSummaryReport_reportContents.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767615L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767615L))
        require((offset % 32L) == (otherOffset % 32L))
        TTM_15_13_PacketStoreContentSummaryReport_reportContents.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TTM_15_13_PacketStoreContentSummaryReport_reportContents {
    def sizeRange(ls: Vector[TTM_15_13_ReportContent], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 32))
        require((0L <= offset) && (offset <= 9223372036854775807L - 256L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(elemSize == 256L)
            elemSize + TTM_15_13_PacketStoreContentSummaryReport_reportContents.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 256L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TTM_15_13_ReportContent], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 32))
        require((0L <= offset) && (offset <= 9223372036854775807L - 256L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 256L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 256L)
            assert(elemSizeOtherOff == 256L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TTM_15_13_PacketStoreContentSummaryReport_reportContents.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTM_15_13_PacketStoreContentSummaryReport_reportContents.sizeRange(ls, offset, from, to) == TTM_15_13_PacketStoreContentSummaryReport_reportContents.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TTM_15_13_ReportContent], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 32))
        require((0L <= offset) && (offset <= 9223372036854775807L - 256L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 256L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 256L)
            assert(elemSizeOtherOff == 256L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TTM_15_13_PacketStoreContentSummaryReport_reportContents.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTM_15_13_PacketStoreContentSummaryReport_reportContents.sizeRange(ls, offset, from, to) == TTM_15_13_PacketStoreContentSummaryReport_reportContents.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TTM_15_13_ReportContent], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 32))
        require((0L <= offset) && (offset <= 9223372036854775807L - 256L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 256L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 256L)
            assert(elemSizeOtherOff == 256L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TTM_15_13_PacketStoreContentSummaryReport_reportContents.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTM_15_13_PacketStoreContentSummaryReport_reportContents.sizeRange(ls, offset, from, to) == TTM_15_13_PacketStoreContentSummaryReport_reportContents.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TTM_15_13_ReportContent], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 32))
        require((0L <= offset) && (offset <= 9223372036854775807L - 256L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 256L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 256L)
            assert(elemSizeOtherOff == 256L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TTM_15_13_PacketStoreContentSummaryReport_reportContents.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTM_15_13_PacketStoreContentSummaryReport_reportContents.sizeRange(ls, offset, from, to) == TTM_15_13_PacketStoreContentSummaryReport_reportContents.sizeRange(ls, otherOffset, from, to)
    }
}

case class TTM_15_13_PacketStoreContentSummaryReport (
    packetStore_ID: TPacketStore_ID, 
    reportContents: TTM_15_13_PacketStoreContentSummaryReport_reportContents
) {
    require(33 == this.packetStore_ID.length && this.packetStore_ID.indexOfOrLength(UByte.fromRaw(0.toByte)) <= 32)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854767359L))
        val size_0 = 32L
        val size_1 = 224L
        val size_2 = this.reportContents.size(offset + size_0 + size_1)
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 8448L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767359L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767359L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 224L
        val size_1_otherOffset = 224L
        val size_2_offset = this.reportContents.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.reportContents.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.reportContents.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767359L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767359L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 224L
        val size_1_otherOffset = 224L
        val size_2_offset = this.reportContents.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.reportContents.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.reportContents.sizeLemmaNextByte(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767359L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767359L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 224L
        val size_1_otherOffset = 224L
        val size_2_offset = this.reportContents.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.reportContents.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.reportContents.sizeLemmaNextWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767359L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767359L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 224L
        val size_1_otherOffset = 224L
        val size_2_offset = this.reportContents.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.reportContents.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.reportContents.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TM_15_13_PACKETSTORECONTENTSUMMARYREPORT_REPORTCONTENTS: Int = 393 /*(SIZE(1 .. maxReportsContentsSize)) */
@inline @cCode.inline val ERR_TM_15_13_PACKETSTORECONTENTSUMMARYREPORT_REPORTCONTENTS_ELM_2: Int = 388 /* */

@inline @cCode.inline val ERR_TM_15_13_PACKETSTORECONTENTSUMMARYREPORT: Int = 398 /* */
@inline @cCode.inline val ERR_TM_15_13_PACKETSTORECONTENTSUMMARYREPORT_PACKETSTORE_ID_2: Int = 268 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TM_15_13_PACKETSTORECONTENTSUMMARYREPORT: Int = 401 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_15_13_PACKETSTORECONTENTSUMMARYREPORT_N_UNINITIALIZED: Int = 402 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_15_13_PACKETSTORECONTENTSUMMARYREPORT_N: Int = 261 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_15_13_PACKETSTORECONTENTSUMMARYREPORT_PACKETSTORE_ID_2: Int = 271 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_15_13_PACKETSTORECONTENTSUMMARYREPORT_REPORTCONTENTS: Int = 396 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_15_13_PACKETSTORECONTENTSUMMARYREPORT_REPORTCONTENTS_ELM_2: Int = 391 /*  */
@inline @cCode.inline val TTM_15_13_PacketStoreContentSummaryReport_REQUIRED_BYTES_FOR_ACN_ENCODING = 1056
@inline @cCode.inline val TTM_15_13_PacketStoreContentSummaryReport_REQUIRED_BITS_FOR_ACN_ENCODING = 8448

@inline @cCode.inline val ERR_ACN_DECODE_TM_15_13_PACKETSTORECONTENTSUMMARYREPORT: Int = 403 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_15_13_PACKETSTORECONTENTSUMMARYREPORT_N: Int = 262 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_15_13_PACKETSTORECONTENTSUMMARYREPORT_PACKETSTORE_ID_2: Int = 272 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_15_13_PACKETSTORECONTENTSUMMARYREPORT_REPORTCONTENTS: Int = 397 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_15_13_PACKETSTORECONTENTSUMMARYREPORT_REPORTCONTENTS_ELM_2: Int = 392 /*  */

// @inline @cCode.inline val maxReportsContentsSize: Int = 32 // defined in body

