/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlItem --------------------------------------------*/


case class TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlItem_tail (nCount: Int, arr: Vector[THousekeepingParameterReportStructure_ID])
{
    require(this.arr.size <= 31 && 0 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854774815L))
        TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlItem_tail.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 992L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774815L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774815L))
        TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlItem_tail.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774815L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774815L))
        require((offset % 8L) == (otherOffset % 8L))
        TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlItem_tail.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774815L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774815L))
        require((offset % 16L) == (otherOffset % 16L))
        TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlItem_tail.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774815L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774815L))
        require((offset % 32L) == (otherOffset % 32L))
        TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlItem_tail.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlItem_tail {
    def sizeRange(ls: Vector[ULong], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = 32L
            assert(elemSize == 32L)
            elemSize + TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlItem_tail.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 32L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[ULong], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 32L
            val elemSizeOtherOff = 32L
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlItem_tail.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlItem_tail.sizeRange(ls, offset, from, to) == TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlItem_tail.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[ULong], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 32L
            val elemSizeOtherOff = 32L
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlItem_tail.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlItem_tail.sizeRange(ls, offset, from, to) == TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlItem_tail.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[ULong], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 32L
            val elemSizeOtherOff = 32L
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlItem_tail.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlItem_tail.sizeRange(ls, offset, from, to) == TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlItem_tail.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[ULong], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 32L
            val elemSizeOtherOff = 32L
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlItem_tail.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlItem_tail.sizeRange(ls, offset, from, to) == TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlItem_tail.sizeRange(ls, otherOffset, from, to)
    }
}

case class TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlItem (
    applicationProcess_ID: OptionMut[TApplicationProcess_ID], 
    tail: TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlItem_tail
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854774771L))
        val size_0 = 1L
        val size_1 = this.applicationProcess_ID match {
            case SomeMut(v) =>
                11L
            case NoneMut() =>
                0L
        }
        val size_2 = 32L
        val size_3 = this.tail.size(offset + size_0 + size_1 + size_2)
        size_0 + size_1 + size_2 + size_3
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 1036L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774771L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774771L))
        val size_0_offset = 1L
        val size_0_otherOffset = 1L
        val size_1_offset = this.applicationProcess_ID match {
            case SomeMut(v) =>
                11L
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.applicationProcess_ID match {
            case SomeMut(v) =>
                11L
            case NoneMut() =>
                0L
        }
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = this.tail.size(offset + size_0_offset + size_1_offset + size_2_offset)
        val size_3_otherOffset = this.tail.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        this.tail.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset + size_2_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774771L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774771L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 1L
        val size_0_otherOffset = 1L
        val size_1_offset = this.applicationProcess_ID match {
            case SomeMut(v) =>
                11L
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.applicationProcess_ID match {
            case SomeMut(v) =>
                11L
            case NoneMut() =>
                0L
        }
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = this.tail.size(offset + size_0_offset + size_1_offset + size_2_offset)
        val size_3_otherOffset = this.tail.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        this.tail.sizeLemmaNextByte(offset + size_0_offset + size_1_offset + size_2_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774771L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774771L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 1L
        val size_0_otherOffset = 1L
        val size_1_offset = this.applicationProcess_ID match {
            case SomeMut(v) =>
                11L
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.applicationProcess_ID match {
            case SomeMut(v) =>
                11L
            case NoneMut() =>
                0L
        }
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = this.tail.size(offset + size_0_offset + size_1_offset + size_2_offset)
        val size_3_otherOffset = this.tail.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        this.tail.sizeLemmaNextWord(offset + size_0_offset + size_1_offset + size_2_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774771L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774771L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 1L
        val size_0_otherOffset = 1L
        val size_1_offset = this.applicationProcess_ID match {
            case SomeMut(v) =>
                11L
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.applicationProcess_ID match {
            case SomeMut(v) =>
                11L
            case NoneMut() =>
                0L
        }
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = this.tail.size(offset + size_0_offset + size_1_offset + size_2_offset)
        val size_3_otherOffset = this.tail.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        this.tail.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset + size_2_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_15_30_DELETESTRUCTUREIDENTIFIERSFROMTHEHOUSEKEEPINGPARAMETERREPORTSTORAGE_CONTROLITEM_TAIL: Int = 1537 /*(SIZE(0 .. maxTailSize)) */
@inline @cCode.inline val ERR_TC_15_30_DELETESTRUCTUREIDENTIFIERSFROMTHEHOUSEKEEPINGPARAMETERREPORTSTORAGE_CONTROLITEM_TAIL_ELM_2: Int = 1532 /* */

@inline @cCode.inline val ERR_TC_15_30_DELETESTRUCTUREIDENTIFIERSFROMTHEHOUSEKEEPINGPARAMETERREPORTSTORAGE_CONTROLITEM: Int = 1542 /* */
@inline @cCode.inline val ERR_TC_15_30_DELETESTRUCTUREIDENTIFIERSFROMTHEHOUSEKEEPINGPARAMETERREPORTSTORAGE_CONTROLITEM_APPLICATIONPROCESS_ID_2: Int = 1520 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_15_30_DELETESTRUCTUREIDENTIFIERSFROMTHEHOUSEKEEPINGPARAMETERREPORTSTORAGE_CONTROLITEM: Int = 1545 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_15_30_DELETESTRUCTUREIDENTIFIERSFROMTHEHOUSEKEEPINGPARAMETERREPORTSTORAGE_CONTROLITEM_APPLICATIONPROCESS_ID_2: Int = 1523 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_15_30_DELETESTRUCTUREIDENTIFIERSFROMTHEHOUSEKEEPINGPARAMETERREPORTSTORAGE_CONTROLITEM_N2_UNINITIALIZED: Int = 1546 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_15_30_DELETESTRUCTUREIDENTIFIERSFROMTHEHOUSEKEEPINGPARAMETERREPORTSTORAGE_CONTROLITEM_N2: Int = 1525 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_15_30_DELETESTRUCTUREIDENTIFIERSFROMTHEHOUSEKEEPINGPARAMETERREPORTSTORAGE_CONTROLITEM_TAIL: Int = 1540 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_15_30_DELETESTRUCTUREIDENTIFIERSFROMTHEHOUSEKEEPINGPARAMETERREPORTSTORAGE_CONTROLITEM_TAIL_ELM_2: Int = 1535 /*  */
@inline @cCode.inline val TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlItem_REQUIRED_BYTES_FOR_ACN_ENCODING = 130
@inline @cCode.inline val TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlItem_REQUIRED_BITS_FOR_ACN_ENCODING = 1036

@inline @cCode.inline val ERR_ACN_DECODE_TC_15_30_DELETESTRUCTUREIDENTIFIERSFROMTHEHOUSEKEEPINGPARAMETERREPORTSTORAGE_CONTROLITEM: Int = 1547 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_15_30_DELETESTRUCTUREIDENTIFIERSFROMTHEHOUSEKEEPINGPARAMETERREPORTSTORAGE_CONTROLITEM_APPLICATIONPROCESS_ID_2: Int = 1524 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_15_30_DELETESTRUCTUREIDENTIFIERSFROMTHEHOUSEKEEPINGPARAMETERREPORTSTORAGE_CONTROLITEM_N2: Int = 1526 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_15_30_DELETESTRUCTUREIDENTIFIERSFROMTHEHOUSEKEEPINGPARAMETERREPORTSTORAGE_CONTROLITEM_TAIL: Int = 1541 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_15_30_DELETESTRUCTUREIDENTIFIERSFROMTHEHOUSEKEEPINGPARAMETERREPORTSTORAGE_CONTROLITEM_TAIL_ELM_2: Int = 1536 /*  */
/*-- TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlConfiguration --------------------------------------------*/


case class TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlConfiguration_configuration (nCount: Int, arr: Vector[TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlItem])
{
    require(this.arr.size <= 31 && 0 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854743691L))
        TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlConfiguration_configuration.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 32116L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743691L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743691L))
        TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlConfiguration_configuration.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743691L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743691L))
        require((offset % 8L) == (otherOffset % 8L))
        TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlConfiguration_configuration.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743691L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743691L))
        require((offset % 16L) == (otherOffset % 16L))
        TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlConfiguration_configuration.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743691L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743691L))
        require((offset % 32L) == (otherOffset % 32L))
        TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlConfiguration_configuration.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlConfiguration_configuration {
    def sizeRange(ls: Vector[TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlItem], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 1036L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(0L <= elemSize && elemSize <= 1036L)
            elemSize + TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlConfiguration_configuration.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 1036L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlItem], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 1036L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 1036L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 1036L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 1036L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlConfiguration_configuration.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlConfiguration_configuration.sizeRange(ls, offset, from, to) == TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlConfiguration_configuration.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlItem], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 1036L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 1036L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 1036L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 1036L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlConfiguration_configuration.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlConfiguration_configuration.sizeRange(ls, offset, from, to) == TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlConfiguration_configuration.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlItem], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 1036L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 1036L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 1036L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 1036L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlConfiguration_configuration.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlConfiguration_configuration.sizeRange(ls, offset, from, to) == TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlConfiguration_configuration.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlItem], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 1036L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 1036L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 1036L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 1036L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlConfiguration_configuration.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlConfiguration_configuration.sizeRange(ls, offset, from, to) == TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlConfiguration_configuration.sizeRange(ls, otherOffset, from, to)
    }
}

case class TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlConfiguration (
    packetStoreID: TPacketStore_ID, 
    configuration: TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlConfiguration_configuration
) {
    require(33 == this.packetStoreID.length && this.packetStoreID.indexOfOrLength(UByte.fromRaw(0.toByte)) <= 32)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854743435L))
        val size_0 = (224L)
        val size_1 = 32L
        val size_2 = this.configuration.size(offset + size_0 + size_1)
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 32372L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743435L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743435L))
        val size_0_offset = (224L)
        val size_0_otherOffset = 224L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.configuration.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.configuration.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.configuration.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743435L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743435L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = (224L)
        val size_0_otherOffset = 224L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.configuration.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.configuration.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.configuration.sizeLemmaNextByte(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743435L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743435L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = (224L)
        val size_0_otherOffset = 224L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.configuration.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.configuration.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.configuration.sizeLemmaNextWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743435L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743435L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = (224L)
        val size_0_otherOffset = 224L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.configuration.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.configuration.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.configuration.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_15_30_DELETESTRUCTUREIDENTIFIERSFROMTHEHOUSEKEEPINGPARAMETERREPORTSTORAGE_CONTROLCONFIGURATION_CONFIGURATION: Int = 1504 /*(SIZE(0 .. maxConfigurationSize)) */
@inline @cCode.inline val ERR_TC_15_30_DELETESTRUCTUREIDENTIFIERSFROMTHEHOUSEKEEPINGPARAMETERREPORTSTORAGE_CONTROLCONFIGURATION_CONFIGURATION_ELM_2: Int = 1499 /* */

@inline @cCode.inline val ERR_TC_15_30_DELETESTRUCTUREIDENTIFIERSFROMTHEHOUSEKEEPINGPARAMETERREPORTSTORAGE_CONTROLCONFIGURATION: Int = 1509 /* */
@inline @cCode.inline val ERR_TC_15_30_DELETESTRUCTUREIDENTIFIERSFROMTHEHOUSEKEEPINGPARAMETERREPORTSTORAGE_CONTROLCONFIGURATION_PACKETSTOREID_2: Int = 1460 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_15_30_DELETESTRUCTUREIDENTIFIERSFROMTHEHOUSEKEEPINGPARAMETERREPORTSTORAGE_CONTROLCONFIGURATION: Int = 1512 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_15_30_DELETESTRUCTUREIDENTIFIERSFROMTHEHOUSEKEEPINGPARAMETERREPORTSTORAGE_CONTROLCONFIGURATION_PACKETSTOREID_2: Int = 1463 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_15_30_DELETESTRUCTUREIDENTIFIERSFROMTHEHOUSEKEEPINGPARAMETERREPORTSTORAGE_CONTROLCONFIGURATION_N1_UNINITIALIZED: Int = 1513 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_15_30_DELETESTRUCTUREIDENTIFIERSFROMTHEHOUSEKEEPINGPARAMETERREPORTSTORAGE_CONTROLCONFIGURATION_N1: Int = 1465 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_15_30_DELETESTRUCTUREIDENTIFIERSFROMTHEHOUSEKEEPINGPARAMETERREPORTSTORAGE_CONTROLCONFIGURATION_CONFIGURATION: Int = 1507 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_15_30_DELETESTRUCTUREIDENTIFIERSFROMTHEHOUSEKEEPINGPARAMETERREPORTSTORAGE_CONTROLCONFIGURATION_CONFIGURATION_ELM_2: Int = 1502 /*  */
@inline @cCode.inline val TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlConfiguration_REQUIRED_BYTES_FOR_ACN_ENCODING = 4047
@inline @cCode.inline val TTC_15_30_DeleteStructureIdentifiersFromTheHousekeepingParameterReportStorage_ControlConfiguration_REQUIRED_BITS_FOR_ACN_ENCODING = 32372

@inline @cCode.inline val ERR_ACN_DECODE_TC_15_30_DELETESTRUCTUREIDENTIFIERSFROMTHEHOUSEKEEPINGPARAMETERREPORTSTORAGE_CONTROLCONFIGURATION: Int = 1514 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_15_30_DELETESTRUCTUREIDENTIFIERSFROMTHEHOUSEKEEPINGPARAMETERREPORTSTORAGE_CONTROLCONFIGURATION_PACKETSTOREID_2: Int = 1464 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_15_30_DELETESTRUCTUREIDENTIFIERSFROMTHEHOUSEKEEPINGPARAMETERREPORTSTORAGE_CONTROLCONFIGURATION_N1: Int = 1466 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_15_30_DELETESTRUCTUREIDENTIFIERSFROMTHEHOUSEKEEPINGPARAMETERREPORTSTORAGE_CONTROLCONFIGURATION_CONFIGURATION: Int = 1508 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_15_30_DELETESTRUCTUREIDENTIFIERSFROMTHEHOUSEKEEPINGPARAMETERREPORTSTORAGE_CONTROLCONFIGURATION_CONFIGURATION_ELM_2: Int = 1503 /*  */


