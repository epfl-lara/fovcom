/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

val maxPacketStoreStatusReportsSize: Int = 32 // variables:188

def TTM_15_19_PacketStoreStatusReportItem_IsConstraintValid(pVal: TTM_15_19_PacketStoreStatusReportItem): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TPacketStore_ID_IsConstraintValid(pVal.packetStore)
    if ret.isRight then
        ret = TPacketStoreStatus_IsConstraintValid(pVal.packetStoreStatus)
        if ret.isRight then
            ret = TPacketStoreOpenRetrievalStatus_IsConstraintValid(pVal.packetStoreOpenRetrievalStatus)
            if ret.isRight then
                pVal.packetStoreBy_Time_Range_Retrieval_Status match
                    case SomeMut(packetStoreBy_Time_Range_Retrieval_Status) =>
                        ret = TPacketStoreTimeRangeRetrievalStatus_IsConstraintValid(packetStoreBy_Time_Range_Retrieval_Status)
                    case NoneMut() =>
    ret
}

def TTM_15_19_PacketStoreStatusReportItem_Initialize(): TTM_15_19_PacketStoreStatusReportItem = TTM_15_19_PacketStoreStatusReportItem(packetStore = Vector.fill[UByte](32.toInt+1)(0x0.toRawUByte), packetStoreStatus = TPacketStoreStatus.TPacketStoreStatus_val0, packetStoreOpenRetrievalStatus = TPacketStoreOpenRetrievalStatus.Tsuspended, packetStoreBy_Time_Range_Retrieval_Status = SomeMut(TPacketStoreTimeRangeRetrievalStatus.Tdisabled))

@opaque @inlineOnce 
def TTM_15_19_PacketStoreStatusReportItem_ACN_Encode(pVal: TTM_15_19_PacketStoreStatusReportItem, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(228L))
    TTM_15_19_PacketStoreStatusReportItem_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    codec.base.bitStream.appendBit(pVal.packetStoreBy_Time_Range_Retrieval_Status.isDefined)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 228L, 1L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 1L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 1L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode packetStore */
    TPacketStore_ID_ACN_Encode(pVal.packetStore, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 227L, 224L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 225L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 224L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode packetStoreStatus */
    TPacketStoreStatus_ACN_Encode(pVal.packetStoreStatus, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_3.base.bitStream, codec.base.bitStream, 3L, 1L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 226L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = 1L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    @ghost val codec_0_4 = snapshot(codec)
    /* Encode packetStoreOpenRetrievalStatus */
    TPacketStoreOpenRetrievalStatus_ACN_Encode(pVal.packetStoreOpenRetrievalStatus, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_4.base.bitStream, codec.base.bitStream, 2L, 1L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 227L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_3 = 1L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3)
    }
    @ghost val codec_0_5 = snapshot(codec)
    TM_15_19_PacketStoreStatusReportItem_packetStoreBy_Time_Range_Retrieval_Status_Optional_ACN_Encode(codec, pVal, pVal.packetStoreBy_Time_Range_Retrieval_Status) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 228L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_4 = pVal.packetStoreBy_Time_Range_Retrieval_Status match {
        case SomeMut(v) =>
            1L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3 + size_4)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 228L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2 + size_3 + size_4)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TM_15_19_PacketStoreStatusReportItem_packetStoreBy_Time_Range_Retrieval_Status_Optional_ACN_Encode(codec: ACN, pVal: TTM_15_19_PacketStoreStatusReportItem, packetStoreBy_Time_Range_Retrieval_Status: OptionMut[TPacketStoreTimeRangeRetrievalStatus]): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(1L))
    @ghost val oldCdc = snapshot(codec)
    /* Encode packetStoreBy_Time_Range_Retrieval_Status */
    packetStoreBy_Time_Range_Retrieval_Status match
        case SomeMut(packetStoreBy_Time_Range_Retrieval_Status) =>
            TPacketStoreTimeRangeRetrievalStatus_ACN_Encode(packetStoreBy_Time_Range_Retrieval_Status, codec, false) match // uper:6
                case Right(_) =>
                case Left(err) => return Left(err)
        case NoneMut() =>
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + (if (packetStoreBy_Time_Range_Retrieval_Status.isDefined) {
                1L
            } else {
                0L
            })
    }
}



@opaque @inlineOnce 
def TTM_15_19_PacketStoreStatusReportItem_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTM_15_19_PacketStoreStatusReportItem] =
{
    require(codec.base.bitStream.validate_offset_bits(228L))
    var packetStoreBy_Time_Range_Retrieval_Status_exist: Boolean = false

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    packetStoreBy_Time_Range_Retrieval_Status_exist = codec.base.bitStream.readBit()
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 228L, 1L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 1L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 1L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode packetStore */
    val pVal_packetStore = TPacketStore_ID_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 227L, 224L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 225L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 224L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode packetStoreStatus */
    val pVal_packetStoreStatus = TPacketStoreStatus_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_3.base.bitStream, codec.base.bitStream, 3L, 1L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 226L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = 1L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    @ghost val codec_0_4 = snapshot(codec)
    /* Decode packetStoreOpenRetrievalStatus */
    val pVal_packetStoreOpenRetrievalStatus = TPacketStoreOpenRetrievalStatus_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_4.base.bitStream, codec.base.bitStream, 2L, 1L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 227L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_3 = 1L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3)
    }
    @ghost val codec_0_5 = snapshot(codec)
    val pVal_packetStoreBy_Time_Range_Retrieval_Status = TM_15_19_PacketStoreStatusReportItem_packetStoreBy_Time_Range_Retrieval_Status_Optional_ACN_Decode(codec, packetStoreBy_Time_Range_Retrieval_Status_exist) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 228L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_4 = pVal_packetStoreBy_Time_Range_Retrieval_Status match {
        case SomeMut(v) =>
            1L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3 + size_4)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 228L)
    }
    val pVal = TTM_15_19_PacketStoreStatusReportItem(pVal_packetStore, pVal_packetStoreStatus, pVal_packetStoreOpenRetrievalStatus, pVal_packetStoreBy_Time_Range_Retrieval_Status)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2 + size_3 + size_4)
    }

    TTM_15_19_PacketStoreStatusReportItem_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTM_15_19_PacketStoreStatusReportItem](l)
        case Right(_) => RightMut[ErrorCode, TTM_15_19_PacketStoreStatusReportItem](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTM_15_19_PacketStoreStatusReportItem]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_15_19_PacketStoreStatusReportItem_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTM_15_19_PacketStoreStatusReportItem_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTM_15_19_PacketStoreStatusReportItem]) =
{
    require(codec.base.bitStream.validate_offset_bits(228L))
    val cpy = snapshot(codec)
    val res = TTM_15_19_PacketStoreStatusReportItem_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def TM_15_19_PacketStoreStatusReportItem_packetStoreBy_Time_Range_Retrieval_Status_Optional_ACN_Decode(codec: ACN, packetStoreBy_Time_Range_Retrieval_Status_exist: Boolean): EitherMut[Int, OptionMut[TPacketStoreTimeRangeRetrievalStatus]] = {
    require(codec.base.bitStream.validate_offset_bits(1L))
    @ghost val oldCdc = snapshot(codec)
    /* Decode packetStoreBy_Time_Range_Retrieval_Status */
    val packetStoreBy_Time_Range_Retrieval_Status: OptionMut[TPacketStoreTimeRangeRetrievalStatus] =
        if packetStoreBy_Time_Range_Retrieval_Status_exist then
            val pVal_packetStoreBy_Time_Range_Retrieval_Status = TPacketStoreTimeRangeRetrievalStatus_ACN_Decode(codec) match // uper:13
                case RightMut(decData) => decData
                case LeftMut(err) => return LeftMut(err)
            SomeMut(pVal_packetStoreBy_Time_Range_Retrieval_Status)
        else NoneMut[TPacketStoreTimeRangeRetrievalStatus]()
    RightMut[Int, OptionMut[TPacketStoreTimeRangeRetrievalStatus]](packetStoreBy_Time_Range_Retrieval_Status)
}.ensuring { (res: EitherMut[Int, OptionMut[TPacketStoreTimeRangeRetrievalStatus]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + (if (resVal.isDefined) {
                1L
            } else {
                0L
            })
    }
}



@ghost @pure
def TM_15_19_PacketStoreStatusReportItem_packetStoreBy_Time_Range_Retrieval_Status_Optional_ACN_Decode_pure(codec: ACN, packetStoreBy_Time_Range_Retrieval_Status_exist: Boolean): (ACN, EitherMut[Int, OptionMut[TPacketStoreTimeRangeRetrievalStatus]]) = {
    require(codec.base.bitStream.validate_offset_bits(1L))
    val cpy = snapshot(codec)
    val res = TM_15_19_PacketStoreStatusReportItem_packetStoreBy_Time_Range_Retrieval_Status_Optional_ACN_Decode(cpy, packetStoreBy_Time_Range_Retrieval_Status_exist)
    (cpy, res)
}



def TTM_15_19_PacketStoreStatusReport_packetStoreStatusReports_IsConstraintValid(pVal: TTM_15_19_PacketStoreStatusReport_packetStoreStatusReports): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = ((1 <= pVal.nCount) && (pVal.nCount <= 32)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TTM_15_19_PacketStoreStatusReportItem_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TTM_15_19_PacketStoreStatusReport_IsConstraintValid(pVal: TTM_15_19_PacketStoreStatusReport): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TTM_15_19_PacketStoreStatusReport_packetStoreStatusReports_IsConstraintValid(pVal.packetStoreStatusReports)
    ret
}

def TTM_15_19_PacketStoreStatusReport_packetStoreStatusReports_Initialize(): TTM_15_19_PacketStoreStatusReport_packetStoreStatusReports = TTM_15_19_PacketStoreStatusReport_packetStoreStatusReports(1, Vector.fill(32)(TTM_15_19_PacketStoreStatusReportItem_Initialize()))
def TTM_15_19_PacketStoreStatusReport_Initialize(): TTM_15_19_PacketStoreStatusReport = TTM_15_19_PacketStoreStatusReport(packetStoreStatusReports = TTM_15_19_PacketStoreStatusReport_packetStoreStatusReports_Initialize())

@opaque @inlineOnce 
def TTM_15_19_PacketStoreStatusReport_ACN_Encode(pVal: TTM_15_19_PacketStoreStatusReport, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(7328L))
    var i1: Int = 0
    TTM_15_19_PacketStoreStatusReport_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val TM_15_19_PacketStoreStatusReport_n = ULong.fromRaw(pVal.packetStoreStatusReports.nCount)
    if TM_15_19_PacketStoreStatusReport_n < ULong.fromRaw(1) || TM_15_19_PacketStoreStatusReport_n > ULong.fromRaw(32) then
        return Left(860)
    /* Encode TM_15_19_PacketStoreStatusReport_n */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(TM_15_19_PacketStoreStatusReport_n)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(TM_15_19_PacketStoreStatusReport_n)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 7328L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode packetStoreStatusReports */
    TM_15_19_PacketStoreStatusReport_packetStoreStatusReports_ACN_Encode(codec, pVal, TM_15_19_PacketStoreStatusReport_n, pVal.packetStoreStatusReports) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 7328L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.packetStoreStatusReports.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 7328L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def PUS_15_19_TTM_15_19_PacketStoreStatusReport_packetStoreStatusReports_pVal_packetStoreStatusReports_packetStoreStatusReports_Encode_loop(codec: ACN, packetStoreStatusReports: TTM_15_19_PacketStoreStatusReport_packetStoreStatusReports, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= packetStoreStatusReports.nCount))
    require((1 <= packetStoreStatusReports.nCount) && (packetStoreStatusReports.nCount <= packetStoreStatusReports.arr.size) && (packetStoreStatusReports.arr.size <= 32))
    require(codec.base.bitStream.validate_offset_bits((228L * (packetStoreStatusReports.nCount - i1))))
    decreases(packetStoreStatusReports.nCount - i1)
    if (i1 == packetStoreStatusReports.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 228L * (packetStoreStatusReports.nCount - i1), 228L)
        }
        TTM_15_19_PacketStoreStatusReportItem_ACN_Encode(packetStoreStatusReports.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(228L * (i1 + 1) == 228L * i1 + 228L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 228L * (packetStoreStatusReports.nCount - i1), 228L)
            check(codec.base.bitStream.validate_offset_bits(228L * (packetStoreStatusReports.nCount - (i1 + 1))))
        }
        val res = PUS_15_19_TTM_15_19_PacketStoreStatusReport_packetStoreStatusReports_pVal_packetStoreStatusReports_packetStoreStatusReports_Encode_loop(codec, packetStoreStatusReports, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TTM_15_19_PacketStoreStatusReport_packetStoreStatusReports.sizeRange(packetStoreStatusReports.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, packetStoreStatusReports.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + packetStoreStatusReports.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TTM_15_19_PacketStoreStatusReport_packetStoreStatusReports.sizeRange(packetStoreStatusReports.arr, codecSnap1.base.bitStream.bitIndex, i1, packetStoreStatusReports.nCount) == packetStoreStatusReports.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TTM_15_19_PacketStoreStatusReport_packetStoreStatusReports.sizeRange(packetStoreStatusReports.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, packetStoreStatusReports.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TTM_15_19_PacketStoreStatusReport_packetStoreStatusReports.sizeRange(packetStoreStatusReports.arr, codecSnap1.base.bitStream.bitIndex, i1, packetStoreStatusReports.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_15_19_PacketStoreStatusReport_packetStoreStatusReports.sizeRange(packetStoreStatusReports.arr, old(codec).base.bitStream.bitIndex, i1, packetStoreStatusReports.nCount)
    }
}



@opaque @inlineOnce
def TM_15_19_PacketStoreStatusReport_packetStoreStatusReports_ACN_Encode(codec: ACN, pVal: TTM_15_19_PacketStoreStatusReport, TM_15_19_PacketStoreStatusReport_n: ULong, packetStoreStatusReports: TTM_15_19_PacketStoreStatusReport_packetStoreStatusReports): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(7296L))
    @ghost val oldCdc = snapshot(codec)
    TTM_15_19_PacketStoreStatusReport_packetStoreStatusReports_IsConstraintValid(packetStoreStatusReports) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    PUS_15_19_TTM_15_19_PacketStoreStatusReport_packetStoreStatusReports_pVal_packetStoreStatusReports_packetStoreStatusReports_Encode_loop(codec, packetStoreStatusReports, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                packetStoreStatusReports.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + packetStoreStatusReports.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTM_15_19_PacketStoreStatusReport_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTM_15_19_PacketStoreStatusReport] =
{
    require(codec.base.bitStream.validate_offset_bits(7328L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode TM_15_19_PacketStoreStatusReport_n */
    val TM_15_19_PacketStoreStatusReport_n = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 7328L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode packetStoreStatusReports */
    val pVal_packetStoreStatusReports = TM_15_19_PacketStoreStatusReport_packetStoreStatusReports_ACN_Decode(codec, TM_15_19_PacketStoreStatusReport_n) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 7328L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_packetStoreStatusReports.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 7328L)
    }
    val pVal = TTM_15_19_PacketStoreStatusReport(pVal_packetStoreStatusReports)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }

    TTM_15_19_PacketStoreStatusReport_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTM_15_19_PacketStoreStatusReport](l)
        case Right(_) => RightMut[ErrorCode, TTM_15_19_PacketStoreStatusReport](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTM_15_19_PacketStoreStatusReport]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_15_19_PacketStoreStatusReport_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTM_15_19_PacketStoreStatusReport_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTM_15_19_PacketStoreStatusReport]) =
{
    require(codec.base.bitStream.validate_offset_bits(7328L))
    val cpy = snapshot(codec)
    val res = TTM_15_19_PacketStoreStatusReport_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def PUS_15_19_TTM_15_19_PacketStoreStatusReport_packetStoreStatusReports_pVal_packetStoreStatusReports_packetStoreStatusReports_Decode_loop(codec: ACN, nCount: Int, packetStoreStatusReports: Vector[TTM_15_19_PacketStoreStatusReportItem], i1: Int): EitherMut[Int, Vector[TTM_15_19_PacketStoreStatusReportItem]] = {
    require((1 <= nCount) && (nCount <= 32))
    require((0 <= i1) && (i1 <= nCount))
    require(packetStoreStatusReports.size == i1)
    require(codec.base.bitStream.validate_offset_bits((228L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(packetStoreStatusReports)
            vecRangesEqSlicedLemma(packetStoreStatusReports, packetStoreStatusReports, 0, packetStoreStatusReports.size, 0, i1)
        }
        RightMut[Int, Vector[TTM_15_19_PacketStoreStatusReportItem]](packetStoreStatusReports)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 228L * (nCount - i1), 228L)
        }
        val packetStoreStatusReports_arr_i1_ = TTM_15_19_PacketStoreStatusReportItem_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(228L * (i1 + 1) == 228L * i1 + 228L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 228L * (nCount - i1), 228L)
            check(codec.base.bitStream.validate_offset_bits(228L * (nCount - (i1 + 1))))
        }
        val res = PUS_15_19_TTM_15_19_PacketStoreStatusReport_packetStoreStatusReports_pVal_packetStoreStatusReports_packetStoreStatusReports_Decode_loop(codec, nCount, packetStoreStatusReports.append(packetStoreStatusReports_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(packetStoreStatusReports, newVec, packetStoreStatusReports_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(packetStoreStatusReports.append(packetStoreStatusReports_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(packetStoreStatusReports.list, packetStoreStatusReports_arr_i1_, i1)
                    Vector.listApplyEqVecApply(packetStoreStatusReports.append(packetStoreStatusReports_arr_i1_), i1)
                    check(packetStoreStatusReports_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TTM_15_19_PacketStoreStatusReportItem]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(packetStoreStatusReports, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_15_19_PacketStoreStatusReport_packetStoreStatusReports.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def TM_15_19_PacketStoreStatusReport_packetStoreStatusReports_ACN_Decode(codec: ACN, TM_15_19_PacketStoreStatusReport_n: ULong): EitherMut[Int, TTM_15_19_PacketStoreStatusReport_packetStoreStatusReports] = {
    require(codec.base.bitStream.validate_offset_bits(7296L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val packetStoreStatusReports =
        if ((ULong.fromRaw(1) <= TM_15_19_PacketStoreStatusReport_n) && (TM_15_19_PacketStoreStatusReport_n <= ULong.fromRaw(32))) then
            val packetStoreStatusReports_nCount = TM_15_19_PacketStoreStatusReport_n.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val packetStoreStatusReports = PUS_15_19_TTM_15_19_PacketStoreStatusReport_packetStoreStatusReports_pVal_packetStoreStatusReports_packetStoreStatusReports_Decode_loop(codec, packetStoreStatusReports_nCount, Vector.empty[TTM_15_19_PacketStoreStatusReportItem], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val packetStoreStatusReports = TTM_15_19_PacketStoreStatusReport_packetStoreStatusReports(packetStoreStatusReports_nCount, bdg)
                    ghostExpr {
                        packetStoreStatusReports.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    packetStoreStatusReports
            }
            packetStoreStatusReports
        else return LeftMut(ERR_ACN_DECODE_TM_15_19_PACKETSTORESTATUSREPORT_PACKETSTORESTATUSREPORTS)
    TTM_15_19_PacketStoreStatusReport_packetStoreStatusReports_IsConstraintValid(packetStoreStatusReports) match {
        case Left(l) =>
            LeftMut[Int, TTM_15_19_PacketStoreStatusReport_packetStoreStatusReports](l)
        case Right(_) =>
            RightMut[Int, TTM_15_19_PacketStoreStatusReport_packetStoreStatusReports](packetStoreStatusReports)
    }
}.ensuring { (res: EitherMut[Int, TTM_15_19_PacketStoreStatusReport_packetStoreStatusReports]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_15_19_PacketStoreStatusReport_packetStoreStatusReports_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TM_15_19_PacketStoreStatusReport_packetStoreStatusReports_ACN_Decode_pure(codec: ACN, TM_15_19_PacketStoreStatusReport_n: ULong): (ACN, EitherMut[Int, TTM_15_19_PacketStoreStatusReport_packetStoreStatusReports]) = {
    require(codec.base.bitStream.validate_offset_bits(7296L))
    val cpy = snapshot(codec)
    val res = TM_15_19_PacketStoreStatusReport_packetStoreStatusReports_ACN_Decode(cpy, TM_15_19_PacketStoreStatusReport_n)
    (cpy, res)
}