/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TPacketStoreConfigurationItem --------------------------------------------*/

case class TPacketStoreConfigurationItem (
    packetStore_ID: TPacketStore_ID, 
    packetStoreSize: TPUSC_UINT32, 
    packetStoreType: OptionMut[TPacketStoreType], 
    packetStoreVirtualChannel: OptionMut[TPacketStoreVirtualChannel]
) {
    require(33 == this.packetStore_ID.length && this.packetStore_ID.indexOfOrLength(UByte.fromRaw(0.toByte)) <= 32)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775547L))
        val size_0 = 1L
        val size_1 = 1L
        val size_2 = 224L
        val size_3 = 32L
        val size_4 = this.packetStoreType match {
            case SomeMut(v) =>
                1L
            case NoneMut() =>
                0L
        }
        val size_5 = this.packetStoreVirtualChannel match {
            case SomeMut(v) =>
                1L
            case NoneMut() =>
                0L
        }
        size_0 + size_1 + size_2 + size_3 + size_4 + size_5
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 260L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775547L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775547L))
        val size_0_offset = 1L
        val size_0_otherOffset = 1L
        val size_1_offset = 1L
        val size_1_otherOffset = 1L
        val size_2_offset = 224L
        val size_2_otherOffset = 224L
        val size_3_offset = 32L
        val size_3_otherOffset = 32L
        val size_4_offset = this.packetStoreType match {
            case SomeMut(v) =>
                1L
            case NoneMut() =>
                0L
        }
        val size_4_otherOffset = this.packetStoreType match {
            case SomeMut(v) =>
                1L
            case NoneMut() =>
                0L
        }
        val size_5_offset = this.packetStoreVirtualChannel match {
            case SomeMut(v) =>
                1L
            case NoneMut() =>
                0L
        }
        val size_5_otherOffset = this.packetStoreVirtualChannel match {
            case SomeMut(v) =>
                1L
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775547L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775547L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 1L
        val size_0_otherOffset = 1L
        val size_1_offset = 1L
        val size_1_otherOffset = 1L
        val size_2_offset = 224L
        val size_2_otherOffset = 224L
        val size_3_offset = 32L
        val size_3_otherOffset = 32L
        val size_4_offset = this.packetStoreType match {
            case SomeMut(v) =>
                1L
            case NoneMut() =>
                0L
        }
        val size_4_otherOffset = this.packetStoreType match {
            case SomeMut(v) =>
                1L
            case NoneMut() =>
                0L
        }
        val size_5_offset = this.packetStoreVirtualChannel match {
            case SomeMut(v) =>
                1L
            case NoneMut() =>
                0L
        }
        val size_5_otherOffset = this.packetStoreVirtualChannel match {
            case SomeMut(v) =>
                1L
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775547L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775547L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 1L
        val size_0_otherOffset = 1L
        val size_1_offset = 1L
        val size_1_otherOffset = 1L
        val size_2_offset = 224L
        val size_2_otherOffset = 224L
        val size_3_offset = 32L
        val size_3_otherOffset = 32L
        val size_4_offset = this.packetStoreType match {
            case SomeMut(v) =>
                1L
            case NoneMut() =>
                0L
        }
        val size_4_otherOffset = this.packetStoreType match {
            case SomeMut(v) =>
                1L
            case NoneMut() =>
                0L
        }
        val size_5_offset = this.packetStoreVirtualChannel match {
            case SomeMut(v) =>
                1L
            case NoneMut() =>
                0L
        }
        val size_5_otherOffset = this.packetStoreVirtualChannel match {
            case SomeMut(v) =>
                1L
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775547L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775547L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 1L
        val size_0_otherOffset = 1L
        val size_1_offset = 1L
        val size_1_otherOffset = 1L
        val size_2_offset = 224L
        val size_2_otherOffset = 224L
        val size_3_offset = 32L
        val size_3_otherOffset = 32L
        val size_4_offset = this.packetStoreType match {
            case SomeMut(v) =>
                1L
            case NoneMut() =>
                0L
        }
        val size_4_otherOffset = this.packetStoreType match {
            case SomeMut(v) =>
                1L
            case NoneMut() =>
                0L
        }
        val size_5_offset = this.packetStoreVirtualChannel match {
            case SomeMut(v) =>
                1L
            case NoneMut() =>
                0L
        }
        val size_5_otherOffset = this.packetStoreVirtualChannel match {
            case SomeMut(v) =>
                1L
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_PACKETSTORECONFIGURATIONITEM: Int = 132 /* */
@inline @cCode.inline val ERR_PACKETSTORECONFIGURATIONITEM_PACKETSTORE_ID_2: Int = 97 /* */
@inline @cCode.inline val ERR_PACKETSTORECONFIGURATIONITEM_PACKETSTORESIZE_2: Int = 107 /* */
@inline @cCode.inline val ERR_PACKETSTORECONFIGURATIONITEM_PACKETSTORETYPE_2: Int = 117 /* */
@inline @cCode.inline val ERR_PACKETSTORECONFIGURATIONITEM_PACKETSTOREVIRTUALCHANNEL_2: Int = 127 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PACKETSTORECONFIGURATIONITEM: Int = 135 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PACKETSTORECONFIGURATIONITEM_PACKETSTORE_ID_2: Int = 100 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PACKETSTORECONFIGURATIONITEM_PACKETSTORESIZE_2: Int = 110 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PACKETSTORECONFIGURATIONITEM_PACKETSTORETYPE_2: Int = 120 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PACKETSTORECONFIGURATIONITEM_PACKETSTOREVIRTUALCHANNEL_2: Int = 130 /*  */
@inline @cCode.inline val TPacketStoreConfigurationItem_REQUIRED_BYTES_FOR_ACN_ENCODING = 33
@inline @cCode.inline val TPacketStoreConfigurationItem_REQUIRED_BITS_FOR_ACN_ENCODING = 260

@inline @cCode.inline val ERR_ACN_DECODE_PACKETSTORECONFIGURATIONITEM: Int = 136 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PACKETSTORECONFIGURATIONITEM_PACKETSTORE_ID_2: Int = 101 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PACKETSTORECONFIGURATIONITEM_PACKETSTORESIZE_2: Int = 111 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PACKETSTORECONFIGURATIONITEM_PACKETSTORETYPE_2: Int = 121 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PACKETSTORECONFIGURATIONITEM_PACKETSTOREVIRTUALCHANNEL_2: Int = 131 /*  */
/*-- TPacketStoreConfiguration --------------------------------------------*/


case class TPacketStoreConfiguration_configurationItems (nCount: Int, arr: Vector[TPacketStoreConfigurationItem])
{
    require(this.arr.size <= 32 && 1 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854767487L))
        TPacketStoreConfiguration_configurationItems.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 8320L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767487L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767487L))
        TPacketStoreConfiguration_configurationItems.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767487L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767487L))
        require((offset % 8L) == (otherOffset % 8L))
        TPacketStoreConfiguration_configurationItems.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767487L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767487L))
        require((offset % 16L) == (otherOffset % 16L))
        TPacketStoreConfiguration_configurationItems.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767487L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767487L))
        require((offset % 32L) == (otherOffset % 32L))
        TPacketStoreConfiguration_configurationItems.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TPacketStoreConfiguration_configurationItems {
    def sizeRange(ls: Vector[TPacketStoreConfigurationItem], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 32))
        require((0L <= offset) && (offset <= 9223372036854775807L - 260L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(0L <= elemSize && elemSize <= 260L)
            elemSize + TPacketStoreConfiguration_configurationItems.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 260L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TPacketStoreConfigurationItem], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 32))
        require((0L <= offset) && (offset <= 9223372036854775807L - 260L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 260L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 260L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 260L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TPacketStoreConfiguration_configurationItems.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TPacketStoreConfiguration_configurationItems.sizeRange(ls, offset, from, to) == TPacketStoreConfiguration_configurationItems.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TPacketStoreConfigurationItem], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 32))
        require((0L <= offset) && (offset <= 9223372036854775807L - 260L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 260L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 260L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 260L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TPacketStoreConfiguration_configurationItems.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TPacketStoreConfiguration_configurationItems.sizeRange(ls, offset, from, to) == TPacketStoreConfiguration_configurationItems.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TPacketStoreConfigurationItem], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 32))
        require((0L <= offset) && (offset <= 9223372036854775807L - 260L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 260L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 260L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 260L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TPacketStoreConfiguration_configurationItems.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TPacketStoreConfiguration_configurationItems.sizeRange(ls, offset, from, to) == TPacketStoreConfiguration_configurationItems.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TPacketStoreConfigurationItem], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 32))
        require((0L <= offset) && (offset <= 9223372036854775807L - 260L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 260L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 260L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 260L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TPacketStoreConfiguration_configurationItems.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TPacketStoreConfiguration_configurationItems.sizeRange(ls, offset, from, to) == TPacketStoreConfiguration_configurationItems.sizeRange(ls, otherOffset, from, to)
    }
}

case class TPacketStoreConfiguration (
    configurationItems: TPacketStoreConfiguration_configurationItems
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854767455L))
        val size_0 = 32L
        val size_1 = this.configurationItems.size(offset + size_0)
        size_0 + size_1
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 8352L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767455L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767455L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.configurationItems.size(offset + size_0_offset)
        val size_1_otherOffset = this.configurationItems.size(otherOffset + size_0_otherOffset)
        this.configurationItems.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767455L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767455L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.configurationItems.size(offset + size_0_offset)
        val size_1_otherOffset = this.configurationItems.size(otherOffset + size_0_otherOffset)
        this.configurationItems.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767455L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767455L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.configurationItems.size(offset + size_0_offset)
        val size_1_otherOffset = this.configurationItems.size(otherOffset + size_0_otherOffset)
        this.configurationItems.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854767455L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854767455L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.configurationItems.size(offset + size_0_offset)
        val size_1_otherOffset = this.configurationItems.size(otherOffset + size_0_otherOffset)
        this.configurationItems.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_PACKETSTORECONFIGURATION_CONFIGURATIONITEMS: Int = 81 /*(SIZE(1 .. maxPacketStoreConfigurationItemsSize)) */
@inline @cCode.inline val ERR_PACKETSTORECONFIGURATION_CONFIGURATIONITEMS_ELM_2: Int = 76 /* */

@inline @cCode.inline val ERR_PACKETSTORECONFIGURATION: Int = 86 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_PACKETSTORECONFIGURATION: Int = 89 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PACKETSTORECONFIGURATION_N_UNINITIALIZED: Int = 90 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PACKETSTORECONFIGURATION_N: Int = 29 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PACKETSTORECONFIGURATION_CONFIGURATIONITEMS: Int = 84 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PACKETSTORECONFIGURATION_CONFIGURATIONITEMS_ELM_2: Int = 79 /*  */
@inline @cCode.inline val TPacketStoreConfiguration_REQUIRED_BYTES_FOR_ACN_ENCODING = 1044
@inline @cCode.inline val TPacketStoreConfiguration_REQUIRED_BITS_FOR_ACN_ENCODING = 8352

@inline @cCode.inline val ERR_ACN_DECODE_PACKETSTORECONFIGURATION: Int = 91 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PACKETSTORECONFIGURATION_N: Int = 30 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PACKETSTORECONFIGURATION_CONFIGURATIONITEMS: Int = 85 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PACKETSTORECONFIGURATION_CONFIGURATIONITEMS_ELM_2: Int = 80 /*  */

// @inline @cCode.inline val maxPacketStoreConfigurationItemsSize: Int = 32 // defined in body

