/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

type TPacketStore_ID = Vector[UByte]

@inline @cCode.inline val ERR_PACKETSTORE_ID: Int = 24 /*(SIZE(max-PacketStore-IDSize)) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PACKETSTORE_ID: Int = 27 /*  */
@inline @cCode.inline val TPacketStore_ID_REQUIRED_BYTES_FOR_ACN_ENCODING = 28
@inline @cCode.inline val TPacketStore_ID_REQUIRED_BITS_FOR_ACN_ENCODING = 224

@inline @cCode.inline val ERR_ACN_DECODE_PACKETSTORE_ID: Int = 28 /*  */
/*-- TPacketStoreSequence --------------------------------------------*/


case class TPacketStoreSequence_packetStores (nCount: Int, arr: Vector[TPacketStore_ID])
{
    require(this.arr.size <= 32 && 1 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854768639L))
        TPacketStoreSequence_packetStores.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 7168L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854768639L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854768639L))
        TPacketStoreSequence_packetStores.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854768639L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854768639L))
        require((offset % 8L) == (otherOffset % 8L))
        TPacketStoreSequence_packetStores.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854768639L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854768639L))
        require((offset % 16L) == (otherOffset % 16L))
        TPacketStoreSequence_packetStores.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854768639L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854768639L))
        require((offset % 32L) == (otherOffset % 32L))
        TPacketStoreSequence_packetStores.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TPacketStoreSequence_packetStores {
    def sizeRange(ls: Vector[Vector[UByte]], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 32))
        require((0L <= offset) && (offset <= 9223372036854775807L - 224L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = 224L
            assert(elemSize == 224L)
            elemSize + TPacketStoreSequence_packetStores.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 224L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[Vector[UByte]], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 32))
        require((0L <= offset) && (offset <= 9223372036854775807L - 224L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 224L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 224L
            val elemSizeOtherOff = 224L
            assert(elemSizeOff == 224L)
            assert(elemSizeOtherOff == 224L)
            TPacketStoreSequence_packetStores.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TPacketStoreSequence_packetStores.sizeRange(ls, offset, from, to) == TPacketStoreSequence_packetStores.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[Vector[UByte]], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 32))
        require((0L <= offset) && (offset <= 9223372036854775807L - 224L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 224L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 224L
            val elemSizeOtherOff = 224L
            assert(elemSizeOff == 224L)
            assert(elemSizeOtherOff == 224L)
            TPacketStoreSequence_packetStores.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TPacketStoreSequence_packetStores.sizeRange(ls, offset, from, to) == TPacketStoreSequence_packetStores.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[Vector[UByte]], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 32))
        require((0L <= offset) && (offset <= 9223372036854775807L - 224L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 224L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 224L
            val elemSizeOtherOff = 224L
            assert(elemSizeOff == 224L)
            assert(elemSizeOtherOff == 224L)
            TPacketStoreSequence_packetStores.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TPacketStoreSequence_packetStores.sizeRange(ls, offset, from, to) == TPacketStoreSequence_packetStores.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[Vector[UByte]], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 32))
        require((0L <= offset) && (offset <= 9223372036854775807L - 224L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 224L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 224L
            val elemSizeOtherOff = 224L
            assert(elemSizeOff == 224L)
            assert(elemSizeOtherOff == 224L)
            TPacketStoreSequence_packetStores.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TPacketStoreSequence_packetStores.sizeRange(ls, offset, from, to) == TPacketStoreSequence_packetStores.sizeRange(ls, otherOffset, from, to)
    }
}

case class TPacketStoreSequence (
    packetStores: TPacketStoreSequence_packetStores
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854768607L))
        val size_0 = 32L
        val size_1 = this.packetStores.size(offset + size_0)
        size_0 + size_1
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 7200L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854768607L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854768607L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.packetStores.size(offset + size_0_offset)
        val size_1_otherOffset = this.packetStores.size(otherOffset + size_0_otherOffset)
        this.packetStores.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854768607L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854768607L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.packetStores.size(offset + size_0_offset)
        val size_1_otherOffset = this.packetStores.size(otherOffset + size_0_otherOffset)
        this.packetStores.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854768607L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854768607L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.packetStores.size(offset + size_0_offset)
        val size_1_otherOffset = this.packetStores.size(otherOffset + size_0_otherOffset)
        this.packetStores.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854768607L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854768607L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.packetStores.size(offset + size_0_offset)
        val size_1_otherOffset = this.packetStores.size(otherOffset + size_0_otherOffset)
        this.packetStores.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_PACKETSTORESEQUENCE_PACKETSTORES: Int = 13 /*(SIZE(1 .. max-PacketStore-IDSize)) */
@inline @cCode.inline val ERR_PACKETSTORESEQUENCE_PACKETSTORES_ELM_2: Int = 8 /* */

@inline @cCode.inline val ERR_PACKETSTORESEQUENCE: Int = 18 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_PACKETSTORESEQUENCE: Int = 21 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PACKETSTORESEQUENCE_N_UNINITIALIZED: Int = 22 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PACKETSTORESEQUENCE_N: Int = 1 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PACKETSTORESEQUENCE_PACKETSTORES: Int = 16 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PACKETSTORESEQUENCE_PACKETSTORES_ELM_2: Int = 11 /*  */
@inline @cCode.inline val TPacketStoreSequence_REQUIRED_BYTES_FOR_ACN_ENCODING = 900
@inline @cCode.inline val TPacketStoreSequence_REQUIRED_BITS_FOR_ACN_ENCODING = 7200

@inline @cCode.inline val ERR_ACN_DECODE_PACKETSTORESEQUENCE: Int = 23 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PACKETSTORESEQUENCE_N: Int = 2 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PACKETSTORESEQUENCE_PACKETSTORES: Int = 17 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PACKETSTORESEQUENCE_PACKETSTORES_ELM_2: Int = 12 /*  */

// @inline @cCode.inline val max_PacketStore_IDSize: Int = 32 // defined in body

