/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

val maxPacketStoreConfigurationItemsSize: Int = 32 // variables:188

def TPacketStoreConfigurationItem_IsConstraintValid(pVal: TPacketStoreConfigurationItem): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TPacketStore_ID_IsConstraintValid(pVal.packetStore_ID)
    if ret.isRight then
        ret = TPUSC_UINT32_IsConstraintValid(pVal.packetStoreSize)
        if ret.isRight then
            pVal.packetStoreType match
                case SomeMut(packetStoreType) =>
                    ret = TPacketStoreType_IsConstraintValid(packetStoreType)
                case NoneMut() =>
            if ret.isRight then
                pVal.packetStoreVirtualChannel match
                    case SomeMut(packetStoreVirtualChannel) =>
                        ret = TPacketStoreVirtualChannel_IsConstraintValid(packetStoreVirtualChannel)
                    case NoneMut() =>
    ret
}

def TPacketStoreConfigurationItem_Initialize(): TPacketStoreConfigurationItem = TPacketStoreConfigurationItem(packetStore_ID = Vector.fill[UByte](32.toInt+1)(0x0.toRawUByte), packetStoreSize = ULong.fromRaw(0L), packetStoreType = SomeMut(TPacketStoreType.TcircuralType), packetStoreVirtualChannel = SomeMut(TPacketStoreVirtualChannel.TPacketStoreVirtualChannel_val0))

@opaque @inlineOnce 
def TPacketStoreConfigurationItem_ACN_Encode(pVal: TPacketStoreConfigurationItem, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(260L))
    TPacketStoreConfigurationItem_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    codec.base.bitStream.appendBit(pVal.packetStoreType.isDefined)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 260L, 1L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 1L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 1L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    codec.base.bitStream.appendBit(pVal.packetStoreVirtualChannel.isDefined)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 259L, 1L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 2L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 1L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode packetStore_ID */
    TPacketStore_ID_ACN_Encode(pVal.packetStore_ID, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_3.base.bitStream, codec.base.bitStream, 258L, 224L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 226L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = 224L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    @ghost val codec_0_4 = snapshot(codec)
    /* Encode packetStoreSize */
    TPUSC_UINT32_ACN_Encode(pVal.packetStoreSize, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_4.base.bitStream, codec.base.bitStream, 34L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 258L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_3 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3)
    }
    @ghost val codec_0_5 = snapshot(codec)
    PacketStoreConfigurationItem_packetStoreType_Optional_ACN_Encode(codec, pVal, pVal.packetStoreType) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_5.base.bitStream, codec.base.bitStream, 2L, 1L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 259L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_4 = pVal.packetStoreType match {
        case SomeMut(v) =>
            1L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3 + size_4)
    }
    @ghost val codec_0_6 = snapshot(codec)
    PacketStoreConfigurationItem_packetStoreVirtualChannel_Optional_ACN_Encode(codec, pVal, pVal.packetStoreVirtualChannel) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 260L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_5 = pVal.packetStoreVirtualChannel match {
        case SomeMut(v) =>
            1L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3 + size_4 + size_5)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 260L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2 + size_3 + size_4 + size_5)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def PacketStoreConfigurationItem_packetStoreType_Optional_ACN_Encode(codec: ACN, pVal: TPacketStoreConfigurationItem, packetStoreType: OptionMut[TPacketStoreType]): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(1L))
    @ghost val oldCdc = snapshot(codec)
    /* Encode packetStoreType */
    packetStoreType match
        case SomeMut(packetStoreType) =>
            TPacketStoreType_ACN_Encode(packetStoreType, codec, false) match // uper:6
                case Right(_) =>
                case Left(err) => return Left(err)
        case NoneMut() =>
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + (if (packetStoreType.isDefined) {
                1L
            } else {
                0L
            })
    }
}



@opaque @inlineOnce
def PacketStoreConfigurationItem_packetStoreVirtualChannel_Optional_ACN_Encode(codec: ACN, pVal: TPacketStoreConfigurationItem, packetStoreVirtualChannel: OptionMut[TPacketStoreVirtualChannel]): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(1L))
    @ghost val oldCdc = snapshot(codec)
    /* Encode packetStoreVirtualChannel */
    packetStoreVirtualChannel match
        case SomeMut(packetStoreVirtualChannel) =>
            TPacketStoreVirtualChannel_ACN_Encode(packetStoreVirtualChannel, codec, false) match // uper:6
                case Right(_) =>
                case Left(err) => return Left(err)
        case NoneMut() =>
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + (if (packetStoreVirtualChannel.isDefined) {
                1L
            } else {
                0L
            })
    }
}



@opaque @inlineOnce 
def TPacketStoreConfigurationItem_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TPacketStoreConfigurationItem] =
{
    require(codec.base.bitStream.validate_offset_bits(260L))
    var packetStoreType_exist: Boolean = false
    var packetStoreVirtualChannel_exist: Boolean = false

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    packetStoreType_exist = codec.base.bitStream.readBit()
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 260L, 1L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 1L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 1L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    packetStoreVirtualChannel_exist = codec.base.bitStream.readBit()
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 259L, 1L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 2L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 1L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode packetStore_ID */
    val pVal_packetStore_ID = TPacketStore_ID_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_3.base.bitStream, codec.base.bitStream, 258L, 224L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 226L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = 224L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    @ghost val codec_0_4 = snapshot(codec)
    /* Decode packetStoreSize */
    val pVal_packetStoreSize = TPUSC_UINT32_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_4.base.bitStream, codec.base.bitStream, 34L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 258L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_3 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3)
    }
    @ghost val codec_0_5 = snapshot(codec)
    val pVal_packetStoreType = PacketStoreConfigurationItem_packetStoreType_Optional_ACN_Decode(codec, packetStoreType_exist) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_5.base.bitStream, codec.base.bitStream, 2L, 1L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 259L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_4 = pVal_packetStoreType match {
        case SomeMut(v) =>
            1L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3 + size_4)
    }
    @ghost val codec_0_6 = snapshot(codec)
    val pVal_packetStoreVirtualChannel = PacketStoreConfigurationItem_packetStoreVirtualChannel_Optional_ACN_Decode(codec, packetStoreVirtualChannel_exist) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 260L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_5 = pVal_packetStoreVirtualChannel match {
        case SomeMut(v) =>
            1L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3 + size_4 + size_5)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 260L)
    }
    val pVal = TPacketStoreConfigurationItem(pVal_packetStore_ID, pVal_packetStoreSize, pVal_packetStoreType, pVal_packetStoreVirtualChannel)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2 + size_3 + size_4 + size_5)
    }

    TPacketStoreConfigurationItem_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TPacketStoreConfigurationItem](l)
        case Right(_) => RightMut[ErrorCode, TPacketStoreConfigurationItem](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TPacketStoreConfigurationItem]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TPacketStoreConfigurationItem_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TPacketStoreConfigurationItem_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TPacketStoreConfigurationItem]) =
{
    require(codec.base.bitStream.validate_offset_bits(260L))
    val cpy = snapshot(codec)
    val res = TPacketStoreConfigurationItem_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def PacketStoreConfigurationItem_packetStoreType_Optional_ACN_Decode(codec: ACN, packetStoreType_exist: Boolean): EitherMut[Int, OptionMut[TPacketStoreType]] = {
    require(codec.base.bitStream.validate_offset_bits(1L))
    @ghost val oldCdc = snapshot(codec)
    /* Decode packetStoreType */
    val packetStoreType: OptionMut[TPacketStoreType] =
        if packetStoreType_exist then
            val pVal_packetStoreType = TPacketStoreType_ACN_Decode(codec) match // uper:13
                case RightMut(decData) => decData
                case LeftMut(err) => return LeftMut(err)
            SomeMut(pVal_packetStoreType)
        else NoneMut[TPacketStoreType]()
    RightMut[Int, OptionMut[TPacketStoreType]](packetStoreType)
}.ensuring { (res: EitherMut[Int, OptionMut[TPacketStoreType]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + (if (resVal.isDefined) {
                1L
            } else {
                0L
            })
    }
}



@ghost @pure
def PacketStoreConfigurationItem_packetStoreType_Optional_ACN_Decode_pure(codec: ACN, packetStoreType_exist: Boolean): (ACN, EitherMut[Int, OptionMut[TPacketStoreType]]) = {
    require(codec.base.bitStream.validate_offset_bits(1L))
    val cpy = snapshot(codec)
    val res = PacketStoreConfigurationItem_packetStoreType_Optional_ACN_Decode(cpy, packetStoreType_exist)
    (cpy, res)
}



@opaque @inlineOnce
def PacketStoreConfigurationItem_packetStoreVirtualChannel_Optional_ACN_Decode(codec: ACN, packetStoreVirtualChannel_exist: Boolean): EitherMut[Int, OptionMut[TPacketStoreVirtualChannel]] = {
    require(codec.base.bitStream.validate_offset_bits(1L))
    @ghost val oldCdc = snapshot(codec)
    /* Decode packetStoreVirtualChannel */
    val packetStoreVirtualChannel: OptionMut[TPacketStoreVirtualChannel] =
        if packetStoreVirtualChannel_exist then
            val pVal_packetStoreVirtualChannel = TPacketStoreVirtualChannel_ACN_Decode(codec) match // uper:13
                case RightMut(decData) => decData
                case LeftMut(err) => return LeftMut(err)
            SomeMut(pVal_packetStoreVirtualChannel)
        else NoneMut[TPacketStoreVirtualChannel]()
    RightMut[Int, OptionMut[TPacketStoreVirtualChannel]](packetStoreVirtualChannel)
}.ensuring { (res: EitherMut[Int, OptionMut[TPacketStoreVirtualChannel]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + (if (resVal.isDefined) {
                1L
            } else {
                0L
            })
    }
}



@ghost @pure
def PacketStoreConfigurationItem_packetStoreVirtualChannel_Optional_ACN_Decode_pure(codec: ACN, packetStoreVirtualChannel_exist: Boolean): (ACN, EitherMut[Int, OptionMut[TPacketStoreVirtualChannel]]) = {
    require(codec.base.bitStream.validate_offset_bits(1L))
    val cpy = snapshot(codec)
    val res = PacketStoreConfigurationItem_packetStoreVirtualChannel_Optional_ACN_Decode(cpy, packetStoreVirtualChannel_exist)
    (cpy, res)
}



def TPacketStoreConfiguration_configurationItems_IsConstraintValid(pVal: TPacketStoreConfiguration_configurationItems): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = ((1 <= pVal.nCount) && (pVal.nCount <= 32)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TPacketStoreConfigurationItem_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TPacketStoreConfiguration_IsConstraintValid(pVal: TPacketStoreConfiguration): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TPacketStoreConfiguration_configurationItems_IsConstraintValid(pVal.configurationItems)
    ret
}

def TPacketStoreConfiguration_configurationItems_Initialize(): TPacketStoreConfiguration_configurationItems = TPacketStoreConfiguration_configurationItems(1, Vector.fill(32)(TPacketStoreConfigurationItem_Initialize()))
def TPacketStoreConfiguration_Initialize(): TPacketStoreConfiguration = TPacketStoreConfiguration(configurationItems = TPacketStoreConfiguration_configurationItems_Initialize())

@opaque @inlineOnce 
def TPacketStoreConfiguration_ACN_Encode(pVal: TPacketStoreConfiguration, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(8352L))
    var i1: Int = 0
    TPacketStoreConfiguration_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val PacketStoreConfiguration_n = ULong.fromRaw(pVal.configurationItems.nCount)
    if PacketStoreConfiguration_n < ULong.fromRaw(1) || PacketStoreConfiguration_n > ULong.fromRaw(32) then
        return Left(860)
    /* Encode PacketStoreConfiguration_n */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(PacketStoreConfiguration_n)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(PacketStoreConfiguration_n)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 8352L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode configurationItems */
    PacketStoreConfiguration_configurationItems_ACN_Encode(codec, pVal, PacketStoreConfiguration_n, pVal.configurationItems) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 8352L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.configurationItems.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 8352L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def PacketStoreConfiguration_TPacketStoreConfiguration_configurationItems_pVal_configurationItems_configurationItems_Encode_loop(codec: ACN, configurationItems: TPacketStoreConfiguration_configurationItems, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= configurationItems.nCount))
    require((1 <= configurationItems.nCount) && (configurationItems.nCount <= configurationItems.arr.size) && (configurationItems.arr.size <= 32))
    require(codec.base.bitStream.validate_offset_bits((260L * (configurationItems.nCount - i1))))
    decreases(configurationItems.nCount - i1)
    if (i1 == configurationItems.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 260L * (configurationItems.nCount - i1), 260L)
        }
        TPacketStoreConfigurationItem_ACN_Encode(configurationItems.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(260L * (i1 + 1) == 260L * i1 + 260L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 260L * (configurationItems.nCount - i1), 260L)
            check(codec.base.bitStream.validate_offset_bits(260L * (configurationItems.nCount - (i1 + 1))))
        }
        val res = PacketStoreConfiguration_TPacketStoreConfiguration_configurationItems_pVal_configurationItems_configurationItems_Encode_loop(codec, configurationItems, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TPacketStoreConfiguration_configurationItems.sizeRange(configurationItems.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, configurationItems.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + configurationItems.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TPacketStoreConfiguration_configurationItems.sizeRange(configurationItems.arr, codecSnap1.base.bitStream.bitIndex, i1, configurationItems.nCount) == configurationItems.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TPacketStoreConfiguration_configurationItems.sizeRange(configurationItems.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, configurationItems.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TPacketStoreConfiguration_configurationItems.sizeRange(configurationItems.arr, codecSnap1.base.bitStream.bitIndex, i1, configurationItems.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TPacketStoreConfiguration_configurationItems.sizeRange(configurationItems.arr, old(codec).base.bitStream.bitIndex, i1, configurationItems.nCount)
    }
}



@opaque @inlineOnce
def PacketStoreConfiguration_configurationItems_ACN_Encode(codec: ACN, pVal: TPacketStoreConfiguration, PacketStoreConfiguration_n: ULong, configurationItems: TPacketStoreConfiguration_configurationItems): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(8320L))
    @ghost val oldCdc = snapshot(codec)
    TPacketStoreConfiguration_configurationItems_IsConstraintValid(configurationItems) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    PacketStoreConfiguration_TPacketStoreConfiguration_configurationItems_pVal_configurationItems_configurationItems_Encode_loop(codec, configurationItems, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                configurationItems.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + configurationItems.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TPacketStoreConfiguration_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TPacketStoreConfiguration] =
{
    require(codec.base.bitStream.validate_offset_bits(8352L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode PacketStoreConfiguration_n */
    val PacketStoreConfiguration_n = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 8352L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode configurationItems */
    val pVal_configurationItems = PacketStoreConfiguration_configurationItems_ACN_Decode(codec, PacketStoreConfiguration_n) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 8352L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_configurationItems.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 8352L)
    }
    val pVal = TPacketStoreConfiguration(pVal_configurationItems)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }

    TPacketStoreConfiguration_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TPacketStoreConfiguration](l)
        case Right(_) => RightMut[ErrorCode, TPacketStoreConfiguration](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TPacketStoreConfiguration]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TPacketStoreConfiguration_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TPacketStoreConfiguration_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TPacketStoreConfiguration]) =
{
    require(codec.base.bitStream.validate_offset_bits(8352L))
    val cpy = snapshot(codec)
    val res = TPacketStoreConfiguration_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def PacketStoreConfiguration_TPacketStoreConfiguration_configurationItems_pVal_configurationItems_configurationItems_Decode_loop(codec: ACN, nCount: Int, configurationItems: Vector[TPacketStoreConfigurationItem], i1: Int): EitherMut[Int, Vector[TPacketStoreConfigurationItem]] = {
    require((1 <= nCount) && (nCount <= 32))
    require((0 <= i1) && (i1 <= nCount))
    require(configurationItems.size == i1)
    require(codec.base.bitStream.validate_offset_bits((260L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(configurationItems)
            vecRangesEqSlicedLemma(configurationItems, configurationItems, 0, configurationItems.size, 0, i1)
        }
        RightMut[Int, Vector[TPacketStoreConfigurationItem]](configurationItems)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 260L * (nCount - i1), 260L)
        }
        val configurationItems_arr_i1_ = TPacketStoreConfigurationItem_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(260L * (i1 + 1) == 260L * i1 + 260L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 260L * (nCount - i1), 260L)
            check(codec.base.bitStream.validate_offset_bits(260L * (nCount - (i1 + 1))))
        }
        val res = PacketStoreConfiguration_TPacketStoreConfiguration_configurationItems_pVal_configurationItems_configurationItems_Decode_loop(codec, nCount, configurationItems.append(configurationItems_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(configurationItems, newVec, configurationItems_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(configurationItems.append(configurationItems_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(configurationItems.list, configurationItems_arr_i1_, i1)
                    Vector.listApplyEqVecApply(configurationItems.append(configurationItems_arr_i1_), i1)
                    check(configurationItems_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TPacketStoreConfigurationItem]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(configurationItems, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TPacketStoreConfiguration_configurationItems.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def PacketStoreConfiguration_configurationItems_ACN_Decode(codec: ACN, PacketStoreConfiguration_n: ULong): EitherMut[Int, TPacketStoreConfiguration_configurationItems] = {
    require(codec.base.bitStream.validate_offset_bits(8320L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val configurationItems =
        if ((ULong.fromRaw(1) <= PacketStoreConfiguration_n) && (PacketStoreConfiguration_n <= ULong.fromRaw(32))) then
            val configurationItems_nCount = PacketStoreConfiguration_n.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val configurationItems = PacketStoreConfiguration_TPacketStoreConfiguration_configurationItems_pVal_configurationItems_configurationItems_Decode_loop(codec, configurationItems_nCount, Vector.empty[TPacketStoreConfigurationItem], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val configurationItems = TPacketStoreConfiguration_configurationItems(configurationItems_nCount, bdg)
                    ghostExpr {
                        configurationItems.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    configurationItems
            }
            configurationItems
        else return LeftMut(ERR_ACN_DECODE_PACKETSTORECONFIGURATION_CONFIGURATIONITEMS)
    TPacketStoreConfiguration_configurationItems_IsConstraintValid(configurationItems) match {
        case Left(l) =>
            LeftMut[Int, TPacketStoreConfiguration_configurationItems](l)
        case Right(_) =>
            RightMut[Int, TPacketStoreConfiguration_configurationItems](configurationItems)
    }
}.ensuring { (res: EitherMut[Int, TPacketStoreConfiguration_configurationItems]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TPacketStoreConfiguration_configurationItems_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def PacketStoreConfiguration_configurationItems_ACN_Decode_pure(codec: ACN, PacketStoreConfiguration_n: ULong): (ACN, EitherMut[Int, TPacketStoreConfiguration_configurationItems]) = {
    require(codec.base.bitStream.validate_offset_bits(8320L))
    val cpy = snapshot(codec)
    val res = PacketStoreConfiguration_configurationItems_ACN_Decode(cpy, PacketStoreConfiguration_n)
    (cpy, res)
}