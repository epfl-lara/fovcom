/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TStorage_ControlReportTypeMessageSubtypes --------------------------------------------*/


case class TStorage_ControlReportTypeMessageSubtypes_messageSubtype (nCount: Int, arr: Vector[TMessageSubtype_ID])
{
    require(this.arr.size <= 32 && 0 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775551L))
        TStorage_ControlReportTypeMessageSubtypes_messageSubtype.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 256L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775551L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775551L))
        TStorage_ControlReportTypeMessageSubtypes_messageSubtype.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775551L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775551L))
        require((offset % 8L) == (otherOffset % 8L))
        TStorage_ControlReportTypeMessageSubtypes_messageSubtype.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775551L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775551L))
        require((offset % 16L) == (otherOffset % 16L))
        TStorage_ControlReportTypeMessageSubtypes_messageSubtype.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775551L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775551L))
        require((offset % 32L) == (otherOffset % 32L))
        TStorage_ControlReportTypeMessageSubtypes_messageSubtype.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TStorage_ControlReportTypeMessageSubtypes_messageSubtype {
    def sizeRange(ls: Vector[ULong], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 32))
        require((0L <= offset) && (offset <= 9223372036854775807L - 8L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = 8L
            assert(elemSize == 8L)
            elemSize + TStorage_ControlReportTypeMessageSubtypes_messageSubtype.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 8L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[ULong], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 32))
        require((0L <= offset) && (offset <= 9223372036854775807L - 8L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 8L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 8L
            val elemSizeOtherOff = 8L
            assert(elemSizeOff == 8L)
            assert(elemSizeOtherOff == 8L)
            TStorage_ControlReportTypeMessageSubtypes_messageSubtype.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TStorage_ControlReportTypeMessageSubtypes_messageSubtype.sizeRange(ls, offset, from, to) == TStorage_ControlReportTypeMessageSubtypes_messageSubtype.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[ULong], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 32))
        require((0L <= offset) && (offset <= 9223372036854775807L - 8L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 8L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 8L
            val elemSizeOtherOff = 8L
            assert(elemSizeOff == 8L)
            assert(elemSizeOtherOff == 8L)
            TStorage_ControlReportTypeMessageSubtypes_messageSubtype.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TStorage_ControlReportTypeMessageSubtypes_messageSubtype.sizeRange(ls, offset, from, to) == TStorage_ControlReportTypeMessageSubtypes_messageSubtype.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[ULong], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 32))
        require((0L <= offset) && (offset <= 9223372036854775807L - 8L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 8L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 8L
            val elemSizeOtherOff = 8L
            assert(elemSizeOff == 8L)
            assert(elemSizeOtherOff == 8L)
            TStorage_ControlReportTypeMessageSubtypes_messageSubtype.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TStorage_ControlReportTypeMessageSubtypes_messageSubtype.sizeRange(ls, offset, from, to) == TStorage_ControlReportTypeMessageSubtypes_messageSubtype.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[ULong], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 32))
        require((0L <= offset) && (offset <= 9223372036854775807L - 8L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 8L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 8L
            val elemSizeOtherOff = 8L
            assert(elemSizeOff == 8L)
            assert(elemSizeOtherOff == 8L)
            TStorage_ControlReportTypeMessageSubtypes_messageSubtype.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TStorage_ControlReportTypeMessageSubtypes_messageSubtype.sizeRange(ls, offset, from, to) == TStorage_ControlReportTypeMessageSubtypes_messageSubtype.sizeRange(ls, otherOffset, from, to)
    }
}

case class TStorage_ControlReportTypeMessageSubtypes (
    messageSubtype: TStorage_ControlReportTypeMessageSubtypes_messageSubtype
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775519L))
        val size_0 = 32L
        val size_1 = this.messageSubtype.size(offset + size_0)
        size_0 + size_1
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 288L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775519L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775519L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.messageSubtype.size(offset + size_0_offset)
        val size_1_otherOffset = this.messageSubtype.size(otherOffset + size_0_otherOffset)
        this.messageSubtype.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775519L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775519L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.messageSubtype.size(offset + size_0_offset)
        val size_1_otherOffset = this.messageSubtype.size(otherOffset + size_0_otherOffset)
        this.messageSubtype.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775519L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775519L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.messageSubtype.size(offset + size_0_offset)
        val size_1_otherOffset = this.messageSubtype.size(otherOffset + size_0_otherOffset)
        this.messageSubtype.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775519L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775519L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.messageSubtype.size(offset + size_0_offset)
        val size_1_otherOffset = this.messageSubtype.size(otherOffset + size_0_otherOffset)
        this.messageSubtype.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_STORAGE_CONTROLREPORTTYPEMESSAGESUBTYPES_MESSAGESUBTYPE: Int = 3174 /*(SIZE(0 .. maxMessageSubtypeSize)) */
@inline @cCode.inline val ERR_STORAGE_CONTROLREPORTTYPEMESSAGESUBTYPES_MESSAGESUBTYPE_ELM_2: Int = 3169 /* */

@inline @cCode.inline val ERR_STORAGE_CONTROLREPORTTYPEMESSAGESUBTYPES: Int = 3179 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_STORAGE_CONTROLREPORTTYPEMESSAGESUBTYPES: Int = 3182 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_STORAGE_CONTROLREPORTTYPEMESSAGESUBTYPES_N3_UNINITIALIZED: Int = 3183 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_STORAGE_CONTROLREPORTTYPEMESSAGESUBTYPES_N3: Int = 3162 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_STORAGE_CONTROLREPORTTYPEMESSAGESUBTYPES_MESSAGESUBTYPE: Int = 3177 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_STORAGE_CONTROLREPORTTYPEMESSAGESUBTYPES_MESSAGESUBTYPE_ELM_2: Int = 3172 /*  */
@inline @cCode.inline val TStorage_ControlReportTypeMessageSubtypes_REQUIRED_BYTES_FOR_ACN_ENCODING = 36
@inline @cCode.inline val TStorage_ControlReportTypeMessageSubtypes_REQUIRED_BITS_FOR_ACN_ENCODING = 288

@inline @cCode.inline val ERR_ACN_DECODE_STORAGE_CONTROLREPORTTYPEMESSAGESUBTYPES: Int = 3184 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_STORAGE_CONTROLREPORTTYPEMESSAGESUBTYPES_N3: Int = 3163 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_STORAGE_CONTROLREPORTTYPEMESSAGESUBTYPES_MESSAGESUBTYPE: Int = 3178 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_STORAGE_CONTROLREPORTTYPEMESSAGESUBTYPES_MESSAGESUBTYPE_ELM_2: Int = 3173 /*  */
/*-- TStorage_ControlReportTypeStorage_ControlConfiguration --------------------------------------------*/


case class TStorage_ControlReportTypeStorage_ControlConfiguration_tail (nCount: Int, arr: Vector[TStorage_ControlReportTypeMessageSubtypes])
{
    require(this.arr.size <= 31 && 0 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854766879L))
        TStorage_ControlReportTypeStorage_ControlConfiguration_tail.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 8928L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854766879L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854766879L))
        TStorage_ControlReportTypeStorage_ControlConfiguration_tail.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854766879L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854766879L))
        require((offset % 8L) == (otherOffset % 8L))
        TStorage_ControlReportTypeStorage_ControlConfiguration_tail.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854766879L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854766879L))
        require((offset % 16L) == (otherOffset % 16L))
        TStorage_ControlReportTypeStorage_ControlConfiguration_tail.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854766879L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854766879L))
        require((offset % 32L) == (otherOffset % 32L))
        TStorage_ControlReportTypeStorage_ControlConfiguration_tail.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TStorage_ControlReportTypeStorage_ControlConfiguration_tail {
    def sizeRange(ls: Vector[TStorage_ControlReportTypeMessageSubtypes], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 288L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(0L <= elemSize && elemSize <= 288L)
            elemSize + TStorage_ControlReportTypeStorage_ControlConfiguration_tail.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 288L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TStorage_ControlReportTypeMessageSubtypes], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 288L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 288L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 288L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 288L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TStorage_ControlReportTypeStorage_ControlConfiguration_tail.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TStorage_ControlReportTypeStorage_ControlConfiguration_tail.sizeRange(ls, offset, from, to) == TStorage_ControlReportTypeStorage_ControlConfiguration_tail.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TStorage_ControlReportTypeMessageSubtypes], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 288L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 288L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 288L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 288L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TStorage_ControlReportTypeStorage_ControlConfiguration_tail.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TStorage_ControlReportTypeStorage_ControlConfiguration_tail.sizeRange(ls, offset, from, to) == TStorage_ControlReportTypeStorage_ControlConfiguration_tail.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TStorage_ControlReportTypeMessageSubtypes], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 288L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 288L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 288L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 288L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TStorage_ControlReportTypeStorage_ControlConfiguration_tail.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TStorage_ControlReportTypeStorage_ControlConfiguration_tail.sizeRange(ls, offset, from, to) == TStorage_ControlReportTypeStorage_ControlConfiguration_tail.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TStorage_ControlReportTypeMessageSubtypes], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 288L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 288L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 288L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 288L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TStorage_ControlReportTypeStorage_ControlConfiguration_tail.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TStorage_ControlReportTypeStorage_ControlConfiguration_tail.sizeRange(ls, offset, from, to) == TStorage_ControlReportTypeStorage_ControlConfiguration_tail.sizeRange(ls, otherOffset, from, to)
    }
}

case class TStorage_ControlReportTypeStorage_ControlConfiguration (
    applicationProcess_ID: OptionMut[TApplicationProcess_ID], 
    tail: TStorage_ControlReportTypeStorage_ControlConfiguration_tail
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854766835L))
        val size_0 = 1L
        val size_1 = this.applicationProcess_ID match {
            case SomeMut(v) =>
                11L
            case NoneMut() =>
                0L
        }
        val size_2 = 32L
        val size_3 = this.tail.size(offset + size_0 + size_1 + size_2)
        size_0 + size_1 + size_2 + size_3
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 8972L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854766835L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854766835L))
        val size_0_offset = 1L
        val size_0_otherOffset = 1L
        val size_1_offset = this.applicationProcess_ID match {
            case SomeMut(v) =>
                11L
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.applicationProcess_ID match {
            case SomeMut(v) =>
                11L
            case NoneMut() =>
                0L
        }
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = this.tail.size(offset + size_0_offset + size_1_offset + size_2_offset)
        val size_3_otherOffset = this.tail.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        this.tail.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset + size_2_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854766835L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854766835L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 1L
        val size_0_otherOffset = 1L
        val size_1_offset = this.applicationProcess_ID match {
            case SomeMut(v) =>
                11L
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.applicationProcess_ID match {
            case SomeMut(v) =>
                11L
            case NoneMut() =>
                0L
        }
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = this.tail.size(offset + size_0_offset + size_1_offset + size_2_offset)
        val size_3_otherOffset = this.tail.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        this.tail.sizeLemmaNextByte(offset + size_0_offset + size_1_offset + size_2_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854766835L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854766835L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 1L
        val size_0_otherOffset = 1L
        val size_1_offset = this.applicationProcess_ID match {
            case SomeMut(v) =>
                11L
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.applicationProcess_ID match {
            case SomeMut(v) =>
                11L
            case NoneMut() =>
                0L
        }
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = this.tail.size(offset + size_0_offset + size_1_offset + size_2_offset)
        val size_3_otherOffset = this.tail.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        this.tail.sizeLemmaNextWord(offset + size_0_offset + size_1_offset + size_2_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854766835L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854766835L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 1L
        val size_0_otherOffset = 1L
        val size_1_offset = this.applicationProcess_ID match {
            case SomeMut(v) =>
                11L
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.applicationProcess_ID match {
            case SomeMut(v) =>
                11L
            case NoneMut() =>
                0L
        }
        val size_2_offset = 32L
        val size_2_otherOffset = 32L
        val size_3_offset = this.tail.size(offset + size_0_offset + size_1_offset + size_2_offset)
        val size_3_otherOffset = this.tail.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        this.tail.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset + size_2_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_STORAGE_CONTROLREPORTTYPESTORAGE_CONTROLCONFIGURATION_TAIL: Int = 3151 /*(SIZE(0 .. maxTailSize)) */
@inline @cCode.inline val ERR_STORAGE_CONTROLREPORTTYPESTORAGE_CONTROLCONFIGURATION_TAIL_ELM_2: Int = 3146 /* */

@inline @cCode.inline val ERR_STORAGE_CONTROLREPORTTYPESTORAGE_CONTROLCONFIGURATION: Int = 3156 /* */
@inline @cCode.inline val ERR_STORAGE_CONTROLREPORTTYPESTORAGE_CONTROLCONFIGURATION_APPLICATIONPROCESS_ID_2: Int = 3117 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_STORAGE_CONTROLREPORTTYPESTORAGE_CONTROLCONFIGURATION: Int = 3159 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_STORAGE_CONTROLREPORTTYPESTORAGE_CONTROLCONFIGURATION_APPLICATIONPROCESS_ID_2: Int = 3120 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_STORAGE_CONTROLREPORTTYPESTORAGE_CONTROLCONFIGURATION_N2_UNINITIALIZED: Int = 3160 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_STORAGE_CONTROLREPORTTYPESTORAGE_CONTROLCONFIGURATION_N2: Int = 3122 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_STORAGE_CONTROLREPORTTYPESTORAGE_CONTROLCONFIGURATION_TAIL: Int = 3154 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_STORAGE_CONTROLREPORTTYPESTORAGE_CONTROLCONFIGURATION_TAIL_ELM_2: Int = 3149 /*  */
@inline @cCode.inline val TStorage_ControlReportTypeStorage_ControlConfiguration_REQUIRED_BYTES_FOR_ACN_ENCODING = 1122
@inline @cCode.inline val TStorage_ControlReportTypeStorage_ControlConfiguration_REQUIRED_BITS_FOR_ACN_ENCODING = 8972

@inline @cCode.inline val ERR_ACN_DECODE_STORAGE_CONTROLREPORTTYPESTORAGE_CONTROLCONFIGURATION: Int = 3161 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_STORAGE_CONTROLREPORTTYPESTORAGE_CONTROLCONFIGURATION_APPLICATIONPROCESS_ID_2: Int = 3121 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_STORAGE_CONTROLREPORTTYPESTORAGE_CONTROLCONFIGURATION_N2: Int = 3123 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_STORAGE_CONTROLREPORTTYPESTORAGE_CONTROLCONFIGURATION_TAIL: Int = 3155 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_STORAGE_CONTROLREPORTTYPESTORAGE_CONTROLCONFIGURATION_TAIL_ELM_2: Int = 3150 /*  */
/*-- TStorage_ControlReportType --------------------------------------------*/


case class TStorage_ControlReportType_configuration (nCount: Int, arr: Vector[TStorage_ControlReportTypeStorage_ControlConfiguration])
{
    require(this.arr.size <= 31 && 0 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854497675L))
        TStorage_ControlReportType_configuration.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 278132L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854497675L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854497675L))
        TStorage_ControlReportType_configuration.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854497675L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854497675L))
        require((offset % 8L) == (otherOffset % 8L))
        TStorage_ControlReportType_configuration.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854497675L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854497675L))
        require((offset % 16L) == (otherOffset % 16L))
        TStorage_ControlReportType_configuration.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854497675L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854497675L))
        require((offset % 32L) == (otherOffset % 32L))
        TStorage_ControlReportType_configuration.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TStorage_ControlReportType_configuration {
    def sizeRange(ls: Vector[TStorage_ControlReportTypeStorage_ControlConfiguration], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 8972L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(0L <= elemSize && elemSize <= 8972L)
            elemSize + TStorage_ControlReportType_configuration.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 8972L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TStorage_ControlReportTypeStorage_ControlConfiguration], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 8972L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 8972L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 8972L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 8972L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TStorage_ControlReportType_configuration.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TStorage_ControlReportType_configuration.sizeRange(ls, offset, from, to) == TStorage_ControlReportType_configuration.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TStorage_ControlReportTypeStorage_ControlConfiguration], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 8972L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 8972L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 8972L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 8972L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TStorage_ControlReportType_configuration.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TStorage_ControlReportType_configuration.sizeRange(ls, offset, from, to) == TStorage_ControlReportType_configuration.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TStorage_ControlReportTypeStorage_ControlConfiguration], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 8972L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 8972L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 8972L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 8972L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TStorage_ControlReportType_configuration.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TStorage_ControlReportType_configuration.sizeRange(ls, offset, from, to) == TStorage_ControlReportType_configuration.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TStorage_ControlReportTypeStorage_ControlConfiguration], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 8972L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 8972L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 8972L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 8972L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TStorage_ControlReportType_configuration.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TStorage_ControlReportType_configuration.sizeRange(ls, offset, from, to) == TStorage_ControlReportType_configuration.sizeRange(ls, otherOffset, from, to)
    }
}

case class TStorage_ControlReportType (
    packetStoreID: TPacketStore_ID, 
    configuration: TStorage_ControlReportType_configuration
) {
    require(33 == this.packetStoreID.length && this.packetStoreID.indexOfOrLength(UByte.fromRaw(0.toByte)) <= 32)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854497419L))
        val size_0 = (224L)
        val size_1 = 32L
        val size_2 = this.configuration.size(offset + size_0 + size_1)
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 278388L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854497419L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854497419L))
        val size_0_offset = (224L)
        val size_0_otherOffset = 224L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.configuration.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.configuration.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.configuration.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854497419L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854497419L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = (224L)
        val size_0_otherOffset = 224L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.configuration.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.configuration.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.configuration.sizeLemmaNextByte(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854497419L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854497419L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = (224L)
        val size_0_otherOffset = 224L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.configuration.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.configuration.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.configuration.sizeLemmaNextWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854497419L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854497419L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = (224L)
        val size_0_otherOffset = 224L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.configuration.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.configuration.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.configuration.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_STORAGE_CONTROLREPORTTYPE_CONFIGURATION: Int = 3101 /*(SIZE(0 .. maxConfigurationSize)) */
@inline @cCode.inline val ERR_STORAGE_CONTROLREPORTTYPE_CONFIGURATION_ELM_2: Int = 3096 /* */

@inline @cCode.inline val ERR_STORAGE_CONTROLREPORTTYPE: Int = 3106 /* */
@inline @cCode.inline val ERR_STORAGE_CONTROLREPORTTYPE_PACKETSTOREID_2: Int = 3040 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_STORAGE_CONTROLREPORTTYPE: Int = 3109 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_STORAGE_CONTROLREPORTTYPE_PACKETSTOREID_2: Int = 3043 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_STORAGE_CONTROLREPORTTYPE_N1_UNINITIALIZED: Int = 3110 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_STORAGE_CONTROLREPORTTYPE_N1: Int = 3045 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_STORAGE_CONTROLREPORTTYPE_CONFIGURATION: Int = 3104 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_STORAGE_CONTROLREPORTTYPE_CONFIGURATION_ELM_2: Int = 3099 /*  */
@inline @cCode.inline val TStorage_ControlReportType_REQUIRED_BYTES_FOR_ACN_ENCODING = 34799
@inline @cCode.inline val TStorage_ControlReportType_REQUIRED_BITS_FOR_ACN_ENCODING = 278388

@inline @cCode.inline val ERR_ACN_DECODE_STORAGE_CONTROLREPORTTYPE: Int = 3111 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_STORAGE_CONTROLREPORTTYPE_PACKETSTOREID_2: Int = 3044 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_STORAGE_CONTROLREPORTTYPE_N1: Int = 3046 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_STORAGE_CONTROLREPORTTYPE_CONFIGURATION: Int = 3105 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_STORAGE_CONTROLREPORTTYPE_CONFIGURATION_ELM_2: Int = 3100 /*  */

// @inline @cCode.inline val maxMessageSubtypeSize: Int = 32 // defined in body

