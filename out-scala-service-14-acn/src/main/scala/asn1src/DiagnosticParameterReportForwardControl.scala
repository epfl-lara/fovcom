/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

val maxDiagnosticParameterReportForwardControlCount: Int = 31 // variables:188
val maxDiagnosticStructure_ID_Count: Int = 31 // variables:188

def TDiagnosticParameterStructure_ID_ConfigurationNoSubsampling_IsConstraintValid(pVal: TDiagnosticParameterStructure_ID_ConfigurationNoSubsampling): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TDiagnosticParameterReportStructure_ID_IsConstraintValid(pVal.id)
    if ret.isRight then
        ret = (pVal.subsamplingRate.isDefined == false) match
            case true =>
                Right(0)
            case false =>
                Left(45)
    ret
}

def TDiagnosticParameterStructure_ID_ConfigurationNoSubsampling_Initialize(): TDiagnosticParameterStructure_ID_ConfigurationNoSubsampling = TDiagnosticParameterStructure_ID_ConfigurationNoSubsampling(id = ULong.fromRaw(0L), subsamplingRate = NoneMut())

@opaque @inlineOnce 
def TDiagnosticParameterStructure_ID_ConfigurationNoSubsampling_ACN_Encode(pVal: TDiagnosticParameterStructure_ID_ConfigurationNoSubsampling, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(32L))
    TDiagnosticParameterStructure_ID_ConfigurationNoSubsampling_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode id */
    TDiagnosticParameterReportStructure_ID_ACN_Encode(pVal.id, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 32L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.subsamplingRate match {
        case SomeMut(v) =>
            0L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 32L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TDiagnosticParameterStructure_ID_ConfigurationNoSubsampling_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TDiagnosticParameterStructure_ID_ConfigurationNoSubsampling] =
{
    require(codec.base.bitStream.validate_offset_bits(32L))

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode id */
    val pVal_id = TDiagnosticParameterReportStructure_ID_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 32L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    val pVal_subsamplingRate = DiagnosticParameterStructure_ID_ConfigurationNoSubsampling_subsamplingRate_Optional_ACN_Decode(codec) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_subsamplingRate match {
        case SomeMut(v) =>
            0L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 32L)
    }
    val pVal = TDiagnosticParameterStructure_ID_ConfigurationNoSubsampling(pVal_id, pVal_subsamplingRate)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }

    TDiagnosticParameterStructure_ID_ConfigurationNoSubsampling_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TDiagnosticParameterStructure_ID_ConfigurationNoSubsampling](l)
        case Right(_) => RightMut[ErrorCode, TDiagnosticParameterStructure_ID_ConfigurationNoSubsampling](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TDiagnosticParameterStructure_ID_ConfigurationNoSubsampling]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TDiagnosticParameterStructure_ID_ConfigurationNoSubsampling_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TDiagnosticParameterStructure_ID_ConfigurationNoSubsampling_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TDiagnosticParameterStructure_ID_ConfigurationNoSubsampling]) =
{
    require(codec.base.bitStream.validate_offset_bits(32L))
    val cpy = snapshot(codec)
    val res = TDiagnosticParameterStructure_ID_ConfigurationNoSubsampling_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def DiagnosticParameterStructure_ID_ConfigurationNoSubsampling_subsamplingRate_Optional_ACN_Decode(codec: ACN): EitherMut[Int, OptionMut[Byte]] = {
    require(codec.base.bitStream.validate_offset_bits(0L))
    @ghost val oldCdc = snapshot(codec)
    /* Decode subsamplingRate */
    /* marked as ALWAYS ABSENT, so do not decode anything */
    val subsamplingRate: OptionMut[NullType] = NoneMut[NullType]()
    RightMut[Int, OptionMut[Byte]](subsamplingRate)
}.ensuring { (res: EitherMut[Int, OptionMut[Byte]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            !resVal.isDefined && old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex
    }
}



@ghost @pure
def DiagnosticParameterStructure_ID_ConfigurationNoSubsampling_subsamplingRate_Optional_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[Int, OptionMut[Byte]]) = {
    require(codec.base.bitStream.validate_offset_bits(0L))
    val cpy = snapshot(codec)
    val res = DiagnosticParameterStructure_ID_ConfigurationNoSubsampling_subsamplingRate_Optional_ACN_Decode(cpy)
    (cpy, res)
}



def TDiagnosticParameterStructure_ID_ConfigurationSubsampling_IsConstraintValid(pVal: TDiagnosticParameterStructure_ID_ConfigurationSubsampling): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TDiagnosticParameterReportStructure_ID_IsConstraintValid(pVal.id)
    if ret.isRight then
        ret = (pVal.subsamplingRate.isDefined == true) match
            case true =>
                Right(0)
            case false =>
                Left(45)
    ret
}

def TDiagnosticParameterStructure_ID_ConfigurationSubsampling_Initialize(): TDiagnosticParameterStructure_ID_ConfigurationSubsampling = TDiagnosticParameterStructure_ID_ConfigurationSubsampling(id = ULong.fromRaw(0L), subsamplingRate = SomeMut(0))

@opaque @inlineOnce 
def TDiagnosticParameterStructure_ID_ConfigurationSubsampling_ACN_Encode(pVal: TDiagnosticParameterStructure_ID_ConfigurationSubsampling, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(32L))
    TDiagnosticParameterStructure_ID_ConfigurationSubsampling_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode id */
    TDiagnosticParameterReportStructure_ID_ACN_Encode(pVal.id, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 32L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    DiagnosticParameterStructure_ID_ConfigurationSubsampling_subsamplingRate_Optional_ACN_Encode(codec, pVal, pVal.subsamplingRate) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.subsamplingRate match {
        case SomeMut(v) =>
            0L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 32L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def DiagnosticParameterStructure_ID_ConfigurationSubsampling_subsamplingRate_Optional_ACN_Encode(codec: ACN, pVal: TDiagnosticParameterStructure_ID_ConfigurationSubsampling, subsamplingRate: OptionMut[Byte]): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(0L))
    @ghost val oldCdc = snapshot(codec)
    /* Encode subsamplingRate */
    /* marked as ALWAYS PRESENT, so it must be Some */
    subsamplingRate match
        case SomeMut(subsamplingRate) =>
        case NoneMut() => return Left(628)
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex
    }
}



@opaque @inlineOnce 
def TDiagnosticParameterStructure_ID_ConfigurationSubsampling_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TDiagnosticParameterStructure_ID_ConfigurationSubsampling] =
{
    require(codec.base.bitStream.validate_offset_bits(32L))

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode id */
    val pVal_id = TDiagnosticParameterReportStructure_ID_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 32L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    val pVal_subsamplingRate = DiagnosticParameterStructure_ID_ConfigurationSubsampling_subsamplingRate_Optional_ACN_Decode(codec) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_subsamplingRate match {
        case SomeMut(v) =>
            0L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 32L)
    }
    val pVal = TDiagnosticParameterStructure_ID_ConfigurationSubsampling(pVal_id, pVal_subsamplingRate)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }

    TDiagnosticParameterStructure_ID_ConfigurationSubsampling_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TDiagnosticParameterStructure_ID_ConfigurationSubsampling](l)
        case Right(_) => RightMut[ErrorCode, TDiagnosticParameterStructure_ID_ConfigurationSubsampling](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TDiagnosticParameterStructure_ID_ConfigurationSubsampling]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TDiagnosticParameterStructure_ID_ConfigurationSubsampling_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TDiagnosticParameterStructure_ID_ConfigurationSubsampling_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TDiagnosticParameterStructure_ID_ConfigurationSubsampling]) =
{
    require(codec.base.bitStream.validate_offset_bits(32L))
    val cpy = snapshot(codec)
    val res = TDiagnosticParameterStructure_ID_ConfigurationSubsampling_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def DiagnosticParameterStructure_ID_ConfigurationSubsampling_subsamplingRate_Optional_ACN_Decode(codec: ACN): EitherMut[Int, OptionMut[Byte]] = {
    require(codec.base.bitStream.validate_offset_bits(0L))
    @ghost val oldCdc = snapshot(codec)
    /* Decode subsamplingRate */
    /* marked as ALWAYS PRESENT */
    val subsamplingRate: OptionMut[NullType] =
        val pVal_subsamplingRate: NullType = 0
        SomeMut(pVal_subsamplingRate)
    RightMut[Int, OptionMut[Byte]](subsamplingRate)
}.ensuring { (res: EitherMut[Int, OptionMut[Byte]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            resVal.isDefined && old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex
    }
}



@ghost @pure
def DiagnosticParameterStructure_ID_ConfigurationSubsampling_subsamplingRate_Optional_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[Int, OptionMut[Byte]]) = {
    require(codec.base.bitStream.validate_offset_bits(0L))
    val cpy = snapshot(codec)
    val res = DiagnosticParameterStructure_ID_ConfigurationSubsampling_subsamplingRate_Optional_ACN_Decode(cpy)
    (cpy, res)
}



def TSingleDiagnosticParameterReportForwardControlSubsampling_structure_IsConstraintValid(pVal: TSingleDiagnosticParameterReportForwardControlSubsampling_structure): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = (pVal.nCount <= 31) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TDiagnosticParameterStructure_ID_ConfigurationSubsampling_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TSingleDiagnosticParameterReportForwardControlSubsampling_IsConstraintValid(pVal: TSingleDiagnosticParameterReportForwardControlSubsampling): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TApplicationProcess_ID_IsConstraintValid(pVal.applicationProcess_ID)
    if ret.isRight then
        ret = TSingleDiagnosticParameterReportForwardControlSubsampling_structure_IsConstraintValid(pVal.structure)
    ret
}

def TSingleDiagnosticParameterReportForwardControlSubsampling_structure_Initialize(): TSingleDiagnosticParameterReportForwardControlSubsampling_structure = TSingleDiagnosticParameterReportForwardControlSubsampling_structure(0, Vector.fill(31)(TDiagnosticParameterStructure_ID_ConfigurationSubsampling_Initialize()))
def TSingleDiagnosticParameterReportForwardControlSubsampling_Initialize(): TSingleDiagnosticParameterReportForwardControlSubsampling = TSingleDiagnosticParameterReportForwardControlSubsampling(applicationProcess_ID = ULong.fromRaw(0L), structure = TSingleDiagnosticParameterReportForwardControlSubsampling_structure_Initialize())

@opaque @inlineOnce 
def TSingleDiagnosticParameterReportForwardControlSubsampling_ACN_Encode(pVal: TSingleDiagnosticParameterReportForwardControlSubsampling, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(1035L))
    var i1: Int = 0
    TSingleDiagnosticParameterReportForwardControlSubsampling_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode applicationProcess_ID */
    TApplicationProcess_ID_ACN_Encode(pVal.applicationProcess_ID, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 1035L, 11L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 11L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 11L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    val SingleDiagnosticParameterReportForwardControlSubsampling_n2 = ULong.fromRaw(pVal.structure.nCount)
    if SingleDiagnosticParameterReportForwardControlSubsampling_n2 < ULong.fromRaw(0) || SingleDiagnosticParameterReportForwardControlSubsampling_n2 > ULong.fromRaw(31) then
        return Left(860)
    /* Encode SingleDiagnosticParameterReportForwardControlSubsampling_n2 */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(SingleDiagnosticParameterReportForwardControlSubsampling_n2)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(SingleDiagnosticParameterReportForwardControlSubsampling_n2)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 1024L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 43L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode structure */
    SingleDiagnosticParameterReportForwardControlSubsampling_structure_ACN_Encode(codec, pVal, SingleDiagnosticParameterReportForwardControlSubsampling_n2, pVal.structure) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 1035L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = pVal.structure.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 1035L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def DiagnosticParameterReportForwardControl_TSingleDiagnosticParameterReportForwardControlSubsampling_structure_pVal_structure_structure_Encode_loop(codec: ACN, structure: TSingleDiagnosticParameterReportForwardControlSubsampling_structure, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= structure.nCount))
    require((0 <= structure.nCount) && (structure.nCount <= structure.arr.size) && (structure.arr.size <= 31))
    require(codec.base.bitStream.validate_offset_bits((32L * (structure.nCount - i1))))
    decreases(structure.nCount - i1)
    if (i1 == structure.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 32L * (structure.nCount - i1), 32L)
        }
        TDiagnosticParameterStructure_ID_ConfigurationSubsampling_ACN_Encode(structure.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(32L * (i1 + 1) == 32L * i1 + 32L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 32L * (structure.nCount - i1), 32L)
            check(codec.base.bitStream.validate_offset_bits(32L * (structure.nCount - (i1 + 1))))
        }
        val res = DiagnosticParameterReportForwardControl_TSingleDiagnosticParameterReportForwardControlSubsampling_structure_pVal_structure_structure_Encode_loop(codec, structure, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TSingleDiagnosticParameterReportForwardControlSubsampling_structure.sizeRange(structure.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, structure.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + structure.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TSingleDiagnosticParameterReportForwardControlSubsampling_structure.sizeRange(structure.arr, codecSnap1.base.bitStream.bitIndex, i1, structure.nCount) == structure.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TSingleDiagnosticParameterReportForwardControlSubsampling_structure.sizeRange(structure.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, structure.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TSingleDiagnosticParameterReportForwardControlSubsampling_structure.sizeRange(structure.arr, codecSnap1.base.bitStream.bitIndex, i1, structure.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TSingleDiagnosticParameterReportForwardControlSubsampling_structure.sizeRange(structure.arr, old(codec).base.bitStream.bitIndex, i1, structure.nCount)
    }
}



@opaque @inlineOnce
def SingleDiagnosticParameterReportForwardControlSubsampling_structure_ACN_Encode(codec: ACN, pVal: TSingleDiagnosticParameterReportForwardControlSubsampling, SingleDiagnosticParameterReportForwardControlSubsampling_n2: ULong, structure: TSingleDiagnosticParameterReportForwardControlSubsampling_structure): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(992L))
    @ghost val oldCdc = snapshot(codec)
    TSingleDiagnosticParameterReportForwardControlSubsampling_structure_IsConstraintValid(structure) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    DiagnosticParameterReportForwardControl_TSingleDiagnosticParameterReportForwardControlSubsampling_structure_pVal_structure_structure_Encode_loop(codec, structure, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                structure.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + structure.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TSingleDiagnosticParameterReportForwardControlSubsampling_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TSingleDiagnosticParameterReportForwardControlSubsampling] =
{
    require(codec.base.bitStream.validate_offset_bits(1035L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode applicationProcess_ID */
    val pVal_applicationProcess_ID = TApplicationProcess_ID_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 1035L, 11L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 11L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 11L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode SingleDiagnosticParameterReportForwardControlSubsampling_n2 */
    val SingleDiagnosticParameterReportForwardControlSubsampling_n2 = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 1024L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 43L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode structure */
    val pVal_structure = SingleDiagnosticParameterReportForwardControlSubsampling_structure_ACN_Decode(codec, SingleDiagnosticParameterReportForwardControlSubsampling_n2) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 1035L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = pVal_structure.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 1035L)
    }
    val pVal = TSingleDiagnosticParameterReportForwardControlSubsampling(pVal_applicationProcess_ID, pVal_structure)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }

    TSingleDiagnosticParameterReportForwardControlSubsampling_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TSingleDiagnosticParameterReportForwardControlSubsampling](l)
        case Right(_) => RightMut[ErrorCode, TSingleDiagnosticParameterReportForwardControlSubsampling](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TSingleDiagnosticParameterReportForwardControlSubsampling]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TSingleDiagnosticParameterReportForwardControlSubsampling_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TSingleDiagnosticParameterReportForwardControlSubsampling_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TSingleDiagnosticParameterReportForwardControlSubsampling]) =
{
    require(codec.base.bitStream.validate_offset_bits(1035L))
    val cpy = snapshot(codec)
    val res = TSingleDiagnosticParameterReportForwardControlSubsampling_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def DiagnosticParameterReportForwardControl_TSingleDiagnosticParameterReportForwardControlSubsampling_structure_pVal_structure_structure_Decode_loop(codec: ACN, nCount: Int, structure: Vector[TDiagnosticParameterStructure_ID_ConfigurationSubsampling], i1: Int): EitherMut[Int, Vector[TDiagnosticParameterStructure_ID_ConfigurationSubsampling]] = {
    require((0 <= nCount) && (nCount <= 31))
    require((0 <= i1) && (i1 <= nCount))
    require(structure.size == i1)
    require(codec.base.bitStream.validate_offset_bits((32L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(structure)
            vecRangesEqSlicedLemma(structure, structure, 0, structure.size, 0, i1)
        }
        RightMut[Int, Vector[TDiagnosticParameterStructure_ID_ConfigurationSubsampling]](structure)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 32L * (nCount - i1), 32L)
        }
        val structure_arr_i1_ = TDiagnosticParameterStructure_ID_ConfigurationSubsampling_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(32L * (i1 + 1) == 32L * i1 + 32L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 32L * (nCount - i1), 32L)
            check(codec.base.bitStream.validate_offset_bits(32L * (nCount - (i1 + 1))))
        }
        val res = DiagnosticParameterReportForwardControl_TSingleDiagnosticParameterReportForwardControlSubsampling_structure_pVal_structure_structure_Decode_loop(codec, nCount, structure.append(structure_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(structure, newVec, structure_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(structure.append(structure_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(structure.list, structure_arr_i1_, i1)
                    Vector.listApplyEqVecApply(structure.append(structure_arr_i1_), i1)
                    check(structure_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TDiagnosticParameterStructure_ID_ConfigurationSubsampling]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(structure, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TSingleDiagnosticParameterReportForwardControlSubsampling_structure.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def SingleDiagnosticParameterReportForwardControlSubsampling_structure_ACN_Decode(codec: ACN, SingleDiagnosticParameterReportForwardControlSubsampling_n2: ULong): EitherMut[Int, TSingleDiagnosticParameterReportForwardControlSubsampling_structure] = {
    require(codec.base.bitStream.validate_offset_bits(992L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val structure =
        if ((SingleDiagnosticParameterReportForwardControlSubsampling_n2 <= ULong.fromRaw(31))) then
            val structure_nCount = SingleDiagnosticParameterReportForwardControlSubsampling_n2.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val structure = DiagnosticParameterReportForwardControl_TSingleDiagnosticParameterReportForwardControlSubsampling_structure_pVal_structure_structure_Decode_loop(codec, structure_nCount, Vector.empty[TDiagnosticParameterStructure_ID_ConfigurationSubsampling], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val structure = TSingleDiagnosticParameterReportForwardControlSubsampling_structure(structure_nCount, bdg)
                    ghostExpr {
                        structure.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    structure
            }
            structure
        else return LeftMut(ERR_ACN_DECODE_SINGLEDIAGNOSTICPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_STRUCTURE)
    TSingleDiagnosticParameterReportForwardControlSubsampling_structure_IsConstraintValid(structure) match {
        case Left(l) =>
            LeftMut[Int, TSingleDiagnosticParameterReportForwardControlSubsampling_structure](l)
        case Right(_) =>
            RightMut[Int, TSingleDiagnosticParameterReportForwardControlSubsampling_structure](structure)
    }
}.ensuring { (res: EitherMut[Int, TSingleDiagnosticParameterReportForwardControlSubsampling_structure]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TSingleDiagnosticParameterReportForwardControlSubsampling_structure_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def SingleDiagnosticParameterReportForwardControlSubsampling_structure_ACN_Decode_pure(codec: ACN, SingleDiagnosticParameterReportForwardControlSubsampling_n2: ULong): (ACN, EitherMut[Int, TSingleDiagnosticParameterReportForwardControlSubsampling_structure]) = {
    require(codec.base.bitStream.validate_offset_bits(992L))
    val cpy = snapshot(codec)
    val res = SingleDiagnosticParameterReportForwardControlSubsampling_structure_ACN_Decode(cpy, SingleDiagnosticParameterReportForwardControlSubsampling_n2)
    (cpy, res)
}

def TDiagnosticParameterReportForwardControlSubsampling_forwardControl_IsConstraintValid(pVal: TDiagnosticParameterReportForwardControlSubsampling_forwardControl): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = ((1 <= pVal.nCount) && (pVal.nCount <= 31)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TSingleDiagnosticParameterReportForwardControlSubsampling_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TDiagnosticParameterReportForwardControlSubsampling_IsConstraintValid(pVal: TDiagnosticParameterReportForwardControlSubsampling): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TDiagnosticParameterReportForwardControlSubsampling_forwardControl_IsConstraintValid(pVal.forwardControl)
    ret
}

def TDiagnosticParameterReportForwardControlSubsampling_forwardControl_Initialize(): TDiagnosticParameterReportForwardControlSubsampling_forwardControl = TDiagnosticParameterReportForwardControlSubsampling_forwardControl(1, Vector.fill(31)(TSingleDiagnosticParameterReportForwardControlSubsampling_Initialize()))
def TDiagnosticParameterReportForwardControlSubsampling_Initialize(): TDiagnosticParameterReportForwardControlSubsampling = TDiagnosticParameterReportForwardControlSubsampling(forwardControl = TDiagnosticParameterReportForwardControlSubsampling_forwardControl_Initialize())

@opaque @inlineOnce 
def TDiagnosticParameterReportForwardControlSubsampling_ACN_Encode(pVal: TDiagnosticParameterReportForwardControlSubsampling, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(32117L))
    var i1: Int = 0
    TDiagnosticParameterReportForwardControlSubsampling_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val DiagnosticParameterReportForwardControlSubsampling_n1 = ULong.fromRaw(pVal.forwardControl.nCount)
    if DiagnosticParameterReportForwardControlSubsampling_n1 < ULong.fromRaw(1) || DiagnosticParameterReportForwardControlSubsampling_n1 > ULong.fromRaw(31) then
        return Left(860)
    /* Encode DiagnosticParameterReportForwardControlSubsampling_n1 */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(DiagnosticParameterReportForwardControlSubsampling_n1)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(DiagnosticParameterReportForwardControlSubsampling_n1)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 32117L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode forwardControl */
    DiagnosticParameterReportForwardControlSubsampling_forwardControl_ACN_Encode(codec, pVal, DiagnosticParameterReportForwardControlSubsampling_n1, pVal.forwardControl) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32117L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.forwardControl.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 32117L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def DiagnosticParameterReportForwardControl_TDiagnosticParameterReportForwardControlSubsampling_forwardControl_pVal_forwardControl_forwardControl_Encode_loop(codec: ACN, forwardControl: TDiagnosticParameterReportForwardControlSubsampling_forwardControl, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= forwardControl.nCount))
    require((1 <= forwardControl.nCount) && (forwardControl.nCount <= forwardControl.arr.size) && (forwardControl.arr.size <= 31))
    require(codec.base.bitStream.validate_offset_bits((1035L * (forwardControl.nCount - i1))))
    decreases(forwardControl.nCount - i1)
    if (i1 == forwardControl.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 1035L * (forwardControl.nCount - i1), 1035L)
        }
        TSingleDiagnosticParameterReportForwardControlSubsampling_ACN_Encode(forwardControl.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(1035L * (i1 + 1) == 1035L * i1 + 1035L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 1035L * (forwardControl.nCount - i1), 1035L)
            check(codec.base.bitStream.validate_offset_bits(1035L * (forwardControl.nCount - (i1 + 1))))
        }
        val res = DiagnosticParameterReportForwardControl_TDiagnosticParameterReportForwardControlSubsampling_forwardControl_pVal_forwardControl_forwardControl_Encode_loop(codec, forwardControl, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TDiagnosticParameterReportForwardControlSubsampling_forwardControl.sizeRange(forwardControl.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, forwardControl.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + forwardControl.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TDiagnosticParameterReportForwardControlSubsampling_forwardControl.sizeRange(forwardControl.arr, codecSnap1.base.bitStream.bitIndex, i1, forwardControl.nCount) == forwardControl.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TDiagnosticParameterReportForwardControlSubsampling_forwardControl.sizeRange(forwardControl.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, forwardControl.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TDiagnosticParameterReportForwardControlSubsampling_forwardControl.sizeRange(forwardControl.arr, codecSnap1.base.bitStream.bitIndex, i1, forwardControl.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TDiagnosticParameterReportForwardControlSubsampling_forwardControl.sizeRange(forwardControl.arr, old(codec).base.bitStream.bitIndex, i1, forwardControl.nCount)
    }
}



@opaque @inlineOnce
def DiagnosticParameterReportForwardControlSubsampling_forwardControl_ACN_Encode(codec: ACN, pVal: TDiagnosticParameterReportForwardControlSubsampling, DiagnosticParameterReportForwardControlSubsampling_n1: ULong, forwardControl: TDiagnosticParameterReportForwardControlSubsampling_forwardControl): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(32085L))
    @ghost val oldCdc = snapshot(codec)
    TDiagnosticParameterReportForwardControlSubsampling_forwardControl_IsConstraintValid(forwardControl) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    DiagnosticParameterReportForwardControl_TDiagnosticParameterReportForwardControlSubsampling_forwardControl_pVal_forwardControl_forwardControl_Encode_loop(codec, forwardControl, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                forwardControl.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + forwardControl.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TDiagnosticParameterReportForwardControlSubsampling_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TDiagnosticParameterReportForwardControlSubsampling] =
{
    require(codec.base.bitStream.validate_offset_bits(32117L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode DiagnosticParameterReportForwardControlSubsampling_n1 */
    val DiagnosticParameterReportForwardControlSubsampling_n1 = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 32117L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode forwardControl */
    val pVal_forwardControl = DiagnosticParameterReportForwardControlSubsampling_forwardControl_ACN_Decode(codec, DiagnosticParameterReportForwardControlSubsampling_n1) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32117L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_forwardControl.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 32117L)
    }
    val pVal = TDiagnosticParameterReportForwardControlSubsampling(pVal_forwardControl)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }

    TDiagnosticParameterReportForwardControlSubsampling_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TDiagnosticParameterReportForwardControlSubsampling](l)
        case Right(_) => RightMut[ErrorCode, TDiagnosticParameterReportForwardControlSubsampling](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TDiagnosticParameterReportForwardControlSubsampling]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TDiagnosticParameterReportForwardControlSubsampling_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TDiagnosticParameterReportForwardControlSubsampling_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TDiagnosticParameterReportForwardControlSubsampling]) =
{
    require(codec.base.bitStream.validate_offset_bits(32117L))
    val cpy = snapshot(codec)
    val res = TDiagnosticParameterReportForwardControlSubsampling_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def DiagnosticParameterReportForwardControl_TDiagnosticParameterReportForwardControlSubsampling_forwardControl_pVal_forwardControl_forwardControl_Decode_loop(codec: ACN, nCount: Int, forwardControl: Vector[TSingleDiagnosticParameterReportForwardControlSubsampling], i1: Int): EitherMut[Int, Vector[TSingleDiagnosticParameterReportForwardControlSubsampling]] = {
    require((1 <= nCount) && (nCount <= 31))
    require((0 <= i1) && (i1 <= nCount))
    require(forwardControl.size == i1)
    require(codec.base.bitStream.validate_offset_bits((1035L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(forwardControl)
            vecRangesEqSlicedLemma(forwardControl, forwardControl, 0, forwardControl.size, 0, i1)
        }
        RightMut[Int, Vector[TSingleDiagnosticParameterReportForwardControlSubsampling]](forwardControl)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 1035L * (nCount - i1), 1035L)
        }
        val forwardControl_arr_i1_ = TSingleDiagnosticParameterReportForwardControlSubsampling_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(1035L * (i1 + 1) == 1035L * i1 + 1035L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 1035L * (nCount - i1), 1035L)
            check(codec.base.bitStream.validate_offset_bits(1035L * (nCount - (i1 + 1))))
        }
        val res = DiagnosticParameterReportForwardControl_TDiagnosticParameterReportForwardControlSubsampling_forwardControl_pVal_forwardControl_forwardControl_Decode_loop(codec, nCount, forwardControl.append(forwardControl_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(forwardControl, newVec, forwardControl_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(forwardControl.append(forwardControl_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(forwardControl.list, forwardControl_arr_i1_, i1)
                    Vector.listApplyEqVecApply(forwardControl.append(forwardControl_arr_i1_), i1)
                    check(forwardControl_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TSingleDiagnosticParameterReportForwardControlSubsampling]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(forwardControl, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TDiagnosticParameterReportForwardControlSubsampling_forwardControl.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def DiagnosticParameterReportForwardControlSubsampling_forwardControl_ACN_Decode(codec: ACN, DiagnosticParameterReportForwardControlSubsampling_n1: ULong): EitherMut[Int, TDiagnosticParameterReportForwardControlSubsampling_forwardControl] = {
    require(codec.base.bitStream.validate_offset_bits(32085L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val forwardControl =
        if ((ULong.fromRaw(1) <= DiagnosticParameterReportForwardControlSubsampling_n1) && (DiagnosticParameterReportForwardControlSubsampling_n1 <= ULong.fromRaw(31))) then
            val forwardControl_nCount = DiagnosticParameterReportForwardControlSubsampling_n1.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val forwardControl = DiagnosticParameterReportForwardControl_TDiagnosticParameterReportForwardControlSubsampling_forwardControl_pVal_forwardControl_forwardControl_Decode_loop(codec, forwardControl_nCount, Vector.empty[TSingleDiagnosticParameterReportForwardControlSubsampling], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val forwardControl = TDiagnosticParameterReportForwardControlSubsampling_forwardControl(forwardControl_nCount, bdg)
                    ghostExpr {
                        forwardControl.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    forwardControl
            }
            forwardControl
        else return LeftMut(ERR_ACN_DECODE_DIAGNOSTICPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_FORWARDCONTROL)
    TDiagnosticParameterReportForwardControlSubsampling_forwardControl_IsConstraintValid(forwardControl) match {
        case Left(l) =>
            LeftMut[Int, TDiagnosticParameterReportForwardControlSubsampling_forwardControl](l)
        case Right(_) =>
            RightMut[Int, TDiagnosticParameterReportForwardControlSubsampling_forwardControl](forwardControl)
    }
}.ensuring { (res: EitherMut[Int, TDiagnosticParameterReportForwardControlSubsampling_forwardControl]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TDiagnosticParameterReportForwardControlSubsampling_forwardControl_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def DiagnosticParameterReportForwardControlSubsampling_forwardControl_ACN_Decode_pure(codec: ACN, DiagnosticParameterReportForwardControlSubsampling_n1: ULong): (ACN, EitherMut[Int, TDiagnosticParameterReportForwardControlSubsampling_forwardControl]) = {
    require(codec.base.bitStream.validate_offset_bits(32085L))
    val cpy = snapshot(codec)
    val res = DiagnosticParameterReportForwardControlSubsampling_forwardControl_ACN_Decode(cpy, DiagnosticParameterReportForwardControlSubsampling_n1)
    (cpy, res)
}

def TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure_IsConstraintValid(pVal: TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = (pVal.nCount <= 31) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TDiagnosticParameterStructure_ID_ConfigurationNoSubsampling_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TSingleDiagnosticParameterReportForwardControlNoSubsampling_IsConstraintValid(pVal: TSingleDiagnosticParameterReportForwardControlNoSubsampling): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TApplicationProcess_ID_IsConstraintValid(pVal.applicationProcess_ID)
    if ret.isRight then
        ret = TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure_IsConstraintValid(pVal.structure)
    ret
}

def TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure_Initialize(): TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure = TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure(0, Vector.fill(31)(TDiagnosticParameterStructure_ID_ConfigurationNoSubsampling_Initialize()))
def TSingleDiagnosticParameterReportForwardControlNoSubsampling_Initialize(): TSingleDiagnosticParameterReportForwardControlNoSubsampling = TSingleDiagnosticParameterReportForwardControlNoSubsampling(applicationProcess_ID = ULong.fromRaw(0L), structure = TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure_Initialize())

@opaque @inlineOnce 
def TSingleDiagnosticParameterReportForwardControlNoSubsampling_ACN_Encode(pVal: TSingleDiagnosticParameterReportForwardControlNoSubsampling, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(1035L))
    var i1: Int = 0
    TSingleDiagnosticParameterReportForwardControlNoSubsampling_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode applicationProcess_ID */
    TApplicationProcess_ID_ACN_Encode(pVal.applicationProcess_ID, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 1035L, 11L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 11L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 11L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    val SingleDiagnosticParameterReportForwardControlNoSubsampling_n2 = ULong.fromRaw(pVal.structure.nCount)
    if SingleDiagnosticParameterReportForwardControlNoSubsampling_n2 < ULong.fromRaw(0) || SingleDiagnosticParameterReportForwardControlNoSubsampling_n2 > ULong.fromRaw(31) then
        return Left(860)
    /* Encode SingleDiagnosticParameterReportForwardControlNoSubsampling_n2 */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(SingleDiagnosticParameterReportForwardControlNoSubsampling_n2)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(SingleDiagnosticParameterReportForwardControlNoSubsampling_n2)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 1024L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 43L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode structure */
    SingleDiagnosticParameterReportForwardControlNoSubsampling_structure_ACN_Encode(codec, pVal, SingleDiagnosticParameterReportForwardControlNoSubsampling_n2, pVal.structure) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 1035L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = pVal.structure.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 1035L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def DiagnosticParameterReportForwardControl_TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure_pVal_structure_structure_Encode_loop(codec: ACN, structure: TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= structure.nCount))
    require((0 <= structure.nCount) && (structure.nCount <= structure.arr.size) && (structure.arr.size <= 31))
    require(codec.base.bitStream.validate_offset_bits((32L * (structure.nCount - i1))))
    decreases(structure.nCount - i1)
    if (i1 == structure.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 32L * (structure.nCount - i1), 32L)
        }
        TDiagnosticParameterStructure_ID_ConfigurationNoSubsampling_ACN_Encode(structure.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(32L * (i1 + 1) == 32L * i1 + 32L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 32L * (structure.nCount - i1), 32L)
            check(codec.base.bitStream.validate_offset_bits(32L * (structure.nCount - (i1 + 1))))
        }
        val res = DiagnosticParameterReportForwardControl_TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure_pVal_structure_structure_Encode_loop(codec, structure, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure.sizeRange(structure.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, structure.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + structure.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure.sizeRange(structure.arr, codecSnap1.base.bitStream.bitIndex, i1, structure.nCount) == structure.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure.sizeRange(structure.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, structure.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure.sizeRange(structure.arr, codecSnap1.base.bitStream.bitIndex, i1, structure.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure.sizeRange(structure.arr, old(codec).base.bitStream.bitIndex, i1, structure.nCount)
    }
}



@opaque @inlineOnce
def SingleDiagnosticParameterReportForwardControlNoSubsampling_structure_ACN_Encode(codec: ACN, pVal: TSingleDiagnosticParameterReportForwardControlNoSubsampling, SingleDiagnosticParameterReportForwardControlNoSubsampling_n2: ULong, structure: TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(992L))
    @ghost val oldCdc = snapshot(codec)
    TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure_IsConstraintValid(structure) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    DiagnosticParameterReportForwardControl_TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure_pVal_structure_structure_Encode_loop(codec, structure, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                structure.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + structure.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TSingleDiagnosticParameterReportForwardControlNoSubsampling_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TSingleDiagnosticParameterReportForwardControlNoSubsampling] =
{
    require(codec.base.bitStream.validate_offset_bits(1035L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode applicationProcess_ID */
    val pVal_applicationProcess_ID = TApplicationProcess_ID_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 1035L, 11L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 11L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 11L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode SingleDiagnosticParameterReportForwardControlNoSubsampling_n2 */
    val SingleDiagnosticParameterReportForwardControlNoSubsampling_n2 = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 1024L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 43L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode structure */
    val pVal_structure = SingleDiagnosticParameterReportForwardControlNoSubsampling_structure_ACN_Decode(codec, SingleDiagnosticParameterReportForwardControlNoSubsampling_n2) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 1035L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = pVal_structure.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 1035L)
    }
    val pVal = TSingleDiagnosticParameterReportForwardControlNoSubsampling(pVal_applicationProcess_ID, pVal_structure)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }

    TSingleDiagnosticParameterReportForwardControlNoSubsampling_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TSingleDiagnosticParameterReportForwardControlNoSubsampling](l)
        case Right(_) => RightMut[ErrorCode, TSingleDiagnosticParameterReportForwardControlNoSubsampling](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TSingleDiagnosticParameterReportForwardControlNoSubsampling]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TSingleDiagnosticParameterReportForwardControlNoSubsampling_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TSingleDiagnosticParameterReportForwardControlNoSubsampling_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TSingleDiagnosticParameterReportForwardControlNoSubsampling]) =
{
    require(codec.base.bitStream.validate_offset_bits(1035L))
    val cpy = snapshot(codec)
    val res = TSingleDiagnosticParameterReportForwardControlNoSubsampling_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def DiagnosticParameterReportForwardControl_TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure_pVal_structure_structure_Decode_loop(codec: ACN, nCount: Int, structure: Vector[TDiagnosticParameterStructure_ID_ConfigurationNoSubsampling], i1: Int): EitherMut[Int, Vector[TDiagnosticParameterStructure_ID_ConfigurationNoSubsampling]] = {
    require((0 <= nCount) && (nCount <= 31))
    require((0 <= i1) && (i1 <= nCount))
    require(structure.size == i1)
    require(codec.base.bitStream.validate_offset_bits((32L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(structure)
            vecRangesEqSlicedLemma(structure, structure, 0, structure.size, 0, i1)
        }
        RightMut[Int, Vector[TDiagnosticParameterStructure_ID_ConfigurationNoSubsampling]](structure)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 32L * (nCount - i1), 32L)
        }
        val structure_arr_i1_ = TDiagnosticParameterStructure_ID_ConfigurationNoSubsampling_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(32L * (i1 + 1) == 32L * i1 + 32L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 32L * (nCount - i1), 32L)
            check(codec.base.bitStream.validate_offset_bits(32L * (nCount - (i1 + 1))))
        }
        val res = DiagnosticParameterReportForwardControl_TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure_pVal_structure_structure_Decode_loop(codec, nCount, structure.append(structure_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(structure, newVec, structure_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(structure.append(structure_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(structure.list, structure_arr_i1_, i1)
                    Vector.listApplyEqVecApply(structure.append(structure_arr_i1_), i1)
                    check(structure_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TDiagnosticParameterStructure_ID_ConfigurationNoSubsampling]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(structure, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def SingleDiagnosticParameterReportForwardControlNoSubsampling_structure_ACN_Decode(codec: ACN, SingleDiagnosticParameterReportForwardControlNoSubsampling_n2: ULong): EitherMut[Int, TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure] = {
    require(codec.base.bitStream.validate_offset_bits(992L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val structure =
        if ((SingleDiagnosticParameterReportForwardControlNoSubsampling_n2 <= ULong.fromRaw(31))) then
            val structure_nCount = SingleDiagnosticParameterReportForwardControlNoSubsampling_n2.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val structure = DiagnosticParameterReportForwardControl_TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure_pVal_structure_structure_Decode_loop(codec, structure_nCount, Vector.empty[TDiagnosticParameterStructure_ID_ConfigurationNoSubsampling], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val structure = TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure(structure_nCount, bdg)
                    ghostExpr {
                        structure.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    structure
            }
            structure
        else return LeftMut(ERR_ACN_DECODE_SINGLEDIAGNOSTICPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_STRUCTURE)
    TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure_IsConstraintValid(structure) match {
        case Left(l) =>
            LeftMut[Int, TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure](l)
        case Right(_) =>
            RightMut[Int, TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure](structure)
    }
}.ensuring { (res: EitherMut[Int, TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def SingleDiagnosticParameterReportForwardControlNoSubsampling_structure_ACN_Decode_pure(codec: ACN, SingleDiagnosticParameterReportForwardControlNoSubsampling_n2: ULong): (ACN, EitherMut[Int, TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure]) = {
    require(codec.base.bitStream.validate_offset_bits(992L))
    val cpy = snapshot(codec)
    val res = SingleDiagnosticParameterReportForwardControlNoSubsampling_structure_ACN_Decode(cpy, SingleDiagnosticParameterReportForwardControlNoSubsampling_n2)
    (cpy, res)
}

def TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl_IsConstraintValid(pVal: TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = ((1 <= pVal.nCount) && (pVal.nCount <= 31)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TSingleDiagnosticParameterReportForwardControlNoSubsampling_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TDiagnosticParameterReportForwardControlNoSubsampling_IsConstraintValid(pVal: TDiagnosticParameterReportForwardControlNoSubsampling): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl_IsConstraintValid(pVal.forwardControl)
    ret
}

def TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl_Initialize(): TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl = TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl(1, Vector.fill(31)(TSingleDiagnosticParameterReportForwardControlNoSubsampling_Initialize()))
def TDiagnosticParameterReportForwardControlNoSubsampling_Initialize(): TDiagnosticParameterReportForwardControlNoSubsampling = TDiagnosticParameterReportForwardControlNoSubsampling(forwardControl = TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl_Initialize())

@opaque @inlineOnce 
def TDiagnosticParameterReportForwardControlNoSubsampling_ACN_Encode(pVal: TDiagnosticParameterReportForwardControlNoSubsampling, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(32117L))
    var i1: Int = 0
    TDiagnosticParameterReportForwardControlNoSubsampling_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val DiagnosticParameterReportForwardControlNoSubsampling_n1 = ULong.fromRaw(pVal.forwardControl.nCount)
    if DiagnosticParameterReportForwardControlNoSubsampling_n1 < ULong.fromRaw(1) || DiagnosticParameterReportForwardControlNoSubsampling_n1 > ULong.fromRaw(31) then
        return Left(860)
    /* Encode DiagnosticParameterReportForwardControlNoSubsampling_n1 */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(DiagnosticParameterReportForwardControlNoSubsampling_n1)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(DiagnosticParameterReportForwardControlNoSubsampling_n1)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 32117L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode forwardControl */
    DiagnosticParameterReportForwardControlNoSubsampling_forwardControl_ACN_Encode(codec, pVal, DiagnosticParameterReportForwardControlNoSubsampling_n1, pVal.forwardControl) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32117L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.forwardControl.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 32117L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def DiagnosticParameterReportForwardControl_TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl_pVal_forwardControl_forwardControl_Encode_loop(codec: ACN, forwardControl: TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= forwardControl.nCount))
    require((1 <= forwardControl.nCount) && (forwardControl.nCount <= forwardControl.arr.size) && (forwardControl.arr.size <= 31))
    require(codec.base.bitStream.validate_offset_bits((1035L * (forwardControl.nCount - i1))))
    decreases(forwardControl.nCount - i1)
    if (i1 == forwardControl.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 1035L * (forwardControl.nCount - i1), 1035L)
        }
        TSingleDiagnosticParameterReportForwardControlNoSubsampling_ACN_Encode(forwardControl.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(1035L * (i1 + 1) == 1035L * i1 + 1035L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 1035L * (forwardControl.nCount - i1), 1035L)
            check(codec.base.bitStream.validate_offset_bits(1035L * (forwardControl.nCount - (i1 + 1))))
        }
        val res = DiagnosticParameterReportForwardControl_TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl_pVal_forwardControl_forwardControl_Encode_loop(codec, forwardControl, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl.sizeRange(forwardControl.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, forwardControl.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + forwardControl.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl.sizeRange(forwardControl.arr, codecSnap1.base.bitStream.bitIndex, i1, forwardControl.nCount) == forwardControl.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl.sizeRange(forwardControl.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, forwardControl.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl.sizeRange(forwardControl.arr, codecSnap1.base.bitStream.bitIndex, i1, forwardControl.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl.sizeRange(forwardControl.arr, old(codec).base.bitStream.bitIndex, i1, forwardControl.nCount)
    }
}



@opaque @inlineOnce
def DiagnosticParameterReportForwardControlNoSubsampling_forwardControl_ACN_Encode(codec: ACN, pVal: TDiagnosticParameterReportForwardControlNoSubsampling, DiagnosticParameterReportForwardControlNoSubsampling_n1: ULong, forwardControl: TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(32085L))
    @ghost val oldCdc = snapshot(codec)
    TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl_IsConstraintValid(forwardControl) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    DiagnosticParameterReportForwardControl_TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl_pVal_forwardControl_forwardControl_Encode_loop(codec, forwardControl, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                forwardControl.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + forwardControl.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TDiagnosticParameterReportForwardControlNoSubsampling_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TDiagnosticParameterReportForwardControlNoSubsampling] =
{
    require(codec.base.bitStream.validate_offset_bits(32117L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode DiagnosticParameterReportForwardControlNoSubsampling_n1 */
    val DiagnosticParameterReportForwardControlNoSubsampling_n1 = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 32117L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode forwardControl */
    val pVal_forwardControl = DiagnosticParameterReportForwardControlNoSubsampling_forwardControl_ACN_Decode(codec, DiagnosticParameterReportForwardControlNoSubsampling_n1) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32117L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_forwardControl.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 32117L)
    }
    val pVal = TDiagnosticParameterReportForwardControlNoSubsampling(pVal_forwardControl)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }

    TDiagnosticParameterReportForwardControlNoSubsampling_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TDiagnosticParameterReportForwardControlNoSubsampling](l)
        case Right(_) => RightMut[ErrorCode, TDiagnosticParameterReportForwardControlNoSubsampling](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TDiagnosticParameterReportForwardControlNoSubsampling]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TDiagnosticParameterReportForwardControlNoSubsampling_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TDiagnosticParameterReportForwardControlNoSubsampling_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TDiagnosticParameterReportForwardControlNoSubsampling]) =
{
    require(codec.base.bitStream.validate_offset_bits(32117L))
    val cpy = snapshot(codec)
    val res = TDiagnosticParameterReportForwardControlNoSubsampling_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def DiagnosticParameterReportForwardControl_TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl_pVal_forwardControl_forwardControl_Decode_loop(codec: ACN, nCount: Int, forwardControl: Vector[TSingleDiagnosticParameterReportForwardControlNoSubsampling], i1: Int): EitherMut[Int, Vector[TSingleDiagnosticParameterReportForwardControlNoSubsampling]] = {
    require((1 <= nCount) && (nCount <= 31))
    require((0 <= i1) && (i1 <= nCount))
    require(forwardControl.size == i1)
    require(codec.base.bitStream.validate_offset_bits((1035L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(forwardControl)
            vecRangesEqSlicedLemma(forwardControl, forwardControl, 0, forwardControl.size, 0, i1)
        }
        RightMut[Int, Vector[TSingleDiagnosticParameterReportForwardControlNoSubsampling]](forwardControl)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 1035L * (nCount - i1), 1035L)
        }
        val forwardControl_arr_i1_ = TSingleDiagnosticParameterReportForwardControlNoSubsampling_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(1035L * (i1 + 1) == 1035L * i1 + 1035L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 1035L * (nCount - i1), 1035L)
            check(codec.base.bitStream.validate_offset_bits(1035L * (nCount - (i1 + 1))))
        }
        val res = DiagnosticParameterReportForwardControl_TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl_pVal_forwardControl_forwardControl_Decode_loop(codec, nCount, forwardControl.append(forwardControl_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(forwardControl, newVec, forwardControl_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(forwardControl.append(forwardControl_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(forwardControl.list, forwardControl_arr_i1_, i1)
                    Vector.listApplyEqVecApply(forwardControl.append(forwardControl_arr_i1_), i1)
                    check(forwardControl_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TSingleDiagnosticParameterReportForwardControlNoSubsampling]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(forwardControl, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def DiagnosticParameterReportForwardControlNoSubsampling_forwardControl_ACN_Decode(codec: ACN, DiagnosticParameterReportForwardControlNoSubsampling_n1: ULong): EitherMut[Int, TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl] = {
    require(codec.base.bitStream.validate_offset_bits(32085L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val forwardControl =
        if ((ULong.fromRaw(1) <= DiagnosticParameterReportForwardControlNoSubsampling_n1) && (DiagnosticParameterReportForwardControlNoSubsampling_n1 <= ULong.fromRaw(31))) then
            val forwardControl_nCount = DiagnosticParameterReportForwardControlNoSubsampling_n1.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val forwardControl = DiagnosticParameterReportForwardControl_TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl_pVal_forwardControl_forwardControl_Decode_loop(codec, forwardControl_nCount, Vector.empty[TSingleDiagnosticParameterReportForwardControlNoSubsampling], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val forwardControl = TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl(forwardControl_nCount, bdg)
                    ghostExpr {
                        forwardControl.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    forwardControl
            }
            forwardControl
        else return LeftMut(ERR_ACN_DECODE_DIAGNOSTICPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_FORWARDCONTROL)
    TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl_IsConstraintValid(forwardControl) match {
        case Left(l) =>
            LeftMut[Int, TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl](l)
        case Right(_) =>
            RightMut[Int, TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl](forwardControl)
    }
}.ensuring { (res: EitherMut[Int, TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def DiagnosticParameterReportForwardControlNoSubsampling_forwardControl_ACN_Decode_pure(codec: ACN, DiagnosticParameterReportForwardControlNoSubsampling_n1: ULong): (ACN, EitherMut[Int, TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl]) = {
    require(codec.base.bitStream.validate_offset_bits(32085L))
    val cpy = snapshot(codec)
    val res = DiagnosticParameterReportForwardControlNoSubsampling_forwardControl_ACN_Decode(cpy, DiagnosticParameterReportForwardControlNoSubsampling_n1)
    (cpy, res)
}