/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TSingleEventDefinitionForwardControl --------------------------------------------*/


case class TSingleEventDefinitionForwardControl_eventDefinition_ID (nCount: Int, arr: Vector[TEventDefinition_ID])
{
    require(this.arr.size <= 31 && 0 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854774815L))
        TSingleEventDefinitionForwardControl_eventDefinition_ID.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 992L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774815L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774815L))
        TSingleEventDefinitionForwardControl_eventDefinition_ID.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774815L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774815L))
        require((offset % 8L) == (otherOffset % 8L))
        TSingleEventDefinitionForwardControl_eventDefinition_ID.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774815L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774815L))
        require((offset % 16L) == (otherOffset % 16L))
        TSingleEventDefinitionForwardControl_eventDefinition_ID.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774815L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774815L))
        require((offset % 32L) == (otherOffset % 32L))
        TSingleEventDefinitionForwardControl_eventDefinition_ID.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TSingleEventDefinitionForwardControl_eventDefinition_ID {
    def sizeRange(ls: Vector[ULong], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = 32L
            assert(elemSize == 32L)
            elemSize + TSingleEventDefinitionForwardControl_eventDefinition_ID.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 32L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[ULong], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 32L
            val elemSizeOtherOff = 32L
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            TSingleEventDefinitionForwardControl_eventDefinition_ID.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TSingleEventDefinitionForwardControl_eventDefinition_ID.sizeRange(ls, offset, from, to) == TSingleEventDefinitionForwardControl_eventDefinition_ID.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[ULong], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 32L
            val elemSizeOtherOff = 32L
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            TSingleEventDefinitionForwardControl_eventDefinition_ID.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TSingleEventDefinitionForwardControl_eventDefinition_ID.sizeRange(ls, offset, from, to) == TSingleEventDefinitionForwardControl_eventDefinition_ID.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[ULong], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 32L
            val elemSizeOtherOff = 32L
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            TSingleEventDefinitionForwardControl_eventDefinition_ID.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TSingleEventDefinitionForwardControl_eventDefinition_ID.sizeRange(ls, offset, from, to) == TSingleEventDefinitionForwardControl_eventDefinition_ID.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[ULong], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = 32L
            val elemSizeOtherOff = 32L
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            TSingleEventDefinitionForwardControl_eventDefinition_ID.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TSingleEventDefinitionForwardControl_eventDefinition_ID.sizeRange(ls, offset, from, to) == TSingleEventDefinitionForwardControl_eventDefinition_ID.sizeRange(ls, otherOffset, from, to)
    }
}

case class TSingleEventDefinitionForwardControl (
    applicationProcess_ID: TApplicationProcess_ID, 
    eventDefinition_ID: TSingleEventDefinitionForwardControl_eventDefinition_ID
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854774772L))
        val size_0 = 11L
        val size_1 = 32L
        val size_2 = this.eventDefinition_ID.size(offset + size_0 + size_1)
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 1035L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774772L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774772L))
        val size_0_offset = 11L
        val size_0_otherOffset = 11L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.eventDefinition_ID.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.eventDefinition_ID.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.eventDefinition_ID.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774772L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774772L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 11L
        val size_0_otherOffset = 11L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.eventDefinition_ID.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.eventDefinition_ID.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.eventDefinition_ID.sizeLemmaNextByte(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774772L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774772L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 11L
        val size_0_otherOffset = 11L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.eventDefinition_ID.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.eventDefinition_ID.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.eventDefinition_ID.sizeLemmaNextWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774772L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774772L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 11L
        val size_0_otherOffset = 11L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.eventDefinition_ID.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.eventDefinition_ID.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.eventDefinition_ID.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_SINGLEEVENTDEFINITIONFORWARDCONTROL_EVENTDEFINITION_ID: Int = 503 /*(SIZE(0 .. maxEventDefinition-ID-Count)) */
@inline @cCode.inline val ERR_SINGLEEVENTDEFINITIONFORWARDCONTROL_EVENTDEFINITION_ID_ELM_2: Int = 498 /* */

@inline @cCode.inline val ERR_SINGLEEVENTDEFINITIONFORWARDCONTROL: Int = 508 /* */
@inline @cCode.inline val ERR_SINGLEEVENTDEFINITIONFORWARDCONTROL_APPLICATIONPROCESS_ID_2: Int = 486 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_SINGLEEVENTDEFINITIONFORWARDCONTROL: Int = 511 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_SINGLEEVENTDEFINITIONFORWARDCONTROL_APPLICATIONPROCESS_ID_2: Int = 489 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_SINGLEEVENTDEFINITIONFORWARDCONTROL_N2_UNINITIALIZED: Int = 512 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_SINGLEEVENTDEFINITIONFORWARDCONTROL_N2: Int = 491 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_SINGLEEVENTDEFINITIONFORWARDCONTROL_EVENTDEFINITION_ID: Int = 506 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_SINGLEEVENTDEFINITIONFORWARDCONTROL_EVENTDEFINITION_ID_ELM_2: Int = 501 /*  */
@inline @cCode.inline val TSingleEventDefinitionForwardControl_REQUIRED_BYTES_FOR_ACN_ENCODING = 130
@inline @cCode.inline val TSingleEventDefinitionForwardControl_REQUIRED_BITS_FOR_ACN_ENCODING = 1035

@inline @cCode.inline val ERR_ACN_DECODE_SINGLEEVENTDEFINITIONFORWARDCONTROL: Int = 513 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_SINGLEEVENTDEFINITIONFORWARDCONTROL_APPLICATIONPROCESS_ID_2: Int = 490 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_SINGLEEVENTDEFINITIONFORWARDCONTROL_N2: Int = 492 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_SINGLEEVENTDEFINITIONFORWARDCONTROL_EVENTDEFINITION_ID: Int = 507 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_SINGLEEVENTDEFINITIONFORWARDCONTROL_EVENTDEFINITION_ID_ELM_2: Int = 502 /*  */
/*-- TEventDefinitionForwardControl --------------------------------------------*/


case class TEventDefinitionForwardControl_forwardControl (nCount: Int, arr: Vector[TSingleEventDefinitionForwardControl])
{
    require(this.arr.size <= 31 && 1 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854743722L))
        TEventDefinitionForwardControl_forwardControl.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 32085L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743722L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743722L))
        TEventDefinitionForwardControl_forwardControl.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743722L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743722L))
        require((offset % 8L) == (otherOffset % 8L))
        TEventDefinitionForwardControl_forwardControl.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743722L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743722L))
        require((offset % 16L) == (otherOffset % 16L))
        TEventDefinitionForwardControl_forwardControl.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743722L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743722L))
        require((offset % 32L) == (otherOffset % 32L))
        TEventDefinitionForwardControl_forwardControl.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TEventDefinitionForwardControl_forwardControl {
    def sizeRange(ls: Vector[TSingleEventDefinitionForwardControl], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 1035L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(0L <= elemSize && elemSize <= 1035L)
            elemSize + TEventDefinitionForwardControl_forwardControl.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 1035L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TSingleEventDefinitionForwardControl], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 1035L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 1035L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 1035L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 1035L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TEventDefinitionForwardControl_forwardControl.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TEventDefinitionForwardControl_forwardControl.sizeRange(ls, offset, from, to) == TEventDefinitionForwardControl_forwardControl.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TSingleEventDefinitionForwardControl], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 1035L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 1035L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 1035L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 1035L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TEventDefinitionForwardControl_forwardControl.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TEventDefinitionForwardControl_forwardControl.sizeRange(ls, offset, from, to) == TEventDefinitionForwardControl_forwardControl.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TSingleEventDefinitionForwardControl], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 1035L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 1035L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 1035L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 1035L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TEventDefinitionForwardControl_forwardControl.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TEventDefinitionForwardControl_forwardControl.sizeRange(ls, offset, from, to) == TEventDefinitionForwardControl_forwardControl.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TSingleEventDefinitionForwardControl], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 1035L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 1035L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 1035L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 1035L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TEventDefinitionForwardControl_forwardControl.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TEventDefinitionForwardControl_forwardControl.sizeRange(ls, offset, from, to) == TEventDefinitionForwardControl_forwardControl.sizeRange(ls, otherOffset, from, to)
    }
}

case class TEventDefinitionForwardControl (
    forwardControl: TEventDefinitionForwardControl_forwardControl
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854743690L))
        val size_0 = 32L
        val size_1 = this.forwardControl.size(offset + size_0)
        size_0 + size_1
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 32117L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743690L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743690L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.forwardControl.size(offset + size_0_offset)
        val size_1_otherOffset = this.forwardControl.size(otherOffset + size_0_otherOffset)
        this.forwardControl.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743690L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743690L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.forwardControl.size(offset + size_0_offset)
        val size_1_otherOffset = this.forwardControl.size(otherOffset + size_0_otherOffset)
        this.forwardControl.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743690L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743690L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.forwardControl.size(offset + size_0_offset)
        val size_1_otherOffset = this.forwardControl.size(otherOffset + size_0_otherOffset)
        this.forwardControl.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743690L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743690L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.forwardControl.size(offset + size_0_offset)
        val size_1_otherOffset = this.forwardControl.size(otherOffset + size_0_otherOffset)
        this.forwardControl.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_EVENTDEFINITIONFORWARDCONTROL_FORWARDCONTROL: Int = 470 /*(SIZE(1 .. maxEventDefinitionForwardControlCount)) */
@inline @cCode.inline val ERR_EVENTDEFINITIONFORWARDCONTROL_FORWARDCONTROL_ELM_2: Int = 465 /* */

@inline @cCode.inline val ERR_EVENTDEFINITIONFORWARDCONTROL: Int = 475 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_EVENTDEFINITIONFORWARDCONTROL: Int = 478 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_EVENTDEFINITIONFORWARDCONTROL_N1_UNINITIALIZED: Int = 479 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_EVENTDEFINITIONFORWARDCONTROL_N1: Int = 431 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_EVENTDEFINITIONFORWARDCONTROL_FORWARDCONTROL: Int = 473 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_EVENTDEFINITIONFORWARDCONTROL_FORWARDCONTROL_ELM_2: Int = 468 /*  */
@inline @cCode.inline val TEventDefinitionForwardControl_REQUIRED_BYTES_FOR_ACN_ENCODING = 4015
@inline @cCode.inline val TEventDefinitionForwardControl_REQUIRED_BITS_FOR_ACN_ENCODING = 32117

@inline @cCode.inline val ERR_ACN_DECODE_EVENTDEFINITIONFORWARDCONTROL: Int = 480 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_EVENTDEFINITIONFORWARDCONTROL_N1: Int = 432 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_EVENTDEFINITIONFORWARDCONTROL_FORWARDCONTROL: Int = 474 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_EVENTDEFINITIONFORWARDCONTROL_FORWARDCONTROL_ELM_2: Int = 469 /*  */

// @inline @cCode.inline val maxEventDefinitionForwardControlCount: Int = 31 // defined in body
// @inline @cCode.inline val maxEventDefinition_ID_Count: Int = 31 // defined in body

