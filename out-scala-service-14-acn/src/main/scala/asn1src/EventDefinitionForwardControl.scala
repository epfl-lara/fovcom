/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

val maxEventDefinitionForwardControlCount: Int = 31 // variables:188
val maxEventDefinition_ID_Count: Int = 31 // variables:188

def TSingleEventDefinitionForwardControl_eventDefinition_ID_IsConstraintValid(pVal: TSingleEventDefinitionForwardControl_eventDefinition_ID): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = (pVal.nCount <= 31) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TEventDefinition_ID_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TSingleEventDefinitionForwardControl_IsConstraintValid(pVal: TSingleEventDefinitionForwardControl): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TApplicationProcess_ID_IsConstraintValid(pVal.applicationProcess_ID)
    if ret.isRight then
        ret = TSingleEventDefinitionForwardControl_eventDefinition_ID_IsConstraintValid(pVal.eventDefinition_ID)
    ret
}

def TSingleEventDefinitionForwardControl_eventDefinition_ID_Initialize(): TSingleEventDefinitionForwardControl_eventDefinition_ID = TSingleEventDefinitionForwardControl_eventDefinition_ID(0, Vector.fill(31)(ULong.fromRaw(0L)))
def TSingleEventDefinitionForwardControl_Initialize(): TSingleEventDefinitionForwardControl = TSingleEventDefinitionForwardControl(applicationProcess_ID = ULong.fromRaw(0L), eventDefinition_ID = TSingleEventDefinitionForwardControl_eventDefinition_ID_Initialize())

@opaque @inlineOnce 
def TSingleEventDefinitionForwardControl_ACN_Encode(pVal: TSingleEventDefinitionForwardControl, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(1035L))
    var i1: Int = 0
    TSingleEventDefinitionForwardControl_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode applicationProcess_ID */
    TApplicationProcess_ID_ACN_Encode(pVal.applicationProcess_ID, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 1035L, 11L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 11L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 11L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    val SingleEventDefinitionForwardControl_n2 = ULong.fromRaw(pVal.eventDefinition_ID.nCount)
    if SingleEventDefinitionForwardControl_n2 < ULong.fromRaw(0) || SingleEventDefinitionForwardControl_n2 > ULong.fromRaw(31) then
        return Left(860)
    /* Encode SingleEventDefinitionForwardControl_n2 */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(SingleEventDefinitionForwardControl_n2)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(SingleEventDefinitionForwardControl_n2)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 1024L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 43L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode eventDefinition_ID */
    SingleEventDefinitionForwardControl_eventDefinition_ID_ACN_Encode(codec, pVal, SingleEventDefinitionForwardControl_n2, pVal.eventDefinition_ID) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 1035L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = pVal.eventDefinition_ID.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 1035L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def EventDefinitionForwardControl_TSingleEventDefinitionForwardControl_eventDefinition_ID_pVal_eventDefinition_ID_eventDefinition_ID_Encode_loop(codec: ACN, eventDefinition_ID: TSingleEventDefinitionForwardControl_eventDefinition_ID, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= eventDefinition_ID.nCount))
    require((0 <= eventDefinition_ID.nCount) && (eventDefinition_ID.nCount <= eventDefinition_ID.arr.size) && (eventDefinition_ID.arr.size <= 31))
    require(codec.base.bitStream.validate_offset_bits((32L * (eventDefinition_ID.nCount - i1))))
    decreases(eventDefinition_ID.nCount - i1)
    if (i1 == eventDefinition_ID.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 32L * (eventDefinition_ID.nCount - i1), 32L)
        }
        TEventDefinition_ID_ACN_Encode(eventDefinition_ID.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(32L * (i1 + 1) == 32L * i1 + 32L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 32L * (eventDefinition_ID.nCount - i1), 32L)
            check(codec.base.bitStream.validate_offset_bits(32L * (eventDefinition_ID.nCount - (i1 + 1))))
        }
        val res = EventDefinitionForwardControl_TSingleEventDefinitionForwardControl_eventDefinition_ID_pVal_eventDefinition_ID_eventDefinition_ID_Encode_loop(codec, eventDefinition_ID, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TSingleEventDefinitionForwardControl_eventDefinition_ID.sizeRange(eventDefinition_ID.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, eventDefinition_ID.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + 32L)
                    assert(TSingleEventDefinitionForwardControl_eventDefinition_ID.sizeRange(eventDefinition_ID.arr, codecSnap1.base.bitStream.bitIndex, i1, eventDefinition_ID.nCount) == TSingleEventDefinitionForwardControl_eventDefinition_ID.sizeRange(eventDefinition_ID.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, eventDefinition_ID.nCount) + 32L)
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TSingleEventDefinitionForwardControl_eventDefinition_ID.sizeRange(eventDefinition_ID.arr, codecSnap1.base.bitStream.bitIndex, i1, eventDefinition_ID.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TSingleEventDefinitionForwardControl_eventDefinition_ID.sizeRange(eventDefinition_ID.arr, old(codec).base.bitStream.bitIndex, i1, eventDefinition_ID.nCount)
    }
}



@opaque @inlineOnce
def SingleEventDefinitionForwardControl_eventDefinition_ID_ACN_Encode(codec: ACN, pVal: TSingleEventDefinitionForwardControl, SingleEventDefinitionForwardControl_n2: ULong, eventDefinition_ID: TSingleEventDefinitionForwardControl_eventDefinition_ID): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(992L))
    @ghost val oldCdc = snapshot(codec)
    TSingleEventDefinitionForwardControl_eventDefinition_ID_IsConstraintValid(eventDefinition_ID) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    EventDefinitionForwardControl_TSingleEventDefinitionForwardControl_eventDefinition_ID_pVal_eventDefinition_ID_eventDefinition_ID_Encode_loop(codec, eventDefinition_ID, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                eventDefinition_ID.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + eventDefinition_ID.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TSingleEventDefinitionForwardControl_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TSingleEventDefinitionForwardControl] =
{
    require(codec.base.bitStream.validate_offset_bits(1035L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode applicationProcess_ID */
    val pVal_applicationProcess_ID = TApplicationProcess_ID_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 1035L, 11L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 11L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 11L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode SingleEventDefinitionForwardControl_n2 */
    val SingleEventDefinitionForwardControl_n2 = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 1024L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 43L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode eventDefinition_ID */
    val pVal_eventDefinition_ID = SingleEventDefinitionForwardControl_eventDefinition_ID_ACN_Decode(codec, SingleEventDefinitionForwardControl_n2) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 1035L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = pVal_eventDefinition_ID.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 1035L)
    }
    val pVal = TSingleEventDefinitionForwardControl(pVal_applicationProcess_ID, pVal_eventDefinition_ID)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }

    TSingleEventDefinitionForwardControl_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TSingleEventDefinitionForwardControl](l)
        case Right(_) => RightMut[ErrorCode, TSingleEventDefinitionForwardControl](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TSingleEventDefinitionForwardControl]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TSingleEventDefinitionForwardControl_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TSingleEventDefinitionForwardControl_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TSingleEventDefinitionForwardControl]) =
{
    require(codec.base.bitStream.validate_offset_bits(1035L))
    val cpy = snapshot(codec)
    val res = TSingleEventDefinitionForwardControl_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def EventDefinitionForwardControl_TSingleEventDefinitionForwardControl_eventDefinition_ID_pVal_eventDefinition_ID_eventDefinition_ID_Decode_loop(codec: ACN, nCount: Int, eventDefinition_ID: Vector[ULong], i1: Int): EitherMut[Int, Vector[ULong]] = {
    require((0 <= nCount) && (nCount <= 31))
    require((0 <= i1) && (i1 <= nCount))
    require(eventDefinition_ID.size == i1)
    require(codec.base.bitStream.validate_offset_bits((32L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(eventDefinition_ID)
            vecRangesEqSlicedLemma(eventDefinition_ID, eventDefinition_ID, 0, eventDefinition_ID.size, 0, i1)
        }
        RightMut[Int, Vector[ULong]](eventDefinition_ID)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 32L * (nCount - i1), 32L)
        }
        val eventDefinition_ID_arr_i1_ = TEventDefinition_ID_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(32L * (i1 + 1) == 32L * i1 + 32L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 32L * (nCount - i1), 32L)
            check(codec.base.bitStream.validate_offset_bits(32L * (nCount - (i1 + 1))))
        }
        val res = EventDefinitionForwardControl_TSingleEventDefinitionForwardControl_eventDefinition_ID_pVal_eventDefinition_ID_eventDefinition_ID_Decode_loop(codec, nCount, eventDefinition_ID.append(eventDefinition_ID_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(eventDefinition_ID, newVec, eventDefinition_ID_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(eventDefinition_ID.append(eventDefinition_ID_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(eventDefinition_ID.list, eventDefinition_ID_arr_i1_, i1)
                    Vector.listApplyEqVecApply(eventDefinition_ID.append(eventDefinition_ID_arr_i1_), i1)
                    check(eventDefinition_ID_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[ULong]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(eventDefinition_ID, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TSingleEventDefinitionForwardControl_eventDefinition_ID.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def SingleEventDefinitionForwardControl_eventDefinition_ID_ACN_Decode(codec: ACN, SingleEventDefinitionForwardControl_n2: ULong): EitherMut[Int, TSingleEventDefinitionForwardControl_eventDefinition_ID] = {
    require(codec.base.bitStream.validate_offset_bits(992L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val eventDefinition_ID =
        if ((SingleEventDefinitionForwardControl_n2 <= ULong.fromRaw(31))) then
            val eventDefinition_ID_nCount = SingleEventDefinitionForwardControl_n2.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val eventDefinition_ID = EventDefinitionForwardControl_TSingleEventDefinitionForwardControl_eventDefinition_ID_pVal_eventDefinition_ID_eventDefinition_ID_Decode_loop(codec, eventDefinition_ID_nCount, Vector.empty[ULong], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val eventDefinition_ID = TSingleEventDefinitionForwardControl_eventDefinition_ID(eventDefinition_ID_nCount, bdg)
                    ghostExpr {
                        eventDefinition_ID.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    eventDefinition_ID
            }
            eventDefinition_ID
        else return LeftMut(ERR_ACN_DECODE_SINGLEEVENTDEFINITIONFORWARDCONTROL_EVENTDEFINITION_ID)
    TSingleEventDefinitionForwardControl_eventDefinition_ID_IsConstraintValid(eventDefinition_ID) match {
        case Left(l) =>
            LeftMut[Int, TSingleEventDefinitionForwardControl_eventDefinition_ID](l)
        case Right(_) =>
            RightMut[Int, TSingleEventDefinitionForwardControl_eventDefinition_ID](eventDefinition_ID)
    }
}.ensuring { (res: EitherMut[Int, TSingleEventDefinitionForwardControl_eventDefinition_ID]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TSingleEventDefinitionForwardControl_eventDefinition_ID_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def SingleEventDefinitionForwardControl_eventDefinition_ID_ACN_Decode_pure(codec: ACN, SingleEventDefinitionForwardControl_n2: ULong): (ACN, EitherMut[Int, TSingleEventDefinitionForwardControl_eventDefinition_ID]) = {
    require(codec.base.bitStream.validate_offset_bits(992L))
    val cpy = snapshot(codec)
    val res = SingleEventDefinitionForwardControl_eventDefinition_ID_ACN_Decode(cpy, SingleEventDefinitionForwardControl_n2)
    (cpy, res)
}

def TEventDefinitionForwardControl_forwardControl_IsConstraintValid(pVal: TEventDefinitionForwardControl_forwardControl): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = ((1 <= pVal.nCount) && (pVal.nCount <= 31)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TSingleEventDefinitionForwardControl_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TEventDefinitionForwardControl_IsConstraintValid(pVal: TEventDefinitionForwardControl): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TEventDefinitionForwardControl_forwardControl_IsConstraintValid(pVal.forwardControl)
    ret
}

def TEventDefinitionForwardControl_forwardControl_Initialize(): TEventDefinitionForwardControl_forwardControl = TEventDefinitionForwardControl_forwardControl(1, Vector.fill(31)(TSingleEventDefinitionForwardControl_Initialize()))
def TEventDefinitionForwardControl_Initialize(): TEventDefinitionForwardControl = TEventDefinitionForwardControl(forwardControl = TEventDefinitionForwardControl_forwardControl_Initialize())

@opaque @inlineOnce 
def TEventDefinitionForwardControl_ACN_Encode(pVal: TEventDefinitionForwardControl, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(32117L))
    var i1: Int = 0
    TEventDefinitionForwardControl_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val EventDefinitionForwardControl_n1 = ULong.fromRaw(pVal.forwardControl.nCount)
    if EventDefinitionForwardControl_n1 < ULong.fromRaw(1) || EventDefinitionForwardControl_n1 > ULong.fromRaw(31) then
        return Left(860)
    /* Encode EventDefinitionForwardControl_n1 */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(EventDefinitionForwardControl_n1)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(EventDefinitionForwardControl_n1)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 32117L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode forwardControl */
    EventDefinitionForwardControl_forwardControl_ACN_Encode(codec, pVal, EventDefinitionForwardControl_n1, pVal.forwardControl) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32117L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.forwardControl.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 32117L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def EventDefinitionForwardControl_TEventDefinitionForwardControl_forwardControl_pVal_forwardControl_forwardControl_Encode_loop(codec: ACN, forwardControl: TEventDefinitionForwardControl_forwardControl, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= forwardControl.nCount))
    require((1 <= forwardControl.nCount) && (forwardControl.nCount <= forwardControl.arr.size) && (forwardControl.arr.size <= 31))
    require(codec.base.bitStream.validate_offset_bits((1035L * (forwardControl.nCount - i1))))
    decreases(forwardControl.nCount - i1)
    if (i1 == forwardControl.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 1035L * (forwardControl.nCount - i1), 1035L)
        }
        TSingleEventDefinitionForwardControl_ACN_Encode(forwardControl.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(1035L * (i1 + 1) == 1035L * i1 + 1035L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 1035L * (forwardControl.nCount - i1), 1035L)
            check(codec.base.bitStream.validate_offset_bits(1035L * (forwardControl.nCount - (i1 + 1))))
        }
        val res = EventDefinitionForwardControl_TEventDefinitionForwardControl_forwardControl_pVal_forwardControl_forwardControl_Encode_loop(codec, forwardControl, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TEventDefinitionForwardControl_forwardControl.sizeRange(forwardControl.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, forwardControl.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + forwardControl.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TEventDefinitionForwardControl_forwardControl.sizeRange(forwardControl.arr, codecSnap1.base.bitStream.bitIndex, i1, forwardControl.nCount) == forwardControl.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TEventDefinitionForwardControl_forwardControl.sizeRange(forwardControl.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, forwardControl.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TEventDefinitionForwardControl_forwardControl.sizeRange(forwardControl.arr, codecSnap1.base.bitStream.bitIndex, i1, forwardControl.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TEventDefinitionForwardControl_forwardControl.sizeRange(forwardControl.arr, old(codec).base.bitStream.bitIndex, i1, forwardControl.nCount)
    }
}



@opaque @inlineOnce
def EventDefinitionForwardControl_forwardControl_ACN_Encode(codec: ACN, pVal: TEventDefinitionForwardControl, EventDefinitionForwardControl_n1: ULong, forwardControl: TEventDefinitionForwardControl_forwardControl): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(32085L))
    @ghost val oldCdc = snapshot(codec)
    TEventDefinitionForwardControl_forwardControl_IsConstraintValid(forwardControl) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    EventDefinitionForwardControl_TEventDefinitionForwardControl_forwardControl_pVal_forwardControl_forwardControl_Encode_loop(codec, forwardControl, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                forwardControl.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + forwardControl.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TEventDefinitionForwardControl_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TEventDefinitionForwardControl] =
{
    require(codec.base.bitStream.validate_offset_bits(32117L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode EventDefinitionForwardControl_n1 */
    val EventDefinitionForwardControl_n1 = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 32117L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode forwardControl */
    val pVal_forwardControl = EventDefinitionForwardControl_forwardControl_ACN_Decode(codec, EventDefinitionForwardControl_n1) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32117L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_forwardControl.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 32117L)
    }
    val pVal = TEventDefinitionForwardControl(pVal_forwardControl)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }

    TEventDefinitionForwardControl_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TEventDefinitionForwardControl](l)
        case Right(_) => RightMut[ErrorCode, TEventDefinitionForwardControl](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TEventDefinitionForwardControl]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TEventDefinitionForwardControl_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TEventDefinitionForwardControl_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TEventDefinitionForwardControl]) =
{
    require(codec.base.bitStream.validate_offset_bits(32117L))
    val cpy = snapshot(codec)
    val res = TEventDefinitionForwardControl_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def EventDefinitionForwardControl_TEventDefinitionForwardControl_forwardControl_pVal_forwardControl_forwardControl_Decode_loop(codec: ACN, nCount: Int, forwardControl: Vector[TSingleEventDefinitionForwardControl], i1: Int): EitherMut[Int, Vector[TSingleEventDefinitionForwardControl]] = {
    require((1 <= nCount) && (nCount <= 31))
    require((0 <= i1) && (i1 <= nCount))
    require(forwardControl.size == i1)
    require(codec.base.bitStream.validate_offset_bits((1035L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(forwardControl)
            vecRangesEqSlicedLemma(forwardControl, forwardControl, 0, forwardControl.size, 0, i1)
        }
        RightMut[Int, Vector[TSingleEventDefinitionForwardControl]](forwardControl)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 1035L * (nCount - i1), 1035L)
        }
        val forwardControl_arr_i1_ = TSingleEventDefinitionForwardControl_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(1035L * (i1 + 1) == 1035L * i1 + 1035L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 1035L * (nCount - i1), 1035L)
            check(codec.base.bitStream.validate_offset_bits(1035L * (nCount - (i1 + 1))))
        }
        val res = EventDefinitionForwardControl_TEventDefinitionForwardControl_forwardControl_pVal_forwardControl_forwardControl_Decode_loop(codec, nCount, forwardControl.append(forwardControl_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(forwardControl, newVec, forwardControl_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(forwardControl.append(forwardControl_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(forwardControl.list, forwardControl_arr_i1_, i1)
                    Vector.listApplyEqVecApply(forwardControl.append(forwardControl_arr_i1_), i1)
                    check(forwardControl_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TSingleEventDefinitionForwardControl]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(forwardControl, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TEventDefinitionForwardControl_forwardControl.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def EventDefinitionForwardControl_forwardControl_ACN_Decode(codec: ACN, EventDefinitionForwardControl_n1: ULong): EitherMut[Int, TEventDefinitionForwardControl_forwardControl] = {
    require(codec.base.bitStream.validate_offset_bits(32085L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val forwardControl =
        if ((ULong.fromRaw(1) <= EventDefinitionForwardControl_n1) && (EventDefinitionForwardControl_n1 <= ULong.fromRaw(31))) then
            val forwardControl_nCount = EventDefinitionForwardControl_n1.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val forwardControl = EventDefinitionForwardControl_TEventDefinitionForwardControl_forwardControl_pVal_forwardControl_forwardControl_Decode_loop(codec, forwardControl_nCount, Vector.empty[TSingleEventDefinitionForwardControl], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val forwardControl = TEventDefinitionForwardControl_forwardControl(forwardControl_nCount, bdg)
                    ghostExpr {
                        forwardControl.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    forwardControl
            }
            forwardControl
        else return LeftMut(ERR_ACN_DECODE_EVENTDEFINITIONFORWARDCONTROL_FORWARDCONTROL)
    TEventDefinitionForwardControl_forwardControl_IsConstraintValid(forwardControl) match {
        case Left(l) =>
            LeftMut[Int, TEventDefinitionForwardControl_forwardControl](l)
        case Right(_) =>
            RightMut[Int, TEventDefinitionForwardControl_forwardControl](forwardControl)
    }
}.ensuring { (res: EitherMut[Int, TEventDefinitionForwardControl_forwardControl]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TEventDefinitionForwardControl_forwardControl_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def EventDefinitionForwardControl_forwardControl_ACN_Decode_pure(codec: ACN, EventDefinitionForwardControl_n1: ULong): (ACN, EitherMut[Int, TEventDefinitionForwardControl_forwardControl]) = {
    require(codec.base.bitStream.validate_offset_bits(32085L))
    val cpy = snapshot(codec)
    val res = EventDefinitionForwardControl_forwardControl_ACN_Decode(cpy, EventDefinitionForwardControl_n1)
    (cpy, res)
}