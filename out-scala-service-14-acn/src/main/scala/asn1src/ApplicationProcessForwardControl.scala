/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

val maxApplicationProcessForwardControlCount: Int = 31 // variables:188
val maxServiceTypeForwardControl: Int = 31 // variables:188
val maxMessageSubtypeForwardControl: Int = 31 // variables:188

def TServiceTypeForwardControl_messages_IsConstraintValid(pVal: TServiceTypeForwardControl_messages): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = (pVal.nCount <= 31) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TMessageSubtype_ID_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TServiceTypeForwardControl_IsConstraintValid(pVal: TServiceTypeForwardControl): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TServiceType_ID_IsConstraintValid(pVal.serviceType)
    if ret.isRight then
        ret = TServiceTypeForwardControl_messages_IsConstraintValid(pVal.messages)
    ret
}

def TServiceTypeForwardControl_messages_Initialize(): TServiceTypeForwardControl_messages = TServiceTypeForwardControl_messages(0, Vector.fill(31)(ULong.fromRaw(1L)))
def TServiceTypeForwardControl_Initialize(): TServiceTypeForwardControl = TServiceTypeForwardControl(serviceType = ULong.fromRaw(1L), messages = TServiceTypeForwardControl_messages_Initialize())

@opaque @inlineOnce 
def TServiceTypeForwardControl_ACN_Encode(pVal: TServiceTypeForwardControl, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(288L))
    var i1: Int = 0
    TServiceTypeForwardControl_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode serviceType */
    TServiceType_ID_ACN_Encode(pVal.serviceType, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 288L, 8L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 8L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 8L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    val ServiceTypeForwardControl_n3 = ULong.fromRaw(pVal.messages.nCount)
    if ServiceTypeForwardControl_n3 < ULong.fromRaw(0) || ServiceTypeForwardControl_n3 > ULong.fromRaw(31) then
        return Left(860)
    /* Encode ServiceTypeForwardControl_n3 */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(ServiceTypeForwardControl_n3)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(ServiceTypeForwardControl_n3)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 280L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 40L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode messages */
    ServiceTypeForwardControl_messages_ACN_Encode(codec, pVal, ServiceTypeForwardControl_n3, pVal.messages) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 288L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = pVal.messages.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 288L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def ApplicationProcessForwardControl_TServiceTypeForwardControl_messages_pVal_messages_messages_Encode_loop(codec: ACN, messages: TServiceTypeForwardControl_messages, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= messages.nCount))
    require((0 <= messages.nCount) && (messages.nCount <= messages.arr.size) && (messages.arr.size <= 31))
    require(codec.base.bitStream.validate_offset_bits((8L * (messages.nCount - i1))))
    decreases(messages.nCount - i1)
    if (i1 == messages.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 8L * (messages.nCount - i1), 8L)
        }
        TMessageSubtype_ID_ACN_Encode(messages.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(8L * (i1 + 1) == 8L * i1 + 8L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 8L * (messages.nCount - i1), 8L)
            check(codec.base.bitStream.validate_offset_bits(8L * (messages.nCount - (i1 + 1))))
        }
        val res = ApplicationProcessForwardControl_TServiceTypeForwardControl_messages_pVal_messages_messages_Encode_loop(codec, messages, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TServiceTypeForwardControl_messages.sizeRange(messages.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, messages.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + 8L)
                    assert(TServiceTypeForwardControl_messages.sizeRange(messages.arr, codecSnap1.base.bitStream.bitIndex, i1, messages.nCount) == TServiceTypeForwardControl_messages.sizeRange(messages.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, messages.nCount) + 8L)
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TServiceTypeForwardControl_messages.sizeRange(messages.arr, codecSnap1.base.bitStream.bitIndex, i1, messages.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TServiceTypeForwardControl_messages.sizeRange(messages.arr, old(codec).base.bitStream.bitIndex, i1, messages.nCount)
    }
}



@opaque @inlineOnce
def ServiceTypeForwardControl_messages_ACN_Encode(codec: ACN, pVal: TServiceTypeForwardControl, ServiceTypeForwardControl_n3: ULong, messages: TServiceTypeForwardControl_messages): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(248L))
    @ghost val oldCdc = snapshot(codec)
    TServiceTypeForwardControl_messages_IsConstraintValid(messages) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    ApplicationProcessForwardControl_TServiceTypeForwardControl_messages_pVal_messages_messages_Encode_loop(codec, messages, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                messages.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + messages.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TServiceTypeForwardControl_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TServiceTypeForwardControl] =
{
    require(codec.base.bitStream.validate_offset_bits(288L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode serviceType */
    val pVal_serviceType = TServiceType_ID_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 288L, 8L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 8L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 8L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode ServiceTypeForwardControl_n3 */
    val ServiceTypeForwardControl_n3 = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 280L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 40L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode messages */
    val pVal_messages = ServiceTypeForwardControl_messages_ACN_Decode(codec, ServiceTypeForwardControl_n3) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 288L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = pVal_messages.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 288L)
    }
    val pVal = TServiceTypeForwardControl(pVal_serviceType, pVal_messages)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }

    TServiceTypeForwardControl_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TServiceTypeForwardControl](l)
        case Right(_) => RightMut[ErrorCode, TServiceTypeForwardControl](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TServiceTypeForwardControl]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TServiceTypeForwardControl_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TServiceTypeForwardControl_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TServiceTypeForwardControl]) =
{
    require(codec.base.bitStream.validate_offset_bits(288L))
    val cpy = snapshot(codec)
    val res = TServiceTypeForwardControl_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def ApplicationProcessForwardControl_TServiceTypeForwardControl_messages_pVal_messages_messages_Decode_loop(codec: ACN, nCount: Int, messages: Vector[ULong], i1: Int): EitherMut[Int, Vector[ULong]] = {
    require((0 <= nCount) && (nCount <= 31))
    require((0 <= i1) && (i1 <= nCount))
    require(messages.size == i1)
    require(codec.base.bitStream.validate_offset_bits((8L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(messages)
            vecRangesEqSlicedLemma(messages, messages, 0, messages.size, 0, i1)
        }
        RightMut[Int, Vector[ULong]](messages)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 8L * (nCount - i1), 8L)
        }
        val messages_arr_i1_ = TMessageSubtype_ID_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(8L * (i1 + 1) == 8L * i1 + 8L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 8L * (nCount - i1), 8L)
            check(codec.base.bitStream.validate_offset_bits(8L * (nCount - (i1 + 1))))
        }
        val res = ApplicationProcessForwardControl_TServiceTypeForwardControl_messages_pVal_messages_messages_Decode_loop(codec, nCount, messages.append(messages_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(messages, newVec, messages_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(messages.append(messages_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(messages.list, messages_arr_i1_, i1)
                    Vector.listApplyEqVecApply(messages.append(messages_arr_i1_), i1)
                    check(messages_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[ULong]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(messages, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TServiceTypeForwardControl_messages.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def ServiceTypeForwardControl_messages_ACN_Decode(codec: ACN, ServiceTypeForwardControl_n3: ULong): EitherMut[Int, TServiceTypeForwardControl_messages] = {
    require(codec.base.bitStream.validate_offset_bits(248L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val messages =
        if ((ServiceTypeForwardControl_n3 <= ULong.fromRaw(31))) then
            val messages_nCount = ServiceTypeForwardControl_n3.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val messages = ApplicationProcessForwardControl_TServiceTypeForwardControl_messages_pVal_messages_messages_Decode_loop(codec, messages_nCount, Vector.empty[ULong], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val messages = TServiceTypeForwardControl_messages(messages_nCount, bdg)
                    ghostExpr {
                        messages.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    messages
            }
            messages
        else return LeftMut(ERR_ACN_DECODE_SERVICETYPEFORWARDCONTROL_MESSAGES)
    TServiceTypeForwardControl_messages_IsConstraintValid(messages) match {
        case Left(l) =>
            LeftMut[Int, TServiceTypeForwardControl_messages](l)
        case Right(_) =>
            RightMut[Int, TServiceTypeForwardControl_messages](messages)
    }
}.ensuring { (res: EitherMut[Int, TServiceTypeForwardControl_messages]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TServiceTypeForwardControl_messages_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def ServiceTypeForwardControl_messages_ACN_Decode_pure(codec: ACN, ServiceTypeForwardControl_n3: ULong): (ACN, EitherMut[Int, TServiceTypeForwardControl_messages]) = {
    require(codec.base.bitStream.validate_offset_bits(248L))
    val cpy = snapshot(codec)
    val res = ServiceTypeForwardControl_messages_ACN_Decode(cpy, ServiceTypeForwardControl_n3)
    (cpy, res)
}

def TSingleApplicationProcessForwardControl_services_IsConstraintValid(pVal: TSingleApplicationProcessForwardControl_services): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = (pVal.nCount <= 31) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TServiceTypeForwardControl_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TSingleApplicationProcessForwardControl_IsConstraintValid(pVal: TSingleApplicationProcessForwardControl): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TApplicationProcess_ID_IsConstraintValid(pVal.applicationProcess_ID)
    if ret.isRight then
        ret = TSingleApplicationProcessForwardControl_services_IsConstraintValid(pVal.services)
    ret
}

def TSingleApplicationProcessForwardControl_services_Initialize(): TSingleApplicationProcessForwardControl_services = TSingleApplicationProcessForwardControl_services(0, Vector.fill(31)(TServiceTypeForwardControl_Initialize()))
def TSingleApplicationProcessForwardControl_Initialize(): TSingleApplicationProcessForwardControl = TSingleApplicationProcessForwardControl(applicationProcess_ID = ULong.fromRaw(0L), services = TSingleApplicationProcessForwardControl_services_Initialize())

@opaque @inlineOnce 
def TSingleApplicationProcessForwardControl_ACN_Encode(pVal: TSingleApplicationProcessForwardControl, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(8971L))
    var i1: Int = 0
    TSingleApplicationProcessForwardControl_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode applicationProcess_ID */
    TApplicationProcess_ID_ACN_Encode(pVal.applicationProcess_ID, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 8971L, 11L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 11L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 11L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    val SingleApplicationProcessForwardControl_n2 = ULong.fromRaw(pVal.services.nCount)
    if SingleApplicationProcessForwardControl_n2 < ULong.fromRaw(0) || SingleApplicationProcessForwardControl_n2 > ULong.fromRaw(31) then
        return Left(860)
    /* Encode SingleApplicationProcessForwardControl_n2 */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(SingleApplicationProcessForwardControl_n2)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(SingleApplicationProcessForwardControl_n2)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 8960L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 43L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode services */
    SingleApplicationProcessForwardControl_services_ACN_Encode(codec, pVal, SingleApplicationProcessForwardControl_n2, pVal.services) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 8971L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = pVal.services.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 8971L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def ApplicationProcessForwardControl_TSingleApplicationProcessForwardControl_services_pVal_services_services_Encode_loop(codec: ACN, services: TSingleApplicationProcessForwardControl_services, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= services.nCount))
    require((0 <= services.nCount) && (services.nCount <= services.arr.size) && (services.arr.size <= 31))
    require(codec.base.bitStream.validate_offset_bits((288L * (services.nCount - i1))))
    decreases(services.nCount - i1)
    if (i1 == services.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 288L * (services.nCount - i1), 288L)
        }
        TServiceTypeForwardControl_ACN_Encode(services.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(288L * (i1 + 1) == 288L * i1 + 288L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 288L * (services.nCount - i1), 288L)
            check(codec.base.bitStream.validate_offset_bits(288L * (services.nCount - (i1 + 1))))
        }
        val res = ApplicationProcessForwardControl_TSingleApplicationProcessForwardControl_services_pVal_services_services_Encode_loop(codec, services, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TSingleApplicationProcessForwardControl_services.sizeRange(services.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, services.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + services.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TSingleApplicationProcessForwardControl_services.sizeRange(services.arr, codecSnap1.base.bitStream.bitIndex, i1, services.nCount) == services.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TSingleApplicationProcessForwardControl_services.sizeRange(services.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, services.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TSingleApplicationProcessForwardControl_services.sizeRange(services.arr, codecSnap1.base.bitStream.bitIndex, i1, services.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TSingleApplicationProcessForwardControl_services.sizeRange(services.arr, old(codec).base.bitStream.bitIndex, i1, services.nCount)
    }
}



@opaque @inlineOnce
def SingleApplicationProcessForwardControl_services_ACN_Encode(codec: ACN, pVal: TSingleApplicationProcessForwardControl, SingleApplicationProcessForwardControl_n2: ULong, services: TSingleApplicationProcessForwardControl_services): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(8928L))
    @ghost val oldCdc = snapshot(codec)
    TSingleApplicationProcessForwardControl_services_IsConstraintValid(services) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    ApplicationProcessForwardControl_TSingleApplicationProcessForwardControl_services_pVal_services_services_Encode_loop(codec, services, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                services.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + services.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TSingleApplicationProcessForwardControl_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TSingleApplicationProcessForwardControl] =
{
    require(codec.base.bitStream.validate_offset_bits(8971L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode applicationProcess_ID */
    val pVal_applicationProcess_ID = TApplicationProcess_ID_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 8971L, 11L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 11L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 11L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode SingleApplicationProcessForwardControl_n2 */
    val SingleApplicationProcessForwardControl_n2 = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 8960L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 43L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode services */
    val pVal_services = SingleApplicationProcessForwardControl_services_ACN_Decode(codec, SingleApplicationProcessForwardControl_n2) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 8971L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = pVal_services.size(codec_0_3.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 8971L)
    }
    val pVal = TSingleApplicationProcessForwardControl(pVal_applicationProcess_ID, pVal_services)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2)
    }

    TSingleApplicationProcessForwardControl_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TSingleApplicationProcessForwardControl](l)
        case Right(_) => RightMut[ErrorCode, TSingleApplicationProcessForwardControl](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TSingleApplicationProcessForwardControl]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TSingleApplicationProcessForwardControl_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TSingleApplicationProcessForwardControl_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TSingleApplicationProcessForwardControl]) =
{
    require(codec.base.bitStream.validate_offset_bits(8971L))
    val cpy = snapshot(codec)
    val res = TSingleApplicationProcessForwardControl_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def ApplicationProcessForwardControl_TSingleApplicationProcessForwardControl_services_pVal_services_services_Decode_loop(codec: ACN, nCount: Int, services: Vector[TServiceTypeForwardControl], i1: Int): EitherMut[Int, Vector[TServiceTypeForwardControl]] = {
    require((0 <= nCount) && (nCount <= 31))
    require((0 <= i1) && (i1 <= nCount))
    require(services.size == i1)
    require(codec.base.bitStream.validate_offset_bits((288L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(services)
            vecRangesEqSlicedLemma(services, services, 0, services.size, 0, i1)
        }
        RightMut[Int, Vector[TServiceTypeForwardControl]](services)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 288L * (nCount - i1), 288L)
        }
        val services_arr_i1_ = TServiceTypeForwardControl_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(288L * (i1 + 1) == 288L * i1 + 288L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 288L * (nCount - i1), 288L)
            check(codec.base.bitStream.validate_offset_bits(288L * (nCount - (i1 + 1))))
        }
        val res = ApplicationProcessForwardControl_TSingleApplicationProcessForwardControl_services_pVal_services_services_Decode_loop(codec, nCount, services.append(services_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(services, newVec, services_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(services.append(services_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(services.list, services_arr_i1_, i1)
                    Vector.listApplyEqVecApply(services.append(services_arr_i1_), i1)
                    check(services_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TServiceTypeForwardControl]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(services, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TSingleApplicationProcessForwardControl_services.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def SingleApplicationProcessForwardControl_services_ACN_Decode(codec: ACN, SingleApplicationProcessForwardControl_n2: ULong): EitherMut[Int, TSingleApplicationProcessForwardControl_services] = {
    require(codec.base.bitStream.validate_offset_bits(8928L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val services =
        if ((SingleApplicationProcessForwardControl_n2 <= ULong.fromRaw(31))) then
            val services_nCount = SingleApplicationProcessForwardControl_n2.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val services = ApplicationProcessForwardControl_TSingleApplicationProcessForwardControl_services_pVal_services_services_Decode_loop(codec, services_nCount, Vector.empty[TServiceTypeForwardControl], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val services = TSingleApplicationProcessForwardControl_services(services_nCount, bdg)
                    ghostExpr {
                        services.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    services
            }
            services
        else return LeftMut(ERR_ACN_DECODE_SINGLEAPPLICATIONPROCESSFORWARDCONTROL_SERVICES)
    TSingleApplicationProcessForwardControl_services_IsConstraintValid(services) match {
        case Left(l) =>
            LeftMut[Int, TSingleApplicationProcessForwardControl_services](l)
        case Right(_) =>
            RightMut[Int, TSingleApplicationProcessForwardControl_services](services)
    }
}.ensuring { (res: EitherMut[Int, TSingleApplicationProcessForwardControl_services]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TSingleApplicationProcessForwardControl_services_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def SingleApplicationProcessForwardControl_services_ACN_Decode_pure(codec: ACN, SingleApplicationProcessForwardControl_n2: ULong): (ACN, EitherMut[Int, TSingleApplicationProcessForwardControl_services]) = {
    require(codec.base.bitStream.validate_offset_bits(8928L))
    val cpy = snapshot(codec)
    val res = SingleApplicationProcessForwardControl_services_ACN_Decode(cpy, SingleApplicationProcessForwardControl_n2)
    (cpy, res)
}

def TApplicationProcessForwardControl_forwardControl_IsConstraintValid(pVal: TApplicationProcessForwardControl_forwardControl): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = ((1 <= pVal.nCount) && (pVal.nCount <= 31)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TSingleApplicationProcessForwardControl_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TApplicationProcessForwardControl_IsConstraintValid(pVal: TApplicationProcessForwardControl): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TApplicationProcessForwardControl_forwardControl_IsConstraintValid(pVal.forwardControl)
    ret
}

def TApplicationProcessForwardControl_forwardControl_Initialize(): TApplicationProcessForwardControl_forwardControl = TApplicationProcessForwardControl_forwardControl(1, Vector.fill(31)(TSingleApplicationProcessForwardControl_Initialize()))
def TApplicationProcessForwardControl_Initialize(): TApplicationProcessForwardControl = TApplicationProcessForwardControl(forwardControl = TApplicationProcessForwardControl_forwardControl_Initialize())

@opaque @inlineOnce 
def TApplicationProcessForwardControl_ACN_Encode(pVal: TApplicationProcessForwardControl, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(278133L))
    var i1: Int = 0
    TApplicationProcessForwardControl_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val ApplicationProcessForwardControl_n1 = ULong.fromRaw(pVal.forwardControl.nCount)
    if ApplicationProcessForwardControl_n1 < ULong.fromRaw(1) || ApplicationProcessForwardControl_n1 > ULong.fromRaw(31) then
        return Left(860)
    /* Encode ApplicationProcessForwardControl_n1 */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(ApplicationProcessForwardControl_n1)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(ApplicationProcessForwardControl_n1)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 278133L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode forwardControl */
    ApplicationProcessForwardControl_forwardControl_ACN_Encode(codec, pVal, ApplicationProcessForwardControl_n1, pVal.forwardControl) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 278133L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.forwardControl.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 278133L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def ApplicationProcessForwardControl_TApplicationProcessForwardControl_forwardControl_pVal_forwardControl_forwardControl_Encode_loop(codec: ACN, forwardControl: TApplicationProcessForwardControl_forwardControl, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= forwardControl.nCount))
    require((1 <= forwardControl.nCount) && (forwardControl.nCount <= forwardControl.arr.size) && (forwardControl.arr.size <= 31))
    require(codec.base.bitStream.validate_offset_bits((8971L * (forwardControl.nCount - i1))))
    decreases(forwardControl.nCount - i1)
    if (i1 == forwardControl.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 8971L * (forwardControl.nCount - i1), 8971L)
        }
        TSingleApplicationProcessForwardControl_ACN_Encode(forwardControl.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(8971L * (i1 + 1) == 8971L * i1 + 8971L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 8971L * (forwardControl.nCount - i1), 8971L)
            check(codec.base.bitStream.validate_offset_bits(8971L * (forwardControl.nCount - (i1 + 1))))
        }
        val res = ApplicationProcessForwardControl_TApplicationProcessForwardControl_forwardControl_pVal_forwardControl_forwardControl_Encode_loop(codec, forwardControl, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TApplicationProcessForwardControl_forwardControl.sizeRange(forwardControl.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, forwardControl.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + forwardControl.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TApplicationProcessForwardControl_forwardControl.sizeRange(forwardControl.arr, codecSnap1.base.bitStream.bitIndex, i1, forwardControl.nCount) == forwardControl.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TApplicationProcessForwardControl_forwardControl.sizeRange(forwardControl.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, forwardControl.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TApplicationProcessForwardControl_forwardControl.sizeRange(forwardControl.arr, codecSnap1.base.bitStream.bitIndex, i1, forwardControl.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TApplicationProcessForwardControl_forwardControl.sizeRange(forwardControl.arr, old(codec).base.bitStream.bitIndex, i1, forwardControl.nCount)
    }
}



@opaque @inlineOnce
def ApplicationProcessForwardControl_forwardControl_ACN_Encode(codec: ACN, pVal: TApplicationProcessForwardControl, ApplicationProcessForwardControl_n1: ULong, forwardControl: TApplicationProcessForwardControl_forwardControl): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(278101L))
    @ghost val oldCdc = snapshot(codec)
    TApplicationProcessForwardControl_forwardControl_IsConstraintValid(forwardControl) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    ApplicationProcessForwardControl_TApplicationProcessForwardControl_forwardControl_pVal_forwardControl_forwardControl_Encode_loop(codec, forwardControl, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                forwardControl.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + forwardControl.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TApplicationProcessForwardControl_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TApplicationProcessForwardControl] =
{
    require(codec.base.bitStream.validate_offset_bits(278133L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode ApplicationProcessForwardControl_n1 */
    val ApplicationProcessForwardControl_n1 = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 278133L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode forwardControl */
    val pVal_forwardControl = ApplicationProcessForwardControl_forwardControl_ACN_Decode(codec, ApplicationProcessForwardControl_n1) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 278133L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_forwardControl.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 278133L)
    }
    val pVal = TApplicationProcessForwardControl(pVal_forwardControl)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }

    TApplicationProcessForwardControl_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TApplicationProcessForwardControl](l)
        case Right(_) => RightMut[ErrorCode, TApplicationProcessForwardControl](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TApplicationProcessForwardControl]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TApplicationProcessForwardControl_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TApplicationProcessForwardControl_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TApplicationProcessForwardControl]) =
{
    require(codec.base.bitStream.validate_offset_bits(278133L))
    val cpy = snapshot(codec)
    val res = TApplicationProcessForwardControl_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def ApplicationProcessForwardControl_TApplicationProcessForwardControl_forwardControl_pVal_forwardControl_forwardControl_Decode_loop(codec: ACN, nCount: Int, forwardControl: Vector[TSingleApplicationProcessForwardControl], i1: Int): EitherMut[Int, Vector[TSingleApplicationProcessForwardControl]] = {
    require((1 <= nCount) && (nCount <= 31))
    require((0 <= i1) && (i1 <= nCount))
    require(forwardControl.size == i1)
    require(codec.base.bitStream.validate_offset_bits((8971L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(forwardControl)
            vecRangesEqSlicedLemma(forwardControl, forwardControl, 0, forwardControl.size, 0, i1)
        }
        RightMut[Int, Vector[TSingleApplicationProcessForwardControl]](forwardControl)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 8971L * (nCount - i1), 8971L)
        }
        val forwardControl_arr_i1_ = TSingleApplicationProcessForwardControl_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(8971L * (i1 + 1) == 8971L * i1 + 8971L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 8971L * (nCount - i1), 8971L)
            check(codec.base.bitStream.validate_offset_bits(8971L * (nCount - (i1 + 1))))
        }
        val res = ApplicationProcessForwardControl_TApplicationProcessForwardControl_forwardControl_pVal_forwardControl_forwardControl_Decode_loop(codec, nCount, forwardControl.append(forwardControl_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(forwardControl, newVec, forwardControl_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(forwardControl.append(forwardControl_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(forwardControl.list, forwardControl_arr_i1_, i1)
                    Vector.listApplyEqVecApply(forwardControl.append(forwardControl_arr_i1_), i1)
                    check(forwardControl_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TSingleApplicationProcessForwardControl]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(forwardControl, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TApplicationProcessForwardControl_forwardControl.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def ApplicationProcessForwardControl_forwardControl_ACN_Decode(codec: ACN, ApplicationProcessForwardControl_n1: ULong): EitherMut[Int, TApplicationProcessForwardControl_forwardControl] = {
    require(codec.base.bitStream.validate_offset_bits(278101L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val forwardControl =
        if ((ULong.fromRaw(1) <= ApplicationProcessForwardControl_n1) && (ApplicationProcessForwardControl_n1 <= ULong.fromRaw(31))) then
            val forwardControl_nCount = ApplicationProcessForwardControl_n1.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val forwardControl = ApplicationProcessForwardControl_TApplicationProcessForwardControl_forwardControl_pVal_forwardControl_forwardControl_Decode_loop(codec, forwardControl_nCount, Vector.empty[TSingleApplicationProcessForwardControl], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val forwardControl = TApplicationProcessForwardControl_forwardControl(forwardControl_nCount, bdg)
                    ghostExpr {
                        forwardControl.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    forwardControl
            }
            forwardControl
        else return LeftMut(ERR_ACN_DECODE_APPLICATIONPROCESSFORWARDCONTROL_FORWARDCONTROL)
    TApplicationProcessForwardControl_forwardControl_IsConstraintValid(forwardControl) match {
        case Left(l) =>
            LeftMut[Int, TApplicationProcessForwardControl_forwardControl](l)
        case Right(_) =>
            RightMut[Int, TApplicationProcessForwardControl_forwardControl](forwardControl)
    }
}.ensuring { (res: EitherMut[Int, TApplicationProcessForwardControl_forwardControl]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TApplicationProcessForwardControl_forwardControl_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def ApplicationProcessForwardControl_forwardControl_ACN_Decode_pure(codec: ACN, ApplicationProcessForwardControl_n1: ULong): (ACN, EitherMut[Int, TApplicationProcessForwardControl_forwardControl]) = {
    require(codec.base.bitStream.validate_offset_bits(278101L))
    val cpy = snapshot(codec)
    val res = ApplicationProcessForwardControl_forwardControl_ACN_Decode(cpy, ApplicationProcessForwardControl_n1)
    (cpy, res)
}