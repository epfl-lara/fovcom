/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TDiagnosticParameterStructure_ID_ConfigurationNoSubsampling --------------------------------------------*/

case class TDiagnosticParameterStructure_ID_ConfigurationNoSubsampling (
    id: TDiagnosticParameterReportStructure_ID, 
    subsamplingRate: OptionMut[NullType]
) {
    require(!this.subsamplingRate.isDefined)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        val size_0 = 32L
        val size_1 = this.subsamplingRate match {
            case SomeMut(v) =>
                0L
            case NoneMut() =>
                0L
        }
        size_0 + size_1
    }.ensuring { (res: Long) => 
        res == 32L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.subsamplingRate match {
            case SomeMut(v) =>
                0L
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.subsamplingRate match {
            case SomeMut(v) =>
                0L
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.subsamplingRate match {
            case SomeMut(v) =>
                0L
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.subsamplingRate match {
            case SomeMut(v) =>
                0L
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.subsamplingRate match {
            case SomeMut(v) =>
                0L
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.subsamplingRate match {
            case SomeMut(v) =>
                0L
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.subsamplingRate match {
            case SomeMut(v) =>
                0L
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.subsamplingRate match {
            case SomeMut(v) =>
                0L
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_DIAGNOSTICPARAMETERSTRUCTURE_ID_CONFIGURATIONNOSUBSAMPLING: Int = 407 /*(WITH COMPONENTS
{
    subsamplingRate ABSENT
}) */
@inline @cCode.inline val ERR_DIAGNOSTICPARAMETERSTRUCTURE_ID_CONFIGURATIONNOSUBSAMPLING_ID_2: Int = 398 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_DIAGNOSTICPARAMETERSTRUCTURE_ID_CONFIGURATIONNOSUBSAMPLING: Int = 410 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_DIAGNOSTICPARAMETERSTRUCTURE_ID_CONFIGURATIONNOSUBSAMPLING_ID_2: Int = 401 /*  */
@inline @cCode.inline val TDiagnosticParameterStructure_ID_ConfigurationNoSubsampling_REQUIRED_BYTES_FOR_ACN_ENCODING = 4
@inline @cCode.inline val TDiagnosticParameterStructure_ID_ConfigurationNoSubsampling_REQUIRED_BITS_FOR_ACN_ENCODING = 32

@inline @cCode.inline val ERR_ACN_DECODE_DIAGNOSTICPARAMETERSTRUCTURE_ID_CONFIGURATIONNOSUBSAMPLING: Int = 411 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_DIAGNOSTICPARAMETERSTRUCTURE_ID_CONFIGURATIONNOSUBSAMPLING_ID_2: Int = 402 /*  */
/*-- TDiagnosticParameterStructure_ID_ConfigurationSubsampling --------------------------------------------*/

case class TDiagnosticParameterStructure_ID_ConfigurationSubsampling (
    id: TDiagnosticParameterReportStructure_ID, 
    subsamplingRate: OptionMut[NullType]
) {
    require(this.subsamplingRate.isDefined)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        val size_0 = 32L
        val size_1 = this.subsamplingRate match {
            case SomeMut(v) =>
                0L
            case NoneMut() =>
                0L
        }
        size_0 + size_1
    }.ensuring { (res: Long) => 
        res == 32L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.subsamplingRate match {
            case SomeMut(v) =>
                0L
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.subsamplingRate match {
            case SomeMut(v) =>
                0L
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.subsamplingRate match {
            case SomeMut(v) =>
                0L
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.subsamplingRate match {
            case SomeMut(v) =>
                0L
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.subsamplingRate match {
            case SomeMut(v) =>
                0L
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.subsamplingRate match {
            case SomeMut(v) =>
                0L
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.subsamplingRate match {
            case SomeMut(v) =>
                0L
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.subsamplingRate match {
            case SomeMut(v) =>
                0L
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_DIAGNOSTICPARAMETERSTRUCTURE_ID_CONFIGURATIONSUBSAMPLING: Int = 426 /*(WITH COMPONENTS
{
    subsamplingRate PRESENT
}) */
@inline @cCode.inline val ERR_DIAGNOSTICPARAMETERSTRUCTURE_ID_CONFIGURATIONSUBSAMPLING_ID_2: Int = 417 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_DIAGNOSTICPARAMETERSTRUCTURE_ID_CONFIGURATIONSUBSAMPLING: Int = 429 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_DIAGNOSTICPARAMETERSTRUCTURE_ID_CONFIGURATIONSUBSAMPLING_ID_2: Int = 420 /*  */
@inline @cCode.inline val TDiagnosticParameterStructure_ID_ConfigurationSubsampling_REQUIRED_BYTES_FOR_ACN_ENCODING = 4
@inline @cCode.inline val TDiagnosticParameterStructure_ID_ConfigurationSubsampling_REQUIRED_BITS_FOR_ACN_ENCODING = 32

@inline @cCode.inline val ERR_ACN_DECODE_DIAGNOSTICPARAMETERSTRUCTURE_ID_CONFIGURATIONSUBSAMPLING: Int = 430 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_DIAGNOSTICPARAMETERSTRUCTURE_ID_CONFIGURATIONSUBSAMPLING_ID_2: Int = 421 /*  */
/*-- TSingleDiagnosticParameterReportForwardControlSubsampling --------------------------------------------*/


case class TSingleDiagnosticParameterReportForwardControlSubsampling_structure (nCount: Int, arr: Vector[TDiagnosticParameterStructure_ID_ConfigurationSubsampling])
{
    require(this.arr.size <= 31 && 0 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854774815L))
        TSingleDiagnosticParameterReportForwardControlSubsampling_structure.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 992L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774815L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774815L))
        TSingleDiagnosticParameterReportForwardControlSubsampling_structure.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774815L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774815L))
        require((offset % 8L) == (otherOffset % 8L))
        TSingleDiagnosticParameterReportForwardControlSubsampling_structure.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774815L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774815L))
        require((offset % 16L) == (otherOffset % 16L))
        TSingleDiagnosticParameterReportForwardControlSubsampling_structure.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774815L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774815L))
        require((offset % 32L) == (otherOffset % 32L))
        TSingleDiagnosticParameterReportForwardControlSubsampling_structure.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TSingleDiagnosticParameterReportForwardControlSubsampling_structure {
    def sizeRange(ls: Vector[TDiagnosticParameterStructure_ID_ConfigurationSubsampling], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(elemSize == 32L)
            elemSize + TSingleDiagnosticParameterReportForwardControlSubsampling_structure.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 32L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TDiagnosticParameterStructure_ID_ConfigurationSubsampling], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TSingleDiagnosticParameterReportForwardControlSubsampling_structure.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TSingleDiagnosticParameterReportForwardControlSubsampling_structure.sizeRange(ls, offset, from, to) == TSingleDiagnosticParameterReportForwardControlSubsampling_structure.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TDiagnosticParameterStructure_ID_ConfigurationSubsampling], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TSingleDiagnosticParameterReportForwardControlSubsampling_structure.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TSingleDiagnosticParameterReportForwardControlSubsampling_structure.sizeRange(ls, offset, from, to) == TSingleDiagnosticParameterReportForwardControlSubsampling_structure.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TDiagnosticParameterStructure_ID_ConfigurationSubsampling], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TSingleDiagnosticParameterReportForwardControlSubsampling_structure.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TSingleDiagnosticParameterReportForwardControlSubsampling_structure.sizeRange(ls, offset, from, to) == TSingleDiagnosticParameterReportForwardControlSubsampling_structure.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TDiagnosticParameterStructure_ID_ConfigurationSubsampling], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TSingleDiagnosticParameterReportForwardControlSubsampling_structure.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TSingleDiagnosticParameterReportForwardControlSubsampling_structure.sizeRange(ls, offset, from, to) == TSingleDiagnosticParameterReportForwardControlSubsampling_structure.sizeRange(ls, otherOffset, from, to)
    }
}

case class TSingleDiagnosticParameterReportForwardControlSubsampling (
    applicationProcess_ID: TApplicationProcess_ID, 
    structure: TSingleDiagnosticParameterReportForwardControlSubsampling_structure
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854774772L))
        val size_0 = 11L
        val size_1 = 32L
        val size_2 = this.structure.size(offset + size_0 + size_1)
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 1035L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774772L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774772L))
        val size_0_offset = 11L
        val size_0_otherOffset = 11L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.structure.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.structure.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.structure.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774772L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774772L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 11L
        val size_0_otherOffset = 11L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.structure.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.structure.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.structure.sizeLemmaNextByte(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774772L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774772L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 11L
        val size_0_otherOffset = 11L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.structure.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.structure.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.structure.sizeLemmaNextWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774772L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774772L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 11L
        val size_0_otherOffset = 11L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.structure.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.structure.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.structure.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_SINGLEDIAGNOSTICPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_STRUCTURE: Int = 335 /*(SIZE(0 .. maxDiagnosticStructure-ID-Count)) */
@inline @cCode.inline val ERR_SINGLEDIAGNOSTICPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_STRUCTURE_ELM_2: Int = 330 /* */

@inline @cCode.inline val ERR_SINGLEDIAGNOSTICPARAMETERREPORTFORWARDCONTROLSUBSAMPLING: Int = 340 /* */
@inline @cCode.inline val ERR_SINGLEDIAGNOSTICPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_APPLICATIONPROCESS_ID_2: Int = 304 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_SINGLEDIAGNOSTICPARAMETERREPORTFORWARDCONTROLSUBSAMPLING: Int = 343 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_SINGLEDIAGNOSTICPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_APPLICATIONPROCESS_ID_2: Int = 307 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_SINGLEDIAGNOSTICPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_N2_UNINITIALIZED: Int = 344 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_SINGLEDIAGNOSTICPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_N2: Int = 309 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_SINGLEDIAGNOSTICPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_STRUCTURE: Int = 338 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_SINGLEDIAGNOSTICPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_STRUCTURE_ELM_2: Int = 333 /*  */
@inline @cCode.inline val TSingleDiagnosticParameterReportForwardControlSubsampling_REQUIRED_BYTES_FOR_ACN_ENCODING = 130
@inline @cCode.inline val TSingleDiagnosticParameterReportForwardControlSubsampling_REQUIRED_BITS_FOR_ACN_ENCODING = 1035

@inline @cCode.inline val ERR_ACN_DECODE_SINGLEDIAGNOSTICPARAMETERREPORTFORWARDCONTROLSUBSAMPLING: Int = 345 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_SINGLEDIAGNOSTICPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_APPLICATIONPROCESS_ID_2: Int = 308 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_SINGLEDIAGNOSTICPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_N2: Int = 310 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_SINGLEDIAGNOSTICPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_STRUCTURE: Int = 339 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_SINGLEDIAGNOSTICPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_STRUCTURE_ELM_2: Int = 334 /*  */
/*-- TDiagnosticParameterReportForwardControlSubsampling --------------------------------------------*/


case class TDiagnosticParameterReportForwardControlSubsampling_forwardControl (nCount: Int, arr: Vector[TSingleDiagnosticParameterReportForwardControlSubsampling])
{
    require(this.arr.size <= 31 && 1 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854743722L))
        TDiagnosticParameterReportForwardControlSubsampling_forwardControl.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 32085L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743722L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743722L))
        TDiagnosticParameterReportForwardControlSubsampling_forwardControl.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743722L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743722L))
        require((offset % 8L) == (otherOffset % 8L))
        TDiagnosticParameterReportForwardControlSubsampling_forwardControl.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743722L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743722L))
        require((offset % 16L) == (otherOffset % 16L))
        TDiagnosticParameterReportForwardControlSubsampling_forwardControl.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743722L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743722L))
        require((offset % 32L) == (otherOffset % 32L))
        TDiagnosticParameterReportForwardControlSubsampling_forwardControl.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TDiagnosticParameterReportForwardControlSubsampling_forwardControl {
    def sizeRange(ls: Vector[TSingleDiagnosticParameterReportForwardControlSubsampling], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 1035L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(0L <= elemSize && elemSize <= 1035L)
            elemSize + TDiagnosticParameterReportForwardControlSubsampling_forwardControl.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 1035L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TSingleDiagnosticParameterReportForwardControlSubsampling], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 1035L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 1035L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 1035L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 1035L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TDiagnosticParameterReportForwardControlSubsampling_forwardControl.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TDiagnosticParameterReportForwardControlSubsampling_forwardControl.sizeRange(ls, offset, from, to) == TDiagnosticParameterReportForwardControlSubsampling_forwardControl.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TSingleDiagnosticParameterReportForwardControlSubsampling], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 1035L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 1035L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 1035L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 1035L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TDiagnosticParameterReportForwardControlSubsampling_forwardControl.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TDiagnosticParameterReportForwardControlSubsampling_forwardControl.sizeRange(ls, offset, from, to) == TDiagnosticParameterReportForwardControlSubsampling_forwardControl.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TSingleDiagnosticParameterReportForwardControlSubsampling], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 1035L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 1035L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 1035L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 1035L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TDiagnosticParameterReportForwardControlSubsampling_forwardControl.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TDiagnosticParameterReportForwardControlSubsampling_forwardControl.sizeRange(ls, offset, from, to) == TDiagnosticParameterReportForwardControlSubsampling_forwardControl.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TSingleDiagnosticParameterReportForwardControlSubsampling], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 1035L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 1035L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 1035L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 1035L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TDiagnosticParameterReportForwardControlSubsampling_forwardControl.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TDiagnosticParameterReportForwardControlSubsampling_forwardControl.sizeRange(ls, offset, from, to) == TDiagnosticParameterReportForwardControlSubsampling_forwardControl.sizeRange(ls, otherOffset, from, to)
    }
}

case class TDiagnosticParameterReportForwardControlSubsampling (
    forwardControl: TDiagnosticParameterReportForwardControlSubsampling_forwardControl
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854743690L))
        val size_0 = 32L
        val size_1 = this.forwardControl.size(offset + size_0)
        size_0 + size_1
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 32117L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743690L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743690L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.forwardControl.size(offset + size_0_offset)
        val size_1_otherOffset = this.forwardControl.size(otherOffset + size_0_otherOffset)
        this.forwardControl.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743690L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743690L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.forwardControl.size(offset + size_0_offset)
        val size_1_otherOffset = this.forwardControl.size(otherOffset + size_0_otherOffset)
        this.forwardControl.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743690L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743690L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.forwardControl.size(offset + size_0_offset)
        val size_1_otherOffset = this.forwardControl.size(otherOffset + size_0_otherOffset)
        this.forwardControl.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743690L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743690L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.forwardControl.size(offset + size_0_offset)
        val size_1_otherOffset = this.forwardControl.size(otherOffset + size_0_otherOffset)
        this.forwardControl.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_DIAGNOSTICPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_FORWARDCONTROL: Int = 224 /*(SIZE(1 .. maxDiagnosticParameterReportForwardControlCount)) */
@inline @cCode.inline val ERR_DIAGNOSTICPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_FORWARDCONTROL_ELM_2: Int = 219 /* */

@inline @cCode.inline val ERR_DIAGNOSTICPARAMETERREPORTFORWARDCONTROLSUBSAMPLING: Int = 229 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_DIAGNOSTICPARAMETERREPORTFORWARDCONTROLSUBSAMPLING: Int = 232 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_DIAGNOSTICPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_N1_UNINITIALIZED: Int = 233 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_DIAGNOSTICPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_N1: Int = 171 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_DIAGNOSTICPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_FORWARDCONTROL: Int = 227 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_DIAGNOSTICPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_FORWARDCONTROL_ELM_2: Int = 222 /*  */
@inline @cCode.inline val TDiagnosticParameterReportForwardControlSubsampling_REQUIRED_BYTES_FOR_ACN_ENCODING = 4015
@inline @cCode.inline val TDiagnosticParameterReportForwardControlSubsampling_REQUIRED_BITS_FOR_ACN_ENCODING = 32117

@inline @cCode.inline val ERR_ACN_DECODE_DIAGNOSTICPARAMETERREPORTFORWARDCONTROLSUBSAMPLING: Int = 234 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_DIAGNOSTICPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_N1: Int = 172 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_DIAGNOSTICPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_FORWARDCONTROL: Int = 228 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_DIAGNOSTICPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_FORWARDCONTROL_ELM_2: Int = 223 /*  */
/*-- TSingleDiagnosticParameterReportForwardControlNoSubsampling --------------------------------------------*/


case class TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure (nCount: Int, arr: Vector[TDiagnosticParameterStructure_ID_ConfigurationNoSubsampling])
{
    require(this.arr.size <= 31 && 0 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854774815L))
        TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 992L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774815L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774815L))
        TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774815L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774815L))
        require((offset % 8L) == (otherOffset % 8L))
        TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774815L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774815L))
        require((offset % 16L) == (otherOffset % 16L))
        TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774815L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774815L))
        require((offset % 32L) == (otherOffset % 32L))
        TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure {
    def sizeRange(ls: Vector[TDiagnosticParameterStructure_ID_ConfigurationNoSubsampling], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(elemSize == 32L)
            elemSize + TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 32L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TDiagnosticParameterStructure_ID_ConfigurationNoSubsampling], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure.sizeRange(ls, offset, from, to) == TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TDiagnosticParameterStructure_ID_ConfigurationNoSubsampling], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure.sizeRange(ls, offset, from, to) == TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TDiagnosticParameterStructure_ID_ConfigurationNoSubsampling], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure.sizeRange(ls, offset, from, to) == TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TDiagnosticParameterStructure_ID_ConfigurationNoSubsampling], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure.sizeRange(ls, offset, from, to) == TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure.sizeRange(ls, otherOffset, from, to)
    }
}

case class TSingleDiagnosticParameterReportForwardControlNoSubsampling (
    applicationProcess_ID: TApplicationProcess_ID, 
    structure: TSingleDiagnosticParameterReportForwardControlNoSubsampling_structure
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854774772L))
        val size_0 = 11L
        val size_1 = 32L
        val size_2 = this.structure.size(offset + size_0 + size_1)
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 1035L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774772L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774772L))
        val size_0_offset = 11L
        val size_0_otherOffset = 11L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.structure.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.structure.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.structure.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774772L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774772L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 11L
        val size_0_otherOffset = 11L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.structure.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.structure.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.structure.sizeLemmaNextByte(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774772L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774772L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 11L
        val size_0_otherOffset = 11L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.structure.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.structure.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.structure.sizeLemmaNextWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774772L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774772L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 11L
        val size_0_otherOffset = 11L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.structure.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.structure.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.structure.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_SINGLEDIAGNOSTICPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_STRUCTURE: Int = 382 /*(SIZE(0 .. maxDiagnosticStructure-ID-Count)) */
@inline @cCode.inline val ERR_SINGLEDIAGNOSTICPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_STRUCTURE_ELM_2: Int = 377 /* */

@inline @cCode.inline val ERR_SINGLEDIAGNOSTICPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING: Int = 387 /* */
@inline @cCode.inline val ERR_SINGLEDIAGNOSTICPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_APPLICATIONPROCESS_ID_2: Int = 351 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_SINGLEDIAGNOSTICPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING: Int = 390 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_SINGLEDIAGNOSTICPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_APPLICATIONPROCESS_ID_2: Int = 354 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_SINGLEDIAGNOSTICPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_N2_UNINITIALIZED: Int = 391 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_SINGLEDIAGNOSTICPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_N2: Int = 356 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_SINGLEDIAGNOSTICPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_STRUCTURE: Int = 385 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_SINGLEDIAGNOSTICPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_STRUCTURE_ELM_2: Int = 380 /*  */
@inline @cCode.inline val TSingleDiagnosticParameterReportForwardControlNoSubsampling_REQUIRED_BYTES_FOR_ACN_ENCODING = 130
@inline @cCode.inline val TSingleDiagnosticParameterReportForwardControlNoSubsampling_REQUIRED_BITS_FOR_ACN_ENCODING = 1035

@inline @cCode.inline val ERR_ACN_DECODE_SINGLEDIAGNOSTICPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING: Int = 392 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_SINGLEDIAGNOSTICPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_APPLICATIONPROCESS_ID_2: Int = 355 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_SINGLEDIAGNOSTICPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_N2: Int = 357 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_SINGLEDIAGNOSTICPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_STRUCTURE: Int = 386 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_SINGLEDIAGNOSTICPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_STRUCTURE_ELM_2: Int = 381 /*  */
/*-- TDiagnosticParameterReportForwardControlNoSubsampling --------------------------------------------*/


case class TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl (nCount: Int, arr: Vector[TSingleDiagnosticParameterReportForwardControlNoSubsampling])
{
    require(this.arr.size <= 31 && 1 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854743722L))
        TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 32085L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743722L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743722L))
        TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743722L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743722L))
        require((offset % 8L) == (otherOffset % 8L))
        TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743722L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743722L))
        require((offset % 16L) == (otherOffset % 16L))
        TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743722L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743722L))
        require((offset % 32L) == (otherOffset % 32L))
        TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl {
    def sizeRange(ls: Vector[TSingleDiagnosticParameterReportForwardControlNoSubsampling], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 1035L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(0L <= elemSize && elemSize <= 1035L)
            elemSize + TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 1035L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TSingleDiagnosticParameterReportForwardControlNoSubsampling], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 1035L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 1035L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 1035L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 1035L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl.sizeRange(ls, offset, from, to) == TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TSingleDiagnosticParameterReportForwardControlNoSubsampling], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 1035L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 1035L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 1035L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 1035L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl.sizeRange(ls, offset, from, to) == TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TSingleDiagnosticParameterReportForwardControlNoSubsampling], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 1035L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 1035L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 1035L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 1035L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl.sizeRange(ls, offset, from, to) == TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TSingleDiagnosticParameterReportForwardControlNoSubsampling], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 1035L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 1035L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 1035L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 1035L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl.sizeRange(ls, offset, from, to) == TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl.sizeRange(ls, otherOffset, from, to)
    }
}

case class TDiagnosticParameterReportForwardControlNoSubsampling (
    forwardControl: TDiagnosticParameterReportForwardControlNoSubsampling_forwardControl
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854743690L))
        val size_0 = 32L
        val size_1 = this.forwardControl.size(offset + size_0)
        size_0 + size_1
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 32117L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743690L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743690L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.forwardControl.size(offset + size_0_offset)
        val size_1_otherOffset = this.forwardControl.size(otherOffset + size_0_otherOffset)
        this.forwardControl.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743690L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743690L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.forwardControl.size(offset + size_0_offset)
        val size_1_otherOffset = this.forwardControl.size(otherOffset + size_0_otherOffset)
        this.forwardControl.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743690L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743690L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.forwardControl.size(offset + size_0_offset)
        val size_1_otherOffset = this.forwardControl.size(otherOffset + size_0_otherOffset)
        this.forwardControl.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743690L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743690L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.forwardControl.size(offset + size_0_offset)
        val size_1_otherOffset = this.forwardControl.size(otherOffset + size_0_otherOffset)
        this.forwardControl.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_DIAGNOSTICPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_FORWARDCONTROL: Int = 288 /*(SIZE(1 .. maxDiagnosticParameterReportForwardControlCount)) */
@inline @cCode.inline val ERR_DIAGNOSTICPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_FORWARDCONTROL_ELM_2: Int = 283 /* */

@inline @cCode.inline val ERR_DIAGNOSTICPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING: Int = 293 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_DIAGNOSTICPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING: Int = 296 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_DIAGNOSTICPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_N1_UNINITIALIZED: Int = 297 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_DIAGNOSTICPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_N1: Int = 235 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_DIAGNOSTICPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_FORWARDCONTROL: Int = 291 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_DIAGNOSTICPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_FORWARDCONTROL_ELM_2: Int = 286 /*  */
@inline @cCode.inline val TDiagnosticParameterReportForwardControlNoSubsampling_REQUIRED_BYTES_FOR_ACN_ENCODING = 4015
@inline @cCode.inline val TDiagnosticParameterReportForwardControlNoSubsampling_REQUIRED_BITS_FOR_ACN_ENCODING = 32117

@inline @cCode.inline val ERR_ACN_DECODE_DIAGNOSTICPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING: Int = 298 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_DIAGNOSTICPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_N1: Int = 236 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_DIAGNOSTICPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_FORWARDCONTROL: Int = 292 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_DIAGNOSTICPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_FORWARDCONTROL_ELM_2: Int = 287 /*  */

// @inline @cCode.inline val maxDiagnosticParameterReportForwardControlCount: Int = 31 // defined in body
// @inline @cCode.inline val maxDiagnosticStructure_ID_Count: Int = 31 // defined in body

