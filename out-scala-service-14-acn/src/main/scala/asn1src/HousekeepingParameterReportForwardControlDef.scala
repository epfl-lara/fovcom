/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- THousekeepingParameterStructure_ID_ConfigurationNoSubsampling --------------------------------------------*/

case class THousekeepingParameterStructure_ID_ConfigurationNoSubsampling (
    id: THousekeepingParameterReportStructure_ID, 
    subsamplingRate: OptionMut[NullType]
) {
    require(!this.subsamplingRate.isDefined)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        val size_0 = 32L
        val size_1 = this.subsamplingRate match {
            case SomeMut(v) =>
                0L
            case NoneMut() =>
                0L
        }
        size_0 + size_1
    }.ensuring { (res: Long) => 
        res == 32L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.subsamplingRate match {
            case SomeMut(v) =>
                0L
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.subsamplingRate match {
            case SomeMut(v) =>
                0L
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.subsamplingRate match {
            case SomeMut(v) =>
                0L
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.subsamplingRate match {
            case SomeMut(v) =>
                0L
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.subsamplingRate match {
            case SomeMut(v) =>
                0L
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.subsamplingRate match {
            case SomeMut(v) =>
                0L
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.subsamplingRate match {
            case SomeMut(v) =>
                0L
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.subsamplingRate match {
            case SomeMut(v) =>
                0L
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_HOUSEKEEPINGPARAMETERSTRUCTURE_ID_CONFIGURATIONNOSUBSAMPLING: Int = 750 /*(WITH COMPONENTS
{
    subsamplingRate ABSENT
}) */
@inline @cCode.inline val ERR_HOUSEKEEPINGPARAMETERSTRUCTURE_ID_CONFIGURATIONNOSUBSAMPLING_ID_2: Int = 741 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_HOUSEKEEPINGPARAMETERSTRUCTURE_ID_CONFIGURATIONNOSUBSAMPLING: Int = 753 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_HOUSEKEEPINGPARAMETERSTRUCTURE_ID_CONFIGURATIONNOSUBSAMPLING_ID_2: Int = 744 /*  */
@inline @cCode.inline val THousekeepingParameterStructure_ID_ConfigurationNoSubsampling_REQUIRED_BYTES_FOR_ACN_ENCODING = 4
@inline @cCode.inline val THousekeepingParameterStructure_ID_ConfigurationNoSubsampling_REQUIRED_BITS_FOR_ACN_ENCODING = 32

@inline @cCode.inline val ERR_ACN_DECODE_HOUSEKEEPINGPARAMETERSTRUCTURE_ID_CONFIGURATIONNOSUBSAMPLING: Int = 754 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_HOUSEKEEPINGPARAMETERSTRUCTURE_ID_CONFIGURATIONNOSUBSAMPLING_ID_2: Int = 745 /*  */
/*-- THousekeepingParameterStructure_ID_ConfigurationSubsampling --------------------------------------------*/

case class THousekeepingParameterStructure_ID_ConfigurationSubsampling (
    id: THousekeepingParameterReportStructure_ID, 
    subsamplingRate: OptionMut[NullType]
) {
    require(this.subsamplingRate.isDefined)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        val size_0 = 32L
        val size_1 = this.subsamplingRate match {
            case SomeMut(v) =>
                0L
            case NoneMut() =>
                0L
        }
        size_0 + size_1
    }.ensuring { (res: Long) => 
        res == 32L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.subsamplingRate match {
            case SomeMut(v) =>
                0L
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.subsamplingRate match {
            case SomeMut(v) =>
                0L
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.subsamplingRate match {
            case SomeMut(v) =>
                0L
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.subsamplingRate match {
            case SomeMut(v) =>
                0L
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.subsamplingRate match {
            case SomeMut(v) =>
                0L
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.subsamplingRate match {
            case SomeMut(v) =>
                0L
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775775L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775775L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.subsamplingRate match {
            case SomeMut(v) =>
                0L
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.subsamplingRate match {
            case SomeMut(v) =>
                0L
            case NoneMut() =>
                0L
        }
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_HOUSEKEEPINGPARAMETERSTRUCTURE_ID_CONFIGURATIONSUBSAMPLING: Int = 769 /*(WITH COMPONENTS
{
    subsamplingRate PRESENT
}) */
@inline @cCode.inline val ERR_HOUSEKEEPINGPARAMETERSTRUCTURE_ID_CONFIGURATIONSUBSAMPLING_ID_2: Int = 760 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_HOUSEKEEPINGPARAMETERSTRUCTURE_ID_CONFIGURATIONSUBSAMPLING: Int = 772 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_HOUSEKEEPINGPARAMETERSTRUCTURE_ID_CONFIGURATIONSUBSAMPLING_ID_2: Int = 763 /*  */
@inline @cCode.inline val THousekeepingParameterStructure_ID_ConfigurationSubsampling_REQUIRED_BYTES_FOR_ACN_ENCODING = 4
@inline @cCode.inline val THousekeepingParameterStructure_ID_ConfigurationSubsampling_REQUIRED_BITS_FOR_ACN_ENCODING = 32

@inline @cCode.inline val ERR_ACN_DECODE_HOUSEKEEPINGPARAMETERSTRUCTURE_ID_CONFIGURATIONSUBSAMPLING: Int = 773 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_HOUSEKEEPINGPARAMETERSTRUCTURE_ID_CONFIGURATIONSUBSAMPLING_ID_2: Int = 764 /*  */
/*-- TSingleHousekeepingParameterReportForwardControlSubsampling --------------------------------------------*/


case class TSingleHousekeepingParameterReportForwardControlSubsampling_structure (nCount: Int, arr: Vector[THousekeepingParameterStructure_ID_ConfigurationSubsampling])
{
    require(this.arr.size <= 31 && 0 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854774815L))
        TSingleHousekeepingParameterReportForwardControlSubsampling_structure.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 992L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774815L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774815L))
        TSingleHousekeepingParameterReportForwardControlSubsampling_structure.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774815L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774815L))
        require((offset % 8L) == (otherOffset % 8L))
        TSingleHousekeepingParameterReportForwardControlSubsampling_structure.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774815L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774815L))
        require((offset % 16L) == (otherOffset % 16L))
        TSingleHousekeepingParameterReportForwardControlSubsampling_structure.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774815L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774815L))
        require((offset % 32L) == (otherOffset % 32L))
        TSingleHousekeepingParameterReportForwardControlSubsampling_structure.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TSingleHousekeepingParameterReportForwardControlSubsampling_structure {
    def sizeRange(ls: Vector[THousekeepingParameterStructure_ID_ConfigurationSubsampling], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(elemSize == 32L)
            elemSize + TSingleHousekeepingParameterReportForwardControlSubsampling_structure.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 32L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[THousekeepingParameterStructure_ID_ConfigurationSubsampling], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TSingleHousekeepingParameterReportForwardControlSubsampling_structure.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TSingleHousekeepingParameterReportForwardControlSubsampling_structure.sizeRange(ls, offset, from, to) == TSingleHousekeepingParameterReportForwardControlSubsampling_structure.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[THousekeepingParameterStructure_ID_ConfigurationSubsampling], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TSingleHousekeepingParameterReportForwardControlSubsampling_structure.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TSingleHousekeepingParameterReportForwardControlSubsampling_structure.sizeRange(ls, offset, from, to) == TSingleHousekeepingParameterReportForwardControlSubsampling_structure.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[THousekeepingParameterStructure_ID_ConfigurationSubsampling], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TSingleHousekeepingParameterReportForwardControlSubsampling_structure.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TSingleHousekeepingParameterReportForwardControlSubsampling_structure.sizeRange(ls, offset, from, to) == TSingleHousekeepingParameterReportForwardControlSubsampling_structure.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[THousekeepingParameterStructure_ID_ConfigurationSubsampling], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TSingleHousekeepingParameterReportForwardControlSubsampling_structure.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TSingleHousekeepingParameterReportForwardControlSubsampling_structure.sizeRange(ls, offset, from, to) == TSingleHousekeepingParameterReportForwardControlSubsampling_structure.sizeRange(ls, otherOffset, from, to)
    }
}

case class TSingleHousekeepingParameterReportForwardControlSubsampling (
    applicationProcess_ID: TApplicationProcess_ID, 
    structure: TSingleHousekeepingParameterReportForwardControlSubsampling_structure
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854774772L))
        val size_0 = 11L
        val size_1 = 32L
        val size_2 = this.structure.size(offset + size_0 + size_1)
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 1035L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774772L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774772L))
        val size_0_offset = 11L
        val size_0_otherOffset = 11L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.structure.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.structure.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.structure.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774772L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774772L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 11L
        val size_0_otherOffset = 11L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.structure.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.structure.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.structure.sizeLemmaNextByte(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774772L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774772L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 11L
        val size_0_otherOffset = 11L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.structure.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.structure.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.structure.sizeLemmaNextWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774772L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774772L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 11L
        val size_0_otherOffset = 11L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.structure.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.structure.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.structure.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_SINGLEHOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_STRUCTURE: Int = 678 /*(SIZE(0 .. maxHousekeepingStructure-ID-Count)) */
@inline @cCode.inline val ERR_SINGLEHOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_STRUCTURE_ELM_2: Int = 673 /* */

@inline @cCode.inline val ERR_SINGLEHOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLSUBSAMPLING: Int = 683 /* */
@inline @cCode.inline val ERR_SINGLEHOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_APPLICATIONPROCESS_ID_2: Int = 647 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_SINGLEHOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLSUBSAMPLING: Int = 686 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_SINGLEHOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_APPLICATIONPROCESS_ID_2: Int = 650 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_SINGLEHOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_N2_UNINITIALIZED: Int = 687 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_SINGLEHOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_N2: Int = 652 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_SINGLEHOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_STRUCTURE: Int = 681 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_SINGLEHOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_STRUCTURE_ELM_2: Int = 676 /*  */
@inline @cCode.inline val TSingleHousekeepingParameterReportForwardControlSubsampling_REQUIRED_BYTES_FOR_ACN_ENCODING = 130
@inline @cCode.inline val TSingleHousekeepingParameterReportForwardControlSubsampling_REQUIRED_BITS_FOR_ACN_ENCODING = 1035

@inline @cCode.inline val ERR_ACN_DECODE_SINGLEHOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLSUBSAMPLING: Int = 688 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_SINGLEHOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_APPLICATIONPROCESS_ID_2: Int = 651 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_SINGLEHOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_N2: Int = 653 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_SINGLEHOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_STRUCTURE: Int = 682 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_SINGLEHOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_STRUCTURE_ELM_2: Int = 677 /*  */
/*-- THousekeepingParameterReportForwardControlSubsampling --------------------------------------------*/


case class THousekeepingParameterReportForwardControlSubsampling_forwardControl (nCount: Int, arr: Vector[TSingleHousekeepingParameterReportForwardControlSubsampling])
{
    require(this.arr.size <= 31 && 1 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854743722L))
        THousekeepingParameterReportForwardControlSubsampling_forwardControl.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 32085L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743722L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743722L))
        THousekeepingParameterReportForwardControlSubsampling_forwardControl.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743722L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743722L))
        require((offset % 8L) == (otherOffset % 8L))
        THousekeepingParameterReportForwardControlSubsampling_forwardControl.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743722L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743722L))
        require((offset % 16L) == (otherOffset % 16L))
        THousekeepingParameterReportForwardControlSubsampling_forwardControl.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743722L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743722L))
        require((offset % 32L) == (otherOffset % 32L))
        THousekeepingParameterReportForwardControlSubsampling_forwardControl.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object THousekeepingParameterReportForwardControlSubsampling_forwardControl {
    def sizeRange(ls: Vector[TSingleHousekeepingParameterReportForwardControlSubsampling], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 1035L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(0L <= elemSize && elemSize <= 1035L)
            elemSize + THousekeepingParameterReportForwardControlSubsampling_forwardControl.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 1035L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TSingleHousekeepingParameterReportForwardControlSubsampling], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 1035L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 1035L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 1035L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 1035L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            THousekeepingParameterReportForwardControlSubsampling_forwardControl.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        THousekeepingParameterReportForwardControlSubsampling_forwardControl.sizeRange(ls, offset, from, to) == THousekeepingParameterReportForwardControlSubsampling_forwardControl.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TSingleHousekeepingParameterReportForwardControlSubsampling], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 1035L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 1035L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 1035L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 1035L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            THousekeepingParameterReportForwardControlSubsampling_forwardControl.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        THousekeepingParameterReportForwardControlSubsampling_forwardControl.sizeRange(ls, offset, from, to) == THousekeepingParameterReportForwardControlSubsampling_forwardControl.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TSingleHousekeepingParameterReportForwardControlSubsampling], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 1035L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 1035L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 1035L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 1035L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            THousekeepingParameterReportForwardControlSubsampling_forwardControl.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        THousekeepingParameterReportForwardControlSubsampling_forwardControl.sizeRange(ls, offset, from, to) == THousekeepingParameterReportForwardControlSubsampling_forwardControl.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TSingleHousekeepingParameterReportForwardControlSubsampling], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 1035L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 1035L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 1035L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 1035L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            THousekeepingParameterReportForwardControlSubsampling_forwardControl.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        THousekeepingParameterReportForwardControlSubsampling_forwardControl.sizeRange(ls, offset, from, to) == THousekeepingParameterReportForwardControlSubsampling_forwardControl.sizeRange(ls, otherOffset, from, to)
    }
}

case class THousekeepingParameterReportForwardControlSubsampling (
    forwardControl: THousekeepingParameterReportForwardControlSubsampling_forwardControl
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854743690L))
        val size_0 = 32L
        val size_1 = this.forwardControl.size(offset + size_0)
        size_0 + size_1
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 32117L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743690L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743690L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.forwardControl.size(offset + size_0_offset)
        val size_1_otherOffset = this.forwardControl.size(otherOffset + size_0_otherOffset)
        this.forwardControl.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743690L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743690L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.forwardControl.size(offset + size_0_offset)
        val size_1_otherOffset = this.forwardControl.size(otherOffset + size_0_otherOffset)
        this.forwardControl.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743690L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743690L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.forwardControl.size(offset + size_0_offset)
        val size_1_otherOffset = this.forwardControl.size(otherOffset + size_0_otherOffset)
        this.forwardControl.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743690L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743690L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.forwardControl.size(offset + size_0_offset)
        val size_1_otherOffset = this.forwardControl.size(otherOffset + size_0_otherOffset)
        this.forwardControl.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_HOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_FORWARDCONTROL: Int = 567 /*(SIZE(1 .. maxHousekeepingParameterReportForwardControlCount)) */
@inline @cCode.inline val ERR_HOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_FORWARDCONTROL_ELM_2: Int = 562 /* */

@inline @cCode.inline val ERR_HOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLSUBSAMPLING: Int = 572 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_HOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLSUBSAMPLING: Int = 575 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_HOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_N1_UNINITIALIZED: Int = 576 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_HOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_N1: Int = 514 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_HOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_FORWARDCONTROL: Int = 570 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_HOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_FORWARDCONTROL_ELM_2: Int = 565 /*  */
@inline @cCode.inline val THousekeepingParameterReportForwardControlSubsampling_REQUIRED_BYTES_FOR_ACN_ENCODING = 4015
@inline @cCode.inline val THousekeepingParameterReportForwardControlSubsampling_REQUIRED_BITS_FOR_ACN_ENCODING = 32117

@inline @cCode.inline val ERR_ACN_DECODE_HOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLSUBSAMPLING: Int = 577 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_HOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_N1: Int = 515 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_HOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_FORWARDCONTROL: Int = 571 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_HOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLSUBSAMPLING_FORWARDCONTROL_ELM_2: Int = 566 /*  */
/*-- TSingleHousekeepingParameterReportForwardControlNoSubsampling --------------------------------------------*/


case class TSingleHousekeepingParameterReportForwardControlNoSubsampling_structure (nCount: Int, arr: Vector[THousekeepingParameterStructure_ID_ConfigurationNoSubsampling])
{
    require(this.arr.size <= 31 && 0 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854774815L))
        TSingleHousekeepingParameterReportForwardControlNoSubsampling_structure.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 992L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774815L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774815L))
        TSingleHousekeepingParameterReportForwardControlNoSubsampling_structure.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774815L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774815L))
        require((offset % 8L) == (otherOffset % 8L))
        TSingleHousekeepingParameterReportForwardControlNoSubsampling_structure.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774815L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774815L))
        require((offset % 16L) == (otherOffset % 16L))
        TSingleHousekeepingParameterReportForwardControlNoSubsampling_structure.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774815L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774815L))
        require((offset % 32L) == (otherOffset % 32L))
        TSingleHousekeepingParameterReportForwardControlNoSubsampling_structure.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TSingleHousekeepingParameterReportForwardControlNoSubsampling_structure {
    def sizeRange(ls: Vector[THousekeepingParameterStructure_ID_ConfigurationNoSubsampling], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(elemSize == 32L)
            elemSize + TSingleHousekeepingParameterReportForwardControlNoSubsampling_structure.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 32L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[THousekeepingParameterStructure_ID_ConfigurationNoSubsampling], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TSingleHousekeepingParameterReportForwardControlNoSubsampling_structure.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TSingleHousekeepingParameterReportForwardControlNoSubsampling_structure.sizeRange(ls, offset, from, to) == TSingleHousekeepingParameterReportForwardControlNoSubsampling_structure.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[THousekeepingParameterStructure_ID_ConfigurationNoSubsampling], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TSingleHousekeepingParameterReportForwardControlNoSubsampling_structure.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TSingleHousekeepingParameterReportForwardControlNoSubsampling_structure.sizeRange(ls, offset, from, to) == TSingleHousekeepingParameterReportForwardControlNoSubsampling_structure.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[THousekeepingParameterStructure_ID_ConfigurationNoSubsampling], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TSingleHousekeepingParameterReportForwardControlNoSubsampling_structure.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TSingleHousekeepingParameterReportForwardControlNoSubsampling_structure.sizeRange(ls, offset, from, to) == TSingleHousekeepingParameterReportForwardControlNoSubsampling_structure.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[THousekeepingParameterStructure_ID_ConfigurationNoSubsampling], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 32L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 32L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 32L)
            assert(elemSizeOtherOff == 32L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TSingleHousekeepingParameterReportForwardControlNoSubsampling_structure.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TSingleHousekeepingParameterReportForwardControlNoSubsampling_structure.sizeRange(ls, offset, from, to) == TSingleHousekeepingParameterReportForwardControlNoSubsampling_structure.sizeRange(ls, otherOffset, from, to)
    }
}

case class TSingleHousekeepingParameterReportForwardControlNoSubsampling (
    applicationProcess_ID: TApplicationProcess_ID, 
    structure: TSingleHousekeepingParameterReportForwardControlNoSubsampling_structure
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854774772L))
        val size_0 = 11L
        val size_1 = 32L
        val size_2 = this.structure.size(offset + size_0 + size_1)
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 1035L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774772L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774772L))
        val size_0_offset = 11L
        val size_0_otherOffset = 11L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.structure.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.structure.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.structure.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774772L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774772L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 11L
        val size_0_otherOffset = 11L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.structure.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.structure.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.structure.sizeLemmaNextByte(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774772L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774772L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 11L
        val size_0_otherOffset = 11L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.structure.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.structure.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.structure.sizeLemmaNextWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854774772L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854774772L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 11L
        val size_0_otherOffset = 11L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.structure.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.structure.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.structure.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_SINGLEHOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_STRUCTURE: Int = 725 /*(SIZE(0 .. maxHousekeepingStructure-ID-Count)) */
@inline @cCode.inline val ERR_SINGLEHOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_STRUCTURE_ELM_2: Int = 720 /* */

@inline @cCode.inline val ERR_SINGLEHOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING: Int = 730 /* */
@inline @cCode.inline val ERR_SINGLEHOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_APPLICATIONPROCESS_ID_2: Int = 694 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_SINGLEHOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING: Int = 733 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_SINGLEHOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_APPLICATIONPROCESS_ID_2: Int = 697 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_SINGLEHOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_N2_UNINITIALIZED: Int = 734 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_SINGLEHOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_N2: Int = 699 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_SINGLEHOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_STRUCTURE: Int = 728 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_SINGLEHOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_STRUCTURE_ELM_2: Int = 723 /*  */
@inline @cCode.inline val TSingleHousekeepingParameterReportForwardControlNoSubsampling_REQUIRED_BYTES_FOR_ACN_ENCODING = 130
@inline @cCode.inline val TSingleHousekeepingParameterReportForwardControlNoSubsampling_REQUIRED_BITS_FOR_ACN_ENCODING = 1035

@inline @cCode.inline val ERR_ACN_DECODE_SINGLEHOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING: Int = 735 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_SINGLEHOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_APPLICATIONPROCESS_ID_2: Int = 698 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_SINGLEHOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_N2: Int = 700 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_SINGLEHOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_STRUCTURE: Int = 729 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_SINGLEHOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_STRUCTURE_ELM_2: Int = 724 /*  */
/*-- THousekeepingParameterReportForwardControlNoSubsampling --------------------------------------------*/


case class THousekeepingParameterReportForwardControlNoSubsampling_forwardControl (nCount: Int, arr: Vector[TSingleHousekeepingParameterReportForwardControlNoSubsampling])
{
    require(this.arr.size <= 31 && 1 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854743722L))
        THousekeepingParameterReportForwardControlNoSubsampling_forwardControl.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 32085L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743722L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743722L))
        THousekeepingParameterReportForwardControlNoSubsampling_forwardControl.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743722L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743722L))
        require((offset % 8L) == (otherOffset % 8L))
        THousekeepingParameterReportForwardControlNoSubsampling_forwardControl.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743722L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743722L))
        require((offset % 16L) == (otherOffset % 16L))
        THousekeepingParameterReportForwardControlNoSubsampling_forwardControl.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743722L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743722L))
        require((offset % 32L) == (otherOffset % 32L))
        THousekeepingParameterReportForwardControlNoSubsampling_forwardControl.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object THousekeepingParameterReportForwardControlNoSubsampling_forwardControl {
    def sizeRange(ls: Vector[TSingleHousekeepingParameterReportForwardControlNoSubsampling], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 1035L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(0L <= elemSize && elemSize <= 1035L)
            elemSize + THousekeepingParameterReportForwardControlNoSubsampling_forwardControl.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 1035L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TSingleHousekeepingParameterReportForwardControlNoSubsampling], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 1035L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 1035L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 1035L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 1035L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            THousekeepingParameterReportForwardControlNoSubsampling_forwardControl.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        THousekeepingParameterReportForwardControlNoSubsampling_forwardControl.sizeRange(ls, offset, from, to) == THousekeepingParameterReportForwardControlNoSubsampling_forwardControl.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TSingleHousekeepingParameterReportForwardControlNoSubsampling], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 1035L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 1035L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 1035L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 1035L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            THousekeepingParameterReportForwardControlNoSubsampling_forwardControl.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        THousekeepingParameterReportForwardControlNoSubsampling_forwardControl.sizeRange(ls, offset, from, to) == THousekeepingParameterReportForwardControlNoSubsampling_forwardControl.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TSingleHousekeepingParameterReportForwardControlNoSubsampling], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 1035L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 1035L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 1035L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 1035L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            THousekeepingParameterReportForwardControlNoSubsampling_forwardControl.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        THousekeepingParameterReportForwardControlNoSubsampling_forwardControl.sizeRange(ls, offset, from, to) == THousekeepingParameterReportForwardControlNoSubsampling_forwardControl.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TSingleHousekeepingParameterReportForwardControlNoSubsampling], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 31))
        require((0L <= offset) && (offset <= 9223372036854775807L - 1035L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 1035L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(0L <= elemSizeOff && elemSizeOff <= 1035L)
            assert(0L <= elemSizeOtherOff && elemSizeOtherOff <= 1035L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            THousekeepingParameterReportForwardControlNoSubsampling_forwardControl.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        THousekeepingParameterReportForwardControlNoSubsampling_forwardControl.sizeRange(ls, offset, from, to) == THousekeepingParameterReportForwardControlNoSubsampling_forwardControl.sizeRange(ls, otherOffset, from, to)
    }
}

case class THousekeepingParameterReportForwardControlNoSubsampling (
    forwardControl: THousekeepingParameterReportForwardControlNoSubsampling_forwardControl
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854743690L))
        val size_0 = 32L
        val size_1 = this.forwardControl.size(offset + size_0)
        size_0 + size_1
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 32117L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743690L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743690L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.forwardControl.size(offset + size_0_offset)
        val size_1_otherOffset = this.forwardControl.size(otherOffset + size_0_otherOffset)
        this.forwardControl.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743690L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743690L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.forwardControl.size(offset + size_0_offset)
        val size_1_otherOffset = this.forwardControl.size(otherOffset + size_0_otherOffset)
        this.forwardControl.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743690L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743690L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.forwardControl.size(offset + size_0_offset)
        val size_1_otherOffset = this.forwardControl.size(otherOffset + size_0_otherOffset)
        this.forwardControl.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854743690L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854743690L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.forwardControl.size(offset + size_0_offset)
        val size_1_otherOffset = this.forwardControl.size(otherOffset + size_0_otherOffset)
        this.forwardControl.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_HOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_FORWARDCONTROL: Int = 631 /*(SIZE(1 .. maxHousekeepingParameterReportForwardControlCount)) */
@inline @cCode.inline val ERR_HOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_FORWARDCONTROL_ELM_2: Int = 626 /* */

@inline @cCode.inline val ERR_HOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING: Int = 636 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_HOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING: Int = 639 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_HOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_N1_UNINITIALIZED: Int = 640 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_HOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_N1: Int = 578 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_HOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_FORWARDCONTROL: Int = 634 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_HOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_FORWARDCONTROL_ELM_2: Int = 629 /*  */
@inline @cCode.inline val THousekeepingParameterReportForwardControlNoSubsampling_REQUIRED_BYTES_FOR_ACN_ENCODING = 4015
@inline @cCode.inline val THousekeepingParameterReportForwardControlNoSubsampling_REQUIRED_BITS_FOR_ACN_ENCODING = 32117

@inline @cCode.inline val ERR_ACN_DECODE_HOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING: Int = 641 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_HOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_N1: Int = 579 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_HOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_FORWARDCONTROL: Int = 635 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_HOUSEKEEPINGPARAMETERREPORTFORWARDCONTROLNOSUBSAMPLING_FORWARDCONTROL_ELM_2: Int = 630 /*  */

// @inline @cCode.inline val maxHousekeepingParameterReportForwardControlCount: Int = 31 // defined in body
// @inline @cCode.inline val maxHousekeepingStructure_ID_Count: Int = 31 // defined in body

