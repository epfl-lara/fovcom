/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._


def TEventDefinitionSystem_ID_IsConstraintValid(pVal: TEventDefinitionSystem_ID): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    pVal.applicationProcess_ID match
        case SomeMut(applicationProcess_ID) =>
            ret = TApplicationProcess_ID_IsConstraintValid(applicationProcess_ID)
        case NoneMut() =>
    if ret.isRight then
        ret = TEventDefinition_ID_IsConstraintValid(pVal.event_Definition_ID)
    if ret.isRight then
        ret = (pVal.applicationProcess_ID.isDefined == true) match
            case true =>
                Right(0)
            case false =>
                Left(45)
    ret
}

def TEventDefinitionSystem_ID_Initialize(): TEventDefinitionSystem_ID = TEventDefinitionSystem_ID(applicationProcess_ID = SomeMut(ULong.fromRaw(0L)), event_Definition_ID = ULong.fromRaw(0L))

@opaque @inlineOnce 
def TEventDefinitionSystem_ID_ACN_Encode(pVal: TEventDefinitionSystem_ID, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(43L))
    TEventDefinitionSystem_ID_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    EventDefinitionSystem_ID_applicationProcess_ID_Optional_ACN_Encode(codec, pVal, pVal.applicationProcess_ID) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 43L, 11L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 11L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = pVal.applicationProcess_ID match {
        case SomeMut(v) =>
            11L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode event_Definition_ID */
    TEventDefinition_ID_ACN_Encode(pVal.event_Definition_ID, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 43L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 43L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def EventDefinitionSystem_ID_applicationProcess_ID_Optional_ACN_Encode(codec: ACN, pVal: TEventDefinitionSystem_ID, applicationProcess_ID: OptionMut[ULong]): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(11L))
    @ghost val oldCdc = snapshot(codec)
    /* Encode applicationProcess_ID */
    /* marked as ALWAYS PRESENT, so it must be Some */
    applicationProcess_ID match
        case SomeMut(applicationProcess_ID) =>
            TApplicationProcess_ID_ACN_Encode(applicationProcess_ID, codec, false) match // uper:6
                case Right(_) =>
                case Left(err) => return Left(err)
        case NoneMut() => return Left(628)
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 11L
    }
}



@opaque @inlineOnce 
def TEventDefinitionSystem_ID_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TEventDefinitionSystem_ID] =
{
    require(codec.base.bitStream.validate_offset_bits(43L))

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val pVal_applicationProcess_ID = EventDefinitionSystem_ID_applicationProcess_ID_Optional_ACN_Decode(codec) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 43L, 11L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 11L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = pVal_applicationProcess_ID match {
        case SomeMut(v) =>
            11L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode event_Definition_ID */
    val pVal_event_Definition_ID = TEventDefinition_ID_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 43L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 43L)
    }
    val pVal = TEventDefinitionSystem_ID(pVal_applicationProcess_ID, pVal_event_Definition_ID)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }

    TEventDefinitionSystem_ID_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TEventDefinitionSystem_ID](l)
        case Right(_) => RightMut[ErrorCode, TEventDefinitionSystem_ID](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TEventDefinitionSystem_ID]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TEventDefinitionSystem_ID_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TEventDefinitionSystem_ID_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TEventDefinitionSystem_ID]) =
{
    require(codec.base.bitStream.validate_offset_bits(43L))
    val cpy = snapshot(codec)
    val res = TEventDefinitionSystem_ID_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def EventDefinitionSystem_ID_applicationProcess_ID_Optional_ACN_Decode(codec: ACN): EitherMut[Int, OptionMut[ULong]] = {
    require(codec.base.bitStream.validate_offset_bits(11L))
    @ghost val oldCdc = snapshot(codec)
    /* Decode applicationProcess_ID */
    /* marked as ALWAYS PRESENT */
    val applicationProcess_ID: OptionMut[TApplicationProcess_ID] =
        val pVal_applicationProcess_ID = TApplicationProcess_ID_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        SomeMut(pVal_applicationProcess_ID)
    RightMut[Int, OptionMut[ULong]](applicationProcess_ID)
}.ensuring { (res: EitherMut[Int, OptionMut[ULong]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            resVal.isDefined && old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 11L
    }
}



@ghost @pure
def EventDefinitionSystem_ID_applicationProcess_ID_Optional_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[Int, OptionMut[ULong]]) = {
    require(codec.base.bitStream.validate_offset_bits(11L))
    val cpy = snapshot(codec)
    val res = EventDefinitionSystem_ID_applicationProcess_ID_Optional_ACN_Decode(cpy)
    (cpy, res)
}

