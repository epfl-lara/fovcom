/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TTC_11_22_Group --------------------------------------------*/

case class TTC_11_22_Group (
    group_ID: TGroup_ID, 
    groupStatus: TGroupStatus
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775774L))
        val size_0 = 32L
        val size_1 = 1L
        size_0 + size_1
    }.ensuring { (res: Long) => 
        res == 33L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775774L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775774L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 1L
        val size_1_otherOffset = 1L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775774L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775774L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 1L
        val size_1_otherOffset = 1L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775774L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775774L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 1L
        val size_1_otherOffset = 1L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775774L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775774L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 1L
        val size_1_otherOffset = 1L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_11_22_GROUP: Int = 1156 /* */
@inline @cCode.inline val ERR_TC_11_22_GROUP_GROUP_ID_2: Int = 1141 /* */
@inline @cCode.inline val ERR_TC_11_22_GROUP_GROUPSTATUS_2: Int = 1151 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_11_22_GROUP: Int = 1159 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_11_22_GROUP_GROUP_ID_2: Int = 1144 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_11_22_GROUP_GROUPSTATUS_2: Int = 1154 /*  */
@inline @cCode.inline val TTC_11_22_Group_REQUIRED_BYTES_FOR_ACN_ENCODING = 5
@inline @cCode.inline val TTC_11_22_Group_REQUIRED_BITS_FOR_ACN_ENCODING = 33

@inline @cCode.inline val ERR_ACN_DECODE_TC_11_22_GROUP: Int = 1160 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_11_22_GROUP_GROUP_ID_2: Int = 1145 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_11_22_GROUP_GROUPSTATUS_2: Int = 1155 /*  */
/*-- TTC_11_22_CreateTimeBasedSchedulingGroups --------------------------------------------*/


case class TTC_11_22_CreateTimeBasedSchedulingGroups_groups (nCount: Int, arr: Vector[TTC_11_22_Group])
{
    require(this.arr.size <= 4095 && 1 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854640672L))
        TTC_11_22_CreateTimeBasedSchedulingGroups_groups.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 135135L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854640672L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854640672L))
        TTC_11_22_CreateTimeBasedSchedulingGroups_groups.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854640672L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854640672L))
        require((offset % 8L) == (otherOffset % 8L))
        TTC_11_22_CreateTimeBasedSchedulingGroups_groups.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854640672L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854640672L))
        require((offset % 16L) == (otherOffset % 16L))
        TTC_11_22_CreateTimeBasedSchedulingGroups_groups.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854640672L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854640672L))
        require((offset % 32L) == (otherOffset % 32L))
        TTC_11_22_CreateTimeBasedSchedulingGroups_groups.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TTC_11_22_CreateTimeBasedSchedulingGroups_groups {
    def sizeRange(ls: Vector[TTC_11_22_Group], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 4095))
        require((0L <= offset) && (offset <= 9223372036854775807L - 33L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(elemSize == 33L)
            elemSize + TTC_11_22_CreateTimeBasedSchedulingGroups_groups.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 33L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TTC_11_22_Group], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 4095))
        require((0L <= offset) && (offset <= 9223372036854775807L - 33L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 33L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 33L)
            assert(elemSizeOtherOff == 33L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TTC_11_22_CreateTimeBasedSchedulingGroups_groups.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_11_22_CreateTimeBasedSchedulingGroups_groups.sizeRange(ls, offset, from, to) == TTC_11_22_CreateTimeBasedSchedulingGroups_groups.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TTC_11_22_Group], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 4095))
        require((0L <= offset) && (offset <= 9223372036854775807L - 33L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 33L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 33L)
            assert(elemSizeOtherOff == 33L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TTC_11_22_CreateTimeBasedSchedulingGroups_groups.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_11_22_CreateTimeBasedSchedulingGroups_groups.sizeRange(ls, offset, from, to) == TTC_11_22_CreateTimeBasedSchedulingGroups_groups.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TTC_11_22_Group], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 4095))
        require((0L <= offset) && (offset <= 9223372036854775807L - 33L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 33L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 33L)
            assert(elemSizeOtherOff == 33L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TTC_11_22_CreateTimeBasedSchedulingGroups_groups.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_11_22_CreateTimeBasedSchedulingGroups_groups.sizeRange(ls, offset, from, to) == TTC_11_22_CreateTimeBasedSchedulingGroups_groups.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TTC_11_22_Group], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 4095))
        require((0L <= offset) && (offset <= 9223372036854775807L - 33L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 33L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 33L)
            assert(elemSizeOtherOff == 33L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TTC_11_22_CreateTimeBasedSchedulingGroups_groups.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_11_22_CreateTimeBasedSchedulingGroups_groups.sizeRange(ls, offset, from, to) == TTC_11_22_CreateTimeBasedSchedulingGroups_groups.sizeRange(ls, otherOffset, from, to)
    }
}

case class TTC_11_22_CreateTimeBasedSchedulingGroups (
    groups: TTC_11_22_CreateTimeBasedSchedulingGroups_groups
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854640640L))
        val size_0 = 32L
        val size_1 = this.groups.size(offset + size_0)
        size_0 + size_1
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 135167L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854640640L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854640640L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.groups.size(offset + size_0_offset)
        val size_1_otherOffset = this.groups.size(otherOffset + size_0_otherOffset)
        this.groups.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854640640L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854640640L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.groups.size(offset + size_0_offset)
        val size_1_otherOffset = this.groups.size(otherOffset + size_0_otherOffset)
        this.groups.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854640640L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854640640L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.groups.size(offset + size_0_offset)
        val size_1_otherOffset = this.groups.size(otherOffset + size_0_otherOffset)
        this.groups.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854640640L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854640640L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.groups.size(offset + size_0_offset)
        val size_1_otherOffset = this.groups.size(otherOffset + size_0_otherOffset)
        this.groups.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_11_22_CREATETIMEBASEDSCHEDULINGGROUPS_GROUPS: Int = 1125 /*(SIZE(1 .. maxTC-11-22-GroupCount)) */
@inline @cCode.inline val ERR_TC_11_22_CREATETIMEBASEDSCHEDULINGGROUPS_GROUPS_ELM_2: Int = 1120 /* */

@inline @cCode.inline val ERR_TC_11_22_CREATETIMEBASEDSCHEDULINGGROUPS: Int = 1130 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_11_22_CREATETIMEBASEDSCHEDULINGGROUPS: Int = 1133 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_11_22_CREATETIMEBASEDSCHEDULINGGROUPS_N_UNINITIALIZED: Int = 1134 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_11_22_CREATETIMEBASEDSCHEDULINGGROUPS_N: Int = 1093 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_11_22_CREATETIMEBASEDSCHEDULINGGROUPS_GROUPS: Int = 1128 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_11_22_CREATETIMEBASEDSCHEDULINGGROUPS_GROUPS_ELM_2: Int = 1123 /*  */
@inline @cCode.inline val TTC_11_22_CreateTimeBasedSchedulingGroups_REQUIRED_BYTES_FOR_ACN_ENCODING = 16896
@inline @cCode.inline val TTC_11_22_CreateTimeBasedSchedulingGroups_REQUIRED_BITS_FOR_ACN_ENCODING = 135167

@inline @cCode.inline val ERR_ACN_DECODE_TC_11_22_CREATETIMEBASEDSCHEDULINGGROUPS: Int = 1135 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_11_22_CREATETIMEBASEDSCHEDULINGGROUPS_N: Int = 1094 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_11_22_CREATETIMEBASEDSCHEDULINGGROUPS_GROUPS: Int = 1129 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_11_22_CREATETIMEBASEDSCHEDULINGGROUPS_GROUPS_ELM_2: Int = 1124 /*  */

// @inline @cCode.inline val maxTC_11_22_GroupCount: Int = 4095 // defined in body

