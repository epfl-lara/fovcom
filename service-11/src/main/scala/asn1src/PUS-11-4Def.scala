/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TTC_11_4_Activity --------------------------------------------*/

case class TTC_11_4_Activity (
    group_ID: OptionMut[TGroup_ID], 
    releaseTime: TCDS_AbsoluteTime_PFC_2, 
    request: TDummyType
) {
    require(this.group_ID.isDefined)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775707L))
        val size_0 = (this.group_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        })
        val size_1 = this.releaseTime.size(offset + size_0)
        val size_2 = 4L
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        res == 100L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775707L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775707L))
        val size_0_offset = (this.group_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        })
        val size_0_otherOffset = this.group_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_1_offset = this.releaseTime.size(offset + size_0_offset)
        val size_1_otherOffset = this.releaseTime.size(otherOffset + size_0_otherOffset)
        this.releaseTime.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = 4L
        val size_2_otherOffset = 4L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775707L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775707L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = (this.group_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        })
        val size_0_otherOffset = this.group_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_1_offset = this.releaseTime.size(offset + size_0_offset)
        val size_1_otherOffset = this.releaseTime.size(otherOffset + size_0_otherOffset)
        this.releaseTime.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = 4L
        val size_2_otherOffset = 4L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775707L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775707L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = (this.group_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        })
        val size_0_otherOffset = this.group_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_1_offset = this.releaseTime.size(offset + size_0_offset)
        val size_1_otherOffset = this.releaseTime.size(otherOffset + size_0_otherOffset)
        this.releaseTime.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = 4L
        val size_2_otherOffset = 4L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775707L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775707L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = (this.group_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        })
        val size_0_otherOffset = this.group_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_1_offset = this.releaseTime.size(offset + size_0_offset)
        val size_1_otherOffset = this.releaseTime.size(otherOffset + size_0_otherOffset)
        this.releaseTime.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = 4L
        val size_2_otherOffset = 4L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_11_4_ACTIVITY: Int = 1443 /*(WITH COMPONENTS --! should be TC-Payload instead of DummyType but it is impossible to parameterize
{
    group-ID PRESENT
}) */
@inline @cCode.inline val ERR_TC_11_4_ACTIVITY_GROUP_ID_2: Int = 1398 /* */
@inline @cCode.inline val ERR_TC_11_4_ACTIVITY_RELEASETIME_2_2: Int = 1428 /* */
@inline @cCode.inline val ERR_TC_11_4_ACTIVITY_REQUEST_2: Int = 1438 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_11_4_ACTIVITY: Int = 1446 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_11_4_ACTIVITY_GROUP_ID_2: Int = 1401 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_11_4_ACTIVITY_RELEASETIME_2_2: Int = 1431 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_11_4_ACTIVITY_REQUEST_2: Int = 1441 /*  */
@inline @cCode.inline val TTC_11_4_Activity_REQUIRED_BYTES_FOR_ACN_ENCODING = 13
@inline @cCode.inline val TTC_11_4_Activity_REQUIRED_BITS_FOR_ACN_ENCODING = 100

@inline @cCode.inline val ERR_ACN_DECODE_TC_11_4_ACTIVITY: Int = 1447 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_11_4_ACTIVITY_GROUP_ID_2: Int = 1402 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_11_4_ACTIVITY_RELEASETIME_2_2: Int = 1432 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_11_4_ACTIVITY_REQUEST_2: Int = 1442 /*  */
/*-- TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule --------------------------------------------*/


case class TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities (nCount: Int, arr: Vector[TTC_11_4_Activity])
{
    require(this.arr.size <= 4095 && 1 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854366307L))
        TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 409500L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854366307L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854366307L))
        TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854366307L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854366307L))
        require((offset % 8L) == (otherOffset % 8L))
        TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854366307L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854366307L))
        require((offset % 16L) == (otherOffset % 16L))
        TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854366307L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854366307L))
        require((offset % 32L) == (otherOffset % 32L))
        TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities {
    def sizeRange(ls: Vector[TTC_11_4_Activity], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 4095))
        require((0L <= offset) && (offset <= 9223372036854775807L - 100L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(elemSize == 100L)
            elemSize + TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 100L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TTC_11_4_Activity], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 4095))
        require((0L <= offset) && (offset <= 9223372036854775807L - 100L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 100L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 100L)
            assert(elemSizeOtherOff == 100L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities.sizeRange(ls, offset, from, to) == TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TTC_11_4_Activity], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 4095))
        require((0L <= offset) && (offset <= 9223372036854775807L - 100L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 100L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 100L)
            assert(elemSizeOtherOff == 100L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities.sizeRange(ls, offset, from, to) == TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TTC_11_4_Activity], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 4095))
        require((0L <= offset) && (offset <= 9223372036854775807L - 100L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 100L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 100L)
            assert(elemSizeOtherOff == 100L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities.sizeRange(ls, offset, from, to) == TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TTC_11_4_Activity], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 4095))
        require((0L <= offset) && (offset <= 9223372036854775807L - 100L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 100L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 100L)
            assert(elemSizeOtherOff == 100L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities.sizeRange(ls, offset, from, to) == TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities.sizeRange(ls, otherOffset, from, to)
    }
}

case class TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule (
    subschedule_ID: OptionMut[TSubSchedule_ID], 
    activities: TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_activities
) {
    require(this.subschedule_ID.isDefined)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854366243L))
        val size_0 = (this.subschedule_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        })
        val size_1 = 32L
        val size_2 = this.activities.size(offset + size_0 + size_1)
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 409564L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854366243L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854366243L))
        val size_0_offset = (this.subschedule_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        })
        val size_0_otherOffset = this.subschedule_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.activities.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.activities.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.activities.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854366243L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854366243L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = (this.subschedule_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        })
        val size_0_otherOffset = this.subschedule_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.activities.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.activities.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.activities.sizeLemmaNextByte(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854366243L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854366243L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = (this.subschedule_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        })
        val size_0_otherOffset = this.subschedule_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.activities.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.activities.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.activities.sizeLemmaNextWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854366243L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854366243L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = (this.subschedule_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        })
        val size_0_otherOffset = this.subschedule_ID match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.activities.size(offset + size_0_offset + size_1_offset)
        val size_2_otherOffset = this.activities.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
        this.activities.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_11_4_INSERTACTIVITIESINTOTHETIMEBASEDSCHEDULE_ACTIVITIES: Int = 1382 /*(SIZE(1 .. maxTC-11-4-ActivityCount)) */
@inline @cCode.inline val ERR_TC_11_4_INSERTACTIVITIESINTOTHETIMEBASEDSCHEDULE_ACTIVITIES_ELM_2: Int = 1377 /* */

@inline @cCode.inline val ERR_TC_11_4_INSERTACTIVITIESINTOTHETIMEBASEDSCHEDULE: Int = 1387 /*(WITH COMPONENTS
{
    subschedule-ID PRESENT
}) */
@inline @cCode.inline val ERR_TC_11_4_INSERTACTIVITIESINTOTHETIMEBASEDSCHEDULE_SUBSCHEDULE_ID_2: Int = 1315 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_11_4_INSERTACTIVITIESINTOTHETIMEBASEDSCHEDULE: Int = 1390 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_11_4_INSERTACTIVITIESINTOTHETIMEBASEDSCHEDULE_SUBSCHEDULE_ID_2: Int = 1318 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_11_4_INSERTACTIVITIESINTOTHETIMEBASEDSCHEDULE_N_UNINITIALIZED: Int = 1391 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_11_4_INSERTACTIVITIESINTOTHETIMEBASEDSCHEDULE_N: Int = 1320 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_11_4_INSERTACTIVITIESINTOTHETIMEBASEDSCHEDULE_ACTIVITIES: Int = 1385 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_11_4_INSERTACTIVITIESINTOTHETIMEBASEDSCHEDULE_ACTIVITIES_ELM_2: Int = 1380 /*  */
@inline @cCode.inline val TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_REQUIRED_BYTES_FOR_ACN_ENCODING = 51196
@inline @cCode.inline val TTC_11_4_InsertActivitiesIntoTheTimeBasedSchedule_REQUIRED_BITS_FOR_ACN_ENCODING = 409564

@inline @cCode.inline val ERR_ACN_DECODE_TC_11_4_INSERTACTIVITIESINTOTHETIMEBASEDSCHEDULE: Int = 1392 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_11_4_INSERTACTIVITIESINTOTHETIMEBASEDSCHEDULE_SUBSCHEDULE_ID_2: Int = 1319 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_11_4_INSERTACTIVITIESINTOTHETIMEBASEDSCHEDULE_N: Int = 1321 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_11_4_INSERTACTIVITIESINTOTHETIMEBASEDSCHEDULE_ACTIVITIES: Int = 1386 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_11_4_INSERTACTIVITIESINTOTHETIMEBASEDSCHEDULE_ACTIVITIES_ELM_2: Int = 1381 /*  */

// @inline @cCode.inline val maxTC_11_4_ActivityCount: Int = 4095 // defined in body

