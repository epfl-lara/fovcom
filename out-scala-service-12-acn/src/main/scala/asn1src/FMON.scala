/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._


def TFMON_ID_IsConstraintValid(pVal: TFMON_ID): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = (pVal == TFMON_ID.Tfunction0) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    ret
}

def TFMON_ID_Initialize(): TFMON_ID = TFMON_ID.Tfunction0

@opaque @inlineOnce 
def TFMON_ID_ACN_Encode(pVal: TFMON_ID, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(32L))
    TFMON_ID_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    val intVal_pVal = pVal match
        case TFMON_ID.Tfunction0 => ULong.fromRaw(0L)

    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(0))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(intVal_pVal)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(intVal_pVal)
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 32L
    }
}

@opaque @inlineOnce 
def TFMON_ID_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TFMON_ID] =
{
    require(codec.base.bitStream.validate_offset_bits(32L))

    @ghost val oldCdc = snapshot(codec)
    val intVal_pVal = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    val pVal = intVal_pVal.toRaw match
        case 0 => TFMON_ID.Tfunction0
        case _ => return LeftMut(ERR_ACN_DECODE_FMON_ID)

    TFMON_ID_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TFMON_ID](l)
        case Right(_) => RightMut[ErrorCode, TFMON_ID](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TFMON_ID]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 32L && TFMON_ID_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TFMON_ID_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TFMON_ID]) =
{
    require(codec.base.bitStream.validate_offset_bits(32L))
    val cpy = snapshot(codec)
    val res = TFMON_ID_ACN_Decode(cpy)
    (cpy, res)
}

def TFMON_ProtectionStatus_IsConstraintValid(pVal: TFMON_ProtectionStatus): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = (((pVal == TFMON_ProtectionStatus.Tunprotected)) || ((pVal == TFMON_ProtectionStatus.TFMON_ProtectionStatus_protected))) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    ret
}

def TFMON_ProtectionStatus_Initialize(): TFMON_ProtectionStatus = TFMON_ProtectionStatus.Tunprotected

@opaque @inlineOnce 
def TFMON_ProtectionStatus_ACN_Encode(pVal: TFMON_ProtectionStatus, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(1L))
    TFMON_ProtectionStatus_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    val intVal_pVal = pVal match
        case TFMON_ProtectionStatus.Tunprotected => ULong.fromRaw(0L)
        case TFMON_ProtectionStatus.TFMON_ProtectionStatus_protected => ULong.fromRaw(1L)

    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(): Unit = ().ensuring(_ => GetBitCountUnsigned(ULong.fromRaw(1) - ULong.fromRaw(0)) == 1)
            bitCountLemma()
        }
    }
    codec.base.encodeConstrainedPosWholeNumber(intVal_pVal, 0.toRawULong, 1.toRawULong)
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 1L
    }
}

@opaque @inlineOnce 
def TFMON_ProtectionStatus_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TFMON_ProtectionStatus] =
{
    require(codec.base.bitStream.validate_offset_bits(1L))

    @ghost val oldCdc = snapshot(codec)
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(): Unit = ().ensuring(_ => GetBitCountUnsigned(ULong.fromRaw(1) - ULong.fromRaw(0)) == 1)
            bitCountLemma()
        }
    }
    val intVal_pVal = codec.base.decodeConstrainedPosWholeNumber(ULong.fromRaw(0), ULong.fromRaw(1)) // uper:135
    val pVal = intVal_pVal.toRaw match
        case 0 => TFMON_ProtectionStatus.Tunprotected
        case 1 => TFMON_ProtectionStatus.TFMON_ProtectionStatus_protected
        case _ => return LeftMut(ERR_ACN_DECODE_FMON_PROTECTIONSTATUS)

    TFMON_ProtectionStatus_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TFMON_ProtectionStatus](l)
        case Right(_) => RightMut[ErrorCode, TFMON_ProtectionStatus](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TFMON_ProtectionStatus]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 1L && TFMON_ProtectionStatus_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TFMON_ProtectionStatus_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TFMON_ProtectionStatus]) =
{
    require(codec.base.bitStream.validate_offset_bits(1L))
    val cpy = snapshot(codec)
    val res = TFMON_ProtectionStatus_ACN_Decode(cpy)
    (cpy, res)
}

def TFMON_Status_IsConstraintValid(pVal: TFMON_Status): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = (((pVal == TFMON_Status.TFMON_Status_disabled)) || ((pVal == TFMON_Status.TFMON_Status_enabled))) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    ret
}

def TFMON_Status_Initialize(): TFMON_Status = TFMON_Status.TFMON_Status_disabled

@opaque @inlineOnce 
def TFMON_Status_ACN_Encode(pVal: TFMON_Status, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(1L))
    TFMON_Status_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    val intVal_pVal = pVal match
        case TFMON_Status.TFMON_Status_disabled => ULong.fromRaw(0L)
        case TFMON_Status.TFMON_Status_enabled => ULong.fromRaw(1L)

    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(1))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 1)
            bitCountLemma(intVal_pVal)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize(intVal_pVal, 1)
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 1L
    }
}

@opaque @inlineOnce 
def TFMON_Status_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TFMON_Status] =
{
    require(codec.base.bitStream.validate_offset_bits(1L))

    @ghost val oldCdc = snapshot(codec)
    val intVal_pVal = codec.dec_Int_PositiveInteger_ConstSize(1)

    val pVal = intVal_pVal.toRaw match
        case 0 => TFMON_Status.TFMON_Status_disabled
        case 1 => TFMON_Status.TFMON_Status_enabled
        case _ => return LeftMut(ERR_ACN_DECODE_FMON_STATUS)

    TFMON_Status_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TFMON_Status](l)
        case Right(_) => RightMut[ErrorCode, TFMON_Status](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TFMON_Status]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 1L && TFMON_Status_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TFMON_Status_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TFMON_Status]) =
{
    require(codec.base.bitStream.validate_offset_bits(1L))
    val cpy = snapshot(codec)
    val res = TFMON_Status_ACN_Decode(cpy)
    (cpy, res)
}

def TFMON_CheckingStatus_IsConstraintValid(pVal: TFMON_CheckingStatus): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = (((((((pVal == TFMON_CheckingStatus.TFMON_CheckingStatus_unchecked)) || ((pVal == TFMON_CheckingStatus.Trunning)))) || ((pVal == TFMON_CheckingStatus.TFMON_CheckingStatus_invalid)))) || ((pVal == TFMON_CheckingStatus.Tfailed))) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    ret
}

def TFMON_CheckingStatus_Initialize(): TFMON_CheckingStatus = TFMON_CheckingStatus.TFMON_CheckingStatus_unchecked

@opaque @inlineOnce 
def TFMON_CheckingStatus_ACN_Encode(pVal: TFMON_CheckingStatus, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(2L))
    TFMON_CheckingStatus_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    val intVal_pVal = pVal match
        case TFMON_CheckingStatus.TFMON_CheckingStatus_unchecked => ULong.fromRaw(0L)
        case TFMON_CheckingStatus.Trunning => ULong.fromRaw(1L)
        case TFMON_CheckingStatus.TFMON_CheckingStatus_invalid => ULong.fromRaw(2L)
        case TFMON_CheckingStatus.Tfailed => ULong.fromRaw(3L)

    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(3))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 2)
            bitCountLemma(intVal_pVal)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize(intVal_pVal, 2)
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 2L
    }
}

@opaque @inlineOnce 
def TFMON_CheckingStatus_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TFMON_CheckingStatus] =
{
    require(codec.base.bitStream.validate_offset_bits(2L))

    @ghost val oldCdc = snapshot(codec)
    val intVal_pVal = codec.dec_Int_PositiveInteger_ConstSize(2)

    val pVal = intVal_pVal.toRaw match
        case 0 => TFMON_CheckingStatus.TFMON_CheckingStatus_unchecked
        case 1 => TFMON_CheckingStatus.Trunning
        case 2 => TFMON_CheckingStatus.TFMON_CheckingStatus_invalid
        case 3 => TFMON_CheckingStatus.Tfailed
        case _ => return LeftMut(ERR_ACN_DECODE_FMON_CHECKINGSTATUS)

    TFMON_CheckingStatus_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TFMON_CheckingStatus](l)
        case Right(_) => RightMut[ErrorCode, TFMON_CheckingStatus](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TFMON_CheckingStatus]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 2L && TFMON_CheckingStatus_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TFMON_CheckingStatus_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TFMON_CheckingStatus]) =
{
    require(codec.base.bitStream.validate_offset_bits(2L))
    val cpy = snapshot(codec)
    val res = TFMON_CheckingStatus_ACN_Decode(cpy)
    (cpy, res)
}