/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

val maxTM_12_12_transitionCheckReports: Int = 4095 // variables:188

def TTM_12_12_CheckTransitionReport_transitionCheckReports_IsConstraintValid(pVal: TTM_12_12_CheckTransitionReport_transitionCheckReports): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = ((1 <= pVal.nCount) && (pVal.nCount <= 4095)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TTransitionNotification_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TTM_12_12_CheckTransitionReport_IsConstraintValid(pVal: TTM_12_12_CheckTransitionReport): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TTM_12_12_CheckTransitionReport_transitionCheckReports_IsConstraintValid(pVal.transitionCheckReports)
    ret
}

def TTM_12_12_CheckTransitionReport_transitionCheckReports_Initialize(): TTM_12_12_CheckTransitionReport_transitionCheckReports = TTM_12_12_CheckTransitionReport_transitionCheckReports(1, Vector.fill(4095)(TTransitionNotification_Initialize()))
def TTM_12_12_CheckTransitionReport_Initialize(): TTM_12_12_CheckTransitionReport = TTM_12_12_CheckTransitionReport(transitionCheckReports = TTM_12_12_CheckTransitionReport_transitionCheckReports_Initialize())

@opaque @inlineOnce 
def TTM_12_12_CheckTransitionReport_ACN_Encode(pVal: TTM_12_12_CheckTransitionReport, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(1535657L))
    var i1: Int = 0
    TTM_12_12_CheckTransitionReport_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val TM_12_12_CheckTransitionReport_n = ULong.fromRaw(pVal.transitionCheckReports.nCount)
    if TM_12_12_CheckTransitionReport_n < ULong.fromRaw(1) || TM_12_12_CheckTransitionReport_n > ULong.fromRaw(4095) then
        return Left(860)
    /* Encode TM_12_12_CheckTransitionReport_n */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(TM_12_12_CheckTransitionReport_n)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(TM_12_12_CheckTransitionReport_n)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 1535657L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode transitionCheckReports */
    TM_12_12_CheckTransitionReport_transitionCheckReports_ACN_Encode(codec, pVal, TM_12_12_CheckTransitionReport_n, pVal.transitionCheckReports) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 1535657L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.transitionCheckReports.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 1535657L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def PUS_12_12_TTM_12_12_CheckTransitionReport_transitionCheckReports_pVal_transitionCheckReports_transitionCheckReports_Encode_loop(codec: ACN, transitionCheckReports: TTM_12_12_CheckTransitionReport_transitionCheckReports, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= transitionCheckReports.nCount))
    require((1 <= transitionCheckReports.nCount) && (transitionCheckReports.nCount <= transitionCheckReports.arr.size) && (transitionCheckReports.arr.size <= 4095))
    require(codec.base.bitStream.validate_offset_bits((375L * (transitionCheckReports.nCount - i1))))
    decreases(transitionCheckReports.nCount - i1)
    if (i1 == transitionCheckReports.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 375L * (transitionCheckReports.nCount - i1), 375L)
        }
        TTransitionNotification_ACN_Encode(transitionCheckReports.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(375L * (i1 + 1) == 375L * i1 + 375L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 375L * (transitionCheckReports.nCount - i1), 375L)
            check(codec.base.bitStream.validate_offset_bits(375L * (transitionCheckReports.nCount - (i1 + 1))))
        }
        val res = PUS_12_12_TTM_12_12_CheckTransitionReport_transitionCheckReports_pVal_transitionCheckReports_transitionCheckReports_Encode_loop(codec, transitionCheckReports, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TTM_12_12_CheckTransitionReport_transitionCheckReports.sizeRange(transitionCheckReports.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, transitionCheckReports.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + transitionCheckReports.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TTM_12_12_CheckTransitionReport_transitionCheckReports.sizeRange(transitionCheckReports.arr, codecSnap1.base.bitStream.bitIndex, i1, transitionCheckReports.nCount) == transitionCheckReports.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TTM_12_12_CheckTransitionReport_transitionCheckReports.sizeRange(transitionCheckReports.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, transitionCheckReports.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TTM_12_12_CheckTransitionReport_transitionCheckReports.sizeRange(transitionCheckReports.arr, codecSnap1.base.bitStream.bitIndex, i1, transitionCheckReports.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_12_12_CheckTransitionReport_transitionCheckReports.sizeRange(transitionCheckReports.arr, old(codec).base.bitStream.bitIndex, i1, transitionCheckReports.nCount)
    }
}



@opaque @inlineOnce
def TM_12_12_CheckTransitionReport_transitionCheckReports_ACN_Encode(codec: ACN, pVal: TTM_12_12_CheckTransitionReport, TM_12_12_CheckTransitionReport_n: ULong, transitionCheckReports: TTM_12_12_CheckTransitionReport_transitionCheckReports): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(1535625L))
    @ghost val oldCdc = snapshot(codec)
    TTM_12_12_CheckTransitionReport_transitionCheckReports_IsConstraintValid(transitionCheckReports) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    PUS_12_12_TTM_12_12_CheckTransitionReport_transitionCheckReports_pVal_transitionCheckReports_transitionCheckReports_Encode_loop(codec, transitionCheckReports, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                transitionCheckReports.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + transitionCheckReports.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTM_12_12_CheckTransitionReport_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTM_12_12_CheckTransitionReport] =
{
    require(codec.base.bitStream.validate_offset_bits(1535657L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode TM_12_12_CheckTransitionReport_n */
    val TM_12_12_CheckTransitionReport_n = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 1535657L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode transitionCheckReports */
    val pVal_transitionCheckReports = TM_12_12_CheckTransitionReport_transitionCheckReports_ACN_Decode(codec, TM_12_12_CheckTransitionReport_n) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 1535657L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_transitionCheckReports.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 1535657L)
    }
    val pVal = TTM_12_12_CheckTransitionReport(pVal_transitionCheckReports)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }

    TTM_12_12_CheckTransitionReport_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTM_12_12_CheckTransitionReport](l)
        case Right(_) => RightMut[ErrorCode, TTM_12_12_CheckTransitionReport](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTM_12_12_CheckTransitionReport]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_12_12_CheckTransitionReport_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTM_12_12_CheckTransitionReport_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTM_12_12_CheckTransitionReport]) =
{
    require(codec.base.bitStream.validate_offset_bits(1535657L))
    val cpy = snapshot(codec)
    val res = TTM_12_12_CheckTransitionReport_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def PUS_12_12_TTM_12_12_CheckTransitionReport_transitionCheckReports_pVal_transitionCheckReports_transitionCheckReports_Decode_loop(codec: ACN, nCount: Int, transitionCheckReports: Vector[TTransitionNotification], i1: Int): EitherMut[Int, Vector[TTransitionNotification]] = {
    require((1 <= nCount) && (nCount <= 4095))
    require((0 <= i1) && (i1 <= nCount))
    require(transitionCheckReports.size == i1)
    require(codec.base.bitStream.validate_offset_bits((375L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(transitionCheckReports)
            vecRangesEqSlicedLemma(transitionCheckReports, transitionCheckReports, 0, transitionCheckReports.size, 0, i1)
        }
        RightMut[Int, Vector[TTransitionNotification]](transitionCheckReports)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 375L * (nCount - i1), 375L)
        }
        val transitionCheckReports_arr_i1_ = TTransitionNotification_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(375L * (i1 + 1) == 375L * i1 + 375L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 375L * (nCount - i1), 375L)
            check(codec.base.bitStream.validate_offset_bits(375L * (nCount - (i1 + 1))))
        }
        val res = PUS_12_12_TTM_12_12_CheckTransitionReport_transitionCheckReports_pVal_transitionCheckReports_transitionCheckReports_Decode_loop(codec, nCount, transitionCheckReports.append(transitionCheckReports_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(transitionCheckReports, newVec, transitionCheckReports_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(transitionCheckReports.append(transitionCheckReports_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(transitionCheckReports.list, transitionCheckReports_arr_i1_, i1)
                    Vector.listApplyEqVecApply(transitionCheckReports.append(transitionCheckReports_arr_i1_), i1)
                    check(transitionCheckReports_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TTransitionNotification]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(transitionCheckReports, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_12_12_CheckTransitionReport_transitionCheckReports.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def TM_12_12_CheckTransitionReport_transitionCheckReports_ACN_Decode(codec: ACN, TM_12_12_CheckTransitionReport_n: ULong): EitherMut[Int, TTM_12_12_CheckTransitionReport_transitionCheckReports] = {
    require(codec.base.bitStream.validate_offset_bits(1535625L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val transitionCheckReports =
        if ((ULong.fromRaw(1) <= TM_12_12_CheckTransitionReport_n) && (TM_12_12_CheckTransitionReport_n <= ULong.fromRaw(4095))) then
            val transitionCheckReports_nCount = TM_12_12_CheckTransitionReport_n.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val transitionCheckReports = PUS_12_12_TTM_12_12_CheckTransitionReport_transitionCheckReports_pVal_transitionCheckReports_transitionCheckReports_Decode_loop(codec, transitionCheckReports_nCount, Vector.empty[TTransitionNotification], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val transitionCheckReports = TTM_12_12_CheckTransitionReport_transitionCheckReports(transitionCheckReports_nCount, bdg)
                    ghostExpr {
                        transitionCheckReports.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    transitionCheckReports
            }
            transitionCheckReports
        else return LeftMut(ERR_ACN_DECODE_TM_12_12_CHECKTRANSITIONREPORT_TRANSITIONCHECKREPORTS)
    TTM_12_12_CheckTransitionReport_transitionCheckReports_IsConstraintValid(transitionCheckReports) match {
        case Left(l) =>
            LeftMut[Int, TTM_12_12_CheckTransitionReport_transitionCheckReports](l)
        case Right(_) =>
            RightMut[Int, TTM_12_12_CheckTransitionReport_transitionCheckReports](transitionCheckReports)
    }
}.ensuring { (res: EitherMut[Int, TTM_12_12_CheckTransitionReport_transitionCheckReports]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_12_12_CheckTransitionReport_transitionCheckReports_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TM_12_12_CheckTransitionReport_transitionCheckReports_ACN_Decode_pure(codec: ACN, TM_12_12_CheckTransitionReport_n: ULong): (ACN, EitherMut[Int, TTM_12_12_CheckTransitionReport_transitionCheckReports]) = {
    require(codec.base.bitStream.validate_offset_bits(1535625L))
    val cpy = snapshot(codec)
    val res = TM_12_12_CheckTransitionReport_transitionCheckReports_ACN_Decode(cpy, TM_12_12_CheckTransitionReport_n)
    (cpy, res)
}