/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TParameterMonitoringStatusReport --------------------------------------------*/

case class TParameterMonitoringStatusReport (
    pmon_ID: TPMON_ID, 
    pmonStatus: TPMON_Status
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775774L))
        val size_0 = 32L
        val size_1 = 1L
        size_0 + size_1
    }.ensuring { (res: Long) => 
        res == 33L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775774L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775774L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 1L
        val size_1_otherOffset = 1L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775774L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775774L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 1L
        val size_1_otherOffset = 1L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775774L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775774L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 1L
        val size_1_otherOffset = 1L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775774L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775774L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 1L
        val size_1_otherOffset = 1L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_PARAMETERMONITORINGSTATUSREPORT: Int = 1463 /* */
@inline @cCode.inline val ERR_PARAMETERMONITORINGSTATUSREPORT_PMON_ID_2: Int = 1448 /* */
@inline @cCode.inline val ERR_PARAMETERMONITORINGSTATUSREPORT_PMONSTATUS_2: Int = 1458 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PARAMETERMONITORINGSTATUSREPORT: Int = 1466 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PARAMETERMONITORINGSTATUSREPORT_PMON_ID_2: Int = 1451 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PARAMETERMONITORINGSTATUSREPORT_PMONSTATUS_2: Int = 1461 /*  */
@inline @cCode.inline val TParameterMonitoringStatusReport_REQUIRED_BYTES_FOR_ACN_ENCODING = 5
@inline @cCode.inline val TParameterMonitoringStatusReport_REQUIRED_BITS_FOR_ACN_ENCODING = 33

@inline @cCode.inline val ERR_ACN_DECODE_PARAMETERMONITORINGSTATUSREPORT: Int = 1467 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PARAMETERMONITORINGSTATUSREPORT_PMON_ID_2: Int = 1452 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PARAMETERMONITORINGSTATUSREPORT_PMONSTATUS_2: Int = 1462 /*  */
/*-- TTM_12_14_ParameterMonitoringDefinitionReport --------------------------------------------*/


case class TTM_12_14_ParameterMonitoringDefinitionReport_status (nCount: Int, arr: Vector[TParameterMonitoringStatusReport])
{
    require(this.arr.size <= 4095 && 0 <= this.nCount && this.nCount <= this.arr.size)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854640672L))
        TTM_12_14_ParameterMonitoringDefinitionReport_status.sizeRange(this.arr, offset, 0, this.nCount)
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 135135L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854640672L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854640672L))
        TTM_12_14_ParameterMonitoringDefinitionReport_status.sizeLemmaAnyOffset(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854640672L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854640672L))
        require((offset % 8L) == (otherOffset % 8L))
        TTM_12_14_ParameterMonitoringDefinitionReport_status.sizeLemmaNextByte(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854640672L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854640672L))
        require((offset % 16L) == (otherOffset % 16L))
        TTM_12_14_ParameterMonitoringDefinitionReport_status.sizeLemmaNextWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854640672L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854640672L))
        require((offset % 32L) == (otherOffset % 32L))
        TTM_12_14_ParameterMonitoringDefinitionReport_status.sizeLemmaNextDWord(this.arr, offset, otherOffset, 0, this.nCount)
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}
object TTM_12_14_ParameterMonitoringDefinitionReport_status {
    def sizeRange(ls: Vector[TParameterMonitoringStatusReport], offset: Long, from: Int, to: Int): Long = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 4095))
        require((0L <= offset) && (offset <= 9223372036854775807L - 33L * (to - from)))
        decreases(to - from)
        if (from == to) {
            0L
        } else {
            val elemSize = ls.apply(from).size(offset)
            assert(elemSize == 33L)
            elemSize + TTM_12_14_ParameterMonitoringDefinitionReport_status.sizeRange(ls, offset + elemSize, from + 1, to)
        }
    }.ensuring { (res: Long) => 
        val nbElems = (to - from)
        (0L <= res && res <= 33L * nbElems)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(ls: Vector[TParameterMonitoringStatusReport], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 4095))
        require((0L <= offset) && (offset <= 9223372036854775807L - 33L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 33L * (to - from)))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 33L)
            assert(elemSizeOtherOff == 33L)
            ls.apply(from).sizeLemmaAnyOffset(offset, otherOffset)
            TTM_12_14_ParameterMonitoringDefinitionReport_status.sizeLemmaAnyOffset(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTM_12_14_ParameterMonitoringDefinitionReport_status.sizeRange(ls, offset, from, to) == TTM_12_14_ParameterMonitoringDefinitionReport_status.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(ls: Vector[TParameterMonitoringStatusReport], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 4095))
        require((0L <= offset) && (offset <= 9223372036854775807L - 33L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 33L * (to - from)))
        require((offset % 8L) == (otherOffset % 8L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 33L)
            assert(elemSizeOtherOff == 33L)
            ls.apply(from).sizeLemmaNextByte(offset, otherOffset)
            TTM_12_14_ParameterMonitoringDefinitionReport_status.sizeLemmaNextByte(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTM_12_14_ParameterMonitoringDefinitionReport_status.sizeRange(ls, offset, from, to) == TTM_12_14_ParameterMonitoringDefinitionReport_status.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(ls: Vector[TParameterMonitoringStatusReport], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 4095))
        require((0L <= offset) && (offset <= 9223372036854775807L - 33L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 33L * (to - from)))
        require((offset % 16L) == (otherOffset % 16L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 33L)
            assert(elemSizeOtherOff == 33L)
            ls.apply(from).sizeLemmaNextWord(offset, otherOffset)
            TTM_12_14_ParameterMonitoringDefinitionReport_status.sizeLemmaNextWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTM_12_14_ParameterMonitoringDefinitionReport_status.sizeRange(ls, offset, from, to) == TTM_12_14_ParameterMonitoringDefinitionReport_status.sizeRange(ls, otherOffset, from, to)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(ls: Vector[TParameterMonitoringStatusReport], offset: Long, otherOffset: Long, from: Int, to: Int): Unit = {
        require((0 <= from) && (from <= to) && (to <= ls.size) && (ls.size <= 4095))
        require((0L <= offset) && (offset <= 9223372036854775807L - 33L * (to - from)))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775807L - 33L * (to - from)))
        require((offset % 32L) == (otherOffset % 32L))
        decreases(to - from)
        if (from == to) {
            ()
        } else {
            val elemSizeOff = ls.apply(from).size(offset)
            val elemSizeOtherOff = ls.apply(from).size(otherOffset)
            assert(elemSizeOff == 33L)
            assert(elemSizeOtherOff == 33L)
            ls.apply(from).sizeLemmaNextDWord(offset, otherOffset)
            TTM_12_14_ParameterMonitoringDefinitionReport_status.sizeLemmaNextDWord(ls, offset + elemSizeOff, otherOffset + elemSizeOtherOff, from + 1, to)
        }
    }.ensuring { (_: Unit) => 
        TTM_12_14_ParameterMonitoringDefinitionReport_status.sizeRange(ls, offset, from, to) == TTM_12_14_ParameterMonitoringDefinitionReport_status.sizeRange(ls, otherOffset, from, to)
    }
}

case class TTM_12_14_ParameterMonitoringDefinitionReport (
    status: TTM_12_14_ParameterMonitoringDefinitionReport_status
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854640640L))
        val size_0 = 32L
        val size_1 = this.status.size(offset + size_0)
        size_0 + size_1
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 135167L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854640640L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854640640L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.status.size(offset + size_0_offset)
        val size_1_otherOffset = this.status.size(otherOffset + size_0_otherOffset)
        this.status.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854640640L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854640640L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.status.size(offset + size_0_offset)
        val size_1_otherOffset = this.status.size(otherOffset + size_0_otherOffset)
        this.status.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854640640L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854640640L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.status.size(offset + size_0_offset)
        val size_1_otherOffset = this.status.size(otherOffset + size_0_otherOffset)
        this.status.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854640640L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854640640L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.status.size(offset + size_0_offset)
        val size_1_otherOffset = this.status.size(otherOffset + size_0_otherOffset)
        this.status.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TM_12_14_PARAMETERMONITORINGDEFINITIONREPORT_STATUS: Int = 1432 /*(SIZE(0 .. maxTM-12-14-ParameterMonitoringStatusCount )) */
@inline @cCode.inline val ERR_TM_12_14_PARAMETERMONITORINGDEFINITIONREPORT_STATUS_ELM_2: Int = 1427 /* */

@inline @cCode.inline val ERR_TM_12_14_PARAMETERMONITORINGDEFINITIONREPORT: Int = 1437 /* */

 
 

@inline @cCode.inline val ERR_ACN_ENCODE_TM_12_14_PARAMETERMONITORINGDEFINITIONREPORT: Int = 1440 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_12_14_PARAMETERMONITORINGDEFINITIONREPORT_N_UNINITIALIZED: Int = 1441 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_12_14_PARAMETERMONITORINGDEFINITIONREPORT_N: Int = 1400 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_12_14_PARAMETERMONITORINGDEFINITIONREPORT_STATUS: Int = 1435 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TM_12_14_PARAMETERMONITORINGDEFINITIONREPORT_STATUS_ELM_2: Int = 1430 /*  */
@inline @cCode.inline val TTM_12_14_ParameterMonitoringDefinitionReport_REQUIRED_BYTES_FOR_ACN_ENCODING = 16896
@inline @cCode.inline val TTM_12_14_ParameterMonitoringDefinitionReport_REQUIRED_BITS_FOR_ACN_ENCODING = 135167

@inline @cCode.inline val ERR_ACN_DECODE_TM_12_14_PARAMETERMONITORINGDEFINITIONREPORT: Int = 1442 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_12_14_PARAMETERMONITORINGDEFINITIONREPORT_N: Int = 1401 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_12_14_PARAMETERMONITORINGDEFINITIONREPORT_STATUS: Int = 1436 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TM_12_14_PARAMETERMONITORINGDEFINITIONREPORT_STATUS_ELM_2: Int = 1431 /*  */

// @inline @cCode.inline val maxTM_12_14_ParameterMonitoringStatusCount: Int = 4095 // defined in body

