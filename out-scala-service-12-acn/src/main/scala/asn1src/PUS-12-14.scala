/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

val maxTM_12_14_ParameterMonitoringStatusCount: Int = 4095 // variables:188

def TParameterMonitoringStatusReport_IsConstraintValid(pVal: TParameterMonitoringStatusReport): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TPMON_ID_IsConstraintValid(pVal.pmon_ID)
    if ret.isRight then
        ret = TPMON_Status_IsConstraintValid(pVal.pmonStatus)
    ret
}

def TParameterMonitoringStatusReport_Initialize(): TParameterMonitoringStatusReport = TParameterMonitoringStatusReport(pmon_ID = TPMON_ID.Tparam0, pmonStatus = TPMON_Status.TPMON_Status_disabled)

@opaque @inlineOnce 
def TParameterMonitoringStatusReport_ACN_Encode(pVal: TParameterMonitoringStatusReport, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(33L))
    TParameterMonitoringStatusReport_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode pmon_ID */
    TPMON_ID_ACN_Encode(pVal.pmon_ID, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 33L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode pmonStatus */
    TPMON_Status_ACN_Encode(pVal.pmonStatus, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 33L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 1L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 33L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TParameterMonitoringStatusReport_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TParameterMonitoringStatusReport] =
{
    require(codec.base.bitStream.validate_offset_bits(33L))

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode pmon_ID */
    val pVal_pmon_ID = TPMON_ID_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 33L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode pmonStatus */
    val pVal_pmonStatus = TPMON_Status_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 33L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 1L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 33L)
    }
    val pVal = TParameterMonitoringStatusReport(pVal_pmon_ID, pVal_pmonStatus)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }

    TParameterMonitoringStatusReport_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TParameterMonitoringStatusReport](l)
        case Right(_) => RightMut[ErrorCode, TParameterMonitoringStatusReport](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TParameterMonitoringStatusReport]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TParameterMonitoringStatusReport_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TParameterMonitoringStatusReport_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TParameterMonitoringStatusReport]) =
{
    require(codec.base.bitStream.validate_offset_bits(33L))
    val cpy = snapshot(codec)
    val res = TParameterMonitoringStatusReport_ACN_Decode(cpy)
    (cpy, res)
}

def TTM_12_14_ParameterMonitoringDefinitionReport_status_IsConstraintValid(pVal: TTM_12_14_ParameterMonitoringDefinitionReport_status): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = (pVal.nCount <= 4095) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TParameterMonitoringStatusReport_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TTM_12_14_ParameterMonitoringDefinitionReport_IsConstraintValid(pVal: TTM_12_14_ParameterMonitoringDefinitionReport): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TTM_12_14_ParameterMonitoringDefinitionReport_status_IsConstraintValid(pVal.status)
    ret
}

def TTM_12_14_ParameterMonitoringDefinitionReport_status_Initialize(): TTM_12_14_ParameterMonitoringDefinitionReport_status = TTM_12_14_ParameterMonitoringDefinitionReport_status(0, Vector.fill(4095)(TParameterMonitoringStatusReport_Initialize()))
def TTM_12_14_ParameterMonitoringDefinitionReport_Initialize(): TTM_12_14_ParameterMonitoringDefinitionReport = TTM_12_14_ParameterMonitoringDefinitionReport(status = TTM_12_14_ParameterMonitoringDefinitionReport_status_Initialize())

@opaque @inlineOnce 
def TTM_12_14_ParameterMonitoringDefinitionReport_ACN_Encode(pVal: TTM_12_14_ParameterMonitoringDefinitionReport, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(135167L))
    var i1: Int = 0
    TTM_12_14_ParameterMonitoringDefinitionReport_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val TM_12_14_ParameterMonitoringDefinitionReport_n = ULong.fromRaw(pVal.status.nCount)
    if TM_12_14_ParameterMonitoringDefinitionReport_n < ULong.fromRaw(0) || TM_12_14_ParameterMonitoringDefinitionReport_n > ULong.fromRaw(4095) then
        return Left(860)
    /* Encode TM_12_14_ParameterMonitoringDefinitionReport_n */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(TM_12_14_ParameterMonitoringDefinitionReport_n)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(TM_12_14_ParameterMonitoringDefinitionReport_n)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 135167L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode status */
    TM_12_14_ParameterMonitoringDefinitionReport_status_ACN_Encode(codec, pVal, TM_12_14_ParameterMonitoringDefinitionReport_n, pVal.status) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 135167L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.status.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 135167L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def PUS_12_14_TTM_12_14_ParameterMonitoringDefinitionReport_status_pVal_status_status_Encode_loop(codec: ACN, status: TTM_12_14_ParameterMonitoringDefinitionReport_status, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= status.nCount))
    require((0 <= status.nCount) && (status.nCount <= status.arr.size) && (status.arr.size <= 4095))
    require(codec.base.bitStream.validate_offset_bits((33L * (status.nCount - i1))))
    decreases(status.nCount - i1)
    if (i1 == status.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 33L * (status.nCount - i1), 33L)
        }
        TParameterMonitoringStatusReport_ACN_Encode(status.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(33L * (i1 + 1) == 33L * i1 + 33L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 33L * (status.nCount - i1), 33L)
            check(codec.base.bitStream.validate_offset_bits(33L * (status.nCount - (i1 + 1))))
        }
        val res = PUS_12_14_TTM_12_14_ParameterMonitoringDefinitionReport_status_pVal_status_status_Encode_loop(codec, status, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TTM_12_14_ParameterMonitoringDefinitionReport_status.sizeRange(status.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, status.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + status.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TTM_12_14_ParameterMonitoringDefinitionReport_status.sizeRange(status.arr, codecSnap1.base.bitStream.bitIndex, i1, status.nCount) == status.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TTM_12_14_ParameterMonitoringDefinitionReport_status.sizeRange(status.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, status.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TTM_12_14_ParameterMonitoringDefinitionReport_status.sizeRange(status.arr, codecSnap1.base.bitStream.bitIndex, i1, status.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_12_14_ParameterMonitoringDefinitionReport_status.sizeRange(status.arr, old(codec).base.bitStream.bitIndex, i1, status.nCount)
    }
}



@opaque @inlineOnce
def TM_12_14_ParameterMonitoringDefinitionReport_status_ACN_Encode(codec: ACN, pVal: TTM_12_14_ParameterMonitoringDefinitionReport, TM_12_14_ParameterMonitoringDefinitionReport_n: ULong, status: TTM_12_14_ParameterMonitoringDefinitionReport_status): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(135135L))
    @ghost val oldCdc = snapshot(codec)
    TTM_12_14_ParameterMonitoringDefinitionReport_status_IsConstraintValid(status) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    PUS_12_14_TTM_12_14_ParameterMonitoringDefinitionReport_status_pVal_status_status_Encode_loop(codec, status, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                status.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + status.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTM_12_14_ParameterMonitoringDefinitionReport_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTM_12_14_ParameterMonitoringDefinitionReport] =
{
    require(codec.base.bitStream.validate_offset_bits(135167L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode TM_12_14_ParameterMonitoringDefinitionReport_n */
    val TM_12_14_ParameterMonitoringDefinitionReport_n = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 135167L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode status */
    val pVal_status = TM_12_14_ParameterMonitoringDefinitionReport_status_ACN_Decode(codec, TM_12_14_ParameterMonitoringDefinitionReport_n) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 135167L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_status.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 135167L)
    }
    val pVal = TTM_12_14_ParameterMonitoringDefinitionReport(pVal_status)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }

    TTM_12_14_ParameterMonitoringDefinitionReport_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTM_12_14_ParameterMonitoringDefinitionReport](l)
        case Right(_) => RightMut[ErrorCode, TTM_12_14_ParameterMonitoringDefinitionReport](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTM_12_14_ParameterMonitoringDefinitionReport]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_12_14_ParameterMonitoringDefinitionReport_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTM_12_14_ParameterMonitoringDefinitionReport_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTM_12_14_ParameterMonitoringDefinitionReport]) =
{
    require(codec.base.bitStream.validate_offset_bits(135167L))
    val cpy = snapshot(codec)
    val res = TTM_12_14_ParameterMonitoringDefinitionReport_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def PUS_12_14_TTM_12_14_ParameterMonitoringDefinitionReport_status_pVal_status_status_Decode_loop(codec: ACN, nCount: Int, status: Vector[TParameterMonitoringStatusReport], i1: Int): EitherMut[Int, Vector[TParameterMonitoringStatusReport]] = {
    require((0 <= nCount) && (nCount <= 4095))
    require((0 <= i1) && (i1 <= nCount))
    require(status.size == i1)
    require(codec.base.bitStream.validate_offset_bits((33L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(status)
            vecRangesEqSlicedLemma(status, status, 0, status.size, 0, i1)
        }
        RightMut[Int, Vector[TParameterMonitoringStatusReport]](status)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 33L * (nCount - i1), 33L)
        }
        val status_arr_i1_ = TParameterMonitoringStatusReport_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(33L * (i1 + 1) == 33L * i1 + 33L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 33L * (nCount - i1), 33L)
            check(codec.base.bitStream.validate_offset_bits(33L * (nCount - (i1 + 1))))
        }
        val res = PUS_12_14_TTM_12_14_ParameterMonitoringDefinitionReport_status_pVal_status_status_Decode_loop(codec, nCount, status.append(status_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(status, newVec, status_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(status.append(status_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(status.list, status_arr_i1_, i1)
                    Vector.listApplyEqVecApply(status.append(status_arr_i1_), i1)
                    check(status_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TParameterMonitoringStatusReport]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(status, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTM_12_14_ParameterMonitoringDefinitionReport_status.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def TM_12_14_ParameterMonitoringDefinitionReport_status_ACN_Decode(codec: ACN, TM_12_14_ParameterMonitoringDefinitionReport_n: ULong): EitherMut[Int, TTM_12_14_ParameterMonitoringDefinitionReport_status] = {
    require(codec.base.bitStream.validate_offset_bits(135135L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val status =
        if ((TM_12_14_ParameterMonitoringDefinitionReport_n <= ULong.fromRaw(4095))) then
            val status_nCount = TM_12_14_ParameterMonitoringDefinitionReport_n.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val status = PUS_12_14_TTM_12_14_ParameterMonitoringDefinitionReport_status_pVal_status_status_Decode_loop(codec, status_nCount, Vector.empty[TParameterMonitoringStatusReport], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val status = TTM_12_14_ParameterMonitoringDefinitionReport_status(status_nCount, bdg)
                    ghostExpr {
                        status.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    status
            }
            status
        else return LeftMut(ERR_ACN_DECODE_TM_12_14_PARAMETERMONITORINGDEFINITIONREPORT_STATUS)
    TTM_12_14_ParameterMonitoringDefinitionReport_status_IsConstraintValid(status) match {
        case Left(l) =>
            LeftMut[Int, TTM_12_14_ParameterMonitoringDefinitionReport_status](l)
        case Right(_) =>
            RightMut[Int, TTM_12_14_ParameterMonitoringDefinitionReport_status](status)
    }
}.ensuring { (res: EitherMut[Int, TTM_12_14_ParameterMonitoringDefinitionReport_status]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTM_12_14_ParameterMonitoringDefinitionReport_status_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TM_12_14_ParameterMonitoringDefinitionReport_status_ACN_Decode_pure(codec: ACN, TM_12_14_ParameterMonitoringDefinitionReport_n: ULong): (ACN, EitherMut[Int, TTM_12_14_ParameterMonitoringDefinitionReport_status]) = {
    require(codec.base.bitStream.validate_offset_bits(135135L))
    val cpy = snapshot(codec)
    val res = TM_12_14_ParameterMonitoringDefinitionReport_status_ACN_Decode(cpy, TM_12_14_ParameterMonitoringDefinitionReport_n)
    (cpy, res)
}