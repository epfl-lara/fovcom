/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TCheckValidityCondition --------------------------------------------*/

case class TCheckValidityCondition (
    mask: TParameterMask, 
    expectedValue: TParameterValue
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775751L))
        val size_0 = 32L
        val size_1 = this.mask match {
            case TParameterMask.ParameterMask_param1_PRESENT(param1) =>
                16L
        }
        val size_2 = this.expectedValue match {
            case TParameterValue.ParameterValue_param1_PRESENT(param1) =>
                8L
        }
        size_0 + size_1 + size_2
    }.ensuring { (res: Long) => 
        res == 56L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775751L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.mask match {
            case TParameterMask.ParameterMask_param1_PRESENT(param1) =>
                16L
        }
        val size_1_otherOffset = this.mask match {
            case TParameterMask.ParameterMask_param1_PRESENT(param1) =>
                16L
        }
        this.mask.sizeLemmaAnyOffset(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = this.expectedValue match {
            case TParameterValue.ParameterValue_param1_PRESENT(param1) =>
                8L
        }
        val size_2_otherOffset = this.expectedValue match {
            case TParameterValue.ParameterValue_param1_PRESENT(param1) =>
                8L
        }
        this.expectedValue.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775751L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.mask match {
            case TParameterMask.ParameterMask_param1_PRESENT(param1) =>
                16L
        }
        val size_1_otherOffset = this.mask match {
            case TParameterMask.ParameterMask_param1_PRESENT(param1) =>
                16L
        }
        this.mask.sizeLemmaNextByte(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = this.expectedValue match {
            case TParameterValue.ParameterValue_param1_PRESENT(param1) =>
                8L
        }
        val size_2_otherOffset = this.expectedValue match {
            case TParameterValue.ParameterValue_param1_PRESENT(param1) =>
                8L
        }
        this.expectedValue.sizeLemmaNextByte(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775751L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.mask match {
            case TParameterMask.ParameterMask_param1_PRESENT(param1) =>
                16L
        }
        val size_1_otherOffset = this.mask match {
            case TParameterMask.ParameterMask_param1_PRESENT(param1) =>
                16L
        }
        this.mask.sizeLemmaNextWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = this.expectedValue match {
            case TParameterValue.ParameterValue_param1_PRESENT(param1) =>
                8L
        }
        val size_2_otherOffset = this.expectedValue match {
            case TParameterValue.ParameterValue_param1_PRESENT(param1) =>
                8L
        }
        this.expectedValue.sizeLemmaNextWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775751L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775751L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = this.mask match {
            case TParameterMask.ParameterMask_param1_PRESENT(param1) =>
                16L
        }
        val size_1_otherOffset = this.mask match {
            case TParameterMask.ParameterMask_param1_PRESENT(param1) =>
                16L
        }
        this.mask.sizeLemmaNextDWord(offset + size_0_offset, otherOffset + size_0_otherOffset)
        val size_2_offset = this.expectedValue match {
            case TParameterValue.ParameterValue_param1_PRESENT(param1) =>
                8L
        }
        val size_2_otherOffset = this.expectedValue match {
            case TParameterValue.ParameterValue_param1_PRESENT(param1) =>
                8L
        }
        this.expectedValue.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_CHECKVALIDITYCONDITION: Int = 30 /* */
@inline @cCode.inline val ERR_CHECKVALIDITYCONDITION_MASK_2: Int = 14 /* */
@inline @cCode.inline val ERR_CHECKVALIDITYCONDITION_EXPECTEDVALUE_2: Int = 27 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_CHECKVALIDITYCONDITION: Int = 33 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_UPDATE_CHECKVALIDITYCONDITION_VALIDITYPARAMETER_ID: Int = 3 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CHECKVALIDITYCONDITION_VALIDITYPARAMETER_ID_UNINITIALIZED: Int = 34 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CHECKVALIDITYCONDITION_VALIDITYPARAMETER_ID: Int = 1 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CHECKVALIDITYCONDITION_MASK: Int = 12 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CHECKVALIDITYCONDITION_MASK_PARAM1: Int = 7 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CHECKVALIDITYCONDITION_EXPECTEDVALUE: Int = 25 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_CHECKVALIDITYCONDITION_EXPECTEDVALUE_PARAM1: Int = 20 /*  */
@inline @cCode.inline val TCheckValidityCondition_REQUIRED_BYTES_FOR_ACN_ENCODING = 7
@inline @cCode.inline val TCheckValidityCondition_REQUIRED_BITS_FOR_ACN_ENCODING = 56

@inline @cCode.inline val ERR_ACN_DECODE_CHECKVALIDITYCONDITION: Int = 35 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CHECKVALIDITYCONDITION_VALIDITYPARAMETER_ID: Int = 2 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CHECKVALIDITYCONDITION_MASK: Int = 13 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CHECKVALIDITYCONDITION_MASK_PARAM1: Int = 8 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CHECKVALIDITYCONDITION_EXPECTEDVALUE: Int = 26 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_CHECKVALIDITYCONDITION_EXPECTEDVALUE_PARAM1: Int = 21 /*  */


