/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang._
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

/*-- TLimitCheckingCriteria --------------------------------------------*/

case class TLimitCheckingCriteria (
    lowLimit: TDummyType, 
    lowLimitEventDefinition_ID: TEventDefinition_ID, 
    highLimit: TDummyType, 
    highLimitEventDefinition: TEventDefinition_ID
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775735L))
        val size_0 = 4L
        val size_1 = 32L
        val size_2 = 4L
        val size_3 = 32L
        size_0 + size_1 + size_2 + size_3
    }.ensuring { (res: Long) => 
        res == 72L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775735L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775735L))
        val size_0_offset = 4L
        val size_0_otherOffset = 4L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 4L
        val size_2_otherOffset = 4L
        val size_3_offset = 32L
        val size_3_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775735L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775735L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 4L
        val size_0_otherOffset = 4L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 4L
        val size_2_otherOffset = 4L
        val size_3_offset = 32L
        val size_3_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775735L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775735L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 4L
        val size_0_otherOffset = 4L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 4L
        val size_2_otherOffset = 4L
        val size_3_offset = 32L
        val size_3_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775735L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775735L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 4L
        val size_0_otherOffset = 4L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 4L
        val size_2_otherOffset = 4L
        val size_3_offset = 32L
        val size_3_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_LIMITCHECKINGCRITERIA: Int = 651 /* */
@inline @cCode.inline val ERR_LIMITCHECKINGCRITERIA_LOWLIMIT_2: Int = 616 /* */
@inline @cCode.inline val ERR_LIMITCHECKINGCRITERIA_LOWLIMITEVENTDEFINITION_ID_2: Int = 626 /* */
@inline @cCode.inline val ERR_LIMITCHECKINGCRITERIA_HIGHLIMIT_2: Int = 636 /* */
@inline @cCode.inline val ERR_LIMITCHECKINGCRITERIA_HIGHLIMITEVENTDEFINITION_2: Int = 646 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_LIMITCHECKINGCRITERIA: Int = 654 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_LIMITCHECKINGCRITERIA_LOWLIMIT_2: Int = 619 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_LIMITCHECKINGCRITERIA_LOWLIMITEVENTDEFINITION_ID_2: Int = 629 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_LIMITCHECKINGCRITERIA_HIGHLIMIT_2: Int = 639 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_LIMITCHECKINGCRITERIA_HIGHLIMITEVENTDEFINITION_2: Int = 649 /*  */
@inline @cCode.inline val TLimitCheckingCriteria_REQUIRED_BYTES_FOR_ACN_ENCODING = 9
@inline @cCode.inline val TLimitCheckingCriteria_REQUIRED_BITS_FOR_ACN_ENCODING = 72

@inline @cCode.inline val ERR_ACN_DECODE_LIMITCHECKINGCRITERIA: Int = 655 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_LIMITCHECKINGCRITERIA_LOWLIMIT_2: Int = 620 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_LIMITCHECKINGCRITERIA_LOWLIMITEVENTDEFINITION_ID_2: Int = 630 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_LIMITCHECKINGCRITERIA_HIGHLIMIT_2: Int = 640 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_LIMITCHECKINGCRITERIA_HIGHLIMITEVENTDEFINITION_2: Int = 650 /*  */
/*-- TDeltaCheckingCriteria --------------------------------------------*/

case class TDeltaCheckingCriteria (
    lowDeltaThreshold: TDummyType, 
    lowThresholdEventDefinition_ID: TEventDefinition_ID, 
    highDeltaThreshold: TDummyType, 
    highThresholdEventDefinition_ID: TEventDefinition_ID, 
    numberOFConstructiveDeltaValues: TPUSC_UINT32
) {

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775703L))
        val size_0 = 4L
        val size_1 = 32L
        val size_2 = 4L
        val size_3 = 32L
        val size_4 = 32L
        size_0 + size_1 + size_2 + size_3 + size_4
    }.ensuring { (res: Long) => 
        res == 104L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775703L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775703L))
        val size_0_offset = 4L
        val size_0_otherOffset = 4L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 4L
        val size_2_otherOffset = 4L
        val size_3_offset = 32L
        val size_3_otherOffset = 32L
        val size_4_offset = 32L
        val size_4_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775703L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775703L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 4L
        val size_0_otherOffset = 4L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 4L
        val size_2_otherOffset = 4L
        val size_3_offset = 32L
        val size_3_otherOffset = 32L
        val size_4_offset = 32L
        val size_4_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775703L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775703L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 4L
        val size_0_otherOffset = 4L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 4L
        val size_2_otherOffset = 4L
        val size_3_offset = 32L
        val size_3_otherOffset = 32L
        val size_4_offset = 32L
        val size_4_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775703L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775703L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 4L
        val size_0_otherOffset = 4L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = 4L
        val size_2_otherOffset = 4L
        val size_3_offset = 32L
        val size_3_otherOffset = 32L
        val size_4_offset = 32L
        val size_4_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_DELTACHECKINGCRITERIA: Int = 706 /* */
@inline @cCode.inline val ERR_DELTACHECKINGCRITERIA_LOWDELTATHRESHOLD_2: Int = 661 /* */
@inline @cCode.inline val ERR_DELTACHECKINGCRITERIA_LOWTHRESHOLDEVENTDEFINITION_ID_2: Int = 671 /* */
@inline @cCode.inline val ERR_DELTACHECKINGCRITERIA_HIGHDELTATHRESHOLD_2: Int = 681 /* */
@inline @cCode.inline val ERR_DELTACHECKINGCRITERIA_HIGHTHRESHOLDEVENTDEFINITION_ID_2: Int = 691 /* */
@inline @cCode.inline val ERR_DELTACHECKINGCRITERIA_NUMBEROFCONSTRUCTIVEDELTAVALUES_2: Int = 701 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_DELTACHECKINGCRITERIA: Int = 709 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_DELTACHECKINGCRITERIA_LOWDELTATHRESHOLD_2: Int = 664 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_DELTACHECKINGCRITERIA_LOWTHRESHOLDEVENTDEFINITION_ID_2: Int = 674 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_DELTACHECKINGCRITERIA_HIGHDELTATHRESHOLD_2: Int = 684 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_DELTACHECKINGCRITERIA_HIGHTHRESHOLDEVENTDEFINITION_ID_2: Int = 694 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_DELTACHECKINGCRITERIA_NUMBEROFCONSTRUCTIVEDELTAVALUES_2: Int = 704 /*  */
@inline @cCode.inline val TDeltaCheckingCriteria_REQUIRED_BYTES_FOR_ACN_ENCODING = 13
@inline @cCode.inline val TDeltaCheckingCriteria_REQUIRED_BITS_FOR_ACN_ENCODING = 104

@inline @cCode.inline val ERR_ACN_DECODE_DELTACHECKINGCRITERIA: Int = 710 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_DELTACHECKINGCRITERIA_LOWDELTATHRESHOLD_2: Int = 665 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_DELTACHECKINGCRITERIA_LOWTHRESHOLDEVENTDEFINITION_ID_2: Int = 675 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_DELTACHECKINGCRITERIA_HIGHDELTATHRESHOLD_2: Int = 685 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_DELTACHECKINGCRITERIA_HIGHTHRESHOLDEVENTDEFINITION_ID_2: Int = 695 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_DELTACHECKINGCRITERIA_NUMBEROFCONSTRUCTIVEDELTAVALUES_2: Int = 705 /*  */

case class TEventDefinitionSpare(arr: Vector[UByte])
{
    require(this.arr.length == 4)
}

@inline @cCode.inline val ERR_EVENTDEFINITIONSPARE: Int = 711 /*(SIZE(eventDefinition-ID-Size)) */

 

@inline @cCode.inline val ERR_ACN_ENCODE_EVENTDEFINITIONSPARE: Int = 714 /*  */
@inline @cCode.inline val TEventDefinitionSpare_REQUIRED_BYTES_FOR_ACN_ENCODING = 4
@inline @cCode.inline val TEventDefinitionSpare_REQUIRED_BITS_FOR_ACN_ENCODING = 32

@inline @cCode.inline val ERR_ACN_DECODE_EVENTDEFINITIONSPARE: Int = 715 /*  */
/*-- TExpectedValueCheckingCriteria --------------------------------------------*/

case class TExpectedValueCheckingCriteria (
    mask: TDummyType, 
    spare: OptionMut[TEventDefinitionSpare], 
    expectedValue: TDummyType, 
    eventDefinition_ID: TEventDefinition_ID
) {
    require(this.spare.isDefined)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775735L))
        val size_0 = 4L
        val size_1 = this.spare match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_2 = 4L
        val size_3 = 32L
        size_0 + size_1 + size_2 + size_3
    }.ensuring { (res: Long) => 
        res == 72L
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775735L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775735L))
        val size_0_offset = 4L
        val size_0_otherOffset = 4L
        val size_1_offset = this.spare match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.spare match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_2_offset = 4L
        val size_2_otherOffset = 4L
        val size_3_offset = 32L
        val size_3_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775735L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775735L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 4L
        val size_0_otherOffset = 4L
        val size_1_offset = this.spare match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.spare match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_2_offset = 4L
        val size_2_otherOffset = 4L
        val size_3_offset = 32L
        val size_3_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775735L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775735L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 4L
        val size_0_otherOffset = 4L
        val size_1_offset = this.spare match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.spare match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_2_offset = 4L
        val size_2_otherOffset = 4L
        val size_3_offset = 32L
        val size_3_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775735L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775735L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 4L
        val size_0_otherOffset = 4L
        val size_1_offset = this.spare match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_1_otherOffset = this.spare match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_2_offset = 4L
        val size_2_otherOffset = 4L
        val size_3_offset = 32L
        val size_3_otherOffset = 32L
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_EXPECTEDVALUECHECKINGCRITERIA: Int = 606 /*(WITH COMPONENTS
{
    spare PRESENT
}) */
@inline @cCode.inline val ERR_EXPECTEDVALUECHECKINGCRITERIA_MASK_2: Int = 571 /* */
@inline @cCode.inline val ERR_EXPECTEDVALUECHECKINGCRITERIA_SPARE_2: Int = 581 /* */
@inline @cCode.inline val ERR_EXPECTEDVALUECHECKINGCRITERIA_EXPECTEDVALUE_2: Int = 591 /* */
@inline @cCode.inline val ERR_EXPECTEDVALUECHECKINGCRITERIA_EVENTDEFINITION_ID_2: Int = 601 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_EXPECTEDVALUECHECKINGCRITERIA: Int = 609 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_EXPECTEDVALUECHECKINGCRITERIA_MASK_2: Int = 574 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_EXPECTEDVALUECHECKINGCRITERIA_SPARE_2: Int = 584 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_EXPECTEDVALUECHECKINGCRITERIA_EXPECTEDVALUE_2: Int = 594 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_EXPECTEDVALUECHECKINGCRITERIA_EVENTDEFINITION_ID_2: Int = 604 /*  */
@inline @cCode.inline val TExpectedValueCheckingCriteria_REQUIRED_BYTES_FOR_ACN_ENCODING = 9
@inline @cCode.inline val TExpectedValueCheckingCriteria_REQUIRED_BITS_FOR_ACN_ENCODING = 72

@inline @cCode.inline val ERR_ACN_DECODE_EXPECTEDVALUECHECKINGCRITERIA: Int = 610 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_EXPECTEDVALUECHECKINGCRITERIA_MASK_2: Int = 575 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_EXPECTEDVALUECHECKINGCRITERIA_SPARE_2: Int = 585 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_EXPECTEDVALUECHECKINGCRITERIA_EXPECTEDVALUE_2: Int = 595 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_EXPECTEDVALUECHECKINGCRITERIA_EVENTDEFINITION_ID_2: Int = 605 /*  */
/*-- TCheckTypeCriteria --------------------------------------------*/

enum TCheckTypeCriteria:
    case CheckTypeCriteria_expectedValueChecking_PRESENT(expectedValueChecking: TExpectedValueCheckingCriteria)
    case CheckTypeCriteria_limitChecking_PRESENT(limitChecking: TLimitCheckingCriteria)
    case CheckTypeCriteria_deltaChecking_PRESENT(deltaChecking: TDeltaCheckingCriteria)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775703L))
        this match {
            case TCheckTypeCriteria.CheckTypeCriteria_expectedValueChecking_PRESENT(expectedValueChecking) =>
                expectedValueChecking.size(offset)
            case TCheckTypeCriteria.CheckTypeCriteria_limitChecking_PRESENT(limitChecking) =>
                limitChecking.size(offset)
            case TCheckTypeCriteria.CheckTypeCriteria_deltaChecking_PRESENT(deltaChecking) =>
                deltaChecking.size(offset)
        }
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 104L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775703L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775703L))
        this match {
            case TCheckTypeCriteria.CheckTypeCriteria_expectedValueChecking_PRESENT(expectedValueChecking) =>
                expectedValueChecking.sizeLemmaAnyOffset(offset, otherOffset)
            case TCheckTypeCriteria.CheckTypeCriteria_limitChecking_PRESENT(limitChecking) =>
                limitChecking.sizeLemmaAnyOffset(offset, otherOffset)
            case TCheckTypeCriteria.CheckTypeCriteria_deltaChecking_PRESENT(deltaChecking) =>
                deltaChecking.sizeLemmaAnyOffset(offset, otherOffset)
        }
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775703L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775703L))
        require((offset % 8L) == (otherOffset % 8L))
        this match {
            case TCheckTypeCriteria.CheckTypeCriteria_expectedValueChecking_PRESENT(expectedValueChecking) =>
                expectedValueChecking.sizeLemmaNextByte(offset, otherOffset)
            case TCheckTypeCriteria.CheckTypeCriteria_limitChecking_PRESENT(limitChecking) =>
                limitChecking.sizeLemmaNextByte(offset, otherOffset)
            case TCheckTypeCriteria.CheckTypeCriteria_deltaChecking_PRESENT(deltaChecking) =>
                deltaChecking.sizeLemmaNextByte(offset, otherOffset)
        }
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775703L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775703L))
        require((offset % 16L) == (otherOffset % 16L))
        this match {
            case TCheckTypeCriteria.CheckTypeCriteria_expectedValueChecking_PRESENT(expectedValueChecking) =>
                expectedValueChecking.sizeLemmaNextWord(offset, otherOffset)
            case TCheckTypeCriteria.CheckTypeCriteria_limitChecking_PRESENT(limitChecking) =>
                limitChecking.sizeLemmaNextWord(offset, otherOffset)
            case TCheckTypeCriteria.CheckTypeCriteria_deltaChecking_PRESENT(deltaChecking) =>
                deltaChecking.sizeLemmaNextWord(offset, otherOffset)
        }
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775703L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775703L))
        require((offset % 32L) == (otherOffset % 32L))
        this match {
            case TCheckTypeCriteria.CheckTypeCriteria_expectedValueChecking_PRESENT(expectedValueChecking) =>
                expectedValueChecking.sizeLemmaNextDWord(offset, otherOffset)
            case TCheckTypeCriteria.CheckTypeCriteria_limitChecking_PRESENT(limitChecking) =>
                limitChecking.sizeLemmaNextDWord(offset, otherOffset)
            case TCheckTypeCriteria.CheckTypeCriteria_deltaChecking_PRESENT(deltaChecking) =>
                deltaChecking.sizeLemmaNextDWord(offset, otherOffset)
        }
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

@inline @cCode.inline val ERR_CHECKTYPECRITERIA: Int = 876 /* */
@inline @cCode.inline val ERR_CHECKTYPECRITERIA_EXPECTEDVALUECHECKING_2: Int = 761 /* */
@inline @cCode.inline val ERR_CHECKTYPECRITERIA_LIMITCHECKING_2: Int = 811 /* */
@inline @cCode.inline val ERR_CHECKTYPECRITERIA_DELTACHECKING_2: Int = 871 /* */

 
/*-- TParameterMonitoringDefinition --------------------------------------------*/

case class TParameterMonitoringDefinition (
    pmon_ID: TPMON_ID, 
    monitoredParameter_ID: TParameter_ID, 
    checkValidityCondition: OptionMut[TCheckValidityCondition], 
    monitoringInterval: OptionMut[TPUSC_UINT32], 
    repetitionNumber: TPUSC_UINT32, 
    checkTypeCriteria: TCheckTypeCriteria
) {
    require(this.checkValidityCondition.isDefined && this.monitoringInterval.isDefined)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775517L))
        val size_0 = 32L
        val size_1 = 32L
        val size_2 = this.checkValidityCondition match {
            case SomeMut(v) =>
                v.size(offset + size_0 + size_1)
            case NoneMut() =>
                0L
        }
        val size_3 = this.monitoringInterval match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_4 = 32L
        val size_5 = 2L
        val size_6 = this.checkTypeCriteria match {
            case TCheckTypeCriteria.CheckTypeCriteria_expectedValueChecking_PRESENT(expectedValueChecking) =>
                expectedValueChecking.size(offset + size_0 + size_1 + size_2 + size_3 + size_4 + size_5)
            case TCheckTypeCriteria.CheckTypeCriteria_limitChecking_PRESENT(limitChecking) =>
                limitChecking.size(offset + size_0 + size_1 + size_2 + size_3 + size_4 + size_5)
            case TCheckTypeCriteria.CheckTypeCriteria_deltaChecking_PRESENT(deltaChecking) =>
                deltaChecking.size(offset + size_0 + size_1 + size_2 + size_3 + size_4 + size_5)
        }
        size_0 + size_1 + size_2 + size_3 + size_4 + size_5 + size_6
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 290L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775517L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775517L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.checkValidityCondition match {
            case SomeMut(v) =>
                v.size(offset + size_0_offset + size_1_offset)
            case NoneMut() =>
                0L
        }
        val size_2_otherOffset = this.checkValidityCondition match {
            case SomeMut(v) =>
                v.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
            case NoneMut() =>
                0L
        }
        this.checkValidityCondition match {
            case SomeMut(v) =>
                v.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
            case NoneMut() =>
                ()
        }
        val size_3_offset = this.monitoringInterval match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_3_otherOffset = this.monitoringInterval match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_4_offset = 32L
        val size_4_otherOffset = 32L
        val size_5_offset = 2L
        val size_5_otherOffset = 2L
        val size_6_offset = this.checkTypeCriteria match {
            case TCheckTypeCriteria.CheckTypeCriteria_expectedValueChecking_PRESENT(expectedValueChecking) =>
                expectedValueChecking.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset + size_5_offset)
            case TCheckTypeCriteria.CheckTypeCriteria_limitChecking_PRESENT(limitChecking) =>
                limitChecking.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset + size_5_offset)
            case TCheckTypeCriteria.CheckTypeCriteria_deltaChecking_PRESENT(deltaChecking) =>
                deltaChecking.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset + size_5_offset)
        }
        val size_6_otherOffset = this.checkTypeCriteria match {
            case TCheckTypeCriteria.CheckTypeCriteria_expectedValueChecking_PRESENT(expectedValueChecking) =>
                expectedValueChecking.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset + size_5_otherOffset)
            case TCheckTypeCriteria.CheckTypeCriteria_limitChecking_PRESENT(limitChecking) =>
                limitChecking.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset + size_5_otherOffset)
            case TCheckTypeCriteria.CheckTypeCriteria_deltaChecking_PRESENT(deltaChecking) =>
                deltaChecking.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset + size_5_otherOffset)
        }
        this.checkTypeCriteria.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset + size_5_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset + size_5_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775517L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775517L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.checkValidityCondition match {
            case SomeMut(v) =>
                v.size(offset + size_0_offset + size_1_offset)
            case NoneMut() =>
                0L
        }
        val size_2_otherOffset = this.checkValidityCondition match {
            case SomeMut(v) =>
                v.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
            case NoneMut() =>
                0L
        }
        this.checkValidityCondition match {
            case SomeMut(v) =>
                v.sizeLemmaNextByte(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
            case NoneMut() =>
                ()
        }
        val size_3_offset = this.monitoringInterval match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_3_otherOffset = this.monitoringInterval match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_4_offset = 32L
        val size_4_otherOffset = 32L
        val size_5_offset = 2L
        val size_5_otherOffset = 2L
        val size_6_offset = this.checkTypeCriteria match {
            case TCheckTypeCriteria.CheckTypeCriteria_expectedValueChecking_PRESENT(expectedValueChecking) =>
                expectedValueChecking.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset + size_5_offset)
            case TCheckTypeCriteria.CheckTypeCriteria_limitChecking_PRESENT(limitChecking) =>
                limitChecking.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset + size_5_offset)
            case TCheckTypeCriteria.CheckTypeCriteria_deltaChecking_PRESENT(deltaChecking) =>
                deltaChecking.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset + size_5_offset)
        }
        val size_6_otherOffset = this.checkTypeCriteria match {
            case TCheckTypeCriteria.CheckTypeCriteria_expectedValueChecking_PRESENT(expectedValueChecking) =>
                expectedValueChecking.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset + size_5_otherOffset)
            case TCheckTypeCriteria.CheckTypeCriteria_limitChecking_PRESENT(limitChecking) =>
                limitChecking.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset + size_5_otherOffset)
            case TCheckTypeCriteria.CheckTypeCriteria_deltaChecking_PRESENT(deltaChecking) =>
                deltaChecking.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset + size_5_otherOffset)
        }
        this.checkTypeCriteria.sizeLemmaNextByte(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset + size_5_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset + size_5_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775517L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775517L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.checkValidityCondition match {
            case SomeMut(v) =>
                v.size(offset + size_0_offset + size_1_offset)
            case NoneMut() =>
                0L
        }
        val size_2_otherOffset = this.checkValidityCondition match {
            case SomeMut(v) =>
                v.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
            case NoneMut() =>
                0L
        }
        this.checkValidityCondition match {
            case SomeMut(v) =>
                v.sizeLemmaNextWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
            case NoneMut() =>
                ()
        }
        val size_3_offset = this.monitoringInterval match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_3_otherOffset = this.monitoringInterval match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_4_offset = 32L
        val size_4_otherOffset = 32L
        val size_5_offset = 2L
        val size_5_otherOffset = 2L
        val size_6_offset = this.checkTypeCriteria match {
            case TCheckTypeCriteria.CheckTypeCriteria_expectedValueChecking_PRESENT(expectedValueChecking) =>
                expectedValueChecking.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset + size_5_offset)
            case TCheckTypeCriteria.CheckTypeCriteria_limitChecking_PRESENT(limitChecking) =>
                limitChecking.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset + size_5_offset)
            case TCheckTypeCriteria.CheckTypeCriteria_deltaChecking_PRESENT(deltaChecking) =>
                deltaChecking.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset + size_5_offset)
        }
        val size_6_otherOffset = this.checkTypeCriteria match {
            case TCheckTypeCriteria.CheckTypeCriteria_expectedValueChecking_PRESENT(expectedValueChecking) =>
                expectedValueChecking.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset + size_5_otherOffset)
            case TCheckTypeCriteria.CheckTypeCriteria_limitChecking_PRESENT(limitChecking) =>
                limitChecking.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset + size_5_otherOffset)
            case TCheckTypeCriteria.CheckTypeCriteria_deltaChecking_PRESENT(deltaChecking) =>
                deltaChecking.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset + size_5_otherOffset)
        }
        this.checkTypeCriteria.sizeLemmaNextWord(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset + size_5_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset + size_5_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775517L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775517L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.checkValidityCondition match {
            case SomeMut(v) =>
                v.size(offset + size_0_offset + size_1_offset)
            case NoneMut() =>
                0L
        }
        val size_2_otherOffset = this.checkValidityCondition match {
            case SomeMut(v) =>
                v.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
            case NoneMut() =>
                0L
        }
        this.checkValidityCondition match {
            case SomeMut(v) =>
                v.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
            case NoneMut() =>
                ()
        }
        val size_3_offset = this.monitoringInterval match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_3_otherOffset = this.monitoringInterval match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_4_offset = 32L
        val size_4_otherOffset = 32L
        val size_5_offset = 2L
        val size_5_otherOffset = 2L
        val size_6_offset = this.checkTypeCriteria match {
            case TCheckTypeCriteria.CheckTypeCriteria_expectedValueChecking_PRESENT(expectedValueChecking) =>
                expectedValueChecking.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset + size_5_offset)
            case TCheckTypeCriteria.CheckTypeCriteria_limitChecking_PRESENT(limitChecking) =>
                limitChecking.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset + size_5_offset)
            case TCheckTypeCriteria.CheckTypeCriteria_deltaChecking_PRESENT(deltaChecking) =>
                deltaChecking.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset + size_5_offset)
        }
        val size_6_otherOffset = this.checkTypeCriteria match {
            case TCheckTypeCriteria.CheckTypeCriteria_expectedValueChecking_PRESENT(expectedValueChecking) =>
                expectedValueChecking.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset + size_5_otherOffset)
            case TCheckTypeCriteria.CheckTypeCriteria_limitChecking_PRESENT(limitChecking) =>
                limitChecking.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset + size_5_otherOffset)
            case TCheckTypeCriteria.CheckTypeCriteria_deltaChecking_PRESENT(deltaChecking) =>
                deltaChecking.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset + size_5_otherOffset)
        }
        this.checkTypeCriteria.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset + size_5_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset + size_5_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_PARAMETERMONITORINGDEFINITION: Int = 305 /*(WITH COMPONENTS
{
    checkValidityCondition PRESENT,
    monitoringInterval PRESENT
}) */
@inline @cCode.inline val ERR_PARAMETERMONITORINGDEFINITION_PMON_ID_2: Int = 61 /* */
@inline @cCode.inline val ERR_PARAMETERMONITORINGDEFINITION_MONITOREDPARAMETER_ID_2: Int = 71 /* */
@inline @cCode.inline val ERR_PARAMETERMONITORINGDEFINITION_CHECKVALIDITYCONDITION_2: Int = 110 /* */
@inline @cCode.inline val ERR_PARAMETERMONITORINGDEFINITION_MONITORINGINTERVAL_2: Int = 120 /* */
@inline @cCode.inline val ERR_PARAMETERMONITORINGDEFINITION_REPETITIONNUMBER_2: Int = 130 /* */
@inline @cCode.inline val ERR_PARAMETERMONITORINGDEFINITION_CHECKTYPECRITERIA_2: Int = 302 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_PARAMETERMONITORINGDEFINITION: Int = 308 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PARAMETERMONITORINGDEFINITION_PMON_ID_2: Int = 64 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PARAMETERMONITORINGDEFINITION_MONITOREDPARAMETER_ID_2: Int = 74 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PARAMETERMONITORINGDEFINITION_CHECKVALIDITYCONDITION_2: Int = 113 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PARAMETERMONITORINGDEFINITION_MONITORINGINTERVAL_2: Int = 123 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PARAMETERMONITORINGDEFINITION_REPETITIONNUMBER_2: Int = 133 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PARAMETERMONITORINGDEFINITION_CHECKTYPE_UNINITIALIZED: Int = 309 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PARAMETERMONITORINGDEFINITION_CHECKTYPE: Int = 135 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PARAMETERMONITORINGDEFINITION_CHECKTYPECRITERIA: Int = 300 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PARAMETERMONITORINGDEFINITION_CHECKTYPECRITERIA_EXPECTEDVALUECHECKING_2: Int = 185 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PARAMETERMONITORINGDEFINITION_CHECKTYPECRITERIA_LIMITCHECKING_2: Int = 235 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_PARAMETERMONITORINGDEFINITION_CHECKTYPECRITERIA_DELTACHECKING_2: Int = 295 /*  */
@inline @cCode.inline val TParameterMonitoringDefinition_REQUIRED_BYTES_FOR_ACN_ENCODING = 37
@inline @cCode.inline val TParameterMonitoringDefinition_REQUIRED_BITS_FOR_ACN_ENCODING = 290

@inline @cCode.inline val ERR_ACN_DECODE_PARAMETERMONITORINGDEFINITION: Int = 310 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PARAMETERMONITORINGDEFINITION_PMON_ID_2: Int = 65 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PARAMETERMONITORINGDEFINITION_MONITOREDPARAMETER_ID_2: Int = 75 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PARAMETERMONITORINGDEFINITION_CHECKVALIDITYCONDITION_2: Int = 114 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PARAMETERMONITORINGDEFINITION_MONITORINGINTERVAL_2: Int = 124 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PARAMETERMONITORINGDEFINITION_REPETITIONNUMBER_2: Int = 134 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PARAMETERMONITORINGDEFINITION_CHECKTYPE: Int = 136 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PARAMETERMONITORINGDEFINITION_CHECKTYPECRITERIA: Int = 301 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PARAMETERMONITORINGDEFINITION_CHECKTYPECRITERIA_EXPECTEDVALUECHECKING_2: Int = 186 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PARAMETERMONITORINGDEFINITION_CHECKTYPECRITERIA_LIMITCHECKING_2: Int = 236 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_PARAMETERMONITORINGDEFINITION_CHECKTYPECRITERIA_DELTACHECKING_2: Int = 296 /*  */
/*-- TTC_12_7_ParameterMonitoringDefinition --------------------------------------------*/

case class TTC_12_7_ParameterMonitoringDefinition (
    pmon_ID: TPMON_ID, 
    monitoredParameter_ID: TParameter_ID, 
    checkValidityCondition: OptionMut[TCheckValidityCondition], 
    monitoringInterval: OptionMut[TPUSC_UINT32], 
    repetitionNumber: TPUSC_UINT32, 
    checkTypeCriteria: TCheckTypeCriteria
) {
    require(!this.checkValidityCondition.isDefined && !this.monitoringInterval.isDefined)

    def size(offset: Long): Long = {
        require((0L <= offset) && (offset <= 9223372036854775605L))
        val size_0 = 32L
        val size_1 = 32L
        val size_2 = this.checkValidityCondition match {
            case SomeMut(v) =>
                v.size(offset + size_0 + size_1)
            case NoneMut() =>
                0L
        }
        val size_3 = this.monitoringInterval match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_4 = 32L
        val size_5 = 2L
        val size_6 = this.checkTypeCriteria match {
            case TCheckTypeCriteria.CheckTypeCriteria_expectedValueChecking_PRESENT(expectedValueChecking) =>
                expectedValueChecking.size(offset + size_0 + size_1 + size_2 + size_3 + size_4 + size_5)
            case TCheckTypeCriteria.CheckTypeCriteria_limitChecking_PRESENT(limitChecking) =>
                limitChecking.size(offset + size_0 + size_1 + size_2 + size_3 + size_4 + size_5)
            case TCheckTypeCriteria.CheckTypeCriteria_deltaChecking_PRESENT(deltaChecking) =>
                deltaChecking.size(offset + size_0 + size_1 + size_2 + size_3 + size_4 + size_5)
        }
        size_0 + size_1 + size_2 + size_3 + size_4 + size_5 + size_6
    }.ensuring { (res: Long) => 
        (0L <= res) && (res <= 202L)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaAnyOffset(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775605L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775605L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.checkValidityCondition match {
            case SomeMut(v) =>
                v.size(offset + size_0_offset + size_1_offset)
            case NoneMut() =>
                0L
        }
        val size_2_otherOffset = this.checkValidityCondition match {
            case SomeMut(v) =>
                v.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
            case NoneMut() =>
                0L
        }
        this.checkValidityCondition match {
            case SomeMut(v) =>
                v.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
            case NoneMut() =>
                ()
        }
        val size_3_offset = this.monitoringInterval match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_3_otherOffset = this.monitoringInterval match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_4_offset = 32L
        val size_4_otherOffset = 32L
        val size_5_offset = 2L
        val size_5_otherOffset = 2L
        val size_6_offset = this.checkTypeCriteria match {
            case TCheckTypeCriteria.CheckTypeCriteria_expectedValueChecking_PRESENT(expectedValueChecking) =>
                expectedValueChecking.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset + size_5_offset)
            case TCheckTypeCriteria.CheckTypeCriteria_limitChecking_PRESENT(limitChecking) =>
                limitChecking.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset + size_5_offset)
            case TCheckTypeCriteria.CheckTypeCriteria_deltaChecking_PRESENT(deltaChecking) =>
                deltaChecking.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset + size_5_offset)
        }
        val size_6_otherOffset = this.checkTypeCriteria match {
            case TCheckTypeCriteria.CheckTypeCriteria_expectedValueChecking_PRESENT(expectedValueChecking) =>
                expectedValueChecking.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset + size_5_otherOffset)
            case TCheckTypeCriteria.CheckTypeCriteria_limitChecking_PRESENT(limitChecking) =>
                limitChecking.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset + size_5_otherOffset)
            case TCheckTypeCriteria.CheckTypeCriteria_deltaChecking_PRESENT(deltaChecking) =>
                deltaChecking.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset + size_5_otherOffset)
        }
        this.checkTypeCriteria.sizeLemmaAnyOffset(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset + size_5_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset + size_5_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextByte(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775605L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775605L))
        require((offset % 8L) == (otherOffset % 8L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.checkValidityCondition match {
            case SomeMut(v) =>
                v.size(offset + size_0_offset + size_1_offset)
            case NoneMut() =>
                0L
        }
        val size_2_otherOffset = this.checkValidityCondition match {
            case SomeMut(v) =>
                v.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
            case NoneMut() =>
                0L
        }
        this.checkValidityCondition match {
            case SomeMut(v) =>
                v.sizeLemmaNextByte(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
            case NoneMut() =>
                ()
        }
        val size_3_offset = this.monitoringInterval match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_3_otherOffset = this.monitoringInterval match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_4_offset = 32L
        val size_4_otherOffset = 32L
        val size_5_offset = 2L
        val size_5_otherOffset = 2L
        val size_6_offset = this.checkTypeCriteria match {
            case TCheckTypeCriteria.CheckTypeCriteria_expectedValueChecking_PRESENT(expectedValueChecking) =>
                expectedValueChecking.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset + size_5_offset)
            case TCheckTypeCriteria.CheckTypeCriteria_limitChecking_PRESENT(limitChecking) =>
                limitChecking.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset + size_5_offset)
            case TCheckTypeCriteria.CheckTypeCriteria_deltaChecking_PRESENT(deltaChecking) =>
                deltaChecking.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset + size_5_offset)
        }
        val size_6_otherOffset = this.checkTypeCriteria match {
            case TCheckTypeCriteria.CheckTypeCriteria_expectedValueChecking_PRESENT(expectedValueChecking) =>
                expectedValueChecking.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset + size_5_otherOffset)
            case TCheckTypeCriteria.CheckTypeCriteria_limitChecking_PRESENT(limitChecking) =>
                limitChecking.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset + size_5_otherOffset)
            case TCheckTypeCriteria.CheckTypeCriteria_deltaChecking_PRESENT(deltaChecking) =>
                deltaChecking.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset + size_5_otherOffset)
        }
        this.checkTypeCriteria.sizeLemmaNextByte(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset + size_5_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset + size_5_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775605L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775605L))
        require((offset % 16L) == (otherOffset % 16L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.checkValidityCondition match {
            case SomeMut(v) =>
                v.size(offset + size_0_offset + size_1_offset)
            case NoneMut() =>
                0L
        }
        val size_2_otherOffset = this.checkValidityCondition match {
            case SomeMut(v) =>
                v.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
            case NoneMut() =>
                0L
        }
        this.checkValidityCondition match {
            case SomeMut(v) =>
                v.sizeLemmaNextWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
            case NoneMut() =>
                ()
        }
        val size_3_offset = this.monitoringInterval match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_3_otherOffset = this.monitoringInterval match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_4_offset = 32L
        val size_4_otherOffset = 32L
        val size_5_offset = 2L
        val size_5_otherOffset = 2L
        val size_6_offset = this.checkTypeCriteria match {
            case TCheckTypeCriteria.CheckTypeCriteria_expectedValueChecking_PRESENT(expectedValueChecking) =>
                expectedValueChecking.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset + size_5_offset)
            case TCheckTypeCriteria.CheckTypeCriteria_limitChecking_PRESENT(limitChecking) =>
                limitChecking.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset + size_5_offset)
            case TCheckTypeCriteria.CheckTypeCriteria_deltaChecking_PRESENT(deltaChecking) =>
                deltaChecking.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset + size_5_offset)
        }
        val size_6_otherOffset = this.checkTypeCriteria match {
            case TCheckTypeCriteria.CheckTypeCriteria_expectedValueChecking_PRESENT(expectedValueChecking) =>
                expectedValueChecking.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset + size_5_otherOffset)
            case TCheckTypeCriteria.CheckTypeCriteria_limitChecking_PRESENT(limitChecking) =>
                limitChecking.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset + size_5_otherOffset)
            case TCheckTypeCriteria.CheckTypeCriteria_deltaChecking_PRESENT(deltaChecking) =>
                deltaChecking.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset + size_5_otherOffset)
        }
        this.checkTypeCriteria.sizeLemmaNextWord(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset + size_5_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset + size_5_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }

    @ghost @opaque @inlineOnce
    def sizeLemmaNextDWord(offset: Long, otherOffset: Long): Unit = {
        require((0L <= offset) && (offset <= 9223372036854775605L))
        require((0L <= otherOffset) && (otherOffset <= 9223372036854775605L))
        require((offset % 32L) == (otherOffset % 32L))
        val size_0_offset = 32L
        val size_0_otherOffset = 32L
        val size_1_offset = 32L
        val size_1_otherOffset = 32L
        val size_2_offset = this.checkValidityCondition match {
            case SomeMut(v) =>
                v.size(offset + size_0_offset + size_1_offset)
            case NoneMut() =>
                0L
        }
        val size_2_otherOffset = this.checkValidityCondition match {
            case SomeMut(v) =>
                v.size(otherOffset + size_0_otherOffset + size_1_otherOffset)
            case NoneMut() =>
                0L
        }
        this.checkValidityCondition match {
            case SomeMut(v) =>
                v.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset, otherOffset + size_0_otherOffset + size_1_otherOffset)
            case NoneMut() =>
                ()
        }
        val size_3_offset = this.monitoringInterval match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_3_otherOffset = this.monitoringInterval match {
            case SomeMut(v) =>
                32L
            case NoneMut() =>
                0L
        }
        val size_4_offset = 32L
        val size_4_otherOffset = 32L
        val size_5_offset = 2L
        val size_5_otherOffset = 2L
        val size_6_offset = this.checkTypeCriteria match {
            case TCheckTypeCriteria.CheckTypeCriteria_expectedValueChecking_PRESENT(expectedValueChecking) =>
                expectedValueChecking.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset + size_5_offset)
            case TCheckTypeCriteria.CheckTypeCriteria_limitChecking_PRESENT(limitChecking) =>
                limitChecking.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset + size_5_offset)
            case TCheckTypeCriteria.CheckTypeCriteria_deltaChecking_PRESENT(deltaChecking) =>
                deltaChecking.size(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset + size_5_offset)
        }
        val size_6_otherOffset = this.checkTypeCriteria match {
            case TCheckTypeCriteria.CheckTypeCriteria_expectedValueChecking_PRESENT(expectedValueChecking) =>
                expectedValueChecking.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset + size_5_otherOffset)
            case TCheckTypeCriteria.CheckTypeCriteria_limitChecking_PRESENT(limitChecking) =>
                limitChecking.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset + size_5_otherOffset)
            case TCheckTypeCriteria.CheckTypeCriteria_deltaChecking_PRESENT(deltaChecking) =>
                deltaChecking.size(otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset + size_5_otherOffset)
        }
        this.checkTypeCriteria.sizeLemmaNextDWord(offset + size_0_offset + size_1_offset + size_2_offset + size_3_offset + size_4_offset + size_5_offset, otherOffset + size_0_otherOffset + size_1_otherOffset + size_2_otherOffset + size_3_otherOffset + size_4_otherOffset + size_5_otherOffset)
        ()
    }.ensuring { (res: Unit) => 
        this.size(offset) == this.size(otherOffset)
    }
}


@inline @cCode.inline val ERR_TC_12_7_PARAMETERMONITORINGDEFINITION: Int = 560 /*(WITH COMPONENTS
{
    checkValidityCondition ABSENT,
    monitoringInterval ABSENT
}) */
@inline @cCode.inline val ERR_TC_12_7_PARAMETERMONITORINGDEFINITION_PMON_ID_2: Int = 316 /* */
@inline @cCode.inline val ERR_TC_12_7_PARAMETERMONITORINGDEFINITION_MONITOREDPARAMETER_ID_2: Int = 326 /* */
@inline @cCode.inline val ERR_TC_12_7_PARAMETERMONITORINGDEFINITION_CHECKVALIDITYCONDITION_2: Int = 365 /* */
@inline @cCode.inline val ERR_TC_12_7_PARAMETERMONITORINGDEFINITION_MONITORINGINTERVAL_2: Int = 375 /* */
@inline @cCode.inline val ERR_TC_12_7_PARAMETERMONITORINGDEFINITION_REPETITIONNUMBER_2: Int = 385 /* */
@inline @cCode.inline val ERR_TC_12_7_PARAMETERMONITORINGDEFINITION_CHECKTYPECRITERIA_2: Int = 557 /* */

 

@inline @cCode.inline val ERR_ACN_ENCODE_TC_12_7_PARAMETERMONITORINGDEFINITION: Int = 563 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_12_7_PARAMETERMONITORINGDEFINITION_PMON_ID_2: Int = 319 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_12_7_PARAMETERMONITORINGDEFINITION_MONITOREDPARAMETER_ID_2: Int = 329 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_12_7_PARAMETERMONITORINGDEFINITION_CHECKVALIDITYCONDITION_2: Int = 368 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_12_7_PARAMETERMONITORINGDEFINITION_MONITORINGINTERVAL_2: Int = 378 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_12_7_PARAMETERMONITORINGDEFINITION_REPETITIONNUMBER_2: Int = 388 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_12_7_PARAMETERMONITORINGDEFINITION_CHECKTYPE_UNINITIALIZED: Int = 564 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_12_7_PARAMETERMONITORINGDEFINITION_CHECKTYPE: Int = 390 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_12_7_PARAMETERMONITORINGDEFINITION_CHECKTYPECRITERIA: Int = 555 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_12_7_PARAMETERMONITORINGDEFINITION_CHECKTYPECRITERIA_EXPECTEDVALUECHECKING_2: Int = 440 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_12_7_PARAMETERMONITORINGDEFINITION_CHECKTYPECRITERIA_LIMITCHECKING_2: Int = 490 /*  */
@inline @cCode.inline val ERR_ACN_ENCODE_TC_12_7_PARAMETERMONITORINGDEFINITION_CHECKTYPECRITERIA_DELTACHECKING_2: Int = 550 /*  */
@inline @cCode.inline val TTC_12_7_ParameterMonitoringDefinition_REQUIRED_BYTES_FOR_ACN_ENCODING = 26
@inline @cCode.inline val TTC_12_7_ParameterMonitoringDefinition_REQUIRED_BITS_FOR_ACN_ENCODING = 202

@inline @cCode.inline val ERR_ACN_DECODE_TC_12_7_PARAMETERMONITORINGDEFINITION: Int = 565 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_12_7_PARAMETERMONITORINGDEFINITION_PMON_ID_2: Int = 320 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_12_7_PARAMETERMONITORINGDEFINITION_MONITOREDPARAMETER_ID_2: Int = 330 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_12_7_PARAMETERMONITORINGDEFINITION_CHECKVALIDITYCONDITION_2: Int = 369 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_12_7_PARAMETERMONITORINGDEFINITION_MONITORINGINTERVAL_2: Int = 379 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_12_7_PARAMETERMONITORINGDEFINITION_REPETITIONNUMBER_2: Int = 389 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_12_7_PARAMETERMONITORINGDEFINITION_CHECKTYPE: Int = 391 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_12_7_PARAMETERMONITORINGDEFINITION_CHECKTYPECRITERIA: Int = 556 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_12_7_PARAMETERMONITORINGDEFINITION_CHECKTYPECRITERIA_EXPECTEDVALUECHECKING_2: Int = 441 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_12_7_PARAMETERMONITORINGDEFINITION_CHECKTYPECRITERIA_LIMITCHECKING_2: Int = 491 /*  */
@inline @cCode.inline val ERR_ACN_DECODE_TC_12_7_PARAMETERMONITORINGDEFINITION_CHECKTYPECRITERIA_DELTACHECKING_2: Int = 551 /*  */


