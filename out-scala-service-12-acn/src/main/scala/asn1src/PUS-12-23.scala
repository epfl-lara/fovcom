/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._

val maxTC_12_23_FunctionalMonitoringDefinitionCount: Int = 4095 // variables:188
val maxTC_12_23_PMON_ID_Count: Int = 4095 // variables:188

def TTC_12_23_FunctionalMonitoringDefinition_pmon_ID_IsConstraintValid(pVal: TTC_12_23_FunctionalMonitoringDefinition_pmon_ID): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = ((1 <= pVal.nCount) && (pVal.nCount <= 4095)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TPMON_ID_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TTC_12_23_FunctionalMonitoringDefinition_IsConstraintValid(pVal: TTC_12_23_FunctionalMonitoringDefinition): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TFMON_ID_IsConstraintValid(pVal.fmon_ID)
    if ret.isRight then
        pVal.checkValidityCondition match
            case SomeMut(checkValidityCondition) =>
                ret = TCheckValidityCondition_IsConstraintValid(checkValidityCondition)
            case NoneMut() =>
        if ret.isRight then
            ret = TEventDefinition_ID_IsConstraintValid(pVal.eventDefinition_ID)
            if ret.isRight then
                pVal.min_PMON_FailingNumber match
                    case SomeMut(min_PMON_FailingNumber) =>
                        ret = TPUSC_UINT32_IsConstraintValid(min_PMON_FailingNumber)
                    case NoneMut() =>
                if ret.isRight then
                    ret = TTC_12_23_FunctionalMonitoringDefinition_pmon_ID_IsConstraintValid(pVal.pmon_ID)
    if ret.isRight then
        ret = (pVal.checkValidityCondition.isDefined == true) match
            case true =>
                Right(0)
            case false =>
                Left(45)
        if ret.isRight then
            ret = (pVal.min_PMON_FailingNumber.isDefined == true) match
                case true =>
                    Right(0)
                case false =>
                    Left(45)
    ret
}

def TTC_12_23_FunctionalMonitoringDefinition_pmon_ID_Initialize(): TTC_12_23_FunctionalMonitoringDefinition_pmon_ID = TTC_12_23_FunctionalMonitoringDefinition_pmon_ID(1, Vector.fill(4095)(TPMON_ID.Tparam0))
def TTC_12_23_FunctionalMonitoringDefinition_Initialize(): TTC_12_23_FunctionalMonitoringDefinition = TTC_12_23_FunctionalMonitoringDefinition(fmon_ID = TFMON_ID.Tfunction0, checkValidityCondition = SomeMut(TCheckValidityCondition_Initialize()), eventDefinition_ID = ULong.fromRaw(0L), min_PMON_FailingNumber = SomeMut(ULong.fromRaw(0L)), pmon_ID = TTC_12_23_FunctionalMonitoringDefinition_pmon_ID_Initialize())

@opaque @inlineOnce 
def TTC_12_23_FunctionalMonitoringDefinition_ACN_Encode(pVal: TTC_12_23_FunctionalMonitoringDefinition, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(131224L))
    var i1: Int = 0
    TTC_12_23_FunctionalMonitoringDefinition_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode fmon_ID */
    TFMON_ID_ACN_Encode(pVal.fmon_ID, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 131224L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    TC_12_23_FunctionalMonitoringDefinition_checkValidityCondition_Optional_ACN_Encode(codec, pVal, pVal.checkValidityCondition) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 131192L, 56L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 88L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.checkValidityCondition match {
        case SomeMut(v) =>
            v.size(codec_0_2.base.bitStream.bitIndex)
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode eventDefinition_ID */
    TEventDefinition_ID_ACN_Encode(pVal.eventDefinition_ID, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_3.base.bitStream, codec.base.bitStream, 131136L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 120L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    @ghost val codec_0_4 = snapshot(codec)
    TC_12_23_FunctionalMonitoringDefinition_min_PMON_FailingNumber_Optional_ACN_Encode(codec, pVal, pVal.min_PMON_FailingNumber) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_4.base.bitStream, codec.base.bitStream, 131104L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 152L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_3 = pVal.min_PMON_FailingNumber match {
        case SomeMut(v) =>
            32L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3)
    }
    @ghost val codec_0_5 = snapshot(codec)
    val TC_12_23_FunctionalMonitoringDefinition_n2 = ULong.fromRaw(pVal.pmon_ID.nCount)
    if TC_12_23_FunctionalMonitoringDefinition_n2 < ULong.fromRaw(1) || TC_12_23_FunctionalMonitoringDefinition_n2 > ULong.fromRaw(4095) then
        return Left(860)
    /* Encode TC_12_23_FunctionalMonitoringDefinition_n2 */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(TC_12_23_FunctionalMonitoringDefinition_n2)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(TC_12_23_FunctionalMonitoringDefinition_n2)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_5.base.bitStream, codec.base.bitStream, 131072L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 184L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_4 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3 + size_4)
    }
    @ghost val codec_0_6 = snapshot(codec)
    /* Encode pmon_ID */
    TC_12_23_FunctionalMonitoringDefinition_pmon_ID_ACN_Encode(codec, pVal, TC_12_23_FunctionalMonitoringDefinition_n2, pVal.pmon_ID) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 131224L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_5 = pVal.pmon_ID.size(codec_0_6.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3 + size_4 + size_5)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 131224L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2 + size_3 + size_4 + size_5)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TC_12_23_FunctionalMonitoringDefinition_checkValidityCondition_Optional_ACN_Encode(codec: ACN, pVal: TTC_12_23_FunctionalMonitoringDefinition, checkValidityCondition: OptionMut[TCheckValidityCondition]): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(56L))
    @ghost val oldCdc = snapshot(codec)
    /* Encode checkValidityCondition */
    /* marked as ALWAYS PRESENT, so it must be Some */
    checkValidityCondition match
        case SomeMut(checkValidityCondition) =>
            TCheckValidityCondition_ACN_Encode(checkValidityCondition, codec, false) match // uper:6
                case Right(_) =>
                case Left(err) => return Left(err)
        case NoneMut() => return Left(628)
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + checkValidityCondition.get.size(old(codec).base.bitStream.bitIndex)
    }
}



@opaque @inlineOnce
def TC_12_23_FunctionalMonitoringDefinition_min_PMON_FailingNumber_Optional_ACN_Encode(codec: ACN, pVal: TTC_12_23_FunctionalMonitoringDefinition, min_PMON_FailingNumber: OptionMut[ULong]): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(32L))
    @ghost val oldCdc = snapshot(codec)
    /* Encode min_PMON_FailingNumber */
    /* marked as ALWAYS PRESENT, so it must be Some */
    min_PMON_FailingNumber match
        case SomeMut(min_PMON_FailingNumber) =>
            TPUSC_UINT32_ACN_Encode(min_PMON_FailingNumber, codec, false) match // uper:6
                case Right(_) =>
                case Left(err) => return Left(err)
        case NoneMut() => return Left(628)
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 32L
    }
}



@opaque @inlineOnce
def PUS_12_23_TTC_12_23_FunctionalMonitoringDefinition_pmon_ID_pVal_pmon_ID_pmon_ID_Encode_loop(codec: ACN, pmon_ID: TTC_12_23_FunctionalMonitoringDefinition_pmon_ID, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= pmon_ID.nCount))
    require((1 <= pmon_ID.nCount) && (pmon_ID.nCount <= pmon_ID.arr.size) && (pmon_ID.arr.size <= 4095))
    require(codec.base.bitStream.validate_offset_bits((32L * (pmon_ID.nCount - i1))))
    decreases(pmon_ID.nCount - i1)
    if (i1 == pmon_ID.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 32L * (pmon_ID.nCount - i1), 32L)
        }
        TPMON_ID_ACN_Encode(pmon_ID.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(32L * (i1 + 1) == 32L * i1 + 32L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 32L * (pmon_ID.nCount - i1), 32L)
            check(codec.base.bitStream.validate_offset_bits(32L * (pmon_ID.nCount - (i1 + 1))))
        }
        val res = PUS_12_23_TTC_12_23_FunctionalMonitoringDefinition_pmon_ID_pVal_pmon_ID_pmon_ID_Encode_loop(codec, pmon_ID, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TTC_12_23_FunctionalMonitoringDefinition_pmon_ID.sizeRange(pmon_ID.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, pmon_ID.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + 32L)
                    assert(TTC_12_23_FunctionalMonitoringDefinition_pmon_ID.sizeRange(pmon_ID.arr, codecSnap1.base.bitStream.bitIndex, i1, pmon_ID.nCount) == TTC_12_23_FunctionalMonitoringDefinition_pmon_ID.sizeRange(pmon_ID.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, pmon_ID.nCount) + 32L)
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TTC_12_23_FunctionalMonitoringDefinition_pmon_ID.sizeRange(pmon_ID.arr, codecSnap1.base.bitStream.bitIndex, i1, pmon_ID.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTC_12_23_FunctionalMonitoringDefinition_pmon_ID.sizeRange(pmon_ID.arr, old(codec).base.bitStream.bitIndex, i1, pmon_ID.nCount)
    }
}



@opaque @inlineOnce
def TC_12_23_FunctionalMonitoringDefinition_pmon_ID_ACN_Encode(codec: ACN, pVal: TTC_12_23_FunctionalMonitoringDefinition, TC_12_23_FunctionalMonitoringDefinition_n2: ULong, pmon_ID: TTC_12_23_FunctionalMonitoringDefinition_pmon_ID): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(131040L))
    @ghost val oldCdc = snapshot(codec)
    TTC_12_23_FunctionalMonitoringDefinition_pmon_ID_IsConstraintValid(pmon_ID) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    PUS_12_23_TTC_12_23_FunctionalMonitoringDefinition_pmon_ID_pVal_pmon_ID_pmon_ID_Encode_loop(codec, pmon_ID, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                pmon_ID.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pmon_ID.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTC_12_23_FunctionalMonitoringDefinition_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTC_12_23_FunctionalMonitoringDefinition] =
{
    require(codec.base.bitStream.validate_offset_bits(131224L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode fmon_ID */
    val pVal_fmon_ID = TFMON_ID_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 131224L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    val pVal_checkValidityCondition = TC_12_23_FunctionalMonitoringDefinition_checkValidityCondition_Optional_ACN_Decode(codec) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 131192L, 56L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 88L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_checkValidityCondition match {
        case SomeMut(v) =>
            v.size(codec_0_2.base.bitStream.bitIndex)
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode eventDefinition_ID */
    val pVal_eventDefinition_ID = TEventDefinition_ID_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_3.base.bitStream, codec.base.bitStream, 131136L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 120L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    @ghost val codec_0_4 = snapshot(codec)
    val pVal_min_PMON_FailingNumber = TC_12_23_FunctionalMonitoringDefinition_min_PMON_FailingNumber_Optional_ACN_Decode(codec) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_4.base.bitStream, codec.base.bitStream, 131104L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 152L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_3 = pVal_min_PMON_FailingNumber match {
        case SomeMut(v) =>
            32L
        case NoneMut() =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3)
    }
    @ghost val codec_0_5 = snapshot(codec)
    /* Decode TC_12_23_FunctionalMonitoringDefinition_n2 */
    val TC_12_23_FunctionalMonitoringDefinition_n2 = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_5.base.bitStream, codec.base.bitStream, 131072L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 184L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_4 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3 + size_4)
    }
    @ghost val codec_0_6 = snapshot(codec)
    /* Decode pmon_ID */
    val pVal_pmon_ID = TC_12_23_FunctionalMonitoringDefinition_pmon_ID_ACN_Decode(codec, TC_12_23_FunctionalMonitoringDefinition_n2) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 131224L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_5 = pVal_pmon_ID.size(codec_0_6.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3 + size_4 + size_5)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 131224L)
    }
    val pVal = TTC_12_23_FunctionalMonitoringDefinition(pVal_fmon_ID, pVal_checkValidityCondition, pVal_eventDefinition_ID, pVal_min_PMON_FailingNumber, pVal_pmon_ID)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2 + size_3 + size_4 + size_5)
    }

    TTC_12_23_FunctionalMonitoringDefinition_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTC_12_23_FunctionalMonitoringDefinition](l)
        case Right(_) => RightMut[ErrorCode, TTC_12_23_FunctionalMonitoringDefinition](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTC_12_23_FunctionalMonitoringDefinition]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_12_23_FunctionalMonitoringDefinition_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTC_12_23_FunctionalMonitoringDefinition_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTC_12_23_FunctionalMonitoringDefinition]) =
{
    require(codec.base.bitStream.validate_offset_bits(131224L))
    val cpy = snapshot(codec)
    val res = TTC_12_23_FunctionalMonitoringDefinition_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def TC_12_23_FunctionalMonitoringDefinition_checkValidityCondition_Optional_ACN_Decode(codec: ACN): EitherMut[Int, OptionMut[TCheckValidityCondition]] = {
    require(codec.base.bitStream.validate_offset_bits(56L))
    @ghost val oldCdc = snapshot(codec)
    /* Decode checkValidityCondition */
    /* marked as ALWAYS PRESENT */
    val checkValidityCondition: OptionMut[TCheckValidityCondition] =
        val pVal_checkValidityCondition = TCheckValidityCondition_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        SomeMut(pVal_checkValidityCondition)
    RightMut[Int, OptionMut[TCheckValidityCondition]](checkValidityCondition)
}.ensuring { (res: EitherMut[Int, OptionMut[TCheckValidityCondition]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            resVal.isDefined && old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.get.size(old(codec).base.bitStream.bitIndex)
    }
}



@ghost @pure
def TC_12_23_FunctionalMonitoringDefinition_checkValidityCondition_Optional_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[Int, OptionMut[TCheckValidityCondition]]) = {
    require(codec.base.bitStream.validate_offset_bits(56L))
    val cpy = snapshot(codec)
    val res = TC_12_23_FunctionalMonitoringDefinition_checkValidityCondition_Optional_ACN_Decode(cpy)
    (cpy, res)
}



@opaque @inlineOnce
def TC_12_23_FunctionalMonitoringDefinition_min_PMON_FailingNumber_Optional_ACN_Decode(codec: ACN): EitherMut[Int, OptionMut[ULong]] = {
    require(codec.base.bitStream.validate_offset_bits(32L))
    @ghost val oldCdc = snapshot(codec)
    /* Decode min_PMON_FailingNumber */
    /* marked as ALWAYS PRESENT */
    val min_PMON_FailingNumber: OptionMut[TPUSC_UINT32] =
        val pVal_min_PMON_FailingNumber = TPUSC_UINT32_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        SomeMut(pVal_min_PMON_FailingNumber)
    RightMut[Int, OptionMut[ULong]](min_PMON_FailingNumber)
}.ensuring { (res: EitherMut[Int, OptionMut[ULong]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            resVal.isDefined && old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 32L
    }
}



@ghost @pure
def TC_12_23_FunctionalMonitoringDefinition_min_PMON_FailingNumber_Optional_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[Int, OptionMut[ULong]]) = {
    require(codec.base.bitStream.validate_offset_bits(32L))
    val cpy = snapshot(codec)
    val res = TC_12_23_FunctionalMonitoringDefinition_min_PMON_FailingNumber_Optional_ACN_Decode(cpy)
    (cpy, res)
}



@opaque @inlineOnce
def PUS_12_23_TTC_12_23_FunctionalMonitoringDefinition_pmon_ID_pVal_pmon_ID_pmon_ID_Decode_loop(codec: ACN, nCount: Int, pmon_ID: Vector[TPMON_ID], i1: Int): EitherMut[Int, Vector[TPMON_ID]] = {
    require((1 <= nCount) && (nCount <= 4095))
    require((0 <= i1) && (i1 <= nCount))
    require(pmon_ID.size == i1)
    require(codec.base.bitStream.validate_offset_bits((32L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(pmon_ID)
            vecRangesEqSlicedLemma(pmon_ID, pmon_ID, 0, pmon_ID.size, 0, i1)
        }
        RightMut[Int, Vector[TPMON_ID]](pmon_ID)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 32L * (nCount - i1), 32L)
        }
        val pmon_ID_arr_i1_ = TPMON_ID_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(32L * (i1 + 1) == 32L * i1 + 32L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 32L * (nCount - i1), 32L)
            check(codec.base.bitStream.validate_offset_bits(32L * (nCount - (i1 + 1))))
        }
        val res = PUS_12_23_TTC_12_23_FunctionalMonitoringDefinition_pmon_ID_pVal_pmon_ID_pmon_ID_Decode_loop(codec, nCount, pmon_ID.append(pmon_ID_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(pmon_ID, newVec, pmon_ID_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(pmon_ID.append(pmon_ID_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(pmon_ID.list, pmon_ID_arr_i1_, i1)
                    Vector.listApplyEqVecApply(pmon_ID.append(pmon_ID_arr_i1_), i1)
                    check(pmon_ID_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TPMON_ID]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(pmon_ID, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTC_12_23_FunctionalMonitoringDefinition_pmon_ID.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def TC_12_23_FunctionalMonitoringDefinition_pmon_ID_ACN_Decode(codec: ACN, TC_12_23_FunctionalMonitoringDefinition_n2: ULong): EitherMut[Int, TTC_12_23_FunctionalMonitoringDefinition_pmon_ID] = {
    require(codec.base.bitStream.validate_offset_bits(131040L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val pmon_ID =
        if ((ULong.fromRaw(1) <= TC_12_23_FunctionalMonitoringDefinition_n2) && (TC_12_23_FunctionalMonitoringDefinition_n2 <= ULong.fromRaw(4095))) then
            val pmon_ID_nCount = TC_12_23_FunctionalMonitoringDefinition_n2.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val pmon_ID = PUS_12_23_TTC_12_23_FunctionalMonitoringDefinition_pmon_ID_pVal_pmon_ID_pmon_ID_Decode_loop(codec, pmon_ID_nCount, Vector.empty[TPMON_ID], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val pmon_ID = TTC_12_23_FunctionalMonitoringDefinition_pmon_ID(pmon_ID_nCount, bdg)
                    ghostExpr {
                        pmon_ID.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    pmon_ID
            }
            pmon_ID
        else return LeftMut(ERR_ACN_DECODE_TC_12_23_FUNCTIONALMONITORINGDEFINITION_PMON_ID)
    TTC_12_23_FunctionalMonitoringDefinition_pmon_ID_IsConstraintValid(pmon_ID) match {
        case Left(l) =>
            LeftMut[Int, TTC_12_23_FunctionalMonitoringDefinition_pmon_ID](l)
        case Right(_) =>
            RightMut[Int, TTC_12_23_FunctionalMonitoringDefinition_pmon_ID](pmon_ID)
    }
}.ensuring { (res: EitherMut[Int, TTC_12_23_FunctionalMonitoringDefinition_pmon_ID]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_12_23_FunctionalMonitoringDefinition_pmon_ID_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TC_12_23_FunctionalMonitoringDefinition_pmon_ID_ACN_Decode_pure(codec: ACN, TC_12_23_FunctionalMonitoringDefinition_n2: ULong): (ACN, EitherMut[Int, TTC_12_23_FunctionalMonitoringDefinition_pmon_ID]) = {
    require(codec.base.bitStream.validate_offset_bits(131040L))
    val cpy = snapshot(codec)
    val res = TC_12_23_FunctionalMonitoringDefinition_pmon_ID_ACN_Decode(cpy, TC_12_23_FunctionalMonitoringDefinition_n2)
    (cpy, res)
}

def TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions_IsConstraintValid(pVal: TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    var i1: Int = 0
    ret = ((1 <= pVal.nCount) && (pVal.nCount <= 4095)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    if ret.isRight then
        i1 = 0
        (while(i1 < pVal.nCount && ret.isRight) {
            decreases(pVal.nCount - i1)
            ret = TTC_12_23_FunctionalMonitoringDefinition_IsConstraintValid(pVal.arr(i1))
            i1 = i1 + 1
        }).invariant(0 <= i1 && i1 <= pVal.nCount)
    ret
}

def TTC_12_23_AddFunctionalMonitoringDefinition_IsConstraintValid(pVal: TTC_12_23_AddFunctionalMonitoringDefinition): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions_IsConstraintValid(pVal.functionalMonitoringDefinitions)
    ret
}

def TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions_Initialize(): TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions = TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions(1, Vector.fill(4095)(TTC_12_23_FunctionalMonitoringDefinition_Initialize()))
def TTC_12_23_AddFunctionalMonitoringDefinition_Initialize(): TTC_12_23_AddFunctionalMonitoringDefinition = TTC_12_23_AddFunctionalMonitoringDefinition(functionalMonitoringDefinitions = TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions_Initialize())

@opaque @inlineOnce 
def TTC_12_23_AddFunctionalMonitoringDefinition_ACN_Encode(pVal: TTC_12_23_AddFunctionalMonitoringDefinition, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(537362312L))
    var i1: Int = 0
    TTC_12_23_AddFunctionalMonitoringDefinition_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val TC_12_23_AddFunctionalMonitoringDefinition_n1 = ULong.fromRaw(pVal.functionalMonitoringDefinitions.nCount)
    if TC_12_23_AddFunctionalMonitoringDefinition_n1 < ULong.fromRaw(1) || TC_12_23_AddFunctionalMonitoringDefinition_n1 > ULong.fromRaw(4095) then
        return Left(860)
    /* Encode TC_12_23_AddFunctionalMonitoringDefinition_n1 */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(4294967295L))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(TC_12_23_AddFunctionalMonitoringDefinition_n1)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(TC_12_23_AddFunctionalMonitoringDefinition_n1)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 537362312L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode functionalMonitoringDefinitions */
    TC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions_ACN_Encode(codec, pVal, TC_12_23_AddFunctionalMonitoringDefinition_n1, pVal.functionalMonitoringDefinitions) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 537362312L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = pVal.functionalMonitoringDefinitions.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 537362312L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def PUS_12_23_TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions_pVal_functionalMonitoringDefinitions_functionalMonitoringDefinitions_Encode_loop(codec: ACN, functionalMonitoringDefinitions: TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions, i1: Int): Either[Int, Int] = {
    require((0 <= i1) && (i1 <= functionalMonitoringDefinitions.nCount))
    require((1 <= functionalMonitoringDefinitions.nCount) && (functionalMonitoringDefinitions.nCount <= functionalMonitoringDefinitions.arr.size) && (functionalMonitoringDefinitions.arr.size <= 4095))
    require(codec.base.bitStream.validate_offset_bits((131224L * (functionalMonitoringDefinitions.nCount - i1))))
    decreases(functionalMonitoringDefinitions.nCount - i1)
    if (i1 == functionalMonitoringDefinitions.nCount) {
        Right[Int, Int](0)
    } else {
        @ghost val codecSnap1 = snapshot(codec)
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 131224L * (functionalMonitoringDefinitions.nCount - i1), 131224L)
        }
        TTC_12_23_FunctionalMonitoringDefinition_ACN_Encode(functionalMonitoringDefinitions.arr(i1), codec, false) match // uper:6
            case Right(_) =>
            case Left(err) => return Left(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(131224L * (i1 + 1) == 131224L * i1 + 131224L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 131224L * (functionalMonitoringDefinitions.nCount - i1), 131224L)
            check(codec.base.bitStream.validate_offset_bits(131224L * (functionalMonitoringDefinitions.nCount - (i1 + 1))))
        }
        val res = PUS_12_23_TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions_pVal_functionalMonitoringDefinitions_functionalMonitoringDefinitions_Encode_loop(codec, functionalMonitoringDefinitions, i1 + 1)
        ghostExpr {
            (res match {
                case Left(_) =>
                    ()
                case Right(_) =>
                    assert(codec.base.bitStream.bitIndex == codecSnap2.base.bitStream.bitIndex + TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions.sizeRange(functionalMonitoringDefinitions.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, functionalMonitoringDefinitions.nCount))
                    assert(codecSnap2.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + functionalMonitoringDefinitions.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex))
                    assert(TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions.sizeRange(functionalMonitoringDefinitions.arr, codecSnap1.base.bitStream.bitIndex, i1, functionalMonitoringDefinitions.nCount) == functionalMonitoringDefinitions.arr.apply(i1).size(codecSnap1.base.bitStream.bitIndex) + TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions.sizeRange(functionalMonitoringDefinitions.arr, codecSnap2.base.bitStream.bitIndex, i1 + 1, functionalMonitoringDefinitions.nCount))
                    check(codec.base.bitStream.bitIndex == codecSnap1.base.bitStream.bitIndex + TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions.sizeRange(functionalMonitoringDefinitions.arr, codecSnap1.base.bitStream.bitIndex, i1, functionalMonitoringDefinitions.nCount))
            })
        }
        res
    }
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(res) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions.sizeRange(functionalMonitoringDefinitions.arr, old(codec).base.bitStream.bitIndex, i1, functionalMonitoringDefinitions.nCount)
    }
}



@opaque @inlineOnce
def TC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions_ACN_Encode(codec: ACN, pVal: TTC_12_23_AddFunctionalMonitoringDefinition, TC_12_23_AddFunctionalMonitoringDefinition_n1: ULong, functionalMonitoringDefinitions: TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(537362280L))
    @ghost val oldCdc = snapshot(codec)
    TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions_IsConstraintValid(functionalMonitoringDefinitions) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    @ghost val codec_0_1 = snapshot(codec)
    @ghost val codecBeforeLoop_0 = snapshot(codec)
    PUS_12_23_TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions_pVal_functionalMonitoringDefinitions_functionalMonitoringDefinitions_Encode_loop(codec, functionalMonitoringDefinitions, 0) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
            ghostExpr {
                functionalMonitoringDefinitions.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
            }
    }
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + functionalMonitoringDefinitions.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTC_12_23_AddFunctionalMonitoringDefinition_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTC_12_23_AddFunctionalMonitoringDefinition] =
{
    require(codec.base.bitStream.validate_offset_bits(537362312L))
    var i1: Int = 0

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode TC_12_23_AddFunctionalMonitoringDefinition_n1 */
    val TC_12_23_AddFunctionalMonitoringDefinition_n1 = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 537362312L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode functionalMonitoringDefinitions */
    val pVal_functionalMonitoringDefinitions = TC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions_ACN_Decode(codec, TC_12_23_AddFunctionalMonitoringDefinition_n1) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 537362312L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = pVal_functionalMonitoringDefinitions.size(codec_0_2.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 537362312L)
    }
    val pVal = TTC_12_23_AddFunctionalMonitoringDefinition(pVal_functionalMonitoringDefinitions)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }

    TTC_12_23_AddFunctionalMonitoringDefinition_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTC_12_23_AddFunctionalMonitoringDefinition](l)
        case Right(_) => RightMut[ErrorCode, TTC_12_23_AddFunctionalMonitoringDefinition](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTC_12_23_AddFunctionalMonitoringDefinition]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_12_23_AddFunctionalMonitoringDefinition_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTC_12_23_AddFunctionalMonitoringDefinition_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTC_12_23_AddFunctionalMonitoringDefinition]) =
{
    require(codec.base.bitStream.validate_offset_bits(537362312L))
    val cpy = snapshot(codec)
    val res = TTC_12_23_AddFunctionalMonitoringDefinition_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def PUS_12_23_TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions_pVal_functionalMonitoringDefinitions_functionalMonitoringDefinitions_Decode_loop(codec: ACN, nCount: Int, functionalMonitoringDefinitions: Vector[TTC_12_23_FunctionalMonitoringDefinition], i1: Int): EitherMut[Int, Vector[TTC_12_23_FunctionalMonitoringDefinition]] = {
    require((1 <= nCount) && (nCount <= 4095))
    require((0 <= i1) && (i1 <= nCount))
    require(functionalMonitoringDefinitions.size == i1)
    require(codec.base.bitStream.validate_offset_bits((131224L * (nCount - i1))))
    decreases(nCount - i1)
    @ghost val codecSnap1 = snapshot(codec)
    (if (i1 == nCount) {
        ghostExpr {
            vecRangesEqReflexiveLemma(functionalMonitoringDefinitions)
            vecRangesEqSlicedLemma(functionalMonitoringDefinitions, functionalMonitoringDefinitions, 0, functionalMonitoringDefinitions.size, 0, i1)
        }
        RightMut[Int, Vector[TTC_12_23_FunctionalMonitoringDefinition]](functionalMonitoringDefinitions)
    } else {
        ghostExpr {
            BitStream.validateOffsetBitsWeakeningLemma(codec.base.bitStream, 131224L * (nCount - i1), 131224L)
        }
        val functionalMonitoringDefinitions_arr_i1_ = TTC_12_23_FunctionalMonitoringDefinition_ACN_Decode(codec) match // uper:13
            case RightMut(decData) => decData
            case LeftMut(err) => return LeftMut(err)
        @ghost val codecSnap2 = snapshot(codec)
        ghostExpr {
            check(131224L * (i1 + 1) == 131224L * i1 + 131224L)
            BitStream.validateOffsetBitsIneqLemma(codecSnap1.base.bitStream, codec.base.bitStream, 131224L * (nCount - i1), 131224L)
            check(codec.base.bitStream.validate_offset_bits(131224L * (nCount - (i1 + 1))))
        }
        val res = PUS_12_23_TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions_pVal_functionalMonitoringDefinitions_functionalMonitoringDefinitions_Decode_loop(codec, nCount, functionalMonitoringDefinitions.append(functionalMonitoringDefinitions_arr_i1_), i1 + 1)
        ghostExpr {
            (res match {
                case LeftMut(_) =>
                    ()
                case RightMut(newVec) =>
                    vecRangesAppendDropEq(functionalMonitoringDefinitions, newVec, functionalMonitoringDefinitions_arr_i1_, 0, i1)
                    vecRangesEqImpliesEq(functionalMonitoringDefinitions.append(functionalMonitoringDefinitions_arr_i1_), newVec, 0, i1, i1 + 1)
                    ListSpecs.isnocIndex(functionalMonitoringDefinitions.list, functionalMonitoringDefinitions_arr_i1_, i1)
                    Vector.listApplyEqVecApply(functionalMonitoringDefinitions.append(functionalMonitoringDefinitions_arr_i1_), i1)
                    check(functionalMonitoringDefinitions_arr_i1_ == newVec.apply(i1))
            })
        }
        res
    })
}.ensuring { (res: EitherMut[Int, Vector[TTC_12_23_FunctionalMonitoringDefinition]]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(newVec) =>
            old(codec).base.buf == codec.base.buf && newVec.size == nCount && vecRangesEq(functionalMonitoringDefinitions, newVec, 0, i1) && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions.sizeRange(newVec, old(codec).base.bitStream.bitIndex, i1, nCount)
    }
}



@opaque @inlineOnce
def TC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions_ACN_Decode(codec: ACN, TC_12_23_AddFunctionalMonitoringDefinition_n1: ULong): EitherMut[Int, TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions] = {
    require(codec.base.bitStream.validate_offset_bits(537362280L))
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val functionalMonitoringDefinitions =
        if ((ULong.fromRaw(1) <= TC_12_23_AddFunctionalMonitoringDefinition_n1) && (TC_12_23_AddFunctionalMonitoringDefinition_n1 <= ULong.fromRaw(4095))) then
            val functionalMonitoringDefinitions_nCount = TC_12_23_AddFunctionalMonitoringDefinition_n1.toRaw.toInt
            @ghost val codecBeforeLoop_0 = snapshot(codec)
            val functionalMonitoringDefinitions = PUS_12_23_TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions_pVal_functionalMonitoringDefinitions_functionalMonitoringDefinitions_Decode_loop(codec, functionalMonitoringDefinitions_nCount, Vector.empty[TTC_12_23_FunctionalMonitoringDefinition], 0) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(bdg) =>
                    val functionalMonitoringDefinitions = TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions(functionalMonitoringDefinitions_nCount, bdg)
                    ghostExpr {
                        functionalMonitoringDefinitions.sizeLemmaAnyOffset(codecBeforeLoop_0.base.bitStream.bitIndex, oldCdc.base.bitStream.bitIndex)
                    }
                    functionalMonitoringDefinitions
            }
            functionalMonitoringDefinitions
        else return LeftMut(ERR_ACN_DECODE_TC_12_23_ADDFUNCTIONALMONITORINGDEFINITION_FUNCTIONALMONITORINGDEFINITIONS)
    TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions_IsConstraintValid(functionalMonitoringDefinitions) match {
        case Left(l) =>
            LeftMut[Int, TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions](l)
        case Right(_) =>
            RightMut[Int, TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions](functionalMonitoringDefinitions)
    }
}.ensuring { (res: EitherMut[Int, TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions_ACN_Decode_pure(codec: ACN, TC_12_23_AddFunctionalMonitoringDefinition_n1: ULong): (ACN, EitherMut[Int, TTC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions]) = {
    require(codec.base.bitStream.validate_offset_bits(537362280L))
    val cpy = snapshot(codec)
    val res = TC_12_23_AddFunctionalMonitoringDefinition_functionalMonitoringDefinitions_ACN_Decode(cpy, TC_12_23_AddFunctionalMonitoringDefinition_n1)
    (cpy, res)
}