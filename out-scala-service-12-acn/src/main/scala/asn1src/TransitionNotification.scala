/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._


def TTransitionNotification_IsConstraintValid(pVal: TTransitionNotification): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TPMON_ExpectedValueCheckMask_IsConstraintValid(pVal.expectedValueCheckMask)
    if ret.isRight then
        ret = TPMON_ParameterValue_IsConstraintValid(pVal.parameterValue)
        if ret.isRight then
            ret = TPMON_LimitCrossed_IsConstraintValid(pVal.limitCrossed)
            if ret.isRight then
                ret = TPMON_CheckingStatus_IsConstraintValid(pVal.previous_PMON_CheckingStatus)
                if ret.isRight then
                    ret = TPMON_CheckingStatus_IsConstraintValid(pVal.current_PMON_CheckingStatus)
                    if ret.isRight then
                        ret = TCDS_AbsoluteTime_PFC_2_IsConstraintValid(pVal.transitionTime)
    ret
}

def TTransitionNotification_Initialize(): TTransitionNotification = TTransitionNotification(expectedValueCheckMask = TPMON_ExpectedValueCheckMask_Initialize(), parameterValue = TPMON_ParameterValue_Initialize(), limitCrossed = TPMON_LimitCrossed_Initialize(), previous_PMON_CheckingStatus = TPMON_CheckingStatus_Initialize(), current_PMON_CheckingStatus = TPMON_CheckingStatus_Initialize(), transitionTime = TCDS_AbsoluteTime_PFC_2_Initialize())

@opaque @inlineOnce 
def TTransitionNotification_ACN_Encode(pVal: TTransitionNotification, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(375L))
    TTransitionNotification_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    val TransitionNotification_pmon_ID = {

        val TransitionNotification_pmon_ID00 = pVal.limitCrossed match
            case TPMON_LimitCrossed.PMON_LimitCrossed_param0_PRESENT(_) =>TPMON_ID.Tparam0

        val TransitionNotification_pmon_ID01 = pVal.parameterValue match
            case TPMON_ParameterValue.PMON_ParameterValue_param0_PRESENT(_) =>TPMON_ID.Tparam0

        val TransitionNotification_pmon_ID02 =
            if pVal.expectedValueCheckMask.isInstanceOf[TPMON_ExpectedValueCheckMask.PMON_ExpectedValueCheckMask_expectedValueChecking_PRESENT] then
                val expectedValueChecking = pVal.expectedValueCheckMask.asInstanceOf[TPMON_ExpectedValueCheckMask.PMON_ExpectedValueCheckMask_expectedValueChecking_PRESENT].expectedValueChecking
                val TransitionNotification_pmon_ID02 = expectedValueChecking match
                    case TPMON_Mask.PMON_Mask_param0_PRESENT(_) =>TPMON_ID.Tparam0

                TransitionNotification_pmon_ID02
            else TPMON_ID.Tparam0

        val TransitionNotification_pmon_ID = TransitionNotification_pmon_ID00


        if !((TransitionNotification_pmon_ID == TransitionNotification_pmon_ID00) && (TransitionNotification_pmon_ID == TransitionNotification_pmon_ID01) && (TransitionNotification_pmon_ID == TransitionNotification_pmon_ID02)) then
            return Left(998)
        TransitionNotification_pmon_ID
    }
    /* Encode TransitionNotification_pmon_ID */
    val intVal_TransitionNotification_pmon_ID = TransitionNotification_pmon_ID match
        case TPMON_ID.Tparam0 => ULong.fromRaw(0L)

    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(0))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 4294967295L)
            bitCountLemma(intVal_TransitionNotification_pmon_ID)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_32(intVal_TransitionNotification_pmon_ID)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 375L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    val TransitionNotification_checkType = {

        val TransitionNotification_checkType00 = pVal.current_PMON_CheckingStatus match
            case TPMON_CheckingStatus.PMON_CheckingStatus_expectedValueChecking_PRESENT(_) =>TPMON_CheckType.TexpectedValueChecking
            case TPMON_CheckingStatus.PMON_CheckingStatus_limitChecking_PRESENT(_) =>TPMON_CheckType.TlimitChecking
            case TPMON_CheckingStatus.PMON_CheckingStatus_deltaChecking_PRESENT(_) =>TPMON_CheckType.TdeltaChecking

        val TransitionNotification_checkType01 = pVal.previous_PMON_CheckingStatus match
            case TPMON_CheckingStatus.PMON_CheckingStatus_expectedValueChecking_PRESENT(_) =>TPMON_CheckType.TexpectedValueChecking
            case TPMON_CheckingStatus.PMON_CheckingStatus_limitChecking_PRESENT(_) =>TPMON_CheckType.TlimitChecking
            case TPMON_CheckingStatus.PMON_CheckingStatus_deltaChecking_PRESENT(_) =>TPMON_CheckType.TdeltaChecking

        val TransitionNotification_checkType02 = pVal.expectedValueCheckMask match
            case TPMON_ExpectedValueCheckMask.PMON_ExpectedValueCheckMask_expectedValueChecking_PRESENT(_) =>TPMON_CheckType.TexpectedValueChecking
            case TPMON_ExpectedValueCheckMask.PMON_ExpectedValueCheckMask_limitChecking_PRESENT(_) =>TPMON_CheckType.TlimitChecking
            case TPMON_ExpectedValueCheckMask.PMON_ExpectedValueCheckMask_deltaChecking_PRESENT(_) =>TPMON_CheckType.TdeltaChecking


        val TransitionNotification_checkType = TransitionNotification_checkType00


        if !((TransitionNotification_checkType == TransitionNotification_checkType00) && (TransitionNotification_checkType == TransitionNotification_checkType01) && (TransitionNotification_checkType == TransitionNotification_checkType02)) then
            return Left(998)
        TransitionNotification_checkType
    }
    /* Encode TransitionNotification_checkType */
    val intVal_TransitionNotification_checkType = TransitionNotification_checkType match
        case TPMON_CheckType.TexpectedValueChecking => ULong.fromRaw(0L)
        case TPMON_CheckType.TlimitChecking => ULong.fromRaw(1L)
        case TPMON_CheckType.TdeltaChecking => ULong.fromRaw(2L)

    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(2))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 2)
            bitCountLemma(intVal_TransitionNotification_checkType)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize(intVal_TransitionNotification_checkType, 2)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 343L, 2L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 34L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 2L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Encode expectedValueCheckMask */
    TransitionNotification_expectedValueCheckMask_ACN_Encode(codec, pVal, TransitionNotification_checkType, TransitionNotification_pmon_ID, pVal.expectedValueCheckMask) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_3.base.bitStream, codec.base.bitStream, 341L, 255L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 289L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_2 = pVal.expectedValueCheckMask match {
        case TPMON_ExpectedValueCheckMask.PMON_ExpectedValueCheckMask_expectedValueChecking_PRESENT(expectedValueChecking) =>
            expectedValueChecking match {
                case TPMON_Mask.PMON_Mask_param0_PRESENT(param0) =>
                    255L
            }
        case TPMON_ExpectedValueCheckMask.PMON_ExpectedValueCheckMask_limitChecking_PRESENT(limitChecking) =>
            0L
        case TPMON_ExpectedValueCheckMask.PMON_ExpectedValueCheckMask_deltaChecking_PRESENT(deltaChecking) =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    @ghost val codec_0_4 = snapshot(codec)
    /* Encode parameterValue */
    TransitionNotification_parameterValue_ACN_Encode(codec, pVal, TransitionNotification_pmon_ID, pVal.parameterValue) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_4.base.bitStream, codec.base.bitStream, 86L, 8L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 297L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_3 = pVal.parameterValue match {
        case TPMON_ParameterValue.PMON_ParameterValue_param0_PRESENT(param0) =>
            8L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3)
    }
    @ghost val codec_0_5 = snapshot(codec)
    /* Encode limitCrossed */
    TransitionNotification_limitCrossed_ACN_Encode(codec, pVal, TransitionNotification_pmon_ID, pVal.limitCrossed) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_5.base.bitStream, codec.base.bitStream, 78L, 8L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 305L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_4 = pVal.limitCrossed match {
        case TPMON_LimitCrossed.PMON_LimitCrossed_param0_PRESENT(param0) =>
            8L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3 + size_4)
    }
    @ghost val codec_0_6 = snapshot(codec)
    /* Encode previous_PMON_CheckingStatus */
    TransitionNotification_previous_PMON_CheckingStatus_ACN_Encode(codec, pVal, TransitionNotification_checkType, pVal.previous_PMON_CheckingStatus) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_6.base.bitStream, codec.base.bitStream, 70L, 3L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 308L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_5 = pVal.previous_PMON_CheckingStatus match {
        case TPMON_CheckingStatus.PMON_CheckingStatus_expectedValueChecking_PRESENT(expectedValueChecking) =>
            2L
        case TPMON_CheckingStatus.PMON_CheckingStatus_limitChecking_PRESENT(limitChecking) =>
            3L
        case TPMON_CheckingStatus.PMON_CheckingStatus_deltaChecking_PRESENT(deltaChecking) =>
            3L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3 + size_4 + size_5)
    }
    @ghost val codec_0_7 = snapshot(codec)
    /* Encode current_PMON_CheckingStatus */
    TransitionNotification_current_PMON_CheckingStatus_ACN_Encode(codec, pVal, TransitionNotification_checkType, pVal.current_PMON_CheckingStatus) match {
        case Left(l) =>
            return Left(l)
        case Right(_) =>
            ()
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_7.base.bitStream, codec.base.bitStream, 67L, 3L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 311L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_6 = pVal.current_PMON_CheckingStatus match {
        case TPMON_CheckingStatus.PMON_CheckingStatus_expectedValueChecking_PRESENT(expectedValueChecking) =>
            2L
        case TPMON_CheckingStatus.PMON_CheckingStatus_limitChecking_PRESENT(limitChecking) =>
            3L
        case TPMON_CheckingStatus.PMON_CheckingStatus_deltaChecking_PRESENT(deltaChecking) =>
            3L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3 + size_4 + size_5 + size_6)
    }
    @ghost val codec_0_8 = snapshot(codec)
    /* Encode transitionTime */
    TCDS_AbsoluteTime_PFC_2_ACN_Encode(pVal.transitionTime, codec, false) match // uper:6
        case Right(_) =>
        case Left(err) => return Left(err)
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 375L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_7 = pVal.transitionTime.size(codec_0_8.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3 + size_4 + size_5 + size_6 + size_7)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 375L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2 + size_3 + size_4 + size_5 + size_6 + size_7)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TransitionNotification_expectedValueCheckMask_expectedValueChecking_ACN_Encode(codec: ACN, pVal: TTransitionNotification, TransitionNotification_pmon_ID: TPMON_ID, expectedValueChecking: TPMON_Mask): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(255L))
    @ghost val oldCdc = snapshot(codec)
    TPMON_Mask_IsConstraintValid(expectedValueChecking) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    expectedValueChecking match
        case TPMON_Mask.PMON_Mask_param0_PRESENT(param0) =>
            assert(255.toInt >= 0) // overflow may happen during cast
            codec.base.bitStream.appendBitsMSBFirstVec(param0.arr, 255.toInt)
    
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + expectedValueChecking.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TransitionNotification_expectedValueCheckMask_ACN_Encode(codec: ACN, pVal: TTransitionNotification, TransitionNotification_checkType: TPMON_CheckType, TransitionNotification_pmon_ID: TPMON_ID, expectedValueCheckMask: TPMON_ExpectedValueCheckMask): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(255L))
    @ghost val oldCdc = snapshot(codec)
    TPMON_ExpectedValueCheckMask_IsConstraintValid(expectedValueCheckMask) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    expectedValueCheckMask match
        case TPMON_ExpectedValueCheckMask.PMON_ExpectedValueCheckMask_expectedValueChecking_PRESENT(expectedValueChecking) =>
            TransitionNotification_expectedValueCheckMask_expectedValueChecking_ACN_Encode(codec, pVal, TransitionNotification_pmon_ID, expectedValueChecking) match {
                case Left(l) =>
                    return Left(l)
                case Right(_) =>
                    ()
            }
        case TPMON_ExpectedValueCheckMask.PMON_ExpectedValueCheckMask_limitChecking_PRESENT(limitChecking) =>
    
        case TPMON_ExpectedValueCheckMask.PMON_ExpectedValueCheckMask_deltaChecking_PRESENT(deltaChecking) =>
    
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + expectedValueCheckMask.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TransitionNotification_parameterValue_ACN_Encode(codec: ACN, pVal: TTransitionNotification, TransitionNotification_pmon_ID: TPMON_ID, parameterValue: TPMON_ParameterValue): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(8L))
    @ghost val oldCdc = snapshot(codec)
    TPMON_ParameterValue_IsConstraintValid(parameterValue) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    parameterValue match
        case TPMON_ParameterValue.PMON_ParameterValue_param0_PRESENT(param0) =>
            locally {
                ghostExpr {
                    @opaque @inlineOnce
                    def bitCountLemma(): Unit = ().ensuring(_ => GetBitCountUnsigned(ULong.fromRaw(255) - ULong.fromRaw(0)) == 8)
                    bitCountLemma()
                }
            }
            codec.base.encodeConstrainedPosWholeNumber(param0, 0.toRawULong, 255.toRawULong)
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + parameterValue.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TransitionNotification_limitCrossed_ACN_Encode(codec: ACN, pVal: TTransitionNotification, TransitionNotification_pmon_ID: TPMON_ID, limitCrossed: TPMON_LimitCrossed): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(8L))
    @ghost val oldCdc = snapshot(codec)
    TPMON_LimitCrossed_IsConstraintValid(limitCrossed) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    limitCrossed match
        case TPMON_LimitCrossed.PMON_LimitCrossed_param0_PRESENT(param0) =>
            locally {
                ghostExpr {
                    @opaque @inlineOnce
                    def bitCountLemma(): Unit = ().ensuring(_ => GetBitCountUnsigned(ULong.fromRaw(255) - ULong.fromRaw(0)) == 8)
                    bitCountLemma()
                }
            }
            codec.base.encodeConstrainedPosWholeNumber(param0, 0.toRawULong, 255.toRawULong)
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + limitCrossed.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TransitionNotification_previous_PMON_CheckingStatus_ACN_Encode(codec: ACN, pVal: TTransitionNotification, TransitionNotification_checkType: TPMON_CheckType, previous_PMON_CheckingStatus: TPMON_CheckingStatus): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(3L))
    @ghost val oldCdc = snapshot(codec)
    TPMON_CheckingStatus_IsConstraintValid(previous_PMON_CheckingStatus) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    previous_PMON_CheckingStatus match
        case TPMON_CheckingStatus.PMON_CheckingStatus_expectedValueChecking_PRESENT(expectedValueChecking) =>
            TCheckingStatusForExpectedValueChecking_ACN_Encode(expectedValueChecking, codec, false) match // uper:6
                case Right(_) =>
                case Left(err) => return Left(err)
        case TPMON_CheckingStatus.PMON_CheckingStatus_limitChecking_PRESENT(limitChecking) =>
            TCheckingStatusForLimitChecking_ACN_Encode(limitChecking, codec, false) match // uper:6
                case Right(_) =>
                case Left(err) => return Left(err)
        case TPMON_CheckingStatus.PMON_CheckingStatus_deltaChecking_PRESENT(deltaChecking) =>
            TCheckingStatusForDeltaChecking_ACN_Encode(deltaChecking, codec, false) match // uper:6
                case Right(_) =>
                case Left(err) => return Left(err)
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + previous_PMON_CheckingStatus.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce
def TransitionNotification_current_PMON_CheckingStatus_ACN_Encode(codec: ACN, pVal: TTransitionNotification, TransitionNotification_checkType: TPMON_CheckType, current_PMON_CheckingStatus: TPMON_CheckingStatus): Either[Int, Int] = {
    require(codec.base.bitStream.validate_offset_bits(3L))
    @ghost val oldCdc = snapshot(codec)
    TPMON_CheckingStatus_IsConstraintValid(current_PMON_CheckingStatus) match {
        case Left(l) =>
            return Left[Int, Int](l)
        case Right(_) =>
    }
    current_PMON_CheckingStatus match
        case TPMON_CheckingStatus.PMON_CheckingStatus_expectedValueChecking_PRESENT(expectedValueChecking) =>
            TCheckingStatusForExpectedValueChecking_ACN_Encode(expectedValueChecking, codec, false) match // uper:6
                case Right(_) =>
                case Left(err) => return Left(err)
        case TPMON_CheckingStatus.PMON_CheckingStatus_limitChecking_PRESENT(limitChecking) =>
            TCheckingStatusForLimitChecking_ACN_Encode(limitChecking, codec, false) match // uper:6
                case Right(_) =>
                case Left(err) => return Left(err)
        case TPMON_CheckingStatus.PMON_CheckingStatus_deltaChecking_PRESENT(deltaChecking) =>
            TCheckingStatusForDeltaChecking_ACN_Encode(deltaChecking, codec, false) match // uper:6
                case Right(_) =>
                case Left(err) => return Left(err)
    Right[Int, Int](0)
}.ensuring { (res: Either[Int, Int]) => 
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + current_PMON_CheckingStatus.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TTransitionNotification_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TTransitionNotification] =
{
    require(codec.base.bitStream.validate_offset_bits(375L))

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode TransitionNotification_pmon_ID */
    val intVal_TransitionNotification_pmon_ID = codec.dec_Int_PositiveInteger_ConstSize_big_endian_32()

    val TransitionNotification_pmon_ID = intVal_TransitionNotification_pmon_ID.toRaw match
        case 0 => TPMON_ID.Tparam0
        case _ => return LeftMut(ERR_ACN_DECODE_TRANSITIONNOTIFICATION_PMON_ID)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 375L, 32L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 32L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 32L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode TransitionNotification_checkType */
    val intVal_TransitionNotification_checkType = codec.dec_Int_PositiveInteger_ConstSize(2)

    val TransitionNotification_checkType = intVal_TransitionNotification_checkType.toRaw match
        case 0 => TPMON_CheckType.TexpectedValueChecking
        case 1 => TPMON_CheckType.TlimitChecking
        case 2 => TPMON_CheckType.TdeltaChecking
        case _ => return LeftMut(ERR_ACN_DECODE_TRANSITIONNOTIFICATION_CHECKTYPE)
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_2.base.bitStream, codec.base.bitStream, 343L, 2L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 34L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 2L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    @ghost val codec_0_3 = snapshot(codec)
    /* Decode expectedValueCheckMask */
    val pVal_expectedValueCheckMask = TransitionNotification_expectedValueCheckMask_ACN_Decode(codec, TransitionNotification_checkType, TransitionNotification_pmon_ID) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_3.base.bitStream, codec.base.bitStream, 341L, 255L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 289L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_2 = pVal_expectedValueCheckMask match {
        case TPMON_ExpectedValueCheckMask.PMON_ExpectedValueCheckMask_expectedValueChecking_PRESENT(expectedValueChecking) =>
            expectedValueChecking match {
                case TPMON_Mask.PMON_Mask_param0_PRESENT(param0) =>
                    255L
            }
        case TPMON_ExpectedValueCheckMask.PMON_ExpectedValueCheckMask_limitChecking_PRESENT(limitChecking) =>
            0L
        case TPMON_ExpectedValueCheckMask.PMON_ExpectedValueCheckMask_deltaChecking_PRESENT(deltaChecking) =>
            0L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2)
    }
    @ghost val codec_0_4 = snapshot(codec)
    /* Decode parameterValue */
    val pVal_parameterValue = TransitionNotification_parameterValue_ACN_Decode(codec, TransitionNotification_pmon_ID) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_4.base.bitStream, codec.base.bitStream, 86L, 8L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 297L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_3 = pVal_parameterValue match {
        case TPMON_ParameterValue.PMON_ParameterValue_param0_PRESENT(param0) =>
            8L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3)
    }
    @ghost val codec_0_5 = snapshot(codec)
    /* Decode limitCrossed */
    val pVal_limitCrossed = TransitionNotification_limitCrossed_ACN_Decode(codec, TransitionNotification_pmon_ID) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_5.base.bitStream, codec.base.bitStream, 78L, 8L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 305L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_4 = pVal_limitCrossed match {
        case TPMON_LimitCrossed.PMON_LimitCrossed_param0_PRESENT(param0) =>
            8L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3 + size_4)
    }
    @ghost val codec_0_6 = snapshot(codec)
    /* Decode previous_PMON_CheckingStatus */
    val pVal_previous_PMON_CheckingStatus = TransitionNotification_previous_PMON_CheckingStatus_ACN_Decode(codec, TransitionNotification_checkType) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_6.base.bitStream, codec.base.bitStream, 70L, 3L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 308L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_5 = pVal_previous_PMON_CheckingStatus match {
        case TPMON_CheckingStatus.PMON_CheckingStatus_expectedValueChecking_PRESENT(expectedValueChecking) =>
            2L
        case TPMON_CheckingStatus.PMON_CheckingStatus_limitChecking_PRESENT(limitChecking) =>
            3L
        case TPMON_CheckingStatus.PMON_CheckingStatus_deltaChecking_PRESENT(deltaChecking) =>
            3L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3 + size_4 + size_5)
    }
    @ghost val codec_0_7 = snapshot(codec)
    /* Decode current_PMON_CheckingStatus */
    val pVal_current_PMON_CheckingStatus = TransitionNotification_current_PMON_CheckingStatus_ACN_Decode(codec, TransitionNotification_checkType) match {
        case LeftMut(l) =>
            return LeftMut(l)
        case RightMut(v) =>
            v
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_7.base.bitStream, codec.base.bitStream, 67L, 3L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 311L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_6 = pVal_current_PMON_CheckingStatus match {
        case TPMON_CheckingStatus.PMON_CheckingStatus_expectedValueChecking_PRESENT(expectedValueChecking) =>
            2L
        case TPMON_CheckingStatus.PMON_CheckingStatus_limitChecking_PRESENT(limitChecking) =>
            3L
        case TPMON_CheckingStatus.PMON_CheckingStatus_deltaChecking_PRESENT(deltaChecking) =>
            3L
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3 + size_4 + size_5 + size_6)
    }
    @ghost val codec_0_8 = snapshot(codec)
    /* Decode transitionTime */
    val pVal_transitionTime = TCDS_AbsoluteTime_PFC_2_ACN_Decode(codec) match // uper:13
        case RightMut(decData) => decData
        case LeftMut(err) => return LeftMut(err)
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 375L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_7 = pVal_transitionTime.size(codec_0_8.base.bitStream.bitIndex)
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1 + size_2 + size_3 + size_4 + size_5 + size_6 + size_7)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 375L)
    }
    val pVal = TTransitionNotification(pVal_expectedValueCheckMask, pVal_parameterValue, pVal_limitCrossed, pVal_previous_PMON_CheckingStatus, pVal_current_PMON_CheckingStatus, pVal_transitionTime)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1 + size_2 + size_3 + size_4 + size_5 + size_6 + size_7)
    }

    TTransitionNotification_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TTransitionNotification](l)
        case Right(_) => RightMut[ErrorCode, TTransitionNotification](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TTransitionNotification]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TTransitionNotification_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TTransitionNotification_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TTransitionNotification]) =
{
    require(codec.base.bitStream.validate_offset_bits(375L))
    val cpy = snapshot(codec)
    val res = TTransitionNotification_ACN_Decode(cpy)
    (cpy, res)
}

@opaque @inlineOnce
def TransitionNotification_expectedValueCheckMask_expectedValueChecking_ACN_Decode(codec: ACN, TransitionNotification_pmon_ID: TPMON_ID): EitherMut[Int, TPMON_Mask] = {
    require(codec.base.bitStream.validate_offset_bits(255L))
    @ghost val oldCdc = snapshot(codec)
    val expectedValueChecking = TransitionNotification_pmon_ID match
        case TPMON_ID.Tparam0 =>
            val param0 = TPMON_Mask_param0(codec.base.bitStream.readBitsVec(255.toInt))
            TPMON_Mask.PMON_Mask_param0_PRESENT(param0)
    TPMON_Mask_IsConstraintValid(expectedValueChecking) match {
        case Left(l) =>
            LeftMut[Int, TPMON_Mask](l)
        case Right(_) =>
            RightMut[Int, TPMON_Mask](expectedValueChecking)
    }
}.ensuring { (res: EitherMut[Int, TPMON_Mask]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TPMON_Mask_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TransitionNotification_expectedValueCheckMask_expectedValueChecking_ACN_Decode_pure(codec: ACN, TransitionNotification_pmon_ID: TPMON_ID): (ACN, EitherMut[Int, TPMON_Mask]) = {
    require(codec.base.bitStream.validate_offset_bits(255L))
    val cpy = snapshot(codec)
    val res = TransitionNotification_expectedValueCheckMask_expectedValueChecking_ACN_Decode(cpy, TransitionNotification_pmon_ID)
    (cpy, res)
}

@opaque @inlineOnce
def TransitionNotification_expectedValueCheckMask_ACN_Decode(codec: ACN, TransitionNotification_checkType: TPMON_CheckType, TransitionNotification_pmon_ID: TPMON_ID): EitherMut[Int, TPMON_ExpectedValueCheckMask] = {
    require(codec.base.bitStream.validate_offset_bits(255L))
    @ghost val oldCdc = snapshot(codec)
    val expectedValueCheckMask = TransitionNotification_checkType match
        case TPMON_CheckType.TexpectedValueChecking =>
            val expectedValueChecking = TransitionNotification_expectedValueCheckMask_expectedValueChecking_ACN_Decode(codec, TransitionNotification_pmon_ID) match {
                case LeftMut(l) =>
                    return LeftMut(l)
                case RightMut(v) =>
                    v
            }
            TPMON_ExpectedValueCheckMask.PMON_ExpectedValueCheckMask_expectedValueChecking_PRESENT(expectedValueChecking)
        case TPMON_CheckType.TlimitChecking =>
            val limitChecking: NullType = 0
            TPMON_ExpectedValueCheckMask.PMON_ExpectedValueCheckMask_limitChecking_PRESENT(limitChecking)
        case TPMON_CheckType.TdeltaChecking =>
            val deltaChecking: NullType = 0
            TPMON_ExpectedValueCheckMask.PMON_ExpectedValueCheckMask_deltaChecking_PRESENT(deltaChecking)
    TPMON_ExpectedValueCheckMask_IsConstraintValid(expectedValueCheckMask) match {
        case Left(l) =>
            LeftMut[Int, TPMON_ExpectedValueCheckMask](l)
        case Right(_) =>
            RightMut[Int, TPMON_ExpectedValueCheckMask](expectedValueCheckMask)
    }
}.ensuring { (res: EitherMut[Int, TPMON_ExpectedValueCheckMask]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TPMON_ExpectedValueCheckMask_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TransitionNotification_expectedValueCheckMask_ACN_Decode_pure(codec: ACN, TransitionNotification_checkType: TPMON_CheckType, TransitionNotification_pmon_ID: TPMON_ID): (ACN, EitherMut[Int, TPMON_ExpectedValueCheckMask]) = {
    require(codec.base.bitStream.validate_offset_bits(255L))
    val cpy = snapshot(codec)
    val res = TransitionNotification_expectedValueCheckMask_ACN_Decode(cpy, TransitionNotification_checkType, TransitionNotification_pmon_ID)
    (cpy, res)
}

@opaque @inlineOnce
def TransitionNotification_parameterValue_ACN_Decode(codec: ACN, TransitionNotification_pmon_ID: TPMON_ID): EitherMut[Int, TPMON_ParameterValue] = {
    require(codec.base.bitStream.validate_offset_bits(8L))
    @ghost val oldCdc = snapshot(codec)
    val parameterValue = TransitionNotification_pmon_ID match
        case TPMON_ID.Tparam0 =>
            locally {
                ghostExpr {
                    @opaque @inlineOnce
                    def bitCountLemma(): Unit = ().ensuring(_ => GetBitCountUnsigned(ULong.fromRaw(255) - ULong.fromRaw(0)) == 8)
                    bitCountLemma()
                }
            }
            val param0 = codec.base.decodeConstrainedPosWholeNumber(ULong.fromRaw(0), ULong.fromRaw(255)) // uper:135
            TPMON_ParameterValue.PMON_ParameterValue_param0_PRESENT(param0)
    TPMON_ParameterValue_IsConstraintValid(parameterValue) match {
        case Left(l) =>
            LeftMut[Int, TPMON_ParameterValue](l)
        case Right(_) =>
            RightMut[Int, TPMON_ParameterValue](parameterValue)
    }
}.ensuring { (res: EitherMut[Int, TPMON_ParameterValue]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TPMON_ParameterValue_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TransitionNotification_parameterValue_ACN_Decode_pure(codec: ACN, TransitionNotification_pmon_ID: TPMON_ID): (ACN, EitherMut[Int, TPMON_ParameterValue]) = {
    require(codec.base.bitStream.validate_offset_bits(8L))
    val cpy = snapshot(codec)
    val res = TransitionNotification_parameterValue_ACN_Decode(cpy, TransitionNotification_pmon_ID)
    (cpy, res)
}

@opaque @inlineOnce
def TransitionNotification_limitCrossed_ACN_Decode(codec: ACN, TransitionNotification_pmon_ID: TPMON_ID): EitherMut[Int, TPMON_LimitCrossed] = {
    require(codec.base.bitStream.validate_offset_bits(8L))
    @ghost val oldCdc = snapshot(codec)
    val limitCrossed = TransitionNotification_pmon_ID match
        case TPMON_ID.Tparam0 =>
            locally {
                ghostExpr {
                    @opaque @inlineOnce
                    def bitCountLemma(): Unit = ().ensuring(_ => GetBitCountUnsigned(ULong.fromRaw(255) - ULong.fromRaw(0)) == 8)
                    bitCountLemma()
                }
            }
            val param0 = codec.base.decodeConstrainedPosWholeNumber(ULong.fromRaw(0), ULong.fromRaw(255)) // uper:135
            TPMON_LimitCrossed.PMON_LimitCrossed_param0_PRESENT(param0)
    TPMON_LimitCrossed_IsConstraintValid(limitCrossed) match {
        case Left(l) =>
            LeftMut[Int, TPMON_LimitCrossed](l)
        case Right(_) =>
            RightMut[Int, TPMON_LimitCrossed](limitCrossed)
    }
}.ensuring { (res: EitherMut[Int, TPMON_LimitCrossed]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TPMON_LimitCrossed_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TransitionNotification_limitCrossed_ACN_Decode_pure(codec: ACN, TransitionNotification_pmon_ID: TPMON_ID): (ACN, EitherMut[Int, TPMON_LimitCrossed]) = {
    require(codec.base.bitStream.validate_offset_bits(8L))
    val cpy = snapshot(codec)
    val res = TransitionNotification_limitCrossed_ACN_Decode(cpy, TransitionNotification_pmon_ID)
    (cpy, res)
}

@opaque @inlineOnce
def TransitionNotification_previous_PMON_CheckingStatus_ACN_Decode(codec: ACN, TransitionNotification_checkType: TPMON_CheckType): EitherMut[Int, TPMON_CheckingStatus] = {
    require(codec.base.bitStream.validate_offset_bits(3L))
    @ghost val oldCdc = snapshot(codec)
    val previous_PMON_CheckingStatus = TransitionNotification_checkType match
        case TPMON_CheckType.TexpectedValueChecking =>
            val expectedValueChecking = TCheckingStatusForExpectedValueChecking_ACN_Decode(codec) match // uper:13
                case RightMut(decData) => decData
                case LeftMut(err) => return LeftMut(err)
            TPMON_CheckingStatus.PMON_CheckingStatus_expectedValueChecking_PRESENT(expectedValueChecking)
        case TPMON_CheckType.TlimitChecking =>
            val limitChecking = TCheckingStatusForLimitChecking_ACN_Decode(codec) match // uper:13
                case RightMut(decData) => decData
                case LeftMut(err) => return LeftMut(err)
            TPMON_CheckingStatus.PMON_CheckingStatus_limitChecking_PRESENT(limitChecking)
        case TPMON_CheckType.TdeltaChecking =>
            val deltaChecking = TCheckingStatusForDeltaChecking_ACN_Decode(codec) match // uper:13
                case RightMut(decData) => decData
                case LeftMut(err) => return LeftMut(err)
            TPMON_CheckingStatus.PMON_CheckingStatus_deltaChecking_PRESENT(deltaChecking)
    TPMON_CheckingStatus_IsConstraintValid(previous_PMON_CheckingStatus) match {
        case Left(l) =>
            LeftMut[Int, TPMON_CheckingStatus](l)
        case Right(_) =>
            RightMut[Int, TPMON_CheckingStatus](previous_PMON_CheckingStatus)
    }
}.ensuring { (res: EitherMut[Int, TPMON_CheckingStatus]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TPMON_CheckingStatus_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TransitionNotification_previous_PMON_CheckingStatus_ACN_Decode_pure(codec: ACN, TransitionNotification_checkType: TPMON_CheckType): (ACN, EitherMut[Int, TPMON_CheckingStatus]) = {
    require(codec.base.bitStream.validate_offset_bits(3L))
    val cpy = snapshot(codec)
    val res = TransitionNotification_previous_PMON_CheckingStatus_ACN_Decode(cpy, TransitionNotification_checkType)
    (cpy, res)
}

@opaque @inlineOnce
def TransitionNotification_current_PMON_CheckingStatus_ACN_Decode(codec: ACN, TransitionNotification_checkType: TPMON_CheckType): EitherMut[Int, TPMON_CheckingStatus] = {
    require(codec.base.bitStream.validate_offset_bits(3L))
    @ghost val oldCdc = snapshot(codec)
    val current_PMON_CheckingStatus = TransitionNotification_checkType match
        case TPMON_CheckType.TexpectedValueChecking =>
            val expectedValueChecking = TCheckingStatusForExpectedValueChecking_ACN_Decode(codec) match // uper:13
                case RightMut(decData) => decData
                case LeftMut(err) => return LeftMut(err)
            TPMON_CheckingStatus.PMON_CheckingStatus_expectedValueChecking_PRESENT(expectedValueChecking)
        case TPMON_CheckType.TlimitChecking =>
            val limitChecking = TCheckingStatusForLimitChecking_ACN_Decode(codec) match // uper:13
                case RightMut(decData) => decData
                case LeftMut(err) => return LeftMut(err)
            TPMON_CheckingStatus.PMON_CheckingStatus_limitChecking_PRESENT(limitChecking)
        case TPMON_CheckType.TdeltaChecking =>
            val deltaChecking = TCheckingStatusForDeltaChecking_ACN_Decode(codec) match // uper:13
                case RightMut(decData) => decData
                case LeftMut(err) => return LeftMut(err)
            TPMON_CheckingStatus.PMON_CheckingStatus_deltaChecking_PRESENT(deltaChecking)
    TPMON_CheckingStatus_IsConstraintValid(current_PMON_CheckingStatus) match {
        case Left(l) =>
            LeftMut[Int, TPMON_CheckingStatus](l)
        case Right(_) =>
            RightMut[Int, TPMON_CheckingStatus](current_PMON_CheckingStatus)
    }
}.ensuring { (res: EitherMut[Int, TPMON_CheckingStatus]) => 
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TPMON_CheckingStatus_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure
def TransitionNotification_current_PMON_CheckingStatus_ACN_Decode_pure(codec: ACN, TransitionNotification_checkType: TPMON_CheckType): (ACN, EitherMut[Int, TPMON_CheckingStatus]) = {
    require(codec.base.bitStream.validate_offset_bits(3L))
    val cpy = snapshot(codec)
    val res = TransitionNotification_current_PMON_CheckingStatus_ACN_Decode(cpy, TransitionNotification_checkType)
    (cpy, res)
}