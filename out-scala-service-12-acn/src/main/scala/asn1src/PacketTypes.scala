/*
Code automatically generated by asn1scc tool
*/
package asn1src

import asn1scala._
import stainless.lang.{ghost => ghostExpr, _}
import stainless.annotation._
import stainless.collection._
import stainless.proof._
import StaticChecks._


def TPacketVersionNumberValue_Initialize(): TPacketVersionNumberValue = 0

@opaque @inlineOnce 
def TPacketVersionNumberValue_ACN_Encode(@annotation.unused pVal: TPacketVersionNumberValue, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(3L))
    locally {
        val tmp: Array[UByte] = Array(0x00.toRawUByte)
        codec.base.bitStream.appendBitsMSBFirst(tmp, 3)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 3L
    }
}

@opaque @inlineOnce 
def TPacketVersionNumberValue_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TPacketVersionNumberValue] =
{
    require(codec.base.bitStream.validate_offset_bits(3L))

    @ghost val oldCdc = snapshot(codec)
    locally {
        val tmp: Array[UByte] = Array(0x00.toRawUByte)
        if !codec.BitStream_ReadBitPattern(tmp, 3) then
            return LeftMut(ERR_ACN_DECODE_PACKETVERSIONNUMBERVALUE)

    }
    val pVal: NullType = 0

    RightMut[ErrorCode, TPacketVersionNumberValue](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TPacketVersionNumberValue]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 3L
    }
}

@ghost @pure 
def TPacketVersionNumberValue_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TPacketVersionNumberValue]) =
{
    require(codec.base.bitStream.validate_offset_bits(3L))
    val cpy = snapshot(codec)
    val res = TPacketVersionNumberValue_ACN_Decode(cpy)
    (cpy, res)
}

def TSecondaryHeaderFlag_IsConstraintValid(pVal: TSecondaryHeaderFlag): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = (pVal <= ULong.fromRaw(1L)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    ret
}

def TSecondaryHeaderFlag_Initialize(): TSecondaryHeaderFlag = ULong.fromRaw(0L)

@opaque @inlineOnce 
def TSecondaryHeaderFlag_ACN_Encode(pVal: TSecondaryHeaderFlag, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(1L))
    TSecondaryHeaderFlag_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(1))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 1)
            bitCountLemma(pVal)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize(pVal, 1)
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 1L
    }
}

@opaque @inlineOnce 
def TSecondaryHeaderFlag_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TSecondaryHeaderFlag] =
{
    require(codec.base.bitStream.validate_offset_bits(1L))

    @ghost val oldCdc = snapshot(codec)
    val pVal = codec.dec_Int_PositiveInteger_ConstSize(1)


    TSecondaryHeaderFlag_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TSecondaryHeaderFlag](l)
        case Right(_) => RightMut[ErrorCode, TSecondaryHeaderFlag](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TSecondaryHeaderFlag]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 1L && TSecondaryHeaderFlag_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TSecondaryHeaderFlag_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TSecondaryHeaderFlag]) =
{
    require(codec.base.bitStream.validate_offset_bits(1L))
    val cpy = snapshot(codec)
    val res = TSecondaryHeaderFlag_ACN_Decode(cpy)
    (cpy, res)
}

def TPacketSequenceControl_packetSequenceCountOrName_IsConstraintValid(pVal: TPacketSequenceControl_packetSequenceCountOrName): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = (pVal <= ULong.fromRaw(16383L)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    ret
}

def TPacketSequenceControl_IsConstraintValid(pVal: TPacketSequenceControl): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = TPacketSequenceControl_packetSequenceCountOrName_IsConstraintValid(pVal.packetSequenceCountOrName)
    ret
}

def TPacketSequenceControl_packetSequenceCountOrName_Initialize(): TPacketSequenceControl_packetSequenceCountOrName = ULong.fromRaw(0L)
def TPacketSequenceControl_Initialize(): TPacketSequenceControl = TPacketSequenceControl(sequenceFlags = 0, packetSequenceCountOrName = ULong.fromRaw(0L))

@opaque @inlineOnce 
def TPacketSequenceControl_ACN_Encode(pVal: TPacketSequenceControl, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(16L))
    TPacketSequenceControl_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Encode sequenceFlags */
    locally {
        val tmp: Array[UByte] = Array(0xC0.toRawUByte)
        codec.base.bitStream.appendBitsMSBFirst(tmp, 2)
    }
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 16L, 2L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 2L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_0 = 2L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Encode packetSequenceCountOrName */
    locally {
        ghostExpr {
            @opaque @inlineOnce
            def bitCountLemma(v: ULong): Unit = {
                require(v <= ULong.fromRaw(16383))
            }.ensuring(_ => GetBitCountUnsigned(v) <= 14)
            bitCountLemma(pVal.packetSequenceCountOrName)
        }
    }
    codec.enc_Int_PositiveInteger_ConstSize(pVal.packetSequenceCountOrName, 14)
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 16L)
        check(codec.base.buf.length == oldCdc.base.buf.length)
    }
    @ghost val size_1 = 14L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 16L)
    }
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + pVal.size(old(codec).base.bitStream.bitIndex)
    }
}

@opaque @inlineOnce 
def TPacketSequenceControl_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TPacketSequenceControl] =
{
    require(codec.base.bitStream.validate_offset_bits(16L))

    @ghost val oldCdc = snapshot(codec)
    @ghost val codec_0_1 = snapshot(codec)
    /* Decode sequenceFlags */
    locally {
        val tmp: Array[UByte] = Array(0xC0.toRawUByte)
        if !codec.BitStream_ReadBitPattern(tmp, 2) then
            return LeftMut(ERR_ACN_DECODE_PACKETSEQUENCECONTROL_SEQUENCEFLAGS)

    }
    val pVal_sequenceFlags: NullType = 0
    ghostExpr {
        BitStream.validateOffsetBitsIneqLemma(codec_0_1.base.bitStream, codec.base.bitStream, 16L, 2L)
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 2L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_0 = 2L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0)
    }
    @ghost val codec_0_2 = snapshot(codec)
    /* Decode packetSequenceCountOrName */
    val pVal_packetSequenceCountOrName = codec.dec_Int_PositiveInteger_ConstSize(14)

    ghostExpr {
        check(codec.base.bitStream.bitIndex <= oldCdc.base.bitStream.bitIndex + 16L)
        check(codec.base.buf == oldCdc.base.buf)
    }
    @ghost val size_1 = 14L
    ghostExpr {
        check(codec.base.bitStream.bitIndex == oldCdc.base.bitStream.bitIndex + size_0 + size_1)
    }
    ghostExpr {
        check(codec.base.bitStream.bitIndex <= codec_0_1.base.bitStream.bitIndex + 16L)
    }
    val pVal = TPacketSequenceControl(pVal_sequenceFlags, pVal_packetSequenceCountOrName)
    ghostExpr {
        check(pVal.size(oldCdc.base.bitStream.bitIndex) == size_0 + size_1)
    }

    TPacketSequenceControl_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TPacketSequenceControl](l)
        case Right(_) => RightMut[ErrorCode, TPacketSequenceControl](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TPacketSequenceControl]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + resVal.size(old(codec).base.bitStream.bitIndex) && TPacketSequenceControl_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TPacketSequenceControl_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TPacketSequenceControl]) =
{
    require(codec.base.bitStream.validate_offset_bits(16L))
    val cpy = snapshot(codec)
    val res = TPacketSequenceControl_ACN_Decode(cpy)
    (cpy, res)
}

def TPacketDataLength_IsConstraintValid(pVal: TPacketDataLength): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = (pVal <= ULong.fromRaw(65535L)) match
        case true =>
            Right(0)
        case false =>
            Left(45)
    ret
}

def TPacketDataLength_Initialize(): TPacketDataLength = ULong.fromRaw(0L)

@opaque @inlineOnce 
def TPacketDataLength_ACN_Encode(pVal: TPacketDataLength, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(16L))
    TPacketDataLength_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    codec.enc_Int_PositiveInteger_ConstSize_big_endian_16(pVal)
    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 16L
    }
}

@opaque @inlineOnce 
def TPacketDataLength_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TPacketDataLength] =
{
    require(codec.base.bitStream.validate_offset_bits(16L))

    @ghost val oldCdc = snapshot(codec)
    val pVal = codec.dec_Int_PositiveInteger_ConstSize_big_endian_16()


    TPacketDataLength_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TPacketDataLength](l)
        case Right(_) => RightMut[ErrorCode, TPacketDataLength](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TPacketDataLength]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 16L && TPacketDataLength_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TPacketDataLength_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TPacketDataLength]) =
{
    require(codec.base.bitStream.validate_offset_bits(16L))
    val cpy = snapshot(codec)
    val res = TPacketDataLength_ACN_Decode(cpy)
    (cpy, res)
}

def TPacketErrorControl_IsConstraintValid(@annotation.unused pVal: TPacketErrorControl): Either[ErrorCode, Int] =
{
    var ret: Either[ErrorCode, Int] = Right(0)
    ret = Right(0)
    ret
}

def TPacketErrorControl_Initialize(): TPacketErrorControl = TPacketErrorControl(Vector.fill(2)(0.toRawUByte))

@opaque @inlineOnce 
def TPacketErrorControl_ACN_Encode(pVal: TPacketErrorControl, codec: ACN, bCheckConstraints: Boolean): Either[ErrorCode, Int] =  // acn:21
{
    require(codec.base.bitStream.validate_offset_bits(16L))
    TPacketErrorControl_IsConstraintValid(pVal) match
        case Left(l) => return Left(l)
        case Right(_) =>
    @ghost val oldCdc = snapshot(codec)
    assert(16.toInt >= 0) // overflow may happen during cast
    codec.base.bitStream.appendBitsMSBFirstVec(pVal.arr, 16.toInt)

    Right(0)
}.ensuring { (res : Either[ErrorCode, Int]) =>
    res match {
        case Left(_) =>
            true
        case Right(_) =>
            old(codec).base.buf.length == codec.base.buf.length && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 16L
    }
}

@opaque @inlineOnce 
def TPacketErrorControl_ACN_Decode(codec: ACN): EitherMut[ErrorCode, TPacketErrorControl] =
{
    require(codec.base.bitStream.validate_offset_bits(16L))

    @ghost val oldCdc = snapshot(codec)
    val pVal = TPacketErrorControl(codec.base.bitStream.readBitsVec(16.toInt))

    TPacketErrorControl_IsConstraintValid(pVal) match
        case Left(l) => LeftMut[ErrorCode, TPacketErrorControl](l)
        case Right(_) => RightMut[ErrorCode, TPacketErrorControl](pVal)
}.ensuring { (res : EitherMut[ErrorCode, TPacketErrorControl]) =>
    res match {
        case LeftMut(_) =>
            true
        case RightMut(resVal) =>
            old(codec).base.buf == codec.base.buf && codec.base.bitStream.bitIndex == old(codec).base.bitStream.bitIndex + 16L && TPacketErrorControl_IsConstraintValid(resVal).isRight
    }
}

@ghost @pure 
def TPacketErrorControl_ACN_Decode_pure(codec: ACN): (ACN, EitherMut[ErrorCode, TPacketErrorControl]) =
{
    require(codec.base.bitStream.validate_offset_bits(16L))
    val cpy = snapshot(codec)
    val res = TPacketErrorControl_ACN_Decode(cpy)
    (cpy, res)
}